        -:    0:Source:C:/Users/User/CLionProjects/untitled/Consist.hpp
        -:    0:Graph:C:\Users\User\CLionProjects\untitled\cmake-build-debug-coverage\CMakeFiles\untitled.dir\main.cpp.gcno
        -:    0:Data:C:\Users\User\CLionProjects\untitled\cmake-build-debug-coverage\CMakeFiles\untitled.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by илья on 05.03.2021.
        -:    3://
        -:    4:
        -:    5:#ifndef PROGRAM_FILES_CPP__CONSIST_HPP
        -:    6:#define PROGRAM_FILES_CPP__CONSIST_HPP
        -:    7:
        -:    8:#include <iostream>
        -:    9:#include <queue>
        -:   10:
        -:   11:template<typename T>
        -:   12:class consList;
        -:   13:
        -:   14:template<typename T>
        -:   15:class consIterator;
        -:   16:
        -:   17://---node---------------------------------------------------------------------------------------------------------------
        -:   18:
        -:   19:template<typename T>
        -:   20:class consNode {
        -:   21:public:
        -:   22://    consNode() : next(nullptr), prev(nullptr), data(nullptr), ref_count(0) {};
function _ZN8consNodeIiEC1Ev called 16 returned 100% blocks executed 100%
       16:   23:    consNode() = default;
        -:   24:
        -:   25://    consNode(T data) : next(nullptr), prev(nullptr), data(data), ref_count(0) {}
function _ZN8consNodeIiEC1Eii called 47 returned 100% blocks executed 100%
       47:   26:    consNode(T data, int ref_count) :
       47:   27:            data(std::move(data)), prev(this), next(this), deleted(false), ref_count(ref_count) {}
       47:   27-block  0
call    0 returned 47
        -:   28:
        -:   29:    consNode(T data, consList<T> *list) : consNode(data, 2) {}
        -:   30://    consNode(const consNode<T> &) = delete;
        -:   31:
        -:   32://    void operator=(const consNode<T> &) = delete;
        -:   33:
        -:   34:private:
        -:   35:    T data;
        -:   36:    consNode *next, *prev;
        -:   37:    bool deleted{};
        -:   38:    unsigned int ref_count{};
        -:   39:
        -:   40:    friend class consList<T>;
        -:   41:
        -:   42:    friend class consIterator<T>;
        -:   43:};
        -:   44:
        -:   45://---iterator-----------------------------------------------------------------------------------------------------------
        -:   46:
        -:   47:template<typename T>
        -:   48:class consIterator {
        -:   49:public:
        -:   50:
        -:   51://    consIterator() noexcept = default;
        -:   52:
function _ZN12consIteratorIiEC1ERKS0_ called 138 returned 100% blocks executed 100%
      138:   53:    consIterator(const consIterator &iter) : current(iter.current) {
      138:   54:        consList<T>::refCountInc(current);
      138:   54-block  0
call    0 returned 138
      138:   55:    }
        -:   56:
function _ZN12consIteratorIiEC1EP8consNodeIiE called 121 returned 100% blocks executed 100%
      121:   57:    explicit consIterator(consNode<T> *newNode) : current(newNode) {
      121:   58:        consList<T>::refCountInc(current);
      121:   58-block  0
call    0 returned 121
      121:   59:    }
        -:   60:
function _ZN12consIteratorIiED1Ev called 259 returned 100% blocks executed 100%
      259:   61:    ~consIterator() {
      259:   62:        if (current) {
      259:   62-block  0
branch  0 taken 259 (fallthrough)
branch  1 taken 0
      259:   63:            consList<T>::refCountDec(current);
      259:   63-block  0
call    0 returned 259
      259:   64:            if (current->ref_count == 0) current = nullptr;
branch  0 taken 2 (fallthrough)
branch  1 taken 257
        2:   64-block  0
        -:   65:        }
      259:   66:    }
        -:   67:
function _ZN12consIteratorIiEaSERKS0_ called 4 returned 100% blocks executed 100%
        4:   68:    consIterator &operator=(const consIterator &right) {
        4:   69:        consList<T>::refCountDec(current);
        4:   69-block  0
call    0 returned 4
        4:   70:        this->current = right.current;
        4:   71:        consList<T>::refCountInc(current);
call    0 returned 4
        4:   72:        return *this;
        -:   73:        /*if (this != &right) {
        -:   74://            consList<T>::refCountDec(current);
        -:   75:            refCountDec(current);
        -:   76:            this->current = right.current;
        -:   77://            consList<T>::refContInc(current);//!
        -:   78:            refContInc(current);
        -:   79:        }
        -:   80:        return *this;*/
        -:   81:    }
        -:   82:
function _ZNK12consIteratorIiEdeEv called 45 returned 100% blocks executed 100%
       45:   83:    T &operator*() const {
        -:   84:        /*if (current->deleted) throw (std::out_of_range("Error 1: Invalid index!"));*/
       45:   85:        return current->data;
       45:   85-block  0
        -:   86:    }
        -:   87:
        -:   88:    /*T *operator->() const {
        -:   89:        if (current->deleted)
        -:   90:            throw (std::out_of_range("Error 2: Invalid index!"));
        -:   91:        return &(current->data);
        -:   92:    }*/
        -:   93:
function _ZN12consIteratorIiEppEv called 23 returned 100% blocks executed 67%
       23:   94:    consIterator operator++() {
      23*:   95:        if (!current->next) throw (std::out_of_range("Error 3: Invalid index!"));
       23:   95-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    %%%%%:   95-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   95-block  2
call    6 never executed
    $$$$$:   95-block  3
call    7 never executed
       23:   96:        current = current->next;
       23:   97:        if (current) {
       23:   97-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       24:   98:            while (this->current->deleted && current->next) current = current->next;
       24:   98-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1:   98-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   98-block  2
        -:   99:        }
       23:  100:        return *this;
       23:  100-block  0
call    0 returned 23
        -:  101:    }
        -:  102:
function _ZN12consIteratorIiEppEi called 9 returned 100% blocks executed 57%
        9:  103:    consIterator operator++(T) {
       9*:  104:        if (!current->next) throw (std::out_of_range("Error 4: Invalid index!"));
        9:  104-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    %%%%%:  104-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  104-block  2
call    6 never executed
    $$$$$:  104-block  3
call    7 never executed
        9:  105:        consIterator iter(current);
        9:  105-block  0
call    0 returned 9
        9:  106:        if (iter.current->next) {
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:  107:            current = iter.current->next;
        9:  107-block  0
       9*:  108:            while (current->deleted && current->next) current = current->next;
        9:  108-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    %%%%%:  108-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  108-block  2
        -:  109:        }
        9:  110:        return iter;
        9:  110-block  0
        9:  110-block  1
        -:  111:    }
        -:  112:
function _ZN12consIteratorIiEmmEv called 9 returned 100% blocks executed 69%
        9:  113:    consIterator operator--() {
       9*:  114:        if (!current->prev->prev) throw (std::out_of_range("Error 5: Invalid index!"));
        9:  114-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    %%%%%:  114-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  114-block  2
call    6 never executed
    $$$$$:  114-block  3
call    7 never executed
        9:  115:        if (current) {
        9:  115-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:  116:            current = current->prev;
        9:  116-block  0
       11:  117:            while (this->current->deleted && current->prev) current = current->prev;
       11:  117-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 9
        2:  117-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2:  117-block  2
        -:  118:        }
        9:  119:        return *this;
        9:  119-block  0
call    0 returned 9
        -:  120:    }
        -:  121:
function _ZN12consIteratorIiEmmEi called 1 returned 100% blocks executed 57%
        1:  122:    consIterator operator--(T) {
       1*:  123:        if (!current->prev->prev) throw (std::out_of_range("Error 6: Invalid index!"));
        1:  123-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  123-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  123-block  2
call    6 never executed
    $$$$$:  123-block  3
call    7 never executed
        1:  124:        consIterator iter(current);
        1:  124-block  0
call    0 returned 1
        1:  125:        if (iter.current->prev) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  126:            current = iter.current->prev;
        1:  126-block  0
       1*:  127:            while (current->deleted && current->prev) current = current->prev;
        1:  127-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  127-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  127-block  2
        -:  128:        }
        1:  129:        return iter;
        1:  129-block  0
        1:  129-block  1
        -:  130:    }
        -:  131:
function _ZeqRK12consIteratorIiES2_ called 2 returned 100% blocks executed 100%
        2:  132:    friend bool operator==(const consIterator<T> &a, const consIterator<T> &b) {
        2:  133:        return a.current == b.current;
        2:  133-block  0
        -:  134:    }
        -:  135:
function _ZneRK12consIteratorIiES2_ called 1 returned 100% blocks executed 100%
        1:  136:    friend bool operator!=(const consIterator<T> &a, const consIterator<T> &b) {
        1:  137:        return !(a == b);
        1:  137-block  0
call    0 returned 1
        -:  138:    }
        -:  139:
function _ZNK12consIteratorIiEcvbEv called 47 returned 100% blocks executed 100%
       47:  140:    explicit operator bool() const {
       47:  141:        return current;
       47:  141-block  0
        -:  142:    }
        -:  143:
        -:  144://    consIterator operator=() const;
        -:  145:
        -:  146:
        -:  147:    /*void refCountInc(consNode<T> *node) {
        -:  148:        if (node)
        -:  149:            node->ref_count++;
        -:  150:    }
        -:  151:
        -:  152:    void refCountDec(consNode<T> *node) {
        -:  153:        auto cur = node;
        -:  154:        auto nodeDie = node;
        -:  155:        std::queue<consNode<T> *> deleted_nodes;
        -:  156:        cur->ref_count--;
        -:  157:        if (cur->ref_count == 0) {
        -:  158:            deleted_nodes.push(cur);
        -:  159:            while (!deleted_nodes.empty()) {
        -:  160:                cur->next->ref_count--;
        -:  161:                cur->prev->ref_count--;
        -:  162:                if (cur->next->ref_count == 0) deleted_nodes.push(cur->next);
        -:  163:                if (cur->prev->ref_count == 0) deleted_nodes.push(cur->next);
        -:  164:                nodeDie = deleted_nodes.front();
        -:  165:                deleted_nodes.pop();
        -:  166:                delete (nodeDie);
        -:  167:                cur = deleted_nodes.front();
        -:  168:            }
        -:  169:        }
        -:  170:
        -:  171:        *//*while (!deleted_nodes.empty()) {
        -:  172:            cur = deleted_nodes.back();
        -:  173:            deleted_nodes.pop();
        -:  174:            cur->ref_count--;
        -:  175:            if (cur->ref_count == 0) {
        -:  176:                deleted_nodes.push(cur);
        -:  177:                if (cur->next) {
        -:  178:                    deleted_nodes.push(cur->next);
        -:  179:                } else {
        -:  180:                    if (cur->prev) {
        -:  181:                        deleted_nodes.push(cur->prev);
        -:  182:                    } else {
        -:  183:                        deleted_nodes.pop();
        -:  184:                        delete (cur);
        -:  185:                    }
        -:  186:                }
        -:  187:            }
        -:  188:        }*//*
        -:  189:        *//*if (node) {
        -:  190:            node->ref_count--;
        -:  191:            if (node->ref_count == 0) {
        -:  192:                if (node->next)
        -:  193:                    refCountDec(node->next);
        -:  194:                if (node->prev)
        -:  195:                    refCountDec(node->prev);
        -:  196:                delete (node);
        -:  197:            }
        -:  198:        }*//*
        -:  199:    }*/
        -:  200:
        -:  201:private:
        -:  202:    consList<T> *container;
        -:  203:    consNode<T> *current;
        -:  204:
        -:  205:    friend class consList<T>;
        -:  206:};
        -:  207:
        -:  208://---list---------------------------------------------------------------------------------------------------------------
        -:  209:
        -:  210:template<typename T>
        -:  211:class consList {
        -:  212:public:
function _ZN8consListIiEC1Ev called 8 returned 100% blocks executed 100%
        8:  213:    consList() : Head(nullptr), Tail(nullptr), size(0) {
        8:  214:        Tail = new consNode<T>();
        8:  214-block  0
call    0 returned 8
call    1 returned 8
        8:  215:        Head = new consNode<T>();
call    0 returned 8
call    1 returned 8
        8:  216:        Tail->prev = Head;
        8:  217:        Head->next = Tail;
        8:  218:        refCountInc(Head);
call    0 returned 8
        8:  219:        refCountInc(Head);
call    0 returned 8
        8:  220:        refCountInc(Tail);
call    0 returned 8
        8:  221:        refCountInc(Tail);
call    0 returned 8
        8:  222:    }
        -:  223:
        -:  224://    consList(const consList &iter) = delete;
        -:  225:
        -:  226://    consList(consList &&list) = delete;
        -:  227:
function _ZN8consListIiEC1ESt16initializer_listIiE called 7 returned 100% blocks executed 89%
        7:  228:    consList(std::initializer_list<T> list) : consList() {
        7:  228-block  0
call    0 returned 7
    $$$$$:  228-block  1
call    1 never executed
       42:  229:        for (auto iter = list.begin(); iter < list.end(); iter++)
call    0 returned 7
       42:  229-block  0
call    1 returned 42
branch  2 taken 35 (fallthrough)
branch  3 taken 7
       35:  229-block  1
       35:  230:            pushBack(*iter);
       35:  230-block  0
call    0 returned 35
branch  1 taken 35 (fallthrough)
branch  2 taken 0 (throw)
        7:  231:    }
        7:  231-block  0
        -:  232:
function _ZN8consListIiED1Ev called 8 returned 100% blocks executed 100%
        8:  233:    ~consList() {
        8:  234:        consNode<T> *current = Head;
        8:  234-block  0
       65:  235:        while (current != nullptr) {
       65:  235-block  0
branch  0 taken 57 (fallthrough)
branch  1 taken 8
       57:  236:            consNode<T> *next = current->next;
       57:  237:            delete current;
       57:  237-block  0
call    0 returned 57
       57:  238:            current = next;
        -:  239:        }
        8:  240:    }
        -:  241:
function _ZN8consListIiE11refCountIncEP8consNodeIiE called 307 returned 100% blocks executed 75%
      307:  242:    static void refCountInc(consNode<T> *node) {
     307*:  243:        if (!node) return;
      307:  243-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 307
    %%%%%:  243-block  1
      307:  244:        node->ref_count++;
      307:  244-block  0
        -:  245:    }
        -:  246:
function _ZN8consListIiE11refCountDecEP8consNodeIiE called 275 returned 100% blocks executed 71%
      275:  247:    static void refCountDec(consNode<T> *node) {
      275:  248:        auto cur = node;
      275:  249:        auto nodeDie = node;
      550:  250:        std::queue<consNode<T> *> deleted_nodes;
      275:  250-block  0
call    0 returned 275
branch  1 taken 275 (fallthrough)
branch  2 taken 0 (throw)
      275:  250-block  1
call    3 returned 275
    $$$$$:  250-block  2
call    4 never executed
      275:  251:        cur->ref_count--;
      275:  252:        if (cur->ref_count == 0) {
      275:  252-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 272
        3:  253:            deleted_nodes.push(cur);
        3:  253-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        6:  254:            while (!deleted_nodes.empty()) {
        6:  254-block  0
call    0 returned 6
branch  1 taken 3 (fallthrough)
branch  2 taken 3
        3:  255:                cur->next->ref_count--;
        3:  256:                cur->prev->ref_count--;
       3*:  257:                if (cur->next->ref_count == 0) deleted_nodes.push(cur->next);
        3:  257-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%:  257-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
       3*:  258:                if (cur->prev->ref_count == 0) deleted_nodes.push(cur->next);
        3:  258-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%:  258-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
        3:  259:                nodeDie = deleted_nodes.front();
        3:  259-block  0
call    0 returned 3
        3:  260:                deleted_nodes.pop();
call    0 returned 3
        3:  261:                delete (nodeDie);
call    0 returned 3
        3:  262:                cur = deleted_nodes.front();
call    0 returned 3
        -:  263:            }
        -:  264:        }
        -:  265:
        -:  266:        /*auto cur = node;
        -:  267:        std::stack<consNode<T> *> deleted_nodes;
        -:  268:        deleted_nodes.push(cur);
        -:  269:        while (!deleted_nodes.empty()) {
        -:  270:            cur = deleted_nodes.top();
        -:  271:            deleted_nodes.pop();
        -:  272:            cur->ref_count--;
        -:  273:            if (cur->ref_count == 0) {
        -:  274:                deleted_nodes.push(cur);
        -:  275:                if (cur->next) {
        -:  276:                    deleted_nodes.push(cur->next);
        -:  277:                } else {
        -:  278:                    if (cur->prev) {
        -:  279:                        deleted_nodes.push(cur->prev);
        -:  280:                    } else {
        -:  281:                        deleted_nodes.pop();
        -:  282:                        delete (cur);
        -:  283:                    }
        -:  284:                }
        -:  285:            }
        -:  286:        }*/
        -:  287:        /*if (!node) return;
        -:  288:        node->ref_count--;
        -:  289:        //while
        -:  290:        if (node->ref_count == 0) {
        -:  291:            if (node->next)
        -:  292:                refCountDec(node->next);
        -:  293:            if (node->prev)
        -:  294:                refCountDec(node->prev);
        -:  295:            delete (node);
        -:  296:        }*/
      275:  297:    }
        -:  298:
        -:  299://    consList &operator=(const consList &list) = delete;
        -:  300:
        -:  301://    consList &operator=(consList &&list) = delete;
        -:  302:
        -:  303:    //todo
function _ZN8consListIiE6insertE12consIteratorIiEi called 47 returned 100% blocks executed 75%
       47:  304:    consIterator<T> insert(consIterator<T> iter, T data) {
      47*:  305:        if (!iter) return iter;
       47:  305-block  0
call    0 returned 47
branch  1 taken 0 (fallthrough)
branch  2 taken 47
    %%%%%:  305-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  305-block  2
       47:  306:        consNode<T> *newNode = new consNode<T>(std::move(data), 2);
       47:  306-block  0
call    0 returned 47
call    1 returned 47
branch  2 taken 47 (fallthrough)
branch  3 taken 0 (throw)
       47:  306-block  1
call    4 returned 47
       47:  307:        newNode->prev = iter.current->prev;
       47:  308:        newNode->next = iter.current;
       47:  309:        iter.current->prev->next = newNode;
       47:  310:        iter.current->prev = newNode;
       94:  311:        consIterator<T> newIter(newNode);
call    0 returned 47
       47:  311-block  0
call    1 returned 47
    $$$$$:  311-block  1
call    2 never executed
       47:  312:        size++;
       47:  313:        return newIter;
call    0 returned 47
branch  1 taken 47 (fallthrough)
branch  2 taken 0 (throw)
       47:  313-block  0
        -:  314:    }
        -:  315:
function _ZN8consListIiE8pushBackERKi called 35 returned 100% blocks executed 100%
       35:  316:    void pushBack(const T &data) {
       35:  317:        pushBack(T(data));
       35:  317-block  0
call    0 returned 35
branch  1 taken 35 (fallthrough)
branch  2 taken 0 (throw)
       35:  318:    }
       35:  318-block  0
        -:  319:
function _ZN8consListIiE8pushBackEOi called 45 returned 100% blocks executed 62%
       45:  320:    void pushBack(T &&data) {
       45:  321:        consIterator<T> iter(Tail);
       45:  321-block  0
call    0 returned 45
    $$$$$:  321-block  1
call    1 never executed
       45:  322:        insert(iter, data);
call    0 returned 45
branch  1 taken 45 (fallthrough)
branch  2 taken 0 (throw)
       45:  322-block  0
call    3 returned 45
branch  4 taken 45 (fallthrough)
branch  5 taken 0 (throw)
       45:  322-block  1
call    6 returned 45
call    7 returned 45
call    8 returned 45
    $$$$$:  322-block  2
call    9 never executed
    $$$$$:  322-block  3
       45:  323:    }
        -:  324:
function _ZN8consListIiE9pushFrontERKi called 1 returned 100% blocks executed 100%
        1:  325:    void pushFront(const T &data) {
        1:  326:        pushFront(T(data));
        1:  326-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  327:    }
        1:  327-block  0
        -:  328:
function _ZN8consListIiE9pushFrontEOi called 1 returned 100% blocks executed 62%
        1:  329:    void pushFront(T &&data) {
        1:  330:        consIterator<T> iter(Head->next);
        1:  330-block  0
call    0 returned 1
    $$$$$:  330-block  1
call    1 never executed
        1:  331:        insert(iter, data);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  331-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  331-block  1
call    6 returned 1
call    7 returned 1
call    8 returned 1
    $$$$$:  331-block  2
call    9 never executed
    $$$$$:  331-block  3
        1:  332:    }
        -:  333:
function _ZN8consListIiE5eraseE12consIteratorIiE called 6 returned 100% blocks executed 91%
        6:  334:    consIterator<T> erase(consIterator<T> iter) {
        6:  335:        consIterator<T> iterOut(iter);
        6:  335-block  0
call    0 returned 6
        6:  336:        iterOut++;
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  336-block  0
call    3 returned 6
        6:  337:        refCountInc(iter.current->next);
call    0 returned 6
        6:  338:        refCountInc(iter.current->prev);
call    0 returned 6
        6:  339:        iter.current->prev->next = iter.current->next;
        6:  340:        iter.current->next->prev = iter.current->prev;
        6:  341:        size--;
        6:  342:        iter.current->deleted = true;
        6:  343:        refCountDec(iter.current);
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  344:        refCountDec(iter.current);
        6:  344-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  345:        return iterOut;
        6:  345-block  0
        6:  345-block  1
        -:  346:    }
        -:  347:
function _ZN8consListIiE5beginEv called 16 returned 100% blocks executed 100%
       16:  348:    consIterator<T> begin() noexcept {
       16:  349:        consIterator<T> iter(Head->next);
       16:  349-block  0
call    0 returned 16
       16:  350:        return iter;
        -:  351:    }
        -:  352:
function _ZN8consListIiE3endEv called 2 returned 100% blocks executed 100%
        2:  353:    consIterator<T> end() noexcept {
        2:  354:        consIterator<T> iter(Tail);
        2:  354-block  0
call    0 returned 2
        2:  355:        return iter;
        -:  356:    }
        -:  357:
function _ZN8consListIiE7getSizeEv called 7 returned 100% blocks executed 100%
        7:  358:    unsigned int getSize() {
        7:  359:        return size;
        7:  359-block  0
        -:  360:    }
        -:  361:
        -:  362:private:
        -:  363:    consNode<T> *Head, *Tail;
        -:  364:    unsigned int size;
        -:  365:    unsigned int const INIT_REF_COUNT = 0;
        -:  366:
        -:  367:    friend class consIterator<T>;
        -:  368:};
        -:  369:
        -:  370:
        -:  371:#endif //PROGRAM_FILES_CPP__CONSIST_HPP
