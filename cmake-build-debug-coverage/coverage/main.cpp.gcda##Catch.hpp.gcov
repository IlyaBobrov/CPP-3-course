        -:    0:Source:C:/Users/ilya/CLionProjects/projectConsist4/Catch.hpp
        -:    0:Graph:C:\Users\ilya\CLionProjects\projectConsist4\cmake-build-debug-coverage\CMakeFiles\projectConsist4.dir\main.cpp.gcno
        -:    0:Data:C:\Users\ilya\CLionProjects\projectConsist4\cmake-build-debug-coverage\CMakeFiles\projectConsist4.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: *  Catch v2.10.1
        -:    3: *  Generated: 2019-10-20 20:52:21.372334
        -:    4: *  ----------------------------------------------------------
        -:    5: *  This file has been merged from multiple headers. Please don't edit it directly
        -:    6: *  Copyright (c) 2019 Two Blue Cubes Ltd. All rights reserved.
        -:    7: *
        -:    8: *  Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    9: *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:   10: */
        -:   11:#ifndef TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED
        -:   12:#define TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED
        -:   13://start Catch.hpp
        -:   14:
        -:   15:
        -:   16:#define CATCH_VERSION_MAJOR 2
        -:   17:#define CATCH_VERSION_MINOR 10
        -:   18:#define CATCH_VERSION_PATCH 1
        -:   19:
        -:   20:#ifdef __clang__
        -:   21:#    pragma clang system_header
        -:   22:#elif defined __GNUC__
        -:   23:#    pragma GCC system_header
        -:   24:#endif
        -:   25:
        -:   26:// start catch_suppress_warnings.h
        -:   27:
        -:   28:#ifdef __clang__
        -:   29:#   ifdef __ICC // icpc defines the __clang__ macro
        -:   30:#       pragma warning(push)
        -:   31:#       pragma warning(disable: 161 1682)
        -:   32:#   else // __ICC
        -:   33:#       pragma clang diagnostic push
        -:   34:#       pragma clang diagnostic ignored "-Wpadded"
        -:   35:#       pragma clang diagnostic ignored "-Wswitch-enum"
        -:   36:#       pragma clang diagnostic ignored "-Wcovered-switch-default"
        -:   37:#    endif
        -:   38:#elif defined __GNUC__
        -:   39:// Because REQUIREs trigger GCC's -Wparentheses, and because still
        -:   40:// supported version of g++ have only buggy support for _Pragmas,
        -:   41:// Wparentheses have to be suppressed globally.
        -:   42:#    pragma GCC diagnostic ignored "-Wparentheses" // See #674 for details
        -:   43:
        -:   44:#    pragma GCC diagnostic push
        -:   45:#    pragma GCC diagnostic ignored "-Wunused-variable"
        -:   46:#    pragma GCC diagnostic ignored "-Wpadded"
        -:   47:#endif
        -:   48:// end catch_suppress_warnings.h
        -:   49:#if defined(CATCH_CONFIG_MAIN) || defined(CATCH_CONFIG_RUNNER)
        -:   50:#  define CATCH_IMPL
        -:   51:#  define CATCH_CONFIG_ALL_PARTS
        -:   52:#endif
        -:   53:
        -:   54:// In the impl file, we want to have access to all parts of the headers
        -:   55:// Can also be used to sanely support PCHs
        -:   56:#if defined(CATCH_CONFIG_ALL_PARTS)
        -:   57:#  define CATCH_CONFIG_EXTERNAL_INTERFACES
        -:   58:#  if defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:   59:#    undef CATCH_CONFIG_DISABLE_MATCHERS
        -:   60:#  endif
        -:   61:#  if !defined(CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER)
        -:   62:#    define CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER
        -:   63:#  endif
        -:   64:#endif
        -:   65:
        -:   66:#if !defined(CATCH_CONFIG_IMPL_ONLY)
        -:   67:// start catch_platform.h
        -:   68:
        -:   69:#ifdef __APPLE__
        -:   70:# include <TargetConditionals.h>
        -:   71:# if TARGET_OS_OSX == 1
        -:   72:#  define CATCH_PLATFORM_MAC
        -:   73:# elif TARGET_OS_IPHONE == 1
        -:   74:#  define CATCH_PLATFORM_IPHONE
        -:   75:# endif
        -:   76:
        -:   77:#elif defined(linux) || defined(__linux) || defined(__linux__)
        -:   78:#  define CATCH_PLATFORM_LINUX
        -:   79:
        -:   80:#elif defined(WIN32) || defined(__WIN32__) || defined(_WIN32) || defined(_MSC_VER) || defined(__MINGW32__)
        -:   81:#  define CATCH_PLATFORM_WINDOWS
        -:   82:#endif
        -:   83:
        -:   84:// end catch_platform.h
        -:   85:
        -:   86:#ifdef CATCH_IMPL
        -:   87:#  ifndef CLARA_CONFIG_MAIN
        -:   88:#    define CLARA_CONFIG_MAIN_NOT_DEFINED
        -:   89:#    define CLARA_CONFIG_MAIN
        -:   90:#  endif
        -:   91:#endif
        -:   92:
        -:   93:// start catch_user_interfaces.h
        -:   94:
        -:   95:namespace Catch {
        -:   96:unsigned int rngSeed();
        -:   97:}
        -:   98:
        -:   99:// end catch_user_interfaces.h
        -:  100:// start catch_tag_alias_autoregistrar.h
        -:  101:
        -:  102:// start catch_common.h
        -:  103:
        -:  104:// start catch_compiler_capabilities.h
        -:  105:
        -:  106:// Detect a number of compiler features - by compiler
        -:  107:// The following features are defined:
        -:  108://
        -:  109:// CATCH_CONFIG_COUNTER : is the __COUNTER__ macro supported?
        -:  110:// CATCH_CONFIG_WINDOWS_SEH : is Windows SEH supported?
        -:  111:// CATCH_CONFIG_POSIX_SIGNALS : are POSIX signals supported?
        -:  112:// CATCH_CONFIG_DISABLE_EXCEPTIONS : Are exceptions enabled?
        -:  113:// ****************
        -:  114:// Note to maintainers: if new toggles are added please document them
        -:  115:// in configuration.md, too
        -:  116:// ****************
        -:  117:
        -:  118:// In general each macro has a _NO_<feature name> form
        -:  119:// (e.g. CATCH_CONFIG_NO_POSIX_SIGNALS) which disables the feature.
        -:  120:// Many features, at point of detection, define an _INTERNAL_ macro, so they
        -:  121:// can be combined, en-mass, with the _NO_ forms later.
        -:  122:
        -:  123:#ifdef __cplusplus
        -:  124:
        -:  125:#  if (__cplusplus >= 201402L) || (defined(_MSVC_LANG) && _MSVC_LANG >= 201402L)
        -:  126:#    define CATCH_CPP14_OR_GREATER
        -:  127:#  endif
        -:  128:
        -:  129:#  if (__cplusplus >= 201703L) || (defined(_MSVC_LANG) && _MSVC_LANG >= 201703L)
        -:  130:#    define CATCH_CPP17_OR_GREATER
        -:  131:#  endif
        -:  132:
        -:  133:#endif
        -:  134:
        -:  135:#if defined(CATCH_CPP17_OR_GREATER)
        -:  136:#  define CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS
        -:  137:#endif
        -:  138:
        -:  139:#ifdef __clang__
        -:  140:
        -:  141:#       define CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -:  142:            _Pragma( "clang diagnostic push" ) \
        -:  143:            _Pragma( "clang diagnostic ignored \"-Wexit-time-destructors\"" ) \
        -:  144:            _Pragma( "clang diagnostic ignored \"-Wglobal-constructors\"")
        -:  145:#       define CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
        -:  146:            _Pragma( "clang diagnostic pop" )
        -:  147:
        -:  148:#       define CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS \
        -:  149:            _Pragma( "clang diagnostic push" ) \
        -:  150:            _Pragma( "clang diagnostic ignored \"-Wparentheses\"" )
        -:  151:#       define CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS \
        -:  152:            _Pragma( "clang diagnostic pop" )
        -:  153:
        -:  154:#       define CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS \
        -:  155:            _Pragma( "clang diagnostic push" ) \
        -:  156:            _Pragma( "clang diagnostic ignored \"-Wunused-variable\"" )
        -:  157:#       define CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS \
        -:  158:            _Pragma( "clang diagnostic pop" )
        -:  159:
        -:  160:#       define CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \
        -:  161:            _Pragma( "clang diagnostic push" ) \
        -:  162:            _Pragma( "clang diagnostic ignored \"-Wgnu-zero-variadic-macro-arguments\"" )
        -:  163:#       define CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS \
        -:  164:            _Pragma( "clang diagnostic pop" )
        -:  165:
        -:  166:#       define CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        -:  167:            _Pragma( "clang diagnostic push" ) \
        -:  168:            _Pragma( "clang diagnostic ignored \"-Wunused-template\"" )
        -:  169:#       define CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        -:  170:            _Pragma( "clang diagnostic pop" )
        -:  171:#endif // __clang__
        -:  172:
        -:  173:////////////////////////////////////////////////////////////////////////////////
        -:  174:// Assume that non-Windows platforms support posix signals by default
        -:  175:#if !defined(CATCH_PLATFORM_WINDOWS)
        -:  176:#define CATCH_INTERNAL_CONFIG_POSIX_SIGNALS
        -:  177:#endif
        -:  178:
        -:  179:////////////////////////////////////////////////////////////////////////////////
        -:  180:// We know some environments not to support full POSIX signals
        -:  181:#if defined(__CYGWIN__) || defined(__QNX__) || defined(__EMSCRIPTEN__) || defined(__DJGPP__)
        -:  182:#define CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS
        -:  183:#endif
        -:  184:
        -:  185:#ifdef __OS400__
        -:  186:#       define CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS
        -:  187:#       define CATCH_CONFIG_COLOUR_NONE
        -:  188:#endif
        -:  189:
        -:  190:////////////////////////////////////////////////////////////////////////////////
        -:  191:// Android somehow still does not support std::to_string
        -:  192:#if defined(__ANDROID__)
        -:  193:#    define CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING
        -:  194:#    define CATCH_INTERNAL_CONFIG_ANDROID_LOGWRITE
        -:  195:#endif
        -:  196:
        -:  197:////////////////////////////////////////////////////////////////////////////////
        -:  198:// Not all Windows environments support SEH properly
        -:  199:#if defined(__MINGW32__)
        -:  200:#    define CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH
        -:  201:#endif
        -:  202:
        -:  203:////////////////////////////////////////////////////////////////////////////////
        -:  204:// PS4
        -:  205:#if defined(__ORBIS__)
        -:  206:#    define CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE
        -:  207:#endif
        -:  208:
        -:  209:////////////////////////////////////////////////////////////////////////////////
        -:  210:// Cygwin
        -:  211:#ifdef __CYGWIN__
        -:  212:
        -:  213:// Required for some versions of Cygwin to declare gettimeofday
        -:  214:// see: http://stackoverflow.com/questions/36901803/gettimeofday-not-declared-in-this-scope-cygwin
        -:  215:#   define _BSD_SOURCE
        -:  216:// some versions of cygwin (most) do not support std::to_string. Use the libstd check.
        -:  217:// https://gcc.gnu.org/onlinedocs/gcc-4.8.2/libstdc++/api/a01053_source.html line 2812-2813
        -:  218:# if !((__cplusplus >= 201103L) && defined(_GLIBCXX_USE_C99) \
        -:  219:           && !defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF))
        -:  220:
        -:  221:#    define CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING
        -:  222:
        -:  223:# endif
        -:  224:#endif // __CYGWIN__
        -:  225:
        -:  226:////////////////////////////////////////////////////////////////////////////////
        -:  227:// Visual C++
        -:  228:#ifdef _MSC_VER
        -:  229:
        -:  230:#  if _MSC_VER >= 1900 // Visual Studio 2015 or newer
        -:  231:#    define CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS
        -:  232:#  endif
        -:  233:
        -:  234:// Universal Windows platform does not support SEH
        -:  235:// Or console colours (or console at all...)
        -:  236:#  if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)
        -:  237:#    define CATCH_CONFIG_COLOUR_NONE
        -:  238:#  else
        -:  239:#    define CATCH_INTERNAL_CONFIG_WINDOWS_SEH
        -:  240:#  endif
        -:  241:
        -:  242:// MSVC traditional preprocessor needs some workaround for __VA_ARGS__
        -:  243:// _MSVC_TRADITIONAL == 0 means new conformant preprocessor
        -:  244:// _MSVC_TRADITIONAL == 1 means old traditional non-conformant preprocessor
        -:  245:#  if !defined(_MSVC_TRADITIONAL) || (defined(_MSVC_TRADITIONAL) && _MSVC_TRADITIONAL)
        -:  246:#    define CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -:  247:#  endif
        -:  248:#endif // _MSC_VER
        -:  249:
        -:  250:#if defined(_REENTRANT) || defined(_MSC_VER)
        -:  251:// Enable async processing, as -pthread is specified or no additional linking is required
        -:  252:# define CATCH_INTERNAL_CONFIG_USE_ASYNC
        -:  253:#endif // _MSC_VER
        -:  254:
        -:  255:////////////////////////////////////////////////////////////////////////////////
        -:  256:// Check if we are compiled with -fno-exceptions or equivalent
        -:  257:#if defined(__EXCEPTIONS) || defined(__cpp_exceptions) || defined(_CPPUNWIND)
        -:  258:#  define CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED
        -:  259:#endif
        -:  260:
        -:  261:////////////////////////////////////////////////////////////////////////////////
        -:  262:// DJGPP
        -:  263:#ifdef __DJGPP__
        -:  264:#  define CATCH_INTERNAL_CONFIG_NO_WCHAR
        -:  265:#endif // __DJGPP__
        -:  266:
        -:  267:////////////////////////////////////////////////////////////////////////////////
        -:  268:// Embarcadero C++Build
        -:  269:#if defined(__BORLANDC__)
        -:  270:#define CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN
        -:  271:#endif
        -:  272:
        -:  273:////////////////////////////////////////////////////////////////////////////////
        -:  274:
        -:  275:// Use of __COUNTER__ is suppressed during code analysis in
        -:  276:// CLion/AppCode 2017.2.x and former, because __COUNTER__ is not properly
        -:  277:// handled by it.
        -:  278:// Otherwise all supported compilers support COUNTER macro,
        -:  279:// but user still might want to turn it off
        -:  280:#if ( !defined(__JETBRAINS_IDE__) || __JETBRAINS_IDE__ >= 20170300L )
        -:  281:#define CATCH_INTERNAL_CONFIG_COUNTER
        -:  282:#endif
        -:  283:
        -:  284:////////////////////////////////////////////////////////////////////////////////
        -:  285:
        -:  286:// RTX is a special version of Windows that is real time.
        -:  287:// This means that it is detected as Windows, but does not provide
        -:  288:// the same set of capabilities as real Windows does.
        -:  289:#if defined(UNDER_RTSS) || defined(RTX64_BUILD)
        -:  290:#define CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH
        -:  291:#define CATCH_INTERNAL_CONFIG_NO_ASYNC
        -:  292:#define CATCH_CONFIG_COLOUR_NONE
        -:  293:#endif
        -:  294:
        -:  295:#if defined(__UCLIBC__)
        -:  296:#define CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER
        -:  297:#endif
        -:  298:
        -:  299:// Various stdlib support checks that require __has_include
        -:  300:#if defined(__has_include)
        -:  301:// Check if string_view is available and usable
        -:  302:#if __has_include(<string_view>) && defined(CATCH_CPP17_OR_GREATER)
        -:  303:#    define CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW
        -:  304:#endif
        -:  305:
        -:  306:// Check if optional is available and usable
        -:  307:#  if __has_include(<optional>) && defined(CATCH_CPP17_OR_GREATER)
        -:  308:#    define CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL
        -:  309:#  endif // __has_include(<optional>) && defined(CATCH_CPP17_OR_GREATER)
        -:  310:
        -:  311:// Check if byte is available and usable
        -:  312:#  if __has_include(<cstddef>) && defined(CATCH_CPP17_OR_GREATER)
        -:  313:#    define CATCH_INTERNAL_CONFIG_CPP17_BYTE
        -:  314:#  endif // __has_include(<cstddef>) && defined(CATCH_CPP17_OR_GREATER)
        -:  315:
        -:  316:// Check if variant is available and usable
        -:  317:#  if __has_include(<variant>) && defined(CATCH_CPP17_OR_GREATER)
        -:  318:#    if defined(__clang__) && (__clang_major__ < 8)
        -:  319:// work around clang bug with libstdc++ https://bugs.llvm.org/show_bug.cgi?id=31852
        -:  320:// fix should be in clang 8, workaround in libstdc++ 8.2
        -:  321:#      include <ciso646>
        -:  322:#      if defined(__GLIBCXX__) && defined(_GLIBCXX_RELEASE) && (_GLIBCXX_RELEASE < 9)
        -:  323:#        define CATCH_CONFIG_NO_CPP17_VARIANT
        -:  324:#      else
        -:  325:#        define CATCH_INTERNAL_CONFIG_CPP17_VARIANT
        -:  326:#      endif // defined(__GLIBCXX__) && defined(_GLIBCXX_RELEASE) && (_GLIBCXX_RELEASE < 9)
        -:  327:#    else
        -:  328:#      define CATCH_INTERNAL_CONFIG_CPP17_VARIANT
        -:  329:#    endif // defined(__clang__) && (__clang_major__ < 8)
        -:  330:#  endif // __has_include(<variant>) && defined(CATCH_CPP17_OR_GREATER)
        -:  331:#endif // defined(__has_include)
        -:  332:
        -:  333:#if defined(CATCH_INTERNAL_CONFIG_COUNTER) && !defined(CATCH_CONFIG_NO_COUNTER) && !defined(CATCH_CONFIG_COUNTER)
        -:  334:#   define CATCH_CONFIG_COUNTER
        -:  335:#endif
        -:  336:#if defined(CATCH_INTERNAL_CONFIG_WINDOWS_SEH) && !defined(CATCH_CONFIG_NO_WINDOWS_SEH) && !defined(CATCH_CONFIG_WINDOWS_SEH) && !defined(CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH)
        -:  337:#   define CATCH_CONFIG_WINDOWS_SEH
        -:  338:#endif
        -:  339:// This is set by default, because we assume that unix compilers are posix-signal-compatible by default.
        -:  340:#if defined(CATCH_INTERNAL_CONFIG_POSIX_SIGNALS) && !defined(CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS) && !defined(CATCH_CONFIG_NO_POSIX_SIGNALS) && !defined(CATCH_CONFIG_POSIX_SIGNALS)
        -:  341:#   define CATCH_CONFIG_POSIX_SIGNALS
        -:  342:#endif
        -:  343:// This is set by default, because we assume that compilers with no wchar_t support are just rare exceptions.
        -:  344:#if !defined(CATCH_INTERNAL_CONFIG_NO_WCHAR) && !defined(CATCH_CONFIG_NO_WCHAR) && !defined(CATCH_CONFIG_WCHAR)
        -:  345:#   define CATCH_CONFIG_WCHAR
        -:  346:#endif
        -:  347:
        -:  348:#if !defined(CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING) && !defined(CATCH_CONFIG_NO_CPP11_TO_STRING) && !defined(CATCH_CONFIG_CPP11_TO_STRING)
        -:  349:#    define CATCH_CONFIG_CPP11_TO_STRING
        -:  350:#endif
        -:  351:
        -:  352:#if defined(CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL) && !defined(CATCH_CONFIG_NO_CPP17_OPTIONAL) && !defined(CATCH_CONFIG_CPP17_OPTIONAL)
        -:  353:#  define CATCH_CONFIG_CPP17_OPTIONAL
        -:  354:#endif
        -:  355:
        -:  356:#if defined(CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS) && !defined(CATCH_CONFIG_NO_CPP17_UNCAUGHT_EXCEPTIONS) && !defined(CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)
        -:  357:#  define CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS
        -:  358:#endif
        -:  359:
        -:  360:#if defined(CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW) && !defined(CATCH_CONFIG_NO_CPP17_STRING_VIEW) && !defined(CATCH_CONFIG_CPP17_STRING_VIEW)
        -:  361:#  define CATCH_CONFIG_CPP17_STRING_VIEW
        -:  362:#endif
        -:  363:
        -:  364:#if defined(CATCH_INTERNAL_CONFIG_CPP17_VARIANT) && !defined(CATCH_CONFIG_NO_CPP17_VARIANT) && !defined(CATCH_CONFIG_CPP17_VARIANT)
        -:  365:#  define CATCH_CONFIG_CPP17_VARIANT
        -:  366:#endif
        -:  367:
        -:  368:#if defined(CATCH_INTERNAL_CONFIG_CPP17_BYTE) && !defined(CATCH_CONFIG_NO_CPP17_BYTE) && !defined(CATCH_CONFIG_CPP17_BYTE)
        -:  369:#  define CATCH_CONFIG_CPP17_BYTE
        -:  370:#endif
        -:  371:
        -:  372:#if defined(CATCH_CONFIG_EXPERIMENTAL_REDIRECT)
        -:  373:#  define CATCH_INTERNAL_CONFIG_NEW_CAPTURE
        -:  374:#endif
        -:  375:
        -:  376:#if defined(CATCH_INTERNAL_CONFIG_NEW_CAPTURE) && !defined(CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE) && !defined(CATCH_CONFIG_NO_NEW_CAPTURE) && !defined(CATCH_CONFIG_NEW_CAPTURE)
        -:  377:#  define CATCH_CONFIG_NEW_CAPTURE
        -:  378:#endif
        -:  379:
        -:  380:#if !defined(CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED) && !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)
        -:  381:#  define CATCH_CONFIG_DISABLE_EXCEPTIONS
        -:  382:#endif
        -:  383:
        -:  384:#if defined(CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN) && !defined(CATCH_CONFIG_NO_POLYFILL_ISNAN) && !defined(CATCH_CONFIG_POLYFILL_ISNAN)
        -:  385:#  define CATCH_CONFIG_POLYFILL_ISNAN
        -:  386:#endif
        -:  387:
        -:  388:#if defined(CATCH_INTERNAL_CONFIG_USE_ASYNC)  && !defined(CATCH_INTERNAL_CONFIG_NO_ASYNC) && !defined(CATCH_CONFIG_NO_USE_ASYNC) && !defined(CATCH_CONFIG_USE_ASYNC)
        -:  389:#  define CATCH_CONFIG_USE_ASYNC
        -:  390:#endif
        -:  391:
        -:  392:#if defined(CATCH_INTERNAL_CONFIG_ANDROID_LOGWRITE) && !defined(CATCH_CONFIG_NO_ANDROID_LOGWRITE) && !defined(CATCH_CONFIG_ANDROID_LOGWRITE)
        -:  393:#  define CATCH_CONFIG_ANDROID_LOGWRITE
        -:  394:#endif
        -:  395:
        -:  396:#if defined(CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER) && !defined(CATCH_CONFIG_NO_GLOBAL_NEXTAFTER) && !defined(CATCH_CONFIG_GLOBAL_NEXTAFTER)
        -:  397:#  define CATCH_CONFIG_GLOBAL_NEXTAFTER
        -:  398:#endif
        -:  399:
        -:  400:#if !defined(CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS)
        -:  401:#   define CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS
        -:  402:#   define CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS
        -:  403:#endif
        -:  404:#if !defined(CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS)
        -:  405:#   define CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
        -:  406:#   define CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
        -:  407:#endif
        -:  408:#if !defined(CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS)
        -:  409:#   define CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS
        -:  410:#   define CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS
        -:  411:#endif
        -:  412:#if !defined(CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS)
        -:  413:#   define CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS
        -:  414:#   define CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS
        -:  415:#endif
        -:  416:
        -:  417:#if defined(__APPLE__) && defined(__apple_build_version__) && (__clang_major__ < 10)
        -:  418:#   undef CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS
        -:  419:#   undef CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS
        -:  420:#elif defined(__clang__) && (__clang_major__ < 5)
        -:  421:#   undef CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS
        -:  422:#   undef CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS
        -:  423:#endif
        -:  424:
        -:  425:#if !defined(CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS)
        -:  426:#   define CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS
        -:  427:#   define CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS
        -:  428:#endif
        -:  429:
        -:  430:#if defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)
        -:  431:#define CATCH_TRY if ((true))
        -:  432:#define CATCH_CATCH_ALL if ((false))
        -:  433:#define CATCH_CATCH_ANON(type) if ((false))
        -:  434:#else
        -:  435:#define CATCH_TRY try
        -:  436:#define CATCH_CATCH_ALL catch (...)
        -:  437:#define CATCH_CATCH_ANON(type) catch (type)
        -:  438:#endif
        -:  439:
        -:  440:#if defined(CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR) && !defined(CATCH_CONFIG_NO_TRADITIONAL_MSVC_PREPROCESSOR) && !defined(CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR)
        -:  441:#define CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -:  442:#endif
        -:  443:
        -:  444:// end catch_compiler_capabilities.h
        -:  445:#define INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, line ) name##line
        -:  446:#define INTERNAL_CATCH_UNIQUE_NAME_LINE( name, line ) INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, line )
        -:  447:#ifdef CATCH_CONFIG_COUNTER
        -:  448:#  define INTERNAL_CATCH_UNIQUE_NAME( name ) INTERNAL_CATCH_UNIQUE_NAME_LINE( name, __COUNTER__ )
        -:  449:#else
        -:  450:#  define INTERNAL_CATCH_UNIQUE_NAME( name ) INTERNAL_CATCH_UNIQUE_NAME_LINE( name, __LINE__ )
        -:  451:#endif
        -:  452:
        -:  453:#include <iosfwd>
        -:  454:#include <string>
        -:  455:#include <cstdint>
        -:  456:
        -:  457:// We need a dummy global operator<< so we can bring it into Catch namespace later
        -:  458:struct Catch_global_namespace_dummy {};
        -:  459:std::ostream& operator<<(std::ostream&, Catch_global_namespace_dummy);
        -:  460:
        -:  461:namespace Catch {
        -:  462:
        -:  463:struct CaseSensitive { enum Choice {
        -:  464:Yes,
        -:  465:No
        -:  466:}; };
        -:  467:
      16*:  468:class NonCopyable {
------------------
_ZN5Catch11NonCopyableD0Ev:
function _ZN5Catch11NonCopyableD0Ev called 0 returned 0% blocks executed 0%
    #####:  468:class NonCopyable {
    %%%%%:  468-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch11NonCopyableD2Ev:
function _ZN5Catch11NonCopyableD2Ev called 4 returned 100% blocks executed 100%
        4:  468:class NonCopyable {
------------------
_ZN5Catch11NonCopyableC2Ev:
function _ZN5Catch11NonCopyableC2Ev called 12 returned 100% blocks executed 100%
       12:  468:class NonCopyable {
------------------
        -:  469:NonCopyable( NonCopyable const& )              = delete;
        -:  470:NonCopyable( NonCopyable && )                  = delete;
        -:  471:NonCopyable& operator = ( NonCopyable const& ) = delete;
        -:  472:NonCopyable& operator = ( NonCopyable && )     = delete;
        -:  473:
        -:  474:protected:
        -:  475:NonCopyable();
        -:  476:virtual ~NonCopyable();
        -:  477:};
        -:  478:
        -:  479:struct SourceLineInfo {
        -:  480:
        -:  481:SourceLineInfo() = delete;
function _ZN5Catch14SourceLineInfoC1EPKcj called 68 returned 100% blocks executed 100%
       68:  482:SourceLineInfo( char const* _file, std::size_t _line ) noexcept
       68:  483::   file( _file ),
       68:  484:line( _line )
       68:  485:{}
        -:  486:
        -:  487:SourceLineInfo( SourceLineInfo const& other )            = default;
        -:  488:SourceLineInfo& operator = ( SourceLineInfo const& )     = default;
        -:  489:SourceLineInfo( SourceLineInfo&& )              noexcept = default;
        -:  490:SourceLineInfo& operator = ( SourceLineInfo&& ) noexcept = default;
        -:  491:
        -:  492:bool empty() const noexcept { return file[0] == '\0'; }
        -:  493:bool operator == ( SourceLineInfo const& other ) const noexcept;
        -:  494:bool operator < ( SourceLineInfo const& other ) const noexcept;
        -:  495:
        -:  496:char const* file;
        -:  497:std::size_t line;
        -:  498:};
        -:  499:
        -:  500:std::ostream& operator << ( std::ostream& os, SourceLineInfo const& info );
        -:  501:
        -:  502:// Bring in operator<< from global namespace into Catch namespace
        -:  503:// This is necessary because the overload of operator<< above makes
        -:  504:// lookup stop at namespace Catch
        -:  505:using ::operator<<;
        -:  506:
        -:  507:// Use this in variadic streaming macros to allow
        -:  508://    >> +StreamEndStop
        -:  509:// as well as
        -:  510://    >> stuff +StreamEndStop
        -:  511:struct StreamEndStop {
        -:  512:std::string operator+() const;
        -:  513:};
        -:  514:template<typename T>
        -:  515:T const& operator + ( T const& value, StreamEndStop ) {
        -:  516:return value;
        -:  517:}
        -:  518:}
        -:  519:
        -:  520:#define CATCH_INTERNAL_LINEINFO \
        -:  521:    ::Catch::SourceLineInfo( __FILE__, static_cast<std::size_t>( __LINE__ ) )
        -:  522:
        -:  523:// end catch_common.h
        -:  524:namespace Catch {
        -:  525:
        -:  526:struct RegistrarForTagAliases {
        -:  527:RegistrarForTagAliases( char const* alias, char const* tag, SourceLineInfo const& lineInfo );
        -:  528:};
        -:  529:
        -:  530:} // end namespace Catch
        -:  531:
        -:  532:#define CATCH_REGISTER_TAG_ALIAS( alias, spec ) \
        -:  533:    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -:  534:    namespace{ Catch::RegistrarForTagAliases INTERNAL_CATCH_UNIQUE_NAME( AutoRegisterTagAlias )( alias, spec, CATCH_INTERNAL_LINEINFO ); } \
        -:  535:    CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
        -:  536:
        -:  537:// end catch_tag_alias_autoregistrar.h
        -:  538:// start catch_test_registry.h
        -:  539:
        -:  540:// start catch_interfaces_testcase.h
        -:  541:
        -:  542:#include <vector>
        -:  543:
        -:  544:namespace Catch {
        -:  545:
        -:  546:class TestSpec;
        -:  547:
       8*:  548:struct ITestInvoker {
------------------
_ZN5Catch12ITestInvokerD0Ev:
function _ZN5Catch12ITestInvokerD0Ev called 0 returned 0% blocks executed 0%
    #####:  548:struct ITestInvoker {
    %%%%%:  548-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch12ITestInvokerD2Ev:
function _ZN5Catch12ITestInvokerD2Ev called 8 returned 100% blocks executed 100%
        8:  548:struct ITestInvoker {
------------------
        -:  549:virtual void invoke () const = 0;
        -:  550:virtual ~ITestInvoker();
        -:  551:};
        -:  552:
        -:  553:class TestCase;
        -:  554:struct IConfig;
        -:  555:
       1*:  556:struct ITestCaseRegistry {
------------------
_ZN5Catch17ITestCaseRegistryD0Ev:
function _ZN5Catch17ITestCaseRegistryD0Ev called 0 returned 0% blocks executed 0%
    #####:  556:struct ITestCaseRegistry {
    %%%%%:  556-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch17ITestCaseRegistryD2Ev:
function _ZN5Catch17ITestCaseRegistryD2Ev called 1 returned 100% blocks executed 100%
        1:  556:struct ITestCaseRegistry {
------------------
        -:  557:virtual ~ITestCaseRegistry();
        -:  558:virtual std::vector<TestCase> const& getAllTests() const = 0;
        -:  559:virtual std::vector<TestCase> const& getAllTestsSorted( IConfig const& config ) const = 0;
        -:  560:};
        -:  561:
        -:  562:bool isThrowSafe( TestCase const& testCase, IConfig const& config );
        -:  563:bool matchTest( TestCase const& testCase, TestSpec const& testSpec, IConfig const& config );
        -:  564:std::vector<TestCase> filterTests( std::vector<TestCase> const& testCases, TestSpec const& testSpec, IConfig const& config );
        -:  565:std::vector<TestCase> const& getAllTestCasesSorted( IConfig const& config );
        -:  566:
        -:  567:}
        -:  568:
        -:  569:// end catch_interfaces_testcase.h
        -:  570:// start catch_stringref.h
        -:  571:
        -:  572:#include <cstddef>
        -:  573:#include <string>
        -:  574:#include <iosfwd>
        -:  575:#include <cassert>
        -:  576:
        -:  577:namespace Catch {
        -:  578:
        -:  579:/// A non-owning string class (similar to the forthcoming std::string_view)
        -:  580:/// Note that, because a StringRef may be a substring of another string,
        -:  581:/// it may not be null terminated. c_str() must return a null terminated
        -:  582:/// string, however, and so the StringRef will internally take ownership
        -:  583:/// (taking a copy), if necessary. In theory this ownership is not externally
        -:  584:/// visible - but it does mean (substring) StringRefs should not be shared between
        -:  585:/// threads.
        -:  586:class StringRef {
        -:  587:public:
        -:  588:using size_type = std::size_t;
        -:  589:using const_iterator = const char*;
        -:  590:
        -:  591:private:
        -:  592:friend struct StringRefTestAccess;
        -:  593:
        -:  594:char const* m_start;
        -:  595:size_type m_size;
        -:  596:
        -:  597:char* m_data = nullptr;
        -:  598:
        -:  599:void takeOwnership();
        -:  600:
        -:  601:static constexpr char const* const s_empty = "";
        -:  602:
        -:  603:public: // construction/ assignment
function _ZN5Catch9StringRefC1Ev called 77 returned 100% blocks executed 100%
       77:  604:StringRef() noexcept
       77:  605::   StringRef( s_empty, 0 )
       77:  605-block  0
call    0 returned 77
       77:  606:{}
        -:  607:
function _ZN5Catch9StringRefC1ERKS0_ called 169 returned 100% blocks executed 100%
      169:  608:StringRef( StringRef const& other ) noexcept
      169:  609::   m_start( other.m_start ),
      169:  610:m_size( other.m_size )
      169:  611:{}
        -:  612:
function _ZN5Catch9StringRefC1EOS0_ called 0 returned 0% blocks executed 0%
    #####:  613:StringRef( StringRef&& other ) noexcept
    #####:  614::   m_start( other.m_start ),
    #####:  615:m_size( other.m_size ),
    #####:  616:m_data( other.m_data )
        -:  617:{
    #####:  618:other.m_data = nullptr;
    #####:  619:}
        -:  620:
        -:  621:StringRef( char const* rawChars ) noexcept;
        -:  622:
function _ZN5Catch9StringRefC1EPKcj called 297 returned 100% blocks executed 100%
      297:  623:StringRef( char const* rawChars, size_type size ) noexcept
      297:  624::   m_start( rawChars ),
      297:  625:m_size( size )
      297:  626:{}
        -:  627:
function _ZN5Catch9StringRefC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:  628:StringRef( std::string const& stdString ) noexcept
        1:  629::   m_start( stdString.c_str() ),
        1:  629-block  0
call    0 returned 1
        1:  630:m_size( stdString.size() )
call    0 returned 1
        1:  631:{}
        -:  632:
function _ZN5Catch9StringRefD1Ev called 467 returned 100% blocks executed 67%
      934:  633:~StringRef() noexcept {
     467*:  634:delete[] m_data;
      467:  634-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 467
    %%%%%:  634-block  1
call    2 never executed
      467:  635:}
        -:  636:
function _ZN5Catch9StringRefaSERKS0_ called 118 returned 100% blocks executed 75%
      118:  637:auto operator = ( StringRef const &other ) noexcept -> StringRef& {
     118*:  638:delete[] m_data;
      118:  638-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 118
    %%%%%:  638-block  1
call    2 never executed
      118:  639:m_data = nullptr;
      118:  640:m_start = other.m_start;
      118:  641:m_size = other.m_size;
      118:  642:return *this;
      118:  642-block  0
        -:  643:}
        -:  644:
function _ZNK5Catch9StringRefcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEv called 16 returned 100% blocks executed 75%
       16:  645:explicit operator std::string() const {
       16:  646:return std::string(m_start, m_size);
       16:  646-block  0
call    0 returned 16
call    1 returned 16
branch  2 taken 16 (fallthrough)
branch  3 taken 0 (throw)
       16:  646-block  1
call    4 returned 16
       16:  646-block  2
    $$$$$:  646-block  3
call    5 never executed
        -:  647:}
        -:  648:
        -:  649:void swap( StringRef& other ) noexcept;
        -:  650:
        -:  651:public: // operators
        -:  652:auto operator == ( StringRef const& other ) const noexcept -> bool;
        -:  653:auto operator != ( StringRef const& other ) const noexcept -> bool;
        -:  654:
function _ZNK5Catch9StringRefixEj called 0 returned 0% blocks executed 0%
    #####:  655:auto operator[] ( size_type index ) const noexcept -> char {
    #####:  656:assert(index < m_size);
    %%%%%:  656-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  656-block  1
call    2 never executed
    %%%%%:  656-block  2
    #####:  657:return m_start[index];
    %%%%%:  657-block  0
        -:  658:}
        -:  659:
        -:  660:public: // named queries
function _ZNK5Catch9StringRef5emptyEv called 1 returned 100% blocks executed 100%
        1:  661:auto empty() const noexcept -> bool {
        1:  662:return m_size == 0;
        1:  662-block  0
        -:  663:}
function _ZNK5Catch9StringRef4sizeEv called 0 returned 0% blocks executed 0%
    #####:  664:auto size() const noexcept -> size_type {
    #####:  665:return m_size;
    %%%%%:  665-block  0
        -:  666:}
        -:  667:
        -:  668:auto c_str() const -> char const*;
        -:  669:
        -:  670:public: // substrings and searches
        -:  671:auto substr( size_type start, size_type size ) const noexcept -> StringRef;
        -:  672:
        -:  673:// Returns the current start pointer.
        -:  674:// Note that the pointer can change when if the StringRef is a substring
        -:  675:auto currentData() const noexcept -> char const*;
        -:  676:
        -:  677:public: // iterators
function _ZNK5Catch9StringRef5beginEv called 8 returned 100% blocks executed 100%
        8:  678:const_iterator begin() const { return m_start; }
        8:  678-block  0
function _ZNK5Catch9StringRef3endEv called 8 returned 100% blocks executed 100%
        8:  679:const_iterator end() const { return m_start + m_size; }
        8:  679-block  0
        -:  680:
        -:  681:private: // ownership queries - may not be consistent between calls
        -:  682:auto isOwned() const noexcept -> bool;
        -:  683:auto isSubstring() const noexcept -> bool;
        -:  684:};
        -:  685:
        -:  686:auto operator += ( std::string& lhs, StringRef const& sr ) -> std::string&;
        -:  687:auto operator << ( std::ostream& os, StringRef const& sr ) -> std::ostream&;
        -:  688:
function _ZN5Catchli3_srEPKcj called 59 returned 100% blocks executed 100%
       59:  689:inline auto operator "" _sr( char const* rawChars, std::size_t size ) noexcept -> StringRef {
       59:  690:return StringRef( rawChars, size );
       59:  690-block  0
call    0 returned 59
        -:  691:}
        -:  692:
        -:  693:} // namespace Catch
        -:  694:
function _Zli9_catch_srPKcj called 51 returned 100% blocks executed 100%
       51:  695:inline auto operator "" _catch_sr( char const* rawChars, std::size_t size ) noexcept -> Catch::StringRef {
       51:  696:return Catch::StringRef( rawChars, size );
       51:  696-block  0
call    0 returned 51
        -:  697:}
        -:  698:
        -:  699:// end catch_stringref.h
        -:  700:// start catch_preprocessor.hpp
        -:  701:
        -:  702:
        -:  703:#define CATCH_RECURSION_LEVEL0(...) __VA_ARGS__
        -:  704:#define CATCH_RECURSION_LEVEL1(...) CATCH_RECURSION_LEVEL0(CATCH_RECURSION_LEVEL0(CATCH_RECURSION_LEVEL0(__VA_ARGS__)))
        -:  705:#define CATCH_RECURSION_LEVEL2(...) CATCH_RECURSION_LEVEL1(CATCH_RECURSION_LEVEL1(CATCH_RECURSION_LEVEL1(__VA_ARGS__)))
        -:  706:#define CATCH_RECURSION_LEVEL3(...) CATCH_RECURSION_LEVEL2(CATCH_RECURSION_LEVEL2(CATCH_RECURSION_LEVEL2(__VA_ARGS__)))
        -:  707:#define CATCH_RECURSION_LEVEL4(...) CATCH_RECURSION_LEVEL3(CATCH_RECURSION_LEVEL3(CATCH_RECURSION_LEVEL3(__VA_ARGS__)))
        -:  708:#define CATCH_RECURSION_LEVEL5(...) CATCH_RECURSION_LEVEL4(CATCH_RECURSION_LEVEL4(CATCH_RECURSION_LEVEL4(__VA_ARGS__)))
        -:  709:
        -:  710:#ifdef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -:  711:#define INTERNAL_CATCH_EXPAND_VARGS(...) __VA_ARGS__
        -:  712:// MSVC needs more evaluations
        -:  713:#define CATCH_RECURSION_LEVEL6(...) CATCH_RECURSION_LEVEL5(CATCH_RECURSION_LEVEL5(CATCH_RECURSION_LEVEL5(__VA_ARGS__)))
        -:  714:#define CATCH_RECURSE(...)  CATCH_RECURSION_LEVEL6(CATCH_RECURSION_LEVEL6(__VA_ARGS__))
        -:  715:#else
        -:  716:#define CATCH_RECURSE(...)  CATCH_RECURSION_LEVEL5(__VA_ARGS__)
        -:  717:#endif
        -:  718:
        -:  719:#define CATCH_REC_END(...)
        -:  720:#define CATCH_REC_OUT
        -:  721:
        -:  722:#define CATCH_EMPTY()
        -:  723:#define CATCH_DEFER(id) id CATCH_EMPTY()
        -:  724:
        -:  725:#define CATCH_REC_GET_END2() 0, CATCH_REC_END
        -:  726:#define CATCH_REC_GET_END1(...) CATCH_REC_GET_END2
        -:  727:#define CATCH_REC_GET_END(...) CATCH_REC_GET_END1
        -:  728:#define CATCH_REC_NEXT0(test, next, ...) next CATCH_REC_OUT
        -:  729:#define CATCH_REC_NEXT1(test, next) CATCH_DEFER ( CATCH_REC_NEXT0 ) ( test, next, 0)
        -:  730:#define CATCH_REC_NEXT(test, next)  CATCH_REC_NEXT1(CATCH_REC_GET_END test, next)
        -:  731:
        -:  732:#define CATCH_REC_LIST0(f, x, peek, ...) , f(x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1) ) ( f, peek, __VA_ARGS__ )
        -:  733:#define CATCH_REC_LIST1(f, x, peek, ...) , f(x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST0) ) ( f, peek, __VA_ARGS__ )
        -:  734:#define CATCH_REC_LIST2(f, x, peek, ...)   f(x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1) ) ( f, peek, __VA_ARGS__ )
        -:  735:
        -:  736:#define CATCH_REC_LIST0_UD(f, userdata, x, peek, ...) , f(userdata, x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1_UD) ) ( f, userdata, peek, __VA_ARGS__ )
        -:  737:#define CATCH_REC_LIST1_UD(f, userdata, x, peek, ...) , f(userdata, x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST0_UD) ) ( f, userdata, peek, __VA_ARGS__ )
        -:  738:#define CATCH_REC_LIST2_UD(f, userdata, x, peek, ...)   f(userdata, x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1_UD) ) ( f, userdata, peek, __VA_ARGS__ )
        -:  739:
        -:  740:// Applies the function macro `f` to each of the remaining parameters, inserts commas between the results,
        -:  741:// and passes userdata as the first parameter to each invocation,
        -:  742:// e.g. CATCH_REC_LIST_UD(f, x, a, b, c) evaluates to f(x, a), f(x, b), f(x, c)
        -:  743:#define CATCH_REC_LIST_UD(f, userdata, ...) CATCH_RECURSE(CATCH_REC_LIST2_UD(f, userdata, __VA_ARGS__, ()()(), ()()(), ()()(), 0))
        -:  744:
        -:  745:#define CATCH_REC_LIST(f, ...) CATCH_RECURSE(CATCH_REC_LIST2(f, __VA_ARGS__, ()()(), ()()(), ()()(), 0))
        -:  746:
        -:  747:#define INTERNAL_CATCH_EXPAND1(param) INTERNAL_CATCH_EXPAND2(param)
        -:  748:#define INTERNAL_CATCH_EXPAND2(...) INTERNAL_CATCH_NO## __VA_ARGS__
        -:  749:#define INTERNAL_CATCH_DEF(...) INTERNAL_CATCH_DEF __VA_ARGS__
        -:  750:#define INTERNAL_CATCH_NOINTERNAL_CATCH_DEF
        -:  751:#define INTERNAL_CATCH_STRINGIZE(...) INTERNAL_CATCH_STRINGIZE2(__VA_ARGS__)
        -:  752:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -:  753:#define INTERNAL_CATCH_STRINGIZE2(...) #__VA_ARGS__
        -:  754:#define INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS(param) INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_REMOVE_PARENS(param))
        -:  755:#else
        -:  756:// MSVC is adding extra space and needs another indirection to expand INTERNAL_CATCH_NOINTERNAL_CATCH_DEF
        -:  757:#define INTERNAL_CATCH_STRINGIZE2(...) INTERNAL_CATCH_STRINGIZE3(__VA_ARGS__)
        -:  758:#define INTERNAL_CATCH_STRINGIZE3(...) #__VA_ARGS__
        -:  759:#define INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS(param) (INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_REMOVE_PARENS(param)) + 1)
        -:  760:#endif
        -:  761:
        -:  762:#define INTERNAL_CATCH_MAKE_NAMESPACE2(...) ns_##__VA_ARGS__
        -:  763:#define INTERNAL_CATCH_MAKE_NAMESPACE(name) INTERNAL_CATCH_MAKE_NAMESPACE2(name)
        -:  764:
        -:  765:#define INTERNAL_CATCH_REMOVE_PARENS(...) INTERNAL_CATCH_EXPAND1(INTERNAL_CATCH_DEF __VA_ARGS__)
        -:  766:
        -:  767:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -:  768:#define INTERNAL_CATCH_MAKE_TYPE_LIST2(...) decltype(get_wrapper<INTERNAL_CATCH_REMOVE_PARENS_GEN(__VA_ARGS__)>())
        -:  769:#define INTERNAL_CATCH_MAKE_TYPE_LIST(...) INTERNAL_CATCH_MAKE_TYPE_LIST2(INTERNAL_CATCH_REMOVE_PARENS(__VA_ARGS__))
        -:  770:#else
        -:  771:#define INTERNAL_CATCH_MAKE_TYPE_LIST2(...) INTERNAL_CATCH_EXPAND_VARGS(decltype(get_wrapper<INTERNAL_CATCH_REMOVE_PARENS_GEN(__VA_ARGS__)>()))
        -:  772:#define INTERNAL_CATCH_MAKE_TYPE_LIST(...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_MAKE_TYPE_LIST2(INTERNAL_CATCH_REMOVE_PARENS(__VA_ARGS__)))
        -:  773:#endif
        -:  774:
        -:  775:#define INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(...)\
        -:  776:    CATCH_REC_LIST(INTERNAL_CATCH_MAKE_TYPE_LIST,__VA_ARGS__)
        -:  777:
        -:  778:#define INTERNAL_CATCH_REMOVE_PARENS_1_ARG(_0) INTERNAL_CATCH_REMOVE_PARENS(_0)
        -:  779:#define INTERNAL_CATCH_REMOVE_PARENS_2_ARG(_0, _1) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_1_ARG(_1)
        -:  780:#define INTERNAL_CATCH_REMOVE_PARENS_3_ARG(_0, _1, _2) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_2_ARG(_1, _2)
        -:  781:#define INTERNAL_CATCH_REMOVE_PARENS_4_ARG(_0, _1, _2, _3) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_3_ARG(_1, _2, _3)
        -:  782:#define INTERNAL_CATCH_REMOVE_PARENS_5_ARG(_0, _1, _2, _3, _4) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_4_ARG(_1, _2, _3, _4)
        -:  783:#define INTERNAL_CATCH_REMOVE_PARENS_6_ARG(_0, _1, _2, _3, _4, _5) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_5_ARG(_1, _2, _3, _4, _5)
        -:  784:#define INTERNAL_CATCH_REMOVE_PARENS_7_ARG(_0, _1, _2, _3, _4, _5, _6) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_6_ARG(_1, _2, _4, _5, _6)
        -:  785:#define INTERNAL_CATCH_REMOVE_PARENS_8_ARG(_0, _1, _2, _3, _4, _5, _6, _7) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_7_ARG(_1, _2, _3, _4, _5, _6, _7)
        -:  786:#define INTERNAL_CATCH_REMOVE_PARENS_9_ARG(_0, _1, _2, _3, _4, _5, _6, _7, _8) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_8_ARG(_1, _2, _3, _4, _5, _6, _7, _8)
        -:  787:#define INTERNAL_CATCH_REMOVE_PARENS_10_ARG(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_9_ARG(_1, _2, _3, _4, _5, _6, _7, _8, _9)
        -:  788:#define INTERNAL_CATCH_REMOVE_PARENS_11_ARG(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_10_ARG(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10)
        -:  789:
        -:  790:#define INTERNAL_CATCH_VA_NARGS_IMPL(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, N, ...) N
        -:  791:
        -:  792:#define INTERNAL_CATCH_TYPE_GEN\
        -:  793:    template<typename...> struct TypeList {};\
        -:  794:    template<typename...Ts>\
        -:  795:    constexpr auto get_wrapper() noexcept -> TypeList<Ts...> { return {}; }\
        -:  796:    template<template<typename...> class...> struct TemplateTypeList{};\
        -:  797:    template<template<typename...> class...Cs>\
        -:  798:    constexpr auto get_wrapper() noexcept -> TemplateTypeList<Cs...> { return {}; }\
        -:  799:    template<typename...>\
        -:  800:    struct append;\
        -:  801:    template<typename...>\
        -:  802:    struct rewrap;\
        -:  803:    template<template<typename...> class, typename...>\
        -:  804:    struct create;\
        -:  805:    template<template<typename...> class, typename>\
        -:  806:    struct convert;\
        -:  807:    \
        -:  808:    template<typename T> \
        -:  809:    struct append<T> { using type = T; };\
        -:  810:    template< template<typename...> class L1, typename...E1, template<typename...> class L2, typename...E2, typename...Rest>\
        -:  811:    struct append<L1<E1...>, L2<E2...>, Rest...> { using type = typename append<L1<E1...,E2...>, Rest...>::type; };\
        -:  812:    template< template<typename...> class L1, typename...E1, typename...Rest>\
        -:  813:    struct append<L1<E1...>, TypeList<mpl_::na>, Rest...> { using type = L1<E1...>; };\
        -:  814:    \
        -:  815:    template< template<typename...> class Container, template<typename...> class List, typename...elems>\
        -:  816:    struct rewrap<TemplateTypeList<Container>, List<elems...>> { using type = TypeList<Container<elems...>>; };\
        -:  817:    template< template<typename...> class Container, template<typename...> class List, class...Elems, typename...Elements>\
        -:  818:    struct rewrap<TemplateTypeList<Container>, List<Elems...>, Elements...> { using type = typename append<TypeList<Container<Elems...>>, typename rewrap<TemplateTypeList<Container>, Elements...>::type>::type; };\
        -:  819:    \
        -:  820:    template<template <typename...> class Final, template< typename...> class...Containers, typename...Types>\
        -:  821:    struct create<Final, TemplateTypeList<Containers...>, TypeList<Types...>> { using type = typename append<Final<>, typename rewrap<TemplateTypeList<Containers>, Types...>::type...>::type; };\
        -:  822:    template<template <typename...> class Final, template <typename...> class List, typename...Ts>\
        -:  823:    struct convert<Final, List<Ts...>> { using type = typename append<Final<>,TypeList<Ts>...>::type; };
        -:  824:
        -:  825:#define INTERNAL_CATCH_NTTP_1(signature, ...)\
        -:  826:    template<INTERNAL_CATCH_REMOVE_PARENS(signature)> struct Nttp{};\
        -:  827:    template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\
        -:  828:    constexpr auto get_wrapper() noexcept -> Nttp<__VA_ARGS__> { return {}; } \
        -:  829:    template<template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class...> struct NttpTemplateTypeList{};\
        -:  830:    template<template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class...Cs>\
        -:  831:    constexpr auto get_wrapper() noexcept -> NttpTemplateTypeList<Cs...> { return {}; } \
        -:  832:    \
        -:  833:    template< template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class Container, template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class List, INTERNAL_CATCH_REMOVE_PARENS(signature)>\
        -:  834:    struct rewrap<NttpTemplateTypeList<Container>, List<__VA_ARGS__>> { using type = TypeList<Container<__VA_ARGS__>>; };\
        -:  835:    template< template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class Container, template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class List, INTERNAL_CATCH_REMOVE_PARENS(signature), typename...Elements>\
        -:  836:    struct rewrap<NttpTemplateTypeList<Container>, List<__VA_ARGS__>, Elements...> { using type = typename append<TypeList<Container<__VA_ARGS__>>, typename rewrap<NttpTemplateTypeList<Container>, Elements...>::type>::type; };\
        -:  837:    template<template <typename...> class Final, template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class...Containers, typename...Types>\
        -:  838:    struct create<Final, NttpTemplateTypeList<Containers...>, TypeList<Types...>> { using type = typename append<Final<>, typename rewrap<NttpTemplateTypeList<Containers>, Types...>::type...>::type; };
        -:  839:
        -:  840:#define INTERNAL_CATCH_DECLARE_SIG_TEST0(TestName)
        -:  841:#define INTERNAL_CATCH_DECLARE_SIG_TEST1(TestName, signature)\
        -:  842:    template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\
        -:  843:    static void TestName()
        -:  844:#define INTERNAL_CATCH_DECLARE_SIG_TEST_X(TestName, signature, ...)\
        -:  845:    template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\
        -:  846:    static void TestName()
        -:  847:
        -:  848:#define INTERNAL_CATCH_DEFINE_SIG_TEST0(TestName)
        -:  849:#define INTERNAL_CATCH_DEFINE_SIG_TEST1(TestName, signature)\
        -:  850:    template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\
        -:  851:    static void TestName()
        -:  852:#define INTERNAL_CATCH_DEFINE_SIG_TEST_X(TestName, signature,...)\
        -:  853:    template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\
        -:  854:    static void TestName()
        -:  855:
        -:  856:#define INTERNAL_CATCH_NTTP_REGISTER0(TestFunc, signature)\
        -:  857:    template<typename Type>\
        -:  858:    void reg_test(TypeList<Type>, Catch::NameAndTags nameAndTags)\
        -:  859:    {\
        -:  860:        Catch::AutoReg( Catch::makeTestInvoker(&TestFunc<Type>), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), nameAndTags);\
        -:  861:    }
        -:  862:
        -:  863:#define INTERNAL_CATCH_NTTP_REGISTER(TestFunc, signature, ...)\
        -:  864:    template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\
        -:  865:    void reg_test(Nttp<__VA_ARGS__>, Catch::NameAndTags nameAndTags)\
        -:  866:    {\
        -:  867:        Catch::AutoReg( Catch::makeTestInvoker(&TestFunc<__VA_ARGS__>), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), nameAndTags);\
        -:  868:    }
        -:  869:
        -:  870:#define INTERNAL_CATCH_NTTP_REGISTER_METHOD0(TestName, signature, ...)\
        -:  871:    template<typename Type>\
        -:  872:    void reg_test(TypeList<Type>, Catch::StringRef className, Catch::NameAndTags nameAndTags)\
        -:  873:    {\
        -:  874:        Catch::AutoReg( Catch::makeTestInvoker(&TestName<Type>::test), CATCH_INTERNAL_LINEINFO, className, nameAndTags);\
        -:  875:    }
        -:  876:
        -:  877:#define INTERNAL_CATCH_NTTP_REGISTER_METHOD(TestName, signature, ...)\
        -:  878:    template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\
        -:  879:    void reg_test(Nttp<__VA_ARGS__>, Catch::StringRef className, Catch::NameAndTags nameAndTags)\
        -:  880:    {\
        -:  881:        Catch::AutoReg( Catch::makeTestInvoker(&TestName<__VA_ARGS__>::test), CATCH_INTERNAL_LINEINFO, className, nameAndTags);\
        -:  882:    }
        -:  883:
        -:  884:#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0(TestName, ClassName)
        -:  885:#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1(TestName, ClassName, signature)\
        -:  886:    template<typename TestType> \
        -:  887:    struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName)<TestType> { \
        -:  888:        void test();\
        -:  889:    }
        -:  890:
        -:  891:#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X(TestName, ClassName, signature, ...)\
        -:  892:    template<INTERNAL_CATCH_REMOVE_PARENS(signature)> \
        -:  893:    struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName)<__VA_ARGS__> { \
        -:  894:        void test();\
        -:  895:    }
        -:  896:
        -:  897:#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0(TestName)
        -:  898:#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1(TestName, signature)\
        -:  899:    template<typename TestType> \
        -:  900:    void INTERNAL_CATCH_MAKE_NAMESPACE(TestName)::TestName<TestType>::test()
        -:  901:#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X(TestName, signature, ...)\
        -:  902:    template<INTERNAL_CATCH_REMOVE_PARENS(signature)> \
        -:  903:    void INTERNAL_CATCH_MAKE_NAMESPACE(TestName)::TestName<__VA_ARGS__>::test()
        -:  904:
        -:  905:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -:  906:#define INTERNAL_CATCH_NTTP_0
        -:  907:#define INTERNAL_CATCH_NTTP_GEN(...) INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__, INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__),INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_0)
        -:  908:#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName, ...) INTERNAL_CATCH_VA_NARGS_IMPL( "dummy", __VA_ARGS__, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0)(TestName, __VA_ARGS__)
        -:  909:#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName, ClassName, ...) INTERNAL_CATCH_VA_NARGS_IMPL( "dummy", __VA_ARGS__, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0)(TestName, ClassName, __VA_ARGS__)
        -:  910:#define INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName, ...) INTERNAL_CATCH_VA_NARGS_IMPL( "dummy", __VA_ARGS__, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD0, INTERNAL_CATCH_NTTP_REGISTER_METHOD0)(TestName, __VA_ARGS__)
        -:  911:#define INTERNAL_CATCH_NTTP_REG_GEN(TestFunc, ...) INTERNAL_CATCH_VA_NARGS_IMPL( "dummy", __VA_ARGS__, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER0, INTERNAL_CATCH_NTTP_REGISTER0)(TestFunc, __VA_ARGS__)
        -:  912:#define INTERNAL_CATCH_DEFINE_SIG_TEST(TestName, ...) INTERNAL_CATCH_VA_NARGS_IMPL( "dummy", __VA_ARGS__, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST1, INTERNAL_CATCH_DEFINE_SIG_TEST0)(TestName, __VA_ARGS__)
        -:  913:#define INTERNAL_CATCH_DECLARE_SIG_TEST(TestName, ...) INTERNAL_CATCH_VA_NARGS_IMPL( "dummy", __VA_ARGS__, INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST1, INTERNAL_CATCH_DECLARE_SIG_TEST0)(TestName, __VA_ARGS__)
        -:  914:#define INTERNAL_CATCH_REMOVE_PARENS_GEN(...) INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__, INTERNAL_CATCH_REMOVE_PARENS_11_ARG,INTERNAL_CATCH_REMOVE_PARENS_10_ARG,INTERNAL_CATCH_REMOVE_PARENS_9_ARG,INTERNAL_CATCH_REMOVE_PARENS_8_ARG,INTERNAL_CATCH_REMOVE_PARENS_7_ARG,INTERNAL_CATCH_REMOVE_PARENS_6_ARG,INTERNAL_CATCH_REMOVE_PARENS_5_ARG,INTERNAL_CATCH_REMOVE_PARENS_4_ARG,INTERNAL_CATCH_REMOVE_PARENS_3_ARG,INTERNAL_CATCH_REMOVE_PARENS_2_ARG,INTERNAL_CATCH_REMOVE_PARENS_1_ARG)(__VA_ARGS__)
        -:  915:#else
        -:  916:#define INTERNAL_CATCH_NTTP_0(signature)
        -:  917:#define INTERNAL_CATCH_NTTP_GEN(...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1,INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_0)( __VA_ARGS__))
        -:  918:#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName, ...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL( "dummy", __VA_ARGS__, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0)(TestName, __VA_ARGS__))
        -:  919:#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName, ClassName, ...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL( "dummy", __VA_ARGS__, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0)(TestName, ClassName, __VA_ARGS__))
        -:  920:#define INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName, ...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL( "dummy", __VA_ARGS__, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD0, INTERNAL_CATCH_NTTP_REGISTER_METHOD0)(TestName, __VA_ARGS__))
        -:  921:#define INTERNAL_CATCH_NTTP_REG_GEN(TestFunc, ...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL( "dummy", __VA_ARGS__, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER0, INTERNAL_CATCH_NTTP_REGISTER0)(TestFunc, __VA_ARGS__))
        -:  922:#define INTERNAL_CATCH_DEFINE_SIG_TEST(TestName, ...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL( "dummy", __VA_ARGS__, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST1, INTERNAL_CATCH_DEFINE_SIG_TEST0)(TestName, __VA_ARGS__))
        -:  923:#define INTERNAL_CATCH_DECLARE_SIG_TEST(TestName, ...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL( "dummy", __VA_ARGS__, INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST1, INTERNAL_CATCH_DECLARE_SIG_TEST0)(TestName, __VA_ARGS__))
        -:  924:#define INTERNAL_CATCH_REMOVE_PARENS_GEN(...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__, INTERNAL_CATCH_REMOVE_PARENS_11_ARG,INTERNAL_CATCH_REMOVE_PARENS_10_ARG,INTERNAL_CATCH_REMOVE_PARENS_9_ARG,INTERNAL_CATCH_REMOVE_PARENS_8_ARG,INTERNAL_CATCH_REMOVE_PARENS_7_ARG,INTERNAL_CATCH_REMOVE_PARENS_6_ARG,INTERNAL_CATCH_REMOVE_PARENS_5_ARG,INTERNAL_CATCH_REMOVE_PARENS_4_ARG,INTERNAL_CATCH_REMOVE_PARENS_3_ARG,INTERNAL_CATCH_REMOVE_PARENS_2_ARG,INTERNAL_CATCH_REMOVE_PARENS_1_ARG)(__VA_ARGS__))
        -:  925:#endif
        -:  926:
        -:  927:// end catch_preprocessor.hpp
        -:  928:// start catch_meta.hpp
        -:  929:
        -:  930:
        -:  931:#include <type_traits>
        -:  932:
        -:  933:namespace Catch {
        -:  934:template<typename T>
        -:  935:struct always_false : std::false_type {};
        -:  936:
        -:  937:template <typename> struct true_given : std::true_type {};
        -:  938:struct is_callable_tester {
        -:  939:template <typename Fun, typename... Args>
        -:  940:true_given<decltype(std::declval<Fun>()(std::declval<Args>()...))> static test(int);
        -:  941:template <typename...>
        -:  942:std::false_type static test(...);
        -:  943:};
        -:  944:
        -:  945:template <typename T>
        -:  946:struct is_callable;
        -:  947:
        -:  948:template <typename Fun, typename... Args>
        -:  949:struct is_callable<Fun(Args...)> : decltype(is_callable_tester::test<Fun, Args...>(0)) {};
        -:  950:
        -:  951:} // namespace Catch
        -:  952:
        -:  953:namespace mpl_{
        -:  954:struct na;
        -:  955:}
        -:  956:
        -:  957:// end catch_meta.hpp
        -:  958:namespace Catch {
        -:  959:
        -:  960:template<typename C>
        -:  961:class TestInvokerAsMethod : public ITestInvoker {
        -:  962:void (C::*m_testAsMethod)();
        -:  963:public:
        -:  964:TestInvokerAsMethod( void (C::*testAsMethod)() ) noexcept : m_testAsMethod( testAsMethod ) {}
        -:  965:
        -:  966:void invoke() const override {
        -:  967:C obj;
        -:  968:(obj.*m_testAsMethod)();
        -:  969:}
        -:  970:};
        -:  971:
        -:  972:auto makeTestInvoker( void(*testAsFunction)() ) noexcept -> ITestInvoker*;
        -:  973:
        -:  974:template<typename C>
        -:  975:auto makeTestInvoker( void (C::*testAsMethod)() ) noexcept -> ITestInvoker* {
        -:  976:return new(std::nothrow) TestInvokerAsMethod<C>( testAsMethod );
        -:  977:}
        -:  978:
        -:  979:struct NameAndTags {
        -:  980:NameAndTags( StringRef const& name_ = StringRef(), StringRef const& tags_ = StringRef() ) noexcept;
        -:  981:StringRef name;
        -:  982:StringRef tags;
        -:  983:};
        -:  984:
    #####:  985:struct AutoReg : NonCopyable {
------------------
_ZN5Catch7AutoRegD0Ev:
function _ZN5Catch7AutoRegD0Ev called 0 returned 0% blocks executed 0%
    #####:  985:struct AutoReg : NonCopyable {
    %%%%%:  985-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch7AutoRegD2Ev:
function _ZN5Catch7AutoRegD2Ev called 0 returned 0% blocks executed 0%
    #####:  985:struct AutoReg : NonCopyable {
    %%%%%:  985-block  0
call    0 never executed
------------------
        -:  986:AutoReg( ITestInvoker* invoker, SourceLineInfo const& lineInfo, StringRef const& classOrMethod, NameAndTags const& nameAndTags ) noexcept;
        -:  987:~AutoReg();
        -:  988:};
        -:  989:
        -:  990:} // end namespace Catch
        -:  991:
        -:  992:#if defined(CATCH_CONFIG_DISABLE)
        -:  993:#define INTERNAL_CATCH_TESTCASE_NO_REGISTRATION( TestName, ... ) \
        -:  994:        static void TestName()
        -:  995:#define INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION( TestName, ClassName, ... ) \
        -:  996:        namespace{                        \
        -:  997:            struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName) { \
        -:  998:                void test();              \
        -:  999:            };                            \
        -: 1000:        }                                 \
        -: 1001:        void TestName::test()
        -: 1002:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2( TestName, TestFunc, Name, Tags, Signature, ... )  \
        -: 1003:        INTERNAL_CATCH_DEFINE_SIG_TEST(TestFunc, INTERNAL_CATCH_REMOVE_PARENS(Signature))
        -: 1004:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2( TestNameClass, TestName, ClassName, Name, Tags, Signature, ... )    \
        -: 1005:        namespace{                                                                                  \
        -: 1006:            namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName) {                                      \
        -: 1007:            INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName, ClassName, INTERNAL_CATCH_REMOVE_PARENS(Signature));\
        -: 1008:        }                                                                                           \
        -: 1009:        }                                                                                           \
        -: 1010:        INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName, INTERNAL_CATCH_REMOVE_PARENS(Signature))
        -: 1011:
        -: 1012:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -: 1013:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(Name, Tags, ...) \
        -: 1014:            INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, typename TestType, __VA_ARGS__ )
        -: 1015:#else
        -: 1016:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(Name, Tags, ...) \
        -: 1017:            INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, typename TestType, __VA_ARGS__ ) )
        -: 1018:#endif
        -: 1019:
        -: 1020:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -: 1021:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(Name, Tags, Signature, ...) \
        -: 1022:            INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, Signature, __VA_ARGS__ )
        -: 1023:#else
        -: 1024:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(Name, Tags, Signature, ...) \
        -: 1025:            INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, Signature, __VA_ARGS__ ) )
        -: 1026:#endif
        -: 1027:
        -: 1028:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -: 1029:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION( ClassName, Name, Tags,... ) \
        -: 1030:            INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ) , ClassName, Name, Tags, typename T, __VA_ARGS__ )
        -: 1031:#else
        -: 1032:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION( ClassName, Name, Tags,... ) \
        -: 1033:            INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ) , ClassName, Name, Tags, typename T, __VA_ARGS__ ) )
        -: 1034:#endif
        -: 1035:
        -: 1036:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -: 1037:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION( ClassName, Name, Tags, Signature, ... ) \
        -: 1038:            INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ) , ClassName, Name, Tags, Signature, __VA_ARGS__ )
        -: 1039:#else
        -: 1040:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION( ClassName, Name, Tags, Signature, ... ) \
        -: 1041:            INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ) , ClassName, Name, Tags, Signature, __VA_ARGS__ ) )
        -: 1042:#endif
        -: 1043:#endif
        -: 1044:
        -: 1045:///////////////////////////////////////////////////////////////////////////////
        -: 1046:#define INTERNAL_CATCH_TESTCASE2( TestName, ... ) \
        -: 1047:        static void TestName(); \
        -: 1048:        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -: 1049:        namespace{ Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( &TestName ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags{ __VA_ARGS__ } ); } /* NOLINT */ \
        -: 1050:        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
        -: 1051:        static void TestName()
        -: 1052:#define INTERNAL_CATCH_TESTCASE( ... ) \
        -: 1053:        INTERNAL_CATCH_TESTCASE2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), __VA_ARGS__ )
        -: 1054:
        -: 1055:///////////////////////////////////////////////////////////////////////////////
        -: 1056:#define INTERNAL_CATCH_METHOD_AS_TEST_CASE( QualifiedMethod, ... ) \
        -: 1057:        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -: 1058:        namespace{ Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( &QualifiedMethod ), CATCH_INTERNAL_LINEINFO, "&" #QualifiedMethod, Catch::NameAndTags{ __VA_ARGS__ } ); } /* NOLINT */ \
        -: 1059:        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
        -: 1060:
        -: 1061:///////////////////////////////////////////////////////////////////////////////
        -: 1062:#define INTERNAL_CATCH_TEST_CASE_METHOD2( TestName, ClassName, ... )\
        -: 1063:        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -: 1064:        namespace{ \
        -: 1065:            struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName) { \
        -: 1066:                void test(); \
        -: 1067:            }; \
        -: 1068:            Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar ) ( Catch::makeTestInvoker( &TestName::test ), CATCH_INTERNAL_LINEINFO, #ClassName, Catch::NameAndTags{ __VA_ARGS__ } ); /* NOLINT */ \
        -: 1069:        } \
        -: 1070:        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
        -: 1071:        void TestName::test()
        -: 1072:#define INTERNAL_CATCH_TEST_CASE_METHOD( ClassName, ... ) \
        -: 1073:        INTERNAL_CATCH_TEST_CASE_METHOD2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), ClassName, __VA_ARGS__ )
        -: 1074:
        -: 1075:///////////////////////////////////////////////////////////////////////////////
        -: 1076:#define INTERNAL_CATCH_REGISTER_TESTCASE( Function, ... ) \
        -: 1077:        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -: 1078:        Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( Function ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags{ __VA_ARGS__ } ); /* NOLINT */ \
        -: 1079:        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
        -: 1080:
        -: 1081:///////////////////////////////////////////////////////////////////////////////
        -: 1082:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(TestName, TestFunc, Name, Tags, Signature, ... )\
        -: 1083:        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -: 1084:        CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \
        -: 1085:        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        -: 1086:        INTERNAL_CATCH_DECLARE_SIG_TEST(TestFunc, INTERNAL_CATCH_REMOVE_PARENS(Signature));\
        -: 1087:        namespace {\
        -: 1088:        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){\
        -: 1089:            INTERNAL_CATCH_TYPE_GEN\
        -: 1090:            INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\
        -: 1091:            INTERNAL_CATCH_NTTP_REG_GEN(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))\
        -: 1092:            template<typename...Types> \
        -: 1093:            struct TestName{\
        -: 1094:                TestName(){\
        -: 1095:                    int index = 0;                                    \
        -: 1096:                    constexpr char const* tmpl_types[] = {CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, __VA_ARGS__)};\
        -: 1097:                    using expander = int[];\
        -: 1098:                    (void)expander{(reg_test(Types{}, Catch::NameAndTags{ Name " - " + std::string(tmpl_types[index]), Tags } ), index++, 0)... };/* NOLINT */ \
        -: 1099:                }\
        -: 1100:            };\
        -: 1101:            static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){\
        -: 1102:            TestName<INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)>();\
        -: 1103:            return 0;\
        -: 1104:        }();\
        -: 1105:        }\
        -: 1106:        }\
        -: 1107:        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
        -: 1108:        CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS \
        -: 1109:        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        -: 1110:        INTERNAL_CATCH_DEFINE_SIG_TEST(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))
        -: 1111:
        -: 1112:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -: 1113:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE(Name, Tags, ...) \
        -: 1114:        INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, typename TestType, __VA_ARGS__ )
        -: 1115:#else
        -: 1116:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE(Name, Tags, ...) \
        -: 1117:        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, typename TestType, __VA_ARGS__ ) )
        -: 1118:#endif
        -: 1119:
        -: 1120:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -: 1121:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(Name, Tags, Signature, ...) \
        -: 1122:        INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, Signature, __VA_ARGS__ )
        -: 1123:#else
        -: 1124:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(Name, Tags, Signature, ...) \
        -: 1125:        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, Signature, __VA_ARGS__ ) )
        -: 1126:#endif
        -: 1127:
        -: 1128:#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(TestName, TestFuncName, Name, Tags, Signature, TmplTypes, TypesList) \
        -: 1129:        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS                      \
        -: 1130:        CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS                \
        -: 1131:        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS                       \
        -: 1132:        template<typename TestType> static void TestFuncName();       \
        -: 1133:        namespace {\
        -: 1134:        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName) {                                     \
        -: 1135:            INTERNAL_CATCH_TYPE_GEN                                                  \
        -: 1136:            INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))         \
        -: 1137:            template<typename... Types>                               \
        -: 1138:            struct TestName {                                         \
        -: 1139:                void reg_tests() {                                          \
        -: 1140:                    int index = 0;                                    \
        -: 1141:                    using expander = int[];                           \
        -: 1142:                    constexpr char const* tmpl_types[] = {CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, INTERNAL_CATCH_REMOVE_PARENS(TmplTypes))};\
        -: 1143:                    constexpr char const* types_list[] = {CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, INTERNAL_CATCH_REMOVE_PARENS(TypesList))};\
        -: 1144:                    constexpr auto num_types = sizeof(types_list) / sizeof(types_list[0]);\
        -: 1145:                    (void)expander{(Catch::AutoReg( Catch::makeTestInvoker( &TestFuncName<Types> ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags{ Name " - " + std::string(tmpl_types[index / num_types]) + "<" + std::string(types_list[index % num_types]) + ">", Tags } ), index++, 0)... };/* NOLINT */\
        -: 1146:                }                                                     \
        -: 1147:            };                                                        \
        -: 1148:            static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){ \
        -: 1149:                using TestInit = typename create<TestName, decltype(get_wrapper<INTERNAL_CATCH_REMOVE_PARENS(TmplTypes)>()), TypeList<INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(INTERNAL_CATCH_REMOVE_PARENS(TypesList))>>::type; \
        -: 1150:                TestInit t;                                           \
        -: 1151:                t.reg_tests();                                        \
        -: 1152:                return 0;                                             \
        -: 1153:            }();                                                      \
        -: 1154:        }                                                             \
        -: 1155:        }                                                             \
        -: 1156:        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS                    \
        -: 1157:        CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS              \
        -: 1158:        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS                     \
        -: 1159:        template<typename TestType>                                   \
        -: 1160:        static void TestFuncName()
        -: 1161:
        -: 1162:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -: 1163:#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(Name, Tags, ...)\
        -: 1164:        INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, typename T,__VA_ARGS__)
        -: 1165:#else
        -: 1166:#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(Name, Tags, ...)\
        -: 1167:        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, typename T, __VA_ARGS__ ) )
        -: 1168:#endif
        -: 1169:
        -: 1170:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -: 1171:#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(Name, Tags, Signature, ...)\
        -: 1172:        INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, Signature, __VA_ARGS__)
        -: 1173:#else
        -: 1174:#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(Name, Tags, Signature, ...)\
        -: 1175:        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, Signature, __VA_ARGS__ ) )
        -: 1176:#endif
        -: 1177:
        -: 1178:#define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2(TestName, TestFunc, Name, Tags, TmplList)\
        -: 1179:        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -: 1180:        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        -: 1181:        template<typename TestType> static void TestFunc();       \
        -: 1182:        namespace {\
        -: 1183:        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){\
        -: 1184:        INTERNAL_CATCH_TYPE_GEN\
        -: 1185:        template<typename... Types>                               \
        -: 1186:        struct TestName {                                         \
        -: 1187:            void reg_tests() {                                          \
        -: 1188:                int index = 0;                                    \
        -: 1189:                using expander = int[];                           \
        -: 1190:                (void)expander{(Catch::AutoReg( Catch::makeTestInvoker( &TestFunc<Types> ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags{ Name " - " + std::string(INTERNAL_CATCH_STRINGIZE(TmplList)) + " - " + std::to_string(index), Tags } ), index++, 0)... };/* NOLINT */\
        -: 1191:            }                                                     \
        -: 1192:        };\
        -: 1193:        static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){ \
        -: 1194:                using TestInit = typename convert<TestName, TmplList>::type; \
        -: 1195:                TestInit t;                                           \
        -: 1196:                t.reg_tests();                                        \
        -: 1197:                return 0;                                             \
        -: 1198:            }();                                                        \
        -: 1199:        }}\
        -: 1200:        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS                    \
        -: 1201:        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        -: 1202:        template<typename TestType>                                   \
        -: 1203:        static void TestFunc()
        -: 1204:
        -: 1205:#define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE(Name, Tags, TmplList) \
        -: 1206:        INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, TmplList )
        -: 1207:
        -: 1208:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( TestNameClass, TestName, ClassName, Name, Tags, Signature, ... ) \
        -: 1209:        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -: 1210:        CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \
        -: 1211:        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        -: 1212:        namespace {\
        -: 1213:        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){ \
        -: 1214:            INTERNAL_CATCH_TYPE_GEN\
        -: 1215:            INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\
        -: 1216:            INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName, ClassName, INTERNAL_CATCH_REMOVE_PARENS(Signature));\
        -: 1217:            INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName, INTERNAL_CATCH_REMOVE_PARENS(Signature))\
        -: 1218:            template<typename...Types> \
        -: 1219:            struct TestNameClass{\
        -: 1220:                TestNameClass(){\
        -: 1221:                    int index = 0;                                    \
        -: 1222:                    constexpr char const* tmpl_types[] = {CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, __VA_ARGS__)};\
        -: 1223:                    using expander = int[];\
        -: 1224:                    (void)expander{(reg_test(Types{}, #ClassName, Catch::NameAndTags{ Name " - " + std::string(tmpl_types[index]), Tags } ), index++, 0)... };/* NOLINT */ \
        -: 1225:                }\
        -: 1226:            };\
        -: 1227:            static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){\
        -: 1228:                TestNameClass<INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)>();\
        -: 1229:                return 0;\
        -: 1230:        }();\
        -: 1231:        }\
        -: 1232:        }\
        -: 1233:        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS\
        -: 1234:        CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS\
        -: 1235:        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS\
        -: 1236:        INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName, INTERNAL_CATCH_REMOVE_PARENS(Signature))
        -: 1237:
        -: 1238:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -: 1239:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( ClassName, Name, Tags,... ) \
        -: 1240:        INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ) , ClassName, Name, Tags, typename T, __VA_ARGS__ )
        -: 1241:#else
        -: 1242:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( ClassName, Name, Tags,... ) \
        -: 1243:        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ) , ClassName, Name, Tags, typename T, __VA_ARGS__ ) )
        -: 1244:#endif
        -: 1245:
        -: 1246:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -: 1247:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( ClassName, Name, Tags, Signature, ... ) \
        -: 1248:        INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ) , ClassName, Name, Tags, Signature, __VA_ARGS__ )
        -: 1249:#else
        -: 1250:#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( ClassName, Name, Tags, Signature, ... ) \
        -: 1251:        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ) , ClassName, Name, Tags, Signature, __VA_ARGS__ ) )
        -: 1252:#endif
        -: 1253:
        -: 1254:#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(TestNameClass, TestName, ClassName, Name, Tags, Signature, TmplTypes, TypesList)\
        -: 1255:        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -: 1256:        CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \
        -: 1257:        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        -: 1258:        template<typename TestType> \
        -: 1259:            struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName <TestType>) { \
        -: 1260:                void test();\
        -: 1261:            };\
        -: 1262:        namespace {\
        -: 1263:        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestNameClass) {\
        -: 1264:            INTERNAL_CATCH_TYPE_GEN                  \
        -: 1265:            INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\
        -: 1266:            template<typename...Types>\
        -: 1267:            struct TestNameClass{\
        -: 1268:                void reg_tests(){\
        -: 1269:                    int index = 0;\
        -: 1270:                    using expander = int[];\
        -: 1271:                    constexpr char const* tmpl_types[] = {CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, INTERNAL_CATCH_REMOVE_PARENS(TmplTypes))};\
        -: 1272:                    constexpr char const* types_list[] = {CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, INTERNAL_CATCH_REMOVE_PARENS(TypesList))};\
        -: 1273:                    constexpr auto num_types = sizeof(types_list) / sizeof(types_list[0]);\
        -: 1274:                    (void)expander{(Catch::AutoReg( Catch::makeTestInvoker( &TestName<Types>::test ), CATCH_INTERNAL_LINEINFO, #ClassName, Catch::NameAndTags{ Name " - " + std::string(tmpl_types[index / num_types]) + "<" + std::string(types_list[index % num_types]) + ">", Tags } ), index++, 0)... };/* NOLINT */ \
        -: 1275:                }\
        -: 1276:            };\
        -: 1277:            static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){\
        -: 1278:                using TestInit = typename create<TestNameClass, decltype(get_wrapper<INTERNAL_CATCH_REMOVE_PARENS(TmplTypes)>()), TypeList<INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(INTERNAL_CATCH_REMOVE_PARENS(TypesList))>>::type;\
        -: 1279:                TestInit t;\
        -: 1280:                t.reg_tests();\
        -: 1281:                return 0;\
        -: 1282:            }(); \
        -: 1283:        }\
        -: 1284:        }\
        -: 1285:        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
        -: 1286:        CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS \
        -: 1287:        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        -: 1288:        template<typename TestType> \
        -: 1289:        void TestName<TestType>::test()
        -: 1290:
        -: 1291:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -: 1292:#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( ClassName, Name, Tags, ... )\
        -: 1293:        INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), ClassName, Name, Tags, typename T, __VA_ARGS__ )
        -: 1294:#else
        -: 1295:#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( ClassName, Name, Tags, ... )\
        -: 1296:        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), ClassName, Name, Tags, typename T,__VA_ARGS__ ) )
        -: 1297:#endif
        -: 1298:
        -: 1299:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -: 1300:#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( ClassName, Name, Tags, Signature, ... )\
        -: 1301:        INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), ClassName, Name, Tags, Signature, __VA_ARGS__ )
        -: 1302:#else
        -: 1303:#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( ClassName, Name, Tags, Signature, ... )\
        -: 1304:        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), ClassName, Name, Tags, Signature,__VA_ARGS__ ) )
        -: 1305:#endif
        -: 1306:
        -: 1307:#define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2( TestNameClass, TestName, ClassName, Name, Tags, TmplList) \
        -: 1308:        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -: 1309:        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        -: 1310:        template<typename TestType> \
        -: 1311:        struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName <TestType>) { \
        -: 1312:            void test();\
        -: 1313:        };\
        -: 1314:        namespace {\
        -: 1315:        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){ \
        -: 1316:            INTERNAL_CATCH_TYPE_GEN\
        -: 1317:            template<typename...Types>\
        -: 1318:            struct TestNameClass{\
        -: 1319:                void reg_tests(){\
        -: 1320:                    int index = 0;\
        -: 1321:                    using expander = int[];\
        -: 1322:                    (void)expander{(Catch::AutoReg( Catch::makeTestInvoker( &TestName<Types>::test ), CATCH_INTERNAL_LINEINFO, #ClassName, Catch::NameAndTags{ Name " - " + std::string(INTERNAL_CATCH_STRINGIZE(TmplList)) + " - " + std::to_string(index), Tags } ), index++, 0)... };/* NOLINT */ \
        -: 1323:                }\
        -: 1324:            };\
        -: 1325:            static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){\
        -: 1326:                using TestInit = typename convert<TestNameClass, TmplList>::type;\
        -: 1327:                TestInit t;\
        -: 1328:                t.reg_tests();\
        -: 1329:                return 0;\
        -: 1330:            }(); \
        -: 1331:        }}\
        -: 1332:        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
        -: 1333:        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        -: 1334:        template<typename TestType> \
        -: 1335:        void TestName<TestType>::test()
        -: 1336:
        -: 1337:#define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD(ClassName, Name, Tags, TmplList) \
        -: 1338:        INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), ClassName, Name, Tags, TmplList )
        -: 1339:
        -: 1340:// end catch_test_registry.h
        -: 1341:// start catch_capture.hpp
        -: 1342:
        -: 1343:// start catch_assertionhandler.h
        -: 1344:
        -: 1345:// start catch_assertioninfo.h
        -: 1346:
        -: 1347:// start catch_result_type.h
        -: 1348:
        -: 1349:namespace Catch {
        -: 1350:
        -: 1351:// ResultWas::OfType enum
        -: 1352:struct ResultWas { enum OfType {
        -: 1353:Unknown = -1,
        -: 1354:Ok = 0,
        -: 1355:Info = 1,
        -: 1356:Warning = 2,
        -: 1357:
        -: 1358:FailureBit = 0x10,
        -: 1359:
        -: 1360:ExpressionFailed = FailureBit | 1,
        -: 1361:ExplicitFailure = FailureBit | 2,
        -: 1362:
        -: 1363:Exception = 0x100 | FailureBit,
        -: 1364:
        -: 1365:ThrewException = Exception | 1,
        -: 1366:DidntThrowException = Exception | 2,
        -: 1367:
        -: 1368:FatalErrorCondition = 0x200 | FailureBit
        -: 1369:
        -: 1370:}; };
        -: 1371:
        -: 1372:bool isOk( ResultWas::OfType resultType );
        -: 1373:bool isJustInfo( int flags );
        -: 1374:
        -: 1375:// ResultDisposition::Flags enum
        -: 1376:struct ResultDisposition { enum Flags {
        -: 1377:Normal = 0x01,
        -: 1378:
        -: 1379:ContinueOnFailure = 0x02,   // Failures fail test, but execution continues
        -: 1380:FalseTest = 0x04,           // Prefix expression with !
        -: 1381:SuppressFail = 0x08         // Failures are reported but do not fail the test
        -: 1382:}; };
        -: 1383:
        -: 1384:ResultDisposition::Flags operator | ( ResultDisposition::Flags lhs, ResultDisposition::Flags rhs );
        -: 1385:
        -: 1386:bool shouldContinueOnFailure( int flags );
function _ZN5Catch11isFalseTestEi called 51 returned 100% blocks executed 100%
       51: 1387:inline bool isFalseTest( int flags ) { return ( flags & ResultDisposition::FalseTest ) != 0; }
       51: 1387-block  0
        -: 1388:bool shouldSuppressFailure( int flags );
        -: 1389:
        -: 1390:} // end namespace Catch
        -: 1391:
        -: 1392:// end catch_result_type.h
        -: 1393:namespace Catch {
        -: 1394:
        -: 1395:struct AssertionInfo
        -: 1396:{
        -: 1397:StringRef macroName;
        -: 1398:SourceLineInfo lineInfo;
        -: 1399:StringRef capturedExpression;
        -: 1400:ResultDisposition::Flags resultDisposition;
        -: 1401:
        -: 1402:// We want to delete this constructor but a compiler bug in 4.8 means
        -: 1403:// the struct is then treated as non-aggregate
        -: 1404://AssertionInfo() = delete;
        -: 1405:};
        -: 1406:
        -: 1407:} // end namespace Catch
        -: 1408:
        -: 1409:// end catch_assertioninfo.h
        -: 1410:// start catch_decomposer.h
        -: 1411:
        -: 1412:// start catch_tostring.h
        -: 1413:
        -: 1414:#include <vector>
        -: 1415:#include <cstddef>
        -: 1416:#include <type_traits>
        -: 1417:#include <string>
        -: 1418:// start catch_stream.h
        -: 1419:
        -: 1420:#include <iosfwd>
        -: 1421:#include <cstddef>
        -: 1422:#include <ostream>
        -: 1423:
        -: 1424:namespace Catch {
        -: 1425:
        -: 1426:std::ostream& cout();
        -: 1427:std::ostream& cerr();
        -: 1428:std::ostream& clog();
        -: 1429:
        -: 1430:class StringRef;
        -: 1431:
       1*: 1432:struct IStream {
------------------
_ZN5Catch7IStreamD0Ev:
function _ZN5Catch7IStreamD0Ev called 0 returned 0% blocks executed 0%
    #####: 1432:struct IStream {
    %%%%%: 1432-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch7IStreamD2Ev:
function _ZN5Catch7IStreamD2Ev called 1 returned 100% blocks executed 100%
        1: 1432:struct IStream {
------------------
        -: 1433:virtual ~IStream();
        -: 1434:virtual std::ostream& stream() const = 0;
        -: 1435:};
        -: 1436:
        -: 1437:auto makeStream( StringRef const &filename ) -> IStream const*;
        -: 1438:
        -: 1439:class ReusableStringStream {
        -: 1440:std::size_t m_index;
        -: 1441:std::ostream* m_oss;
        -: 1442:public:
        -: 1443:ReusableStringStream();
        -: 1444:~ReusableStringStream();
        -: 1445:
        -: 1446:auto str() const -> std::string;
        -: 1447:
        -: 1448:template<typename T>
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA13_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA13_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA36_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA36_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA27_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA27_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA44_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA44_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA16_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA16_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA5_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA5_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA59_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA59_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA57_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA57_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA32_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA32_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA17_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA17_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIjEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIjEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsISt5_SetwEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsISt5_SetwEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA2_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA2_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsINS_14SourceLineInfoEEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsINS_14SourceLineInfoEEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsINS_14LazyExpressionEEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsINS_14LazyExpressionEEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA37_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA37_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA26_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA26_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA40_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA40_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIcEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIcEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIdEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIdEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA25_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA25_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA3_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA3_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA9_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA9_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA18_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA18_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIPKcEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIPKcEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA1_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA1_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIfEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIfEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsISt13_SetprecisionEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsISt13_SetprecisionEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA4_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA4_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA47_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA47_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIyEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIyEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIxEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIxEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIFRSt8ios_baseS3_EEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIFRSt8ios_baseS3_EEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsISt8_SetfillIcEEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsISt8_SetfillIcEEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsINS_16TestCaseTracking11TrackerBase10CycleStateEEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsINS_16TestCaseTracking11TrackerBase10CycleStateEEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA8_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA8_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA21_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA21_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA15_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA15_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA22_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA22_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA66_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA66_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA19_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA19_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA12_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA12_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA20_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA20_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsINS_9StringRefEEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsINS_9StringRefEEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA23_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA23_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
_ZN5Catch20ReusableStringStreamlsIA53_cEERS0_RKT_:
function _ZN5Catch20ReusableStringStreamlsIA53_cEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1449:auto operator << ( T const& value ) -> ReusableStringStream& {
    #####: 1450:*m_oss << value;
    %%%%%: 1450-block  0
call    0 never executed
    #####: 1451:return *this;
        -: 1452:}
------------------
function _ZN5Catch20ReusableStringStream3getEv called 0 returned 0% blocks executed 0%
    #####: 1453:auto get() -> std::ostream& { return *m_oss; }
    %%%%%: 1453-block  0
        -: 1454:};
        -: 1455:}
        -: 1456:
        -: 1457:// end catch_stream.h
        -: 1458:// start catch_interfaces_enum_values_registry.h
        -: 1459:
        -: 1460:#include <vector>
        -: 1461:
        -: 1462:namespace Catch {
        -: 1463:
        -: 1464:namespace Detail {
        -: 1465:struct EnumInfo {
        -: 1466:StringRef m_name;
        -: 1467:std::vector<std::pair<int, StringRef>> m_values;
        -: 1468:
        -: 1469:~EnumInfo();
        -: 1470:
        -: 1471:StringRef lookup( int value ) const;
        -: 1472:};
        -: 1473:} // namespace Detail
        -: 1474:
        -: 1475:struct IMutableEnumValuesRegistry {
        -: 1476:virtual ~IMutableEnumValuesRegistry();
        -: 1477:
        -: 1478:virtual Detail::EnumInfo const& registerEnum( StringRef enumName, StringRef allEnums, std::vector<int> const& values ) = 0;
        -: 1479:
        -: 1480:template<typename E>
        -: 1481:Detail::EnumInfo const& registerEnum( StringRef enumName, StringRef allEnums, std::initializer_list<E> values ) {
        -: 1482:static_assert(sizeof(int) >= sizeof(E), "Cannot serialize enum to int");
        -: 1483:std::vector<int> intValues;
        -: 1484:intValues.reserve( values.size() );
        -: 1485:for( auto enumValue : values )
        -: 1486:intValues.push_back( static_cast<int>( enumValue ) );
        -: 1487:return registerEnum( enumName, allEnums, intValues );
        -: 1488:}
        -: 1489:};
        -: 1490:
        -: 1491:} // Catch
        -: 1492:
        -: 1493:// end catch_interfaces_enum_values_registry.h
        -: 1494:
        -: 1495:#ifdef CATCH_CONFIG_CPP17_STRING_VIEW
        -: 1496:#include <string_view>
        -: 1497:#endif
        -: 1498:
        -: 1499:#ifdef __OBJC__
        -: 1500:// start catch_objc_arc.hpp
        -: 1501:
        -: 1502:#import <Foundation/Foundation.h>
        -: 1503:
        -: 1504:#ifdef __has_feature
        -: 1505:#define CATCH_ARC_ENABLED __has_feature(objc_arc)
        -: 1506:#else
        -: 1507:#define CATCH_ARC_ENABLED 0
        -: 1508:#endif
        -: 1509:
        -: 1510:void arcSafeRelease( NSObject* obj );
        -: 1511:id performOptionalSelector( id obj, SEL sel );
        -: 1512:
        -: 1513:#if !CATCH_ARC_ENABLED
        -: 1514:inline void arcSafeRelease( NSObject* obj ) {
        -: 1515:[obj release];
        -: 1516:}
        -: 1517:inline id performOptionalSelector( id obj, SEL sel ) {
        -: 1518:if( [obj respondsToSelector: sel] )
        -: 1519:return [obj performSelector: sel];
        -: 1520:return nil;
        -: 1521:}
        -: 1522:#define CATCH_UNSAFE_UNRETAINED
        -: 1523:#define CATCH_ARC_STRONG
        -: 1524:#else
        -: 1525:inline void arcSafeRelease( NSObject* ){}
        -: 1526:inline id performOptionalSelector( id obj, SEL sel ) {
        -: 1527:#ifdef __clang__
        -: 1528:#pragma clang diagnostic push
        -: 1529:#pragma clang diagnostic ignored "-Warc-performSelector-leaks"
        -: 1530:#endif
        -: 1531:if( [obj respondsToSelector: sel] )
        -: 1532:return [obj performSelector: sel];
        -: 1533:#ifdef __clang__
        -: 1534:#pragma clang diagnostic pop
        -: 1535:#endif
        -: 1536:return nil;
        -: 1537:}
        -: 1538:#define CATCH_UNSAFE_UNRETAINED __unsafe_unretained
        -: 1539:#define CATCH_ARC_STRONG __strong
        -: 1540:#endif
        -: 1541:
        -: 1542:// end catch_objc_arc.hpp
        -: 1543:#endif
        -: 1544:
        -: 1545:#ifdef _MSC_VER
        -: 1546:#pragma warning(push)
        -: 1547:#pragma warning(disable:4180) // We attempt to stream a function (address) by const&, which MSVC complains about but is harmless
        -: 1548:#endif
        -: 1549:
        -: 1550:namespace Catch {
        -: 1551:namespace Detail {
        -: 1552:
        -: 1553:extern const std::string unprintableString;
        -: 1554:
        -: 1555:std::string rawMemoryToString( const void *object, std::size_t size );
        -: 1556:
        -: 1557:template<typename T>
        -: 1558:std::string rawMemoryToString( const T& object ) {
        -: 1559:return rawMemoryToString( &object, sizeof(object) );
        -: 1560:}
        -: 1561:
        -: 1562:template<typename T>
        -: 1563:class IsStreamInsertable {
        -: 1564:template<typename Stream, typename U>
        -: 1565:static auto test(int)
        -: 1566:-> decltype(std::declval<Stream&>() << std::declval<U>(), std::true_type());
        -: 1567:
        -: 1568:template<typename, typename>
        -: 1569:static auto test(...)->std::false_type;
        -: 1570:
        -: 1571:public:
        -: 1572:static const bool value = decltype(test<std::ostream, const T&>(0))::value;
        -: 1573:};
        -: 1574:
        -: 1575:template<typename E>
        -: 1576:std::string convertUnknownEnumToString( E e );
        -: 1577:
        -: 1578:template<typename T>
        -: 1579:typename std::enable_if<
        -: 1580:!std::is_enum<T>::value && !std::is_base_of<std::exception, T>::value,
function _ZN5Catch6Detail19convertUnstreamableI12consIteratorIiEEENSt9enable_ifIXaantsrSt7is_enumIT_E5valuentsrSt10is_base_ofISt9exceptionS6_E5valueENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4typeERKS6_ called 0 returned 0% blocks executed 0%
    #####: 1581:std::string>::type convertUnstreamable( T const& ) {
    #####: 1582:return Detail::unprintableString;
    %%%%%: 1582-block  0
call    0 never executed
        -: 1583:}
        -: 1584:template<typename T>
        -: 1585:typename std::enable_if<
        -: 1586:!std::is_enum<T>::value && std::is_base_of<std::exception, T>::value,
        -: 1587:std::string>::type convertUnstreamable(T const& ex) {
        -: 1588:return ex.what();
        -: 1589:}
        -: 1590:
        -: 1591:template<typename T>
        -: 1592:typename std::enable_if<
        -: 1593:std::is_enum<T>::value
        -: 1594:, std::string>::type convertUnstreamable( T const& value ) {
        -: 1595:return convertUnknownEnumToString( value );
        -: 1596:}
        -: 1597:
        -: 1598:#if defined(_MANAGED)
        -: 1599://! Convert a CLR string to a utf8 std::string
        -: 1600:template<typename T>
        -: 1601:std::string clrReferenceToString( T^ ref ) {
        -: 1602:if (ref == nullptr)
        -: 1603:return std::string("null");
        -: 1604:auto bytes = System::Text::Encoding::UTF8->GetBytes(ref->ToString());
        -: 1605:cli::pin_ptr<System::Byte> p = &bytes[0];
        -: 1606:return std::string(reinterpret_cast<char const *>(p), bytes->Length);
        -: 1607:}
        -: 1608:#endif
        -: 1609:
        -: 1610:} // namespace Detail
        -: 1611:
        -: 1612:// If we decide for C++14, change these to enable_if_ts
        -: 1613:template <typename T, typename = void>
        -: 1614:struct StringMaker {
        -: 1615:template <typename Fake = T>
        -: 1616:static
        -: 1617:typename std::enable_if<::Catch::Detail::IsStreamInsertable<Fake>::value, std::string>::type
function _ZN5Catch11StringMakerINS_14SourceLineInfoEvE7convertIS1_EENSt9enable_ifIXsrNS_6Detail18IsStreamInsertableIT_EE5valueENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4typeERKS7_ called 0 returned 0% blocks executed 0%
    #####: 1618:convert(const Fake& value) {
    #####: 1619:ReusableStringStream rss;
    %%%%%: 1619-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1619-block  1
call    3 never executed
    $$$$$: 1619-block  2
call    4 never executed
        -: 1620:// NB: call using the function-like syntax to avoid ambiguity with
        -: 1621:// user-defined templated operator<< under clang.
    #####: 1622:rss.operator<<(value);
    %%%%%: 1622-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1623:return rss.str();
    %%%%%: 1623-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1623-block  1
    %%%%%: 1623-block  2
        -: 1624:}
        -: 1625:
        -: 1626:template <typename Fake = T>
        -: 1627:static
        -: 1628:typename std::enable_if<!::Catch::Detail::IsStreamInsertable<Fake>::value, std::string>::type
function _ZN5Catch11StringMakerI12consIteratorIiEvE7convertIS2_EENSt9enable_ifIXntsrNS_6Detail18IsStreamInsertableIT_EE5valueENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4typeERKS8_ called 0 returned 0% blocks executed 0%
    #####: 1629:convert( const Fake& value ) {
        -: 1630:#if !defined(CATCH_CONFIG_FALLBACK_STRINGIFIER)
    #####: 1631:return Detail::convertUnstreamable(value);
    %%%%%: 1631-block  0
call    0 never executed
        -: 1632:#else
        -: 1633:return CATCH_CONFIG_FALLBACK_STRINGIFIER(value);
        -: 1634:#endif
        -: 1635:}
        -: 1636:};
        -: 1637:
        -: 1638:namespace Detail {
        -: 1639:
        -: 1640:// This function dispatches all stringification requests inside of Catch.
        -: 1641:// Should be preferably called fully qualified, like ::Catch::Detail::stringify
        -: 1642:template <typename T>
    #####: 1643:std::string stringify(const T& e) {
    #####: 1644:return ::Catch::StringMaker<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::convert(e);
        -: 1645:}
------------------
_ZN5Catch6Detail9stringifyIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch6Detail9stringifyIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 1643:std::string stringify(const T& e) {
    #####: 1644:return ::Catch::StringMaker<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::convert(e);
    %%%%%: 1644-block  0
call    0 never executed
        -: 1645:}
------------------
_ZN5Catch6Detail9stringifyI12consIteratorIiEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch6Detail9stringifyI12consIteratorIiEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 1643:std::string stringify(const T& e) {
    #####: 1644:return ::Catch::StringMaker<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::convert(e);
    %%%%%: 1644-block  0
call    0 never executed
        -: 1645:}
------------------
_ZN5Catch6Detail9stringifyIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch6Detail9stringifyIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 1643:std::string stringify(const T& e) {
    #####: 1644:return ::Catch::StringMaker<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::convert(e);
    %%%%%: 1644-block  0
call    0 never executed
        -: 1645:}
------------------
_ZN5Catch6Detail9stringifyIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch6Detail9stringifyIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 1643:std::string stringify(const T& e) {
    #####: 1644:return ::Catch::StringMaker<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::convert(e);
    %%%%%: 1644-block  0
call    0 never executed
        -: 1645:}
------------------
_ZN5Catch6Detail9stringifyIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch6Detail9stringifyIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 1643:std::string stringify(const T& e) {
    #####: 1644:return ::Catch::StringMaker<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::convert(e);
    %%%%%: 1644-block  0
call    0 never executed
        -: 1645:}
------------------
_ZN5Catch6Detail9stringifyIxEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch6Detail9stringifyIxEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 1643:std::string stringify(const T& e) {
    #####: 1644:return ::Catch::StringMaker<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::convert(e);
    %%%%%: 1644-block  0
call    0 never executed
        -: 1645:}
------------------
_ZN5Catch6Detail9stringifyIyEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch6Detail9stringifyIyEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 1643:std::string stringify(const T& e) {
    #####: 1644:return ::Catch::StringMaker<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::convert(e);
    %%%%%: 1644-block  0
call    0 never executed
        -: 1645:}
------------------
_ZN5Catch6Detail9stringifyINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS3_IcS4_IcESaIcEEERKT_:
function _ZN5Catch6Detail9stringifyINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS3_IcS4_IcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 1643:std::string stringify(const T& e) {
    #####: 1644:return ::Catch::StringMaker<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::convert(e);
    %%%%%: 1644-block  0
call    0 never executed
        -: 1645:}
------------------
_ZN5Catch6Detail9stringifyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES7_RKT_:
function _ZN5Catch6Detail9stringifyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES7_RKT_ called 0 returned 0% blocks executed 0%
    #####: 1643:std::string stringify(const T& e) {
    #####: 1644:return ::Catch::StringMaker<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::convert(e);
    %%%%%: 1644-block  0
call    0 never executed
        -: 1645:}
------------------
_ZN5Catch6Detail9stringifyINS_14SourceLineInfoEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch6Detail9stringifyINS_14SourceLineInfoEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 1643:std::string stringify(const T& e) {
    #####: 1644:return ::Catch::StringMaker<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::convert(e);
    %%%%%: 1644-block  0
call    0 never executed
        -: 1645:}
------------------
_ZN5Catch6Detail9stringifyIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch6Detail9stringifyIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 1643:std::string stringify(const T& e) {
    #####: 1644:return ::Catch::StringMaker<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::convert(e);
    %%%%%: 1644-block  0
call    0 never executed
        -: 1645:}
------------------
        -: 1646:
        -: 1647:template<typename E>
        -: 1648:std::string convertUnknownEnumToString( E e ) {
        -: 1649:return ::Catch::Detail::stringify(static_cast<typename std::underlying_type<E>::type>(e));
        -: 1650:}
        -: 1651:
        -: 1652:#if defined(_MANAGED)
        -: 1653:template <typename T>
        -: 1654:std::string stringify( T^ e ) {
        -: 1655:return ::Catch::StringMaker<T^>::convert(e);
        -: 1656:}
        -: 1657:#endif
        -: 1658:
        -: 1659:} // namespace Detail
        -: 1660:
        -: 1661:// Some predefined specializations
        -: 1662:
        -: 1663:template<>
        -: 1664:struct StringMaker<std::string> {
        -: 1665:static std::string convert(const std::string& str);
        -: 1666:};
        -: 1667:
        -: 1668:#ifdef CATCH_CONFIG_CPP17_STRING_VIEW
        -: 1669:template<>
        -: 1670:struct StringMaker<std::string_view> {
        -: 1671:static std::string convert(std::string_view str);
        -: 1672:};
        -: 1673:#endif
        -: 1674:
        -: 1675:template<>
        -: 1676:struct StringMaker<char const *> {
        -: 1677:static std::string convert(char const * str);
        -: 1678:};
        -: 1679:template<>
        -: 1680:struct StringMaker<char *> {
        -: 1681:static std::string convert(char * str);
        -: 1682:};
        -: 1683:
        -: 1684:#ifdef CATCH_CONFIG_WCHAR
        -: 1685:template<>
        -: 1686:struct StringMaker<std::wstring> {
        -: 1687:static std::string convert(const std::wstring& wstr);
        -: 1688:};
        -: 1689:
        -: 1690:# ifdef CATCH_CONFIG_CPP17_STRING_VIEW
        -: 1691:template<>
        -: 1692:struct StringMaker<std::wstring_view> {
        -: 1693:static std::string convert(std::wstring_view str);
        -: 1694:};
        -: 1695:# endif
        -: 1696:
        -: 1697:template<>
        -: 1698:struct StringMaker<wchar_t const *> {
        -: 1699:static std::string convert(wchar_t const * str);
        -: 1700:};
        -: 1701:template<>
        -: 1702:struct StringMaker<wchar_t *> {
        -: 1703:static std::string convert(wchar_t * str);
        -: 1704:};
        -: 1705:#endif
        -: 1706:
        -: 1707:// TBD: Should we use `strnlen` to ensure that we don't go out of the buffer,
        -: 1708://      while keeping string semantics?
        -: 1709:template<int SZ>
        -: 1710:struct StringMaker<char[SZ]> {
        -: 1711:static std::string convert(char const* str) {
        -: 1712:return ::Catch::Detail::stringify(std::string{ str });
        -: 1713:}
        -: 1714:};
        -: 1715:template<int SZ>
        -: 1716:struct StringMaker<signed char[SZ]> {
        -: 1717:static std::string convert(signed char const* str) {
        -: 1718:return ::Catch::Detail::stringify(std::string{ reinterpret_cast<char const *>(str) });
        -: 1719:}
        -: 1720:};
        -: 1721:template<int SZ>
        -: 1722:struct StringMaker<unsigned char[SZ]> {
        -: 1723:static std::string convert(unsigned char const* str) {
        -: 1724:return ::Catch::Detail::stringify(std::string{ reinterpret_cast<char const *>(str) });
        -: 1725:}
        -: 1726:};
        -: 1727:
        -: 1728:#if defined(CATCH_CONFIG_CPP17_BYTE)
        -: 1729:template<>
        -: 1730:struct StringMaker<std::byte> {
        -: 1731:static std::string convert(std::byte value);
        -: 1732:};
        -: 1733:#endif // defined(CATCH_CONFIG_CPP17_BYTE)
        -: 1734:template<>
        -: 1735:struct StringMaker<int> {
        -: 1736:static std::string convert(int value);
        -: 1737:};
        -: 1738:template<>
        -: 1739:struct StringMaker<long> {
        -: 1740:static std::string convert(long value);
        -: 1741:};
        -: 1742:template<>
        -: 1743:struct StringMaker<long long> {
        -: 1744:static std::string convert(long long value);
        -: 1745:};
        -: 1746:template<>
        -: 1747:struct StringMaker<unsigned int> {
        -: 1748:static std::string convert(unsigned int value);
        -: 1749:};
        -: 1750:template<>
        -: 1751:struct StringMaker<unsigned long> {
        -: 1752:static std::string convert(unsigned long value);
        -: 1753:};
        -: 1754:template<>
        -: 1755:struct StringMaker<unsigned long long> {
        -: 1756:static std::string convert(unsigned long long value);
        -: 1757:};
        -: 1758:
        -: 1759:template<>
        -: 1760:struct StringMaker<bool> {
        -: 1761:static std::string convert(bool b);
        -: 1762:};
        -: 1763:
        -: 1764:template<>
        -: 1765:struct StringMaker<char> {
        -: 1766:static std::string convert(char c);
        -: 1767:};
        -: 1768:template<>
        -: 1769:struct StringMaker<signed char> {
        -: 1770:static std::string convert(signed char c);
        -: 1771:};
        -: 1772:template<>
        -: 1773:struct StringMaker<unsigned char> {
        -: 1774:static std::string convert(unsigned char c);
        -: 1775:};
        -: 1776:
        -: 1777:template<>
        -: 1778:struct StringMaker<std::nullptr_t> {
        -: 1779:static std::string convert(std::nullptr_t);
        -: 1780:};
        -: 1781:
        -: 1782:template<>
        -: 1783:struct StringMaker<float> {
        -: 1784:static std::string convert(float value);
        -: 1785:static int precision;
        -: 1786:};
        -: 1787:
        -: 1788:template<>
        -: 1789:struct StringMaker<double> {
        -: 1790:static std::string convert(double value);
        -: 1791:static int precision;
        -: 1792:};
        -: 1793:
        -: 1794:template <typename T>
        -: 1795:struct StringMaker<T*> {
        -: 1796:template <typename U>
        -: 1797:static std::string convert(U* p) {
        -: 1798:if (p) {
        -: 1799:return ::Catch::Detail::rawMemoryToString(p);
        -: 1800:} else {
        -: 1801:return "nullptr";
        -: 1802:}
        -: 1803:}
        -: 1804:};
        -: 1805:
        -: 1806:template <typename R, typename C>
        -: 1807:struct StringMaker<R C::*> {
        -: 1808:static std::string convert(R C::* p) {
        -: 1809:if (p) {
        -: 1810:return ::Catch::Detail::rawMemoryToString(p);
        -: 1811:} else {
        -: 1812:return "nullptr";
        -: 1813:}
        -: 1814:}
        -: 1815:};
        -: 1816:
        -: 1817:#if defined(_MANAGED)
        -: 1818:template <typename T>
        -: 1819:struct StringMaker<T^> {
        -: 1820:static std::string convert( T^ ref ) {
        -: 1821:return ::Catch::Detail::clrReferenceToString(ref);
        -: 1822:}
        -: 1823:};
        -: 1824:#endif
        -: 1825:
        -: 1826:namespace Detail {
        -: 1827:template<typename InputIterator>
        -: 1828:std::string rangeToString(InputIterator first, InputIterator last) {
        -: 1829:ReusableStringStream rss;
        -: 1830:rss << "{ ";
        -: 1831:if (first != last) {
        -: 1832:rss << ::Catch::Detail::stringify(*first);
        -: 1833:for (++first; first != last; ++first)
        -: 1834:rss << ", " << ::Catch::Detail::stringify(*first);
        -: 1835:}
        -: 1836:rss << " }";
        -: 1837:return rss.str();
        -: 1838:}
        -: 1839:}
        -: 1840:
        -: 1841:#ifdef __OBJC__
        -: 1842:template<>
        -: 1843:struct StringMaker<NSString*> {
        -: 1844:static std::string convert(NSString * nsstring) {
        -: 1845:if (!nsstring)
        -: 1846:return "nil";
        -: 1847:return std::string("@") + [nsstring UTF8String];
        -: 1848:}
        -: 1849:};
        -: 1850:template<>
        -: 1851:struct StringMaker<NSObject*> {
        -: 1852:static std::string convert(NSObject* nsObject) {
        -: 1853:return ::Catch::Detail::stringify([nsObject description]);
        -: 1854:}
        -: 1855:
        -: 1856:};
        -: 1857:namespace Detail {
        -: 1858:inline std::string stringify( NSString* nsstring ) {
        -: 1859:return StringMaker<NSString*>::convert( nsstring );
        -: 1860:}
        -: 1861:
        -: 1862:} // namespace Detail
        -: 1863:#endif // __OBJC__
        -: 1864:
        -: 1865:} // namespace Catch
        -: 1866:
        -: 1867://////////////////////////////////////////////////////
        -: 1868:// Separate std-lib types stringification, so it can be selectively enabled
        -: 1869:// This means that we do not bring in
        -: 1870:
        -: 1871:#if defined(CATCH_CONFIG_ENABLE_ALL_STRINGMAKERS)
        -: 1872:#  define CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER
        -: 1873:#  define CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER
        -: 1874:#  define CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER
        -: 1875:#  define CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER
        -: 1876:#  define CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER
        -: 1877:#endif
        -: 1878:
        -: 1879:// Separate std::pair specialization
        -: 1880:#if defined(CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER)
        -: 1881:#include <utility>
        -: 1882:namespace Catch {
        -: 1883:template<typename T1, typename T2>
        -: 1884:struct StringMaker<std::pair<T1, T2> > {
        -: 1885:static std::string convert(const std::pair<T1, T2>& pair) {
        -: 1886:ReusableStringStream rss;
        -: 1887:rss << "{ "
        -: 1888:<< ::Catch::Detail::stringify(pair.first)
        -: 1889:<< ", "
        -: 1890:<< ::Catch::Detail::stringify(pair.second)
        -: 1891:<< " }";
        -: 1892:return rss.str();
        -: 1893:}
        -: 1894:};
        -: 1895:}
        -: 1896:#endif // CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER
        -: 1897:
        -: 1898:#if defined(CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER) && defined(CATCH_CONFIG_CPP17_OPTIONAL)
        -: 1899:#include <optional>
        -: 1900:namespace Catch {
        -: 1901:template<typename T>
        -: 1902:struct StringMaker<std::optional<T> > {
        -: 1903:static std::string convert(const std::optional<T>& optional) {
        -: 1904:ReusableStringStream rss;
        -: 1905:if (optional.has_value()) {
        -: 1906:rss << ::Catch::Detail::stringify(*optional);
        -: 1907:} else {
        -: 1908:rss << "{ }";
        -: 1909:}
        -: 1910:return rss.str();
        -: 1911:}
        -: 1912:};
        -: 1913:}
        -: 1914:#endif // CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER
        -: 1915:
        -: 1916:// Separate std::tuple specialization
        -: 1917:#if defined(CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER)
        -: 1918:#include <tuple>
        -: 1919:namespace Catch {
        -: 1920:namespace Detail {
        -: 1921:template<
        -: 1922:typename Tuple,
        -: 1923:std::size_t N = 0,
        -: 1924:bool = (N < std::tuple_size<Tuple>::value)
        -: 1925:>
        -: 1926:struct TupleElementPrinter {
        -: 1927:static void print(const Tuple& tuple, std::ostream& os) {
        -: 1928:os << (N ? ", " : " ")
        -: 1929:<< ::Catch::Detail::stringify(std::get<N>(tuple));
        -: 1930:TupleElementPrinter<Tuple, N + 1>::print(tuple, os);
        -: 1931:}
        -: 1932:};
        -: 1933:
        -: 1934:template<
        -: 1935:typename Tuple,
        -: 1936:std::size_t N
        -: 1937:>
        -: 1938:struct TupleElementPrinter<Tuple, N, false> {
        -: 1939:static void print(const Tuple&, std::ostream&) {}
        -: 1940:};
        -: 1941:
        -: 1942:}
        -: 1943:
        -: 1944:template<typename ...Types>
        -: 1945:struct StringMaker<std::tuple<Types...>> {
        -: 1946:static std::string convert(const std::tuple<Types...>& tuple) {
        -: 1947:ReusableStringStream rss;
        -: 1948:rss << '{';
        -: 1949:Detail::TupleElementPrinter<std::tuple<Types...>>::print(tuple, rss.get());
        -: 1950:rss << " }";
        -: 1951:return rss.str();
        -: 1952:}
        -: 1953:};
        -: 1954:}
        -: 1955:#endif // CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER
        -: 1956:
        -: 1957:#if defined(CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER) && defined(CATCH_CONFIG_CPP17_VARIANT)
        -: 1958:#include <variant>
        -: 1959:namespace Catch {
        -: 1960:template<>
        -: 1961:struct StringMaker<std::monostate> {
        -: 1962:static std::string convert(const std::monostate&) {
        -: 1963:return "{ }";
        -: 1964:}
        -: 1965:};
        -: 1966:
        -: 1967:template<typename... Elements>
        -: 1968:struct StringMaker<std::variant<Elements...>> {
        -: 1969:static std::string convert(const std::variant<Elements...>& variant) {
        -: 1970:if (variant.valueless_by_exception()) {
        -: 1971:return "{valueless variant}";
        -: 1972:} else {
        -: 1973:return std::visit(
        -: 1974:[](const auto& value) {
        -: 1975:return ::Catch::Detail::stringify(value);
        -: 1976:},
        -: 1977:variant
        -: 1978:);
        -: 1979:}
        -: 1980:}
        -: 1981:};
        -: 1982:}
        -: 1983:#endif // CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER
        -: 1984:
        -: 1985:namespace Catch {
        -: 1986:struct not_this_one {}; // Tag type for detecting which begin/ end are being selected
        -: 1987:
        -: 1988:// Import begin/ end from std here so they are considered alongside the fallback (...) overloads in this namespace
        -: 1989:using std::begin;
        -: 1990:using std::end;
        -: 1991:
        -: 1992:not_this_one begin( ... );
        -: 1993:not_this_one end( ... );
        -: 1994:
        -: 1995:template <typename T>
        -: 1996:struct is_range {
        -: 1997:static const bool value =
        -: 1998:!std::is_same<decltype(begin(std::declval<T>())), not_this_one>::value &&
        -: 1999:!std::is_same<decltype(end(std::declval<T>())), not_this_one>::value;
        -: 2000:};
        -: 2001:
        -: 2002:#if defined(_MANAGED) // Managed types are never ranges
        -: 2003:template <typename T>
        -: 2004:struct is_range<T^> {
        -: 2005:static const bool value = false;
        -: 2006:};
        -: 2007:#endif
        -: 2008:
        -: 2009:template<typename Range>
        -: 2010:std::string rangeToString( Range const& range ) {
        -: 2011:return ::Catch::Detail::rangeToString( begin( range ), end( range ) );
        -: 2012:}
        -: 2013:
        -: 2014:// Handle vector<bool> specially
        -: 2015:template<typename Allocator>
        -: 2016:std::string rangeToString( std::vector<bool, Allocator> const& v ) {
        -: 2017:ReusableStringStream rss;
        -: 2018:rss << "{ ";
        -: 2019:bool first = true;
        -: 2020:for( bool b : v ) {
        -: 2021:if( first )
        -: 2022:first = false;
        -: 2023:else
        -: 2024:rss << ", ";
        -: 2025:rss << ::Catch::Detail::stringify( b );
        -: 2026:}
        -: 2027:rss << " }";
        -: 2028:return rss.str();
        -: 2029:}
        -: 2030:
        -: 2031:template<typename R>
        -: 2032:struct StringMaker<R, typename std::enable_if<is_range<R>::value && !::Catch::Detail::IsStreamInsertable<R>::value>::type> {
        -: 2033:static std::string convert( R const& range ) {
        -: 2034:return rangeToString( range );
        -: 2035:}
        -: 2036:};
        -: 2037:
        -: 2038:template <typename T, int SZ>
        -: 2039:struct StringMaker<T[SZ]> {
        -: 2040:static std::string convert(T const(&arr)[SZ]) {
        -: 2041:return rangeToString(arr);
        -: 2042:}
        -: 2043:};
        -: 2044:
        -: 2045:} // namespace Catch
        -: 2046:
        -: 2047:// Separate std::chrono::duration specialization
        -: 2048:#if defined(CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER)
        -: 2049:#include <ctime>
        -: 2050:#include <ratio>
        -: 2051:#include <chrono>
        -: 2052:
        -: 2053:namespace Catch {
        -: 2054:
        -: 2055:template <class Ratio>
        -: 2056:struct ratio_string {
        -: 2057:static std::string symbol();
        -: 2058:};
        -: 2059:
        -: 2060:template <class Ratio>
        -: 2061:std::string ratio_string<Ratio>::symbol() {
        -: 2062:Catch::ReusableStringStream rss;
        -: 2063:rss << '[' << Ratio::num << '/'
        -: 2064:<< Ratio::den << ']';
        -: 2065:return rss.str();
        -: 2066:}
        -: 2067:template <>
        -: 2068:struct ratio_string<std::atto> {
        -: 2069:static std::string symbol();
        -: 2070:};
        -: 2071:template <>
        -: 2072:struct ratio_string<std::femto> {
        -: 2073:static std::string symbol();
        -: 2074:};
        -: 2075:template <>
        -: 2076:struct ratio_string<std::pico> {
        -: 2077:static std::string symbol();
        -: 2078:};
        -: 2079:template <>
        -: 2080:struct ratio_string<std::nano> {
        -: 2081:static std::string symbol();
        -: 2082:};
        -: 2083:template <>
        -: 2084:struct ratio_string<std::micro> {
        -: 2085:static std::string symbol();
        -: 2086:};
        -: 2087:template <>
        -: 2088:struct ratio_string<std::milli> {
        -: 2089:static std::string symbol();
        -: 2090:};
        -: 2091:
        -: 2092:////////////
        -: 2093:// std::chrono::duration specializations
        -: 2094:template<typename Value, typename Ratio>
        -: 2095:struct StringMaker<std::chrono::duration<Value, Ratio>> {
        -: 2096:static std::string convert(std::chrono::duration<Value, Ratio> const& duration) {
        -: 2097:ReusableStringStream rss;
        -: 2098:rss << duration.count() << ' ' << ratio_string<Ratio>::symbol() << 's';
        -: 2099:return rss.str();
        -: 2100:}
        -: 2101:};
        -: 2102:template<typename Value>
        -: 2103:struct StringMaker<std::chrono::duration<Value, std::ratio<1>>> {
        -: 2104:static std::string convert(std::chrono::duration<Value, std::ratio<1>> const& duration) {
        -: 2105:ReusableStringStream rss;
        -: 2106:rss << duration.count() << " s";
        -: 2107:return rss.str();
        -: 2108:}
        -: 2109:};
        -: 2110:template<typename Value>
        -: 2111:struct StringMaker<std::chrono::duration<Value, std::ratio<60>>> {
        -: 2112:static std::string convert(std::chrono::duration<Value, std::ratio<60>> const& duration) {
        -: 2113:ReusableStringStream rss;
        -: 2114:rss << duration.count() << " m";
        -: 2115:return rss.str();
        -: 2116:}
        -: 2117:};
        -: 2118:template<typename Value>
        -: 2119:struct StringMaker<std::chrono::duration<Value, std::ratio<3600>>> {
        -: 2120:static std::string convert(std::chrono::duration<Value, std::ratio<3600>> const& duration) {
        -: 2121:ReusableStringStream rss;
        -: 2122:rss << duration.count() << " h";
        -: 2123:return rss.str();
        -: 2124:}
        -: 2125:};
        -: 2126:
        -: 2127:////////////
        -: 2128:// std::chrono::time_point specialization
        -: 2129:// Generic time_point cannot be specialized, only std::chrono::time_point<system_clock>
        -: 2130:template<typename Clock, typename Duration>
        -: 2131:struct StringMaker<std::chrono::time_point<Clock, Duration>> {
        -: 2132:static std::string convert(std::chrono::time_point<Clock, Duration> const& time_point) {
        -: 2133:return ::Catch::Detail::stringify(time_point.time_since_epoch()) + " since epoch";
        -: 2134:}
        -: 2135:};
        -: 2136:// std::chrono::time_point<system_clock> specialization
        -: 2137:template<typename Duration>
        -: 2138:struct StringMaker<std::chrono::time_point<std::chrono::system_clock, Duration>> {
        -: 2139:static std::string convert(std::chrono::time_point<std::chrono::system_clock, Duration> const& time_point) {
        -: 2140:auto converted = std::chrono::system_clock::to_time_t(time_point);
        -: 2141:
        -: 2142:#ifdef _MSC_VER
        -: 2143:std::tm timeInfo = {};
        -: 2144:gmtime_s(&timeInfo, &converted);
        -: 2145:#else
        -: 2146:std::tm* timeInfo = std::gmtime(&converted);
        -: 2147:#endif
        -: 2148:
        -: 2149:auto const timeStampSize = sizeof("2017-01-16T17:06:45Z");
        -: 2150:char timeStamp[timeStampSize];
        -: 2151:const char * const fmt = "%Y-%m-%dT%H:%M:%SZ";
        -: 2152:
        -: 2153:#ifdef _MSC_VER
        -: 2154:std::strftime(timeStamp, timeStampSize, fmt, &timeInfo);
        -: 2155:#else
        -: 2156:std::strftime(timeStamp, timeStampSize, fmt, timeInfo);
        -: 2157:#endif
        -: 2158:return std::string(timeStamp);
        -: 2159:}
        -: 2160:};
        -: 2161:}
        -: 2162:#endif // CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER
        -: 2163:
        -: 2164:#define INTERNAL_CATCH_REGISTER_ENUM( enumName, ... ) \
        -: 2165:namespace Catch { \
        -: 2166:    template<> struct StringMaker<enumName> { \
        -: 2167:        static std::string convert( enumName value ) { \
        -: 2168:            static const auto& enumInfo = ::Catch::getMutableRegistryHub().getMutableEnumValuesRegistry().registerEnum( #enumName, #__VA_ARGS__, { __VA_ARGS__ } ); \
        -: 2169:            return static_cast<std::string>(enumInfo.lookup( static_cast<int>( value ) )); \
        -: 2170:        } \
        -: 2171:    }; \
        -: 2172:}
        -: 2173:
        -: 2174:#define CATCH_REGISTER_ENUM( enumName, ... ) INTERNAL_CATCH_REGISTER_ENUM( enumName, __VA_ARGS__ )
        -: 2175:
        -: 2176:#ifdef _MSC_VER
        -: 2177:#pragma warning(pop)
        -: 2178:#endif
        -: 2179:
        -: 2180:// end catch_tostring.h
        -: 2181:#include <iosfwd>
        -: 2182:
        -: 2183:#ifdef _MSC_VER
        -: 2184:#pragma warning(push)
        -: 2185:#pragma warning(disable:4389) // '==' : signed/unsigned mismatch
        -: 2186:#pragma warning(disable:4018) // more "signed/unsigned mismatch"
        -: 2187:#pragma warning(disable:4312) // Converting int to T* using reinterpret_cast (issue on x64 platform)
        -: 2188:#pragma warning(disable:4180) // qualifier applied to function type has no meaning
        -: 2189:#pragma warning(disable:4800) // Forcing result to true or false
        -: 2190:#endif
        -: 2191:
        -: 2192:namespace Catch {
        -: 2193:
      51*: 2194:struct ITransientExpression {
------------------
_ZN5Catch20ITransientExpressionD0Ev:
function _ZN5Catch20ITransientExpressionD0Ev called 0 returned 0% blocks executed 0%
    #####: 2194:struct ITransientExpression {
    %%%%%: 2194-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch20ITransientExpressionD2Ev:
function _ZN5Catch20ITransientExpressionD2Ev called 51 returned 100% blocks executed 100%
       51: 2194:struct ITransientExpression {
------------------
function _ZNK5Catch20ITransientExpression18isBinaryExpressionEv called 0 returned 0% blocks executed 0%
    #####: 2195:auto isBinaryExpression() const -> bool { return m_isBinaryExpression; }
    %%%%%: 2195-block  0
function _ZNK5Catch20ITransientExpression9getResultEv called 51 returned 100% blocks executed 100%
       51: 2196:auto getResult() const -> bool { return m_result; }
       51: 2196-block  0
        -: 2197:virtual void streamReconstructedExpression( std::ostream &os ) const = 0;
        -: 2198:
function _ZN5Catch20ITransientExpressionC2Ebb called 51 returned 100% blocks executed 100%
       51: 2199:ITransientExpression( bool isBinaryExpression, bool result )
       51: 2200::   m_isBinaryExpression( isBinaryExpression ),
       51: 2201:m_result( result )
       51: 2202:{}
        -: 2203:
        -: 2204:// We don't actually need a virtual destructor, but many static analysers
        -: 2205:// complain if it's not here :-(
        -: 2206:virtual ~ITransientExpression();
        -: 2207:
        -: 2208:bool m_isBinaryExpression;
        -: 2209:bool m_result;
        -: 2210:
        -: 2211:};
        -: 2212:
        -: 2213:void formatReconstructedExpression( std::ostream &os, std::string const& lhs, StringRef op, std::string const& rhs );
        -: 2214:
        -: 2215:template<typename LhsT, typename RhsT>
        -: 2216:class BinaryExpr  : public ITransientExpression {
        -: 2217:LhsT m_lhs;
        -: 2218:StringRef m_op;
        -: 2219:RhsT m_rhs;
        -: 2220:
    #####: 2221:void streamReconstructedExpression( std::ostream &os ) const override {
        -: 2222:formatReconstructedExpression
    #####: 2223:( os, Catch::Detail::stringify( m_lhs ), m_op, Catch::Detail::stringify( m_rhs ) );
    #####: 2224:}
------------------
_ZNK5Catch10BinaryExprIRKjRKiE29streamReconstructedExpressionERSo:
function _ZNK5Catch10BinaryExprIRKjRKiE29streamReconstructedExpressionERSo called 0 returned 0% blocks executed 0%
    #####: 2221:void streamReconstructedExpression( std::ostream &os ) const override {
        -: 2222:formatReconstructedExpression
    #####: 2223:( os, Catch::Detail::stringify( m_lhs ), m_op, Catch::Detail::stringify( m_rhs ) );
    %%%%%: 2223-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2223-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2223-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2223-block  3
call   11 never executed
    $$$$$: 2223-block  4
    $$$$$: 2223-block  5
call   12 never executed
    $$$$$: 2223-block  6
    $$$$$: 2223-block  7
call   13 never executed
    #####: 2224:}
------------------
_ZNK5Catch10BinaryExprIRKjS2_E29streamReconstructedExpressionERSo:
function _ZNK5Catch10BinaryExprIRKjS2_E29streamReconstructedExpressionERSo called 0 returned 0% blocks executed 0%
    #####: 2221:void streamReconstructedExpression( std::ostream &os ) const override {
        -: 2222:formatReconstructedExpression
    #####: 2223:( os, Catch::Detail::stringify( m_lhs ), m_op, Catch::Detail::stringify( m_rhs ) );
    %%%%%: 2223-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2223-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2223-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2223-block  3
call   11 never executed
    $$$$$: 2223-block  4
    $$$$$: 2223-block  5
call   12 never executed
    $$$$$: 2223-block  6
    $$$$$: 2223-block  7
call   13 never executed
    #####: 2224:}
------------------
_ZNK5Catch10BinaryExprIRKiS2_E29streamReconstructedExpressionERSo:
function _ZNK5Catch10BinaryExprIRKiS2_E29streamReconstructedExpressionERSo called 0 returned 0% blocks executed 0%
    #####: 2221:void streamReconstructedExpression( std::ostream &os ) const override {
        -: 2222:formatReconstructedExpression
    #####: 2223:( os, Catch::Detail::stringify( m_lhs ), m_op, Catch::Detail::stringify( m_rhs ) );
    %%%%%: 2223-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2223-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2223-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2223-block  3
call   11 never executed
    $$$$$: 2223-block  4
    $$$$$: 2223-block  5
call   12 never executed
    $$$$$: 2223-block  6
    $$$$$: 2223-block  7
call   13 never executed
    #####: 2224:}
------------------
_ZNK5Catch10BinaryExprIRK12consIteratorIiES4_E29streamReconstructedExpressionERSo:
function _ZNK5Catch10BinaryExprIRK12consIteratorIiES4_E29streamReconstructedExpressionERSo called 0 returned 0% blocks executed 0%
    #####: 2221:void streamReconstructedExpression( std::ostream &os ) const override {
        -: 2222:formatReconstructedExpression
    #####: 2223:( os, Catch::Detail::stringify( m_lhs ), m_op, Catch::Detail::stringify( m_rhs ) );
    %%%%%: 2223-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2223-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2223-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2223-block  3
call   11 never executed
    $$$$$: 2223-block  4
    $$$$$: 2223-block  5
call   12 never executed
    $$$$$: 2223-block  6
    $$$$$: 2223-block  7
call   13 never executed
    #####: 2224:}
------------------
        -: 2225:
        -: 2226:public:
       51: 2227:BinaryExpr( bool comparisonResult, LhsT lhs, StringRef op, RhsT rhs )
        -: 2228::   ITransientExpression{ true, comparisonResult },
        -: 2229:m_lhs( lhs ),
        -: 2230:m_op( op ),
       51: 2231:m_rhs( rhs )
       51: 2232:{}
------------------
_ZN5Catch10BinaryExprIRK12consIteratorIiES4_EC1EbS4_NS_9StringRefES4_:
function _ZN5Catch10BinaryExprIRK12consIteratorIiES4_EC1EbS4_NS_9StringRefES4_ called 2 returned 100% blocks executed 100%
        2: 2227:BinaryExpr( bool comparisonResult, LhsT lhs, StringRef op, RhsT rhs )
        -: 2228::   ITransientExpression{ true, comparisonResult },
        -: 2229:m_lhs( lhs ),
        -: 2230:m_op( op ),
        2: 2231:m_rhs( rhs )
        2: 2231-block  0
call    0 returned 2
call    1 returned 2
        2: 2232:{}
------------------
_ZN5Catch10BinaryExprIRKiS2_EC1EbS2_NS_9StringRefES2_:
function _ZN5Catch10BinaryExprIRKiS2_EC1EbS2_NS_9StringRefES2_ called 42 returned 100% blocks executed 100%
       42: 2227:BinaryExpr( bool comparisonResult, LhsT lhs, StringRef op, RhsT rhs )
        -: 2228::   ITransientExpression{ true, comparisonResult },
        -: 2229:m_lhs( lhs ),
        -: 2230:m_op( op ),
       42: 2231:m_rhs( rhs )
       42: 2231-block  0
call    0 returned 42
call    1 returned 42
       42: 2232:{}
------------------
_ZN5Catch10BinaryExprIRKjS2_EC1EbS2_NS_9StringRefES2_:
function _ZN5Catch10BinaryExprIRKjS2_EC1EbS2_NS_9StringRefES2_ called 1 returned 100% blocks executed 100%
        1: 2227:BinaryExpr( bool comparisonResult, LhsT lhs, StringRef op, RhsT rhs )
        -: 2228::   ITransientExpression{ true, comparisonResult },
        -: 2229:m_lhs( lhs ),
        -: 2230:m_op( op ),
        1: 2231:m_rhs( rhs )
        1: 2231-block  0
call    0 returned 1
call    1 returned 1
        1: 2232:{}
------------------
_ZN5Catch10BinaryExprIRKjRKiEC1EbS2_NS_9StringRefES4_:
function _ZN5Catch10BinaryExprIRKjRKiEC1EbS2_NS_9StringRefES4_ called 6 returned 100% blocks executed 100%
        6: 2227:BinaryExpr( bool comparisonResult, LhsT lhs, StringRef op, RhsT rhs )
        -: 2228::   ITransientExpression{ true, comparisonResult },
        -: 2229:m_lhs( lhs ),
        -: 2230:m_op( op ),
        6: 2231:m_rhs( rhs )
        6: 2231-block  0
call    0 returned 6
call    1 returned 6
        6: 2232:{}
------------------
        -: 2233:
        -: 2234:template<typename T>
        -: 2235:auto operator && ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {
        -: 2236:static_assert(always_false<T>::value,
        -: 2237:"chained comparisons are not supported inside assertions, "
        -: 2238:"wrap the expression inside parentheses, or decompose it");
        -: 2239:}
        -: 2240:
        -: 2241:template<typename T>
        -: 2242:auto operator || ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {
        -: 2243:static_assert(always_false<T>::value,
        -: 2244:"chained comparisons are not supported inside assertions, "
        -: 2245:"wrap the expression inside parentheses, or decompose it");
        -: 2246:}
        -: 2247:
        -: 2248:template<typename T>
        -: 2249:auto operator == ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {
        -: 2250:static_assert(always_false<T>::value,
        -: 2251:"chained comparisons are not supported inside assertions, "
        -: 2252:"wrap the expression inside parentheses, or decompose it");
        -: 2253:}
        -: 2254:
        -: 2255:template<typename T>
        -: 2256:auto operator != ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {
        -: 2257:static_assert(always_false<T>::value,
        -: 2258:"chained comparisons are not supported inside assertions, "
        -: 2259:"wrap the expression inside parentheses, or decompose it");
        -: 2260:}
        -: 2261:
        -: 2262:template<typename T>
        -: 2263:auto operator > ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {
        -: 2264:static_assert(always_false<T>::value,
        -: 2265:"chained comparisons are not supported inside assertions, "
        -: 2266:"wrap the expression inside parentheses, or decompose it");
        -: 2267:}
        -: 2268:
        -: 2269:template<typename T>
        -: 2270:auto operator < ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {
        -: 2271:static_assert(always_false<T>::value,
        -: 2272:"chained comparisons are not supported inside assertions, "
        -: 2273:"wrap the expression inside parentheses, or decompose it");
        -: 2274:}
        -: 2275:
        -: 2276:template<typename T>
        -: 2277:auto operator >= ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {
        -: 2278:static_assert(always_false<T>::value,
        -: 2279:"chained comparisons are not supported inside assertions, "
        -: 2280:"wrap the expression inside parentheses, or decompose it");
        -: 2281:}
        -: 2282:
        -: 2283:template<typename T>
        -: 2284:auto operator <= ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {
        -: 2285:static_assert(always_false<T>::value,
        -: 2286:"chained comparisons are not supported inside assertions, "
        -: 2287:"wrap the expression inside parentheses, or decompose it");
        -: 2288:}
        -: 2289:};
        -: 2290:
        -: 2291:template<typename LhsT>
        -: 2292:class UnaryExpr : public ITransientExpression {
        -: 2293:LhsT m_lhs;
        -: 2294:
        -: 2295:void streamReconstructedExpression( std::ostream &os ) const override {
        -: 2296:os << Catch::Detail::stringify( m_lhs );
        -: 2297:}
        -: 2298:
        -: 2299:public:
        -: 2300:explicit UnaryExpr( LhsT lhs )
        -: 2301::   ITransientExpression{ false, static_cast<bool>(lhs) },
        -: 2302:m_lhs( lhs )
        -: 2303:{}
        -: 2304:};
        -: 2305:
        -: 2306:// Specialised comparison functions to handle equality comparisons between ints and pointers (NULL deduces as an int)
        -: 2307:template<typename LhsT, typename RhsT>
       50: 2308:auto compareEqual( LhsT const& lhs, RhsT const& rhs ) -> bool { return static_cast<bool>(lhs == rhs); }
------------------
_ZN5Catch12compareEqualI12consIteratorIiES2_EEbRKT_RKT0_:
function _ZN5Catch12compareEqualI12consIteratorIiES2_EEbRKT_RKT0_ called 1 returned 100% blocks executed 100%
        1: 2308:auto compareEqual( LhsT const& lhs, RhsT const& rhs ) -> bool { return static_cast<bool>(lhs == rhs); }
        1: 2308-block  0
call    0 returned 1
------------------
_ZN5Catch12compareEqualIiiEEbRKT_RKT0_:
function _ZN5Catch12compareEqualIiiEEbRKT_RKT0_ called 42 returned 100% blocks executed 100%
       42: 2308:auto compareEqual( LhsT const& lhs, RhsT const& rhs ) -> bool { return static_cast<bool>(lhs == rhs); }
       42: 2308-block  0
------------------
_ZN5Catch12compareEqualIjjEEbRKT_RKT0_:
function _ZN5Catch12compareEqualIjjEEbRKT_RKT0_ called 1 returned 100% blocks executed 100%
        1: 2308:auto compareEqual( LhsT const& lhs, RhsT const& rhs ) -> bool { return static_cast<bool>(lhs == rhs); }
        1: 2308-block  0
------------------
_ZN5Catch12compareEqualIjiEEbRKT_RKT0_:
function _ZN5Catch12compareEqualIjiEEbRKT_RKT0_ called 6 returned 100% blocks executed 100%
        6: 2308:auto compareEqual( LhsT const& lhs, RhsT const& rhs ) -> bool { return static_cast<bool>(lhs == rhs); }
        6: 2308-block  0
------------------
        -: 2309:template<typename T>
        -: 2310:auto compareEqual( T* const& lhs, int rhs ) -> bool { return lhs == reinterpret_cast<void const*>( rhs ); }
        -: 2311:template<typename T>
        -: 2312:auto compareEqual( T* const& lhs, long rhs ) -> bool { return lhs == reinterpret_cast<void const*>( rhs ); }
        -: 2313:template<typename T>
        -: 2314:auto compareEqual( int lhs, T* const& rhs ) -> bool { return reinterpret_cast<void const*>( lhs ) == rhs; }
        -: 2315:template<typename T>
        -: 2316:auto compareEqual( long lhs, T* const& rhs ) -> bool { return reinterpret_cast<void const*>( lhs ) == rhs; }
        -: 2317:
        -: 2318:template<typename LhsT, typename RhsT>
function _ZN5Catch15compareNotEqualI12consIteratorIiERKS2_EEbRKT_OT0_ called 1 returned 100% blocks executed 100%
        1: 2319:auto compareNotEqual( LhsT const& lhs, RhsT&& rhs ) -> bool { return static_cast<bool>(lhs != rhs); }
        1: 2319-block  0
call    0 returned 1
        -: 2320:template<typename T>
        -: 2321:auto compareNotEqual( T* const& lhs, int rhs ) -> bool { return lhs != reinterpret_cast<void const*>( rhs ); }
        -: 2322:template<typename T>
        -: 2323:auto compareNotEqual( T* const& lhs, long rhs ) -> bool { return lhs != reinterpret_cast<void const*>( rhs ); }
        -: 2324:template<typename T>
        -: 2325:auto compareNotEqual( int lhs, T* const& rhs ) -> bool { return reinterpret_cast<void const*>( lhs ) != rhs; }
        -: 2326:template<typename T>
        -: 2327:auto compareNotEqual( long lhs, T* const& rhs ) -> bool { return reinterpret_cast<void const*>( lhs ) != rhs; }
        -: 2328:
        -: 2329:template<typename LhsT>
        -: 2330:class ExprLhs {
        -: 2331:LhsT m_lhs;
        -: 2332:public:
       51: 2333:explicit ExprLhs( LhsT lhs ) : m_lhs( lhs ) {}
------------------
_ZN5Catch7ExprLhsIRK12consIteratorIiEEC1ES4_:
function _ZN5Catch7ExprLhsIRK12consIteratorIiEEC1ES4_ called 2 returned 100% blocks executed 100%
        2: 2333:explicit ExprLhs( LhsT lhs ) : m_lhs( lhs ) {}
------------------
_ZN5Catch7ExprLhsIRKiEC1ES2_:
function _ZN5Catch7ExprLhsIRKiEC1ES2_ called 42 returned 100% blocks executed 100%
       42: 2333:explicit ExprLhs( LhsT lhs ) : m_lhs( lhs ) {}
------------------
_ZN5Catch7ExprLhsIRKjEC1ES2_:
function _ZN5Catch7ExprLhsIRKjEC1ES2_ called 7 returned 100% blocks executed 100%
        7: 2333:explicit ExprLhs( LhsT lhs ) : m_lhs( lhs ) {}
------------------
        -: 2334:
        -: 2335:template<typename RhsT>
       50: 2336:auto operator == ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
       50: 2337:return { compareEqual( m_lhs, rhs ), m_lhs, "==", rhs };
        -: 2338:}
------------------
_ZN5Catch7ExprLhsIRK12consIteratorIiEEeqIS2_EEKNS_10BinaryExprIS4_RKT_EESA_:
function _ZN5Catch7ExprLhsIRK12consIteratorIiEEeqIS2_EEKNS_10BinaryExprIS4_RKT_EESA_ called 1 returned 100% blocks executed 100%
        1: 2336:auto operator == ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
        1: 2337:return { compareEqual( m_lhs, rhs ), m_lhs, "==", rhs };
        1: 2337-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 2338:}
------------------
_ZN5Catch7ExprLhsIRKiEeqIiEEKNS_10BinaryExprIS2_RKT_EES8_:
function _ZN5Catch7ExprLhsIRKiEeqIiEEKNS_10BinaryExprIS2_RKT_EES8_ called 42 returned 100% blocks executed 100%
       42: 2336:auto operator == ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
       42: 2337:return { compareEqual( m_lhs, rhs ), m_lhs, "==", rhs };
       42: 2337-block  0
call    0 returned 42
call    1 returned 42
call    2 returned 42
call    3 returned 42
        -: 2338:}
------------------
_ZN5Catch7ExprLhsIRKjEeqIjEEKNS_10BinaryExprIS2_RKT_EES8_:
function _ZN5Catch7ExprLhsIRKjEeqIjEEKNS_10BinaryExprIS2_RKT_EES8_ called 1 returned 100% blocks executed 100%
        1: 2336:auto operator == ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
        1: 2337:return { compareEqual( m_lhs, rhs ), m_lhs, "==", rhs };
        1: 2337-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 2338:}
------------------
_ZN5Catch7ExprLhsIRKjEeqIiEEKNS_10BinaryExprIS2_RKT_EES8_:
function _ZN5Catch7ExprLhsIRKjEeqIiEEKNS_10BinaryExprIS2_RKT_EES8_ called 6 returned 100% blocks executed 100%
        6: 2336:auto operator == ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
        6: 2337:return { compareEqual( m_lhs, rhs ), m_lhs, "==", rhs };
        6: 2337-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
call    3 returned 6
        -: 2338:}
------------------
        -: 2339:auto operator == ( bool rhs ) -> BinaryExpr<LhsT, bool> const {
        -: 2340:return { m_lhs == rhs, m_lhs, "==", rhs };
        -: 2341:}
        -: 2342:
        -: 2343:template<typename RhsT>
function _ZN5Catch7ExprLhsIRK12consIteratorIiEEneIS2_EEKNS_10BinaryExprIS4_RKT_EESA_ called 1 returned 100% blocks executed 100%
        1: 2344:auto operator != ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
        1: 2345:return { compareNotEqual( m_lhs, rhs ), m_lhs, "!=", rhs };
        1: 2345-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 2346:}
        -: 2347:auto operator != ( bool rhs ) -> BinaryExpr<LhsT, bool> const {
        -: 2348:return { m_lhs != rhs, m_lhs, "!=", rhs };
        -: 2349:}
        -: 2350:
        -: 2351:template<typename RhsT>
        -: 2352:auto operator > ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
        -: 2353:return { static_cast<bool>(m_lhs > rhs), m_lhs, ">", rhs };
        -: 2354:}
        -: 2355:template<typename RhsT>
        -: 2356:auto operator < ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
        -: 2357:return { static_cast<bool>(m_lhs < rhs), m_lhs, "<", rhs };
        -: 2358:}
        -: 2359:template<typename RhsT>
        -: 2360:auto operator >= ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
        -: 2361:return { static_cast<bool>(m_lhs >= rhs), m_lhs, ">=", rhs };
        -: 2362:}
        -: 2363:template<typename RhsT>
        -: 2364:auto operator <= ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
        -: 2365:return { static_cast<bool>(m_lhs <= rhs), m_lhs, "<=", rhs };
        -: 2366:}
        -: 2367:
        -: 2368:template<typename RhsT>
        -: 2369:auto operator && ( RhsT const& ) -> BinaryExpr<LhsT, RhsT const&> const {
        -: 2370:static_assert(always_false<RhsT>::value,
        -: 2371:"operator&& is not supported inside assertions, "
        -: 2372:"wrap the expression inside parentheses, or decompose it");
        -: 2373:}
        -: 2374:
        -: 2375:template<typename RhsT>
        -: 2376:auto operator || ( RhsT const& ) -> BinaryExpr<LhsT, RhsT const&> const {
        -: 2377:static_assert(always_false<RhsT>::value,
        -: 2378:"operator|| is not supported inside assertions, "
        -: 2379:"wrap the expression inside parentheses, or decompose it");
        -: 2380:}
        -: 2381:
        -: 2382:auto makeUnaryExpr() const -> UnaryExpr<LhsT> {
        -: 2383:return UnaryExpr<LhsT>{ m_lhs };
        -: 2384:}
        -: 2385:};
        -: 2386:
        -: 2387:void handleExpression( ITransientExpression const& expr );
        -: 2388:
        -: 2389:template<typename T>
        -: 2390:void handleExpression( ExprLhs<T> const& expr ) {
        -: 2391:handleExpression( expr.makeUnaryExpr() );
        -: 2392:}
        -: 2393:
        -: 2394:struct Decomposer {
        -: 2395:template<typename T>
       51: 2396:auto operator <= ( T const& lhs ) -> ExprLhs<T const&> {
       51: 2397:return ExprLhs<T const&>{ lhs };
        -: 2398:}
------------------
_ZN5Catch10DecomposerleI12consIteratorIiEEENS_7ExprLhsIRKT_EES7_:
function _ZN5Catch10DecomposerleI12consIteratorIiEEENS_7ExprLhsIRKT_EES7_ called 2 returned 100% blocks executed 100%
        2: 2396:auto operator <= ( T const& lhs ) -> ExprLhs<T const&> {
        2: 2397:return ExprLhs<T const&>{ lhs };
        2: 2397-block  0
call    0 returned 2
        -: 2398:}
------------------
_ZN5Catch10DecomposerleIiEENS_7ExprLhsIRKT_EES5_:
function _ZN5Catch10DecomposerleIiEENS_7ExprLhsIRKT_EES5_ called 42 returned 100% blocks executed 100%
       42: 2396:auto operator <= ( T const& lhs ) -> ExprLhs<T const&> {
       42: 2397:return ExprLhs<T const&>{ lhs };
       42: 2397-block  0
call    0 returned 42
        -: 2398:}
------------------
_ZN5Catch10DecomposerleIjEENS_7ExprLhsIRKT_EES5_:
function _ZN5Catch10DecomposerleIjEENS_7ExprLhsIRKT_EES5_ called 7 returned 100% blocks executed 100%
        7: 2396:auto operator <= ( T const& lhs ) -> ExprLhs<T const&> {
        7: 2397:return ExprLhs<T const&>{ lhs };
        7: 2397-block  0
call    0 returned 7
        -: 2398:}
------------------
        -: 2399:
        -: 2400:auto operator <=( bool value ) -> ExprLhs<bool> {
        -: 2401:return ExprLhs<bool>{ value };
        -: 2402:}
        -: 2403:};
        -: 2404:
        -: 2405:} // end namespace Catch
        -: 2406:
        -: 2407:#ifdef _MSC_VER
        -: 2408:#pragma warning(pop)
        -: 2409:#endif
        -: 2410:
        -: 2411:// end catch_decomposer.h
        -: 2412:// start catch_interfaces_capture.h
        -: 2413:
        -: 2414:#include <string>
        -: 2415:#include <chrono>
        -: 2416:
        -: 2417:namespace Catch {
        -: 2418:
        -: 2419:class AssertionResult;
        -: 2420:struct AssertionInfo;
        -: 2421:struct SectionInfo;
        -: 2422:struct SectionEndInfo;
        -: 2423:struct MessageInfo;
        -: 2424:struct MessageBuilder;
        -: 2425:struct Counts;
        -: 2426:struct AssertionReaction;
        -: 2427:struct SourceLineInfo;
        -: 2428:
        -: 2429:struct ITransientExpression;
        -: 2430:struct IGeneratorTracker;
        -: 2431:
        -: 2432:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -: 2433:struct BenchmarkInfo;
        -: 2434:template <typename Duration = std::chrono::duration<double, std::nano>>
        -: 2435:struct BenchmarkStats;
        -: 2436:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -: 2437:
       1*: 2438:struct IResultCapture {
------------------
_ZN5Catch14IResultCaptureD0Ev:
function _ZN5Catch14IResultCaptureD0Ev called 0 returned 0% blocks executed 0%
    #####: 2438:struct IResultCapture {
    %%%%%: 2438-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch14IResultCaptureD2Ev:
function _ZN5Catch14IResultCaptureD2Ev called 1 returned 100% blocks executed 100%
        1: 2438:struct IResultCapture {
------------------
        -: 2439:
        -: 2440:virtual ~IResultCapture();
        -: 2441:
        -: 2442:virtual bool sectionStarted(    SectionInfo const& sectionInfo,
        -: 2443:Counts& assertions ) = 0;
        -: 2444:virtual void sectionEnded( SectionEndInfo const& endInfo ) = 0;
        -: 2445:virtual void sectionEndedEarly( SectionEndInfo const& endInfo ) = 0;
        -: 2446:
        -: 2447:virtual auto acquireGeneratorTracker( SourceLineInfo const& lineInfo ) -> IGeneratorTracker& = 0;
        -: 2448:
        -: 2449:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -: 2450:virtual void benchmarkPreparing( std::string const& name ) = 0;
        -: 2451:virtual void benchmarkStarting( BenchmarkInfo const& info ) = 0;
        -: 2452:virtual void benchmarkEnded( BenchmarkStats<> const& stats ) = 0;
        -: 2453:virtual void benchmarkFailed( std::string const& error ) = 0;
        -: 2454:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -: 2455:
        -: 2456:virtual void pushScopedMessage( MessageInfo const& message ) = 0;
        -: 2457:virtual void popScopedMessage( MessageInfo const& message ) = 0;
        -: 2458:
        -: 2459:virtual void emplaceUnscopedMessage( MessageBuilder const& builder ) = 0;
        -: 2460:
        -: 2461:virtual void handleFatalErrorCondition( StringRef message ) = 0;
        -: 2462:
        -: 2463:virtual void handleExpr
        -: 2464:(   AssertionInfo const& info,
        -: 2465:ITransientExpression const& expr,
        -: 2466:AssertionReaction& reaction ) = 0;
        -: 2467:virtual void handleMessage
        -: 2468:(   AssertionInfo const& info,
        -: 2469:ResultWas::OfType resultType,
        -: 2470:StringRef const& message,
        -: 2471:AssertionReaction& reaction ) = 0;
        -: 2472:virtual void handleUnexpectedExceptionNotThrown
        -: 2473:(   AssertionInfo const& info,
        -: 2474:AssertionReaction& reaction ) = 0;
        -: 2475:virtual void handleUnexpectedInflightException
        -: 2476:(   AssertionInfo const& info,
        -: 2477:std::string const& message,
        -: 2478:AssertionReaction& reaction ) = 0;
        -: 2479:virtual void handleIncomplete
        -: 2480:(   AssertionInfo const& info ) = 0;
        -: 2481:virtual void handleNonExpr
        -: 2482:(   AssertionInfo const &info,
        -: 2483:ResultWas::OfType resultType,
        -: 2484:AssertionReaction &reaction ) = 0;
        -: 2485:
        -: 2486:virtual bool lastAssertionPassed() = 0;
        -: 2487:virtual void assertionPassed() = 0;
        -: 2488:
        -: 2489:// Deprecated, do not use:
        -: 2490:virtual std::string getCurrentTestName() const = 0;
        -: 2491:virtual const AssertionResult* getLastResult() const = 0;
        -: 2492:virtual void exceptionEarlyReported() = 0;
        -: 2493:};
        -: 2494:
        -: 2495:IResultCapture& getResultCapture();
        -: 2496:}
        -: 2497:
        -: 2498:// end catch_interfaces_capture.h
        -: 2499:namespace Catch {
        -: 2500:
        -: 2501:struct TestFailureException{};
        -: 2502:struct AssertionResultData;
        -: 2503:struct IResultCapture;
        -: 2504:class RunContext;
        -: 2505:
        -: 2506:class LazyExpression {
        -: 2507:friend class AssertionHandler;
        -: 2508:friend struct AssertionStats;
        -: 2509:friend class RunContext;
        -: 2510:
        -: 2511:ITransientExpression const* m_transientExpression = nullptr;
        -: 2512:bool m_isNegated;
        -: 2513:public:
        -: 2514:LazyExpression( bool isNegated );
        -: 2515:LazyExpression( LazyExpression const& other );
        -: 2516:LazyExpression& operator = ( LazyExpression const& ) = delete;
        -: 2517:
        -: 2518:explicit operator bool() const;
        -: 2519:
        -: 2520:friend auto operator << ( std::ostream& os, LazyExpression const& lazyExpr ) -> std::ostream&;
        -: 2521:};
        -: 2522:
        -: 2523:struct AssertionReaction {
        -: 2524:bool shouldDebugBreak = false;
        -: 2525:bool shouldThrow = false;
        -: 2526:};
        -: 2527:
        -: 2528:class AssertionHandler {
        -: 2529:AssertionInfo m_assertionInfo;
        -: 2530:AssertionReaction m_reaction;
        -: 2531:bool m_completed = false;
        -: 2532:IResultCapture& m_resultCapture;
        -: 2533:
        -: 2534:public:
        -: 2535:AssertionHandler
        -: 2536:(   StringRef const& macroName,
        -: 2537:SourceLineInfo const& lineInfo,
        -: 2538:StringRef capturedExpression,
        -: 2539:ResultDisposition::Flags resultDisposition );
function _ZN5Catch16AssertionHandlerD1Ev called 51 returned 100% blocks executed 75%
       51: 2540:~AssertionHandler() {
       51: 2540-block  0
call    0 returned 51
       51: 2541:if ( !m_completed ) {
       51: 2541-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 51
    #####: 2542:m_resultCapture.handleIncomplete( m_assertionInfo );
    %%%%%: 2542-block  0
call    0 never executed
        -: 2543:}
       51: 2544:}
        -: 2545:
        -: 2546:template<typename T>
        -: 2547:void handleExpr( ExprLhs<T> const& expr ) {
        -: 2548:handleExpr( expr.makeUnaryExpr() );
        -: 2549:}
        -: 2550:void handleExpr( ITransientExpression const& expr );
        -: 2551:
        -: 2552:void handleMessage(ResultWas::OfType resultType, StringRef const& message);
        -: 2553:
        -: 2554:void handleExceptionThrownAsExpected();
        -: 2555:void handleUnexpectedExceptionNotThrown();
        -: 2556:void handleExceptionNotThrownAsExpected();
        -: 2557:void handleThrowingCallSkipped();
        -: 2558:void handleUnexpectedInflightException();
        -: 2559:
        -: 2560:void complete();
        -: 2561:void setCompleted();
        -: 2562:
        -: 2563:// query
        -: 2564:auto allowThrows() const -> bool;
        -: 2565:};
        -: 2566:
        -: 2567:void handleExceptionMatchExpr( AssertionHandler& handler, std::string const& str, StringRef const& matcherString );
        -: 2568:
        -: 2569:} // namespace Catch
        -: 2570:
        -: 2571:// end catch_assertionhandler.h
        -: 2572:// start catch_message.h
        -: 2573:
        -: 2574:#include <string>
        -: 2575:#include <vector>
        -: 2576:
        -: 2577:namespace Catch {
        -: 2578:
        -: 2579:struct MessageInfo {
        -: 2580:MessageInfo(    StringRef const& _macroName,
        -: 2581:SourceLineInfo const& _lineInfo,
        -: 2582:ResultWas::OfType _type );
        -: 2583:
        -: 2584:StringRef macroName;
        -: 2585:std::string message;
        -: 2586:SourceLineInfo lineInfo;
        -: 2587:ResultWas::OfType type;
        -: 2588:unsigned int sequence;
        -: 2589:
        -: 2590:bool operator == ( MessageInfo const& other ) const;
        -: 2591:bool operator < ( MessageInfo const& other ) const;
        -: 2592:private:
        -: 2593:static unsigned int globalCount;
        -: 2594:};
        -: 2595:
        -: 2596:struct MessageStream {
        -: 2597:
        -: 2598:template<typename T>
        -: 2599:MessageStream& operator << ( T const& value ) {
        -: 2600:m_stream << value;
        -: 2601:return *this;
        -: 2602:}
        -: 2603:
        -: 2604:ReusableStringStream m_stream;
        -: 2605:};
        -: 2606:
        -: 2607:struct MessageBuilder : MessageStream {
        -: 2608:MessageBuilder( StringRef const& macroName,
        -: 2609:SourceLineInfo const& lineInfo,
        -: 2610:ResultWas::OfType type );
        -: 2611:
        -: 2612:template<typename T>
function _ZN5Catch14MessageBuilderlsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS0_RKT_ called 0 returned 0% blocks executed 0%
    #####: 2613:MessageBuilder& operator << ( T const& value ) {
    #####: 2614:m_stream << value;
    %%%%%: 2614-block  0
call    0 never executed
    #####: 2615:return *this;
        -: 2616:}
        -: 2617:
        -: 2618:MessageInfo m_info;
        -: 2619:};
        -: 2620:
        -: 2621:class ScopedMessage {
        -: 2622:public:
        -: 2623:explicit ScopedMessage( MessageBuilder const& builder );
        -: 2624:ScopedMessage( ScopedMessage& duplicate ) = delete;
        -: 2625:ScopedMessage( ScopedMessage&& old );
        -: 2626:~ScopedMessage();
        -: 2627:
        -: 2628:MessageInfo m_info;
        -: 2629:bool m_moved;
        -: 2630:};
        -: 2631:
        -: 2632:class Capturer {
        -: 2633:std::vector<MessageInfo> m_messages;
        -: 2634:IResultCapture& m_resultCapture = getResultCapture();
        -: 2635:size_t m_captured = 0;
        -: 2636:public:
        -: 2637:Capturer( StringRef macroName, SourceLineInfo const& lineInfo, ResultWas::OfType resultType, StringRef names );
        -: 2638:~Capturer();
        -: 2639:
        -: 2640:void captureValue( size_t index, std::string const& value );
        -: 2641:
        -: 2642:template<typename T>
        -: 2643:void captureValues( size_t index, T const& value ) {
        -: 2644:captureValue( index, Catch::Detail::stringify( value ) );
        -: 2645:}
        -: 2646:
        -: 2647:template<typename T, typename... Ts>
        -: 2648:void captureValues( size_t index, T const& value, Ts const&... values ) {
        -: 2649:captureValue( index, Catch::Detail::stringify(value) );
        -: 2650:captureValues( index+1, values... );
        -: 2651:}
        -: 2652:};
        -: 2653:
        -: 2654:} // end namespace Catch
        -: 2655:
        -: 2656:// end catch_message.h
        -: 2657:#if !defined(CATCH_CONFIG_DISABLE)
        -: 2658:
        -: 2659:#if !defined(CATCH_CONFIG_DISABLE_STRINGIFICATION)
        -: 2660:#define CATCH_INTERNAL_STRINGIFY(...) #__VA_ARGS__
        -: 2661:#else
        -: 2662:#define CATCH_INTERNAL_STRINGIFY(...) "Disabled by CATCH_CONFIG_DISABLE_STRINGIFICATION"
        -: 2663:#endif
        -: 2664:
        -: 2665:#if defined(CATCH_CONFIG_FAST_COMPILE) || defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)
        -: 2666:
        -: 2667:///////////////////////////////////////////////////////////////////////////////
        -: 2668:// Another way to speed-up compilation is to omit local try-catch for REQUIRE*
        -: 2669:// macros.
        -: 2670:#define INTERNAL_CATCH_TRY
        -: 2671:#define INTERNAL_CATCH_CATCH( capturer )
        -: 2672:
        -: 2673:#else // CATCH_CONFIG_FAST_COMPILE
        -: 2674:
        -: 2675:#define INTERNAL_CATCH_TRY try
        -: 2676:#define INTERNAL_CATCH_CATCH( handler ) catch(...) { handler.handleUnexpectedInflightException(); }
        -: 2677:
        -: 2678:#endif
        -: 2679:
        -: 2680:#define INTERNAL_CATCH_REACT( handler ) handler.complete();
        -: 2681:
        -: 2682:///////////////////////////////////////////////////////////////////////////////
        -: 2683:#define INTERNAL_CATCH_TEST( macroName, resultDisposition, ... ) \
        -: 2684:    do { \
        -: 2685:        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition ); \
        -: 2686:        INTERNAL_CATCH_TRY { \
        -: 2687:            CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS \
        -: 2688:            catchAssertionHandler.handleExpr( Catch::Decomposer() <= __VA_ARGS__ ); \
        -: 2689:            CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS \
        -: 2690:        } INTERNAL_CATCH_CATCH( catchAssertionHandler ) \
        -: 2691:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 2692:    } while( (void)0, (false) && static_cast<bool>( !!(__VA_ARGS__) ) ) // the expression here is never evaluated at runtime but it forces the compiler to give it a look
        -: 2693:// The double negation silences MSVC's C4800 warning, the static_cast forces short-circuit evaluation if the type has overloaded &&.
        -: 2694:
        -: 2695:///////////////////////////////////////////////////////////////////////////////
        -: 2696:#define INTERNAL_CATCH_IF( macroName, resultDisposition, ... ) \
        -: 2697:    INTERNAL_CATCH_TEST( macroName, resultDisposition, __VA_ARGS__ ); \
        -: 2698:    if( Catch::getResultCapture().lastAssertionPassed() )
        -: 2699:
        -: 2700:///////////////////////////////////////////////////////////////////////////////
        -: 2701:#define INTERNAL_CATCH_ELSE( macroName, resultDisposition, ... ) \
        -: 2702:    INTERNAL_CATCH_TEST( macroName, resultDisposition, __VA_ARGS__ ); \
        -: 2703:    if( !Catch::getResultCapture().lastAssertionPassed() )
        -: 2704:
        -: 2705:///////////////////////////////////////////////////////////////////////////////
        -: 2706:#define INTERNAL_CATCH_NO_THROW( macroName, resultDisposition, ... ) \
        -: 2707:    do { \
        -: 2708:        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition ); \
        -: 2709:        try { \
        -: 2710:            static_cast<void>(__VA_ARGS__); \
        -: 2711:            catchAssertionHandler.handleExceptionNotThrownAsExpected(); \
        -: 2712:        } \
        -: 2713:        catch( ... ) { \
        -: 2714:            catchAssertionHandler.handleUnexpectedInflightException(); \
        -: 2715:        } \
        -: 2716:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 2717:    } while( false )
        -: 2718:
        -: 2719:///////////////////////////////////////////////////////////////////////////////
        -: 2720:#define INTERNAL_CATCH_THROWS( macroName, resultDisposition, ... ) \
        -: 2721:    do { \
        -: 2722:        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition); \
        -: 2723:        if( catchAssertionHandler.allowThrows() ) \
        -: 2724:            try { \
        -: 2725:                static_cast<void>(__VA_ARGS__); \
        -: 2726:                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \
        -: 2727:            } \
        -: 2728:            catch( ... ) { \
        -: 2729:                catchAssertionHandler.handleExceptionThrownAsExpected(); \
        -: 2730:            } \
        -: 2731:        else \
        -: 2732:            catchAssertionHandler.handleThrowingCallSkipped(); \
        -: 2733:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 2734:    } while( false )
        -: 2735:
        -: 2736:///////////////////////////////////////////////////////////////////////////////
        -: 2737:#define INTERNAL_CATCH_THROWS_AS( macroName, exceptionType, resultDisposition, expr ) \
        -: 2738:    do { \
        -: 2739:        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(expr) ", " CATCH_INTERNAL_STRINGIFY(exceptionType), resultDisposition ); \
        -: 2740:        if( catchAssertionHandler.allowThrows() ) \
        -: 2741:            try { \
        -: 2742:                static_cast<void>(expr); \
        -: 2743:                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \
        -: 2744:            } \
        -: 2745:            catch( exceptionType const& ) { \
        -: 2746:                catchAssertionHandler.handleExceptionThrownAsExpected(); \
        -: 2747:            } \
        -: 2748:            catch( ... ) { \
        -: 2749:                catchAssertionHandler.handleUnexpectedInflightException(); \
        -: 2750:            } \
        -: 2751:        else \
        -: 2752:            catchAssertionHandler.handleThrowingCallSkipped(); \
        -: 2753:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 2754:    } while( false )
        -: 2755:
        -: 2756:///////////////////////////////////////////////////////////////////////////////
        -: 2757:#define INTERNAL_CATCH_MSG( macroName, messageType, resultDisposition, ... ) \
        -: 2758:    do { \
        -: 2759:        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::StringRef(), resultDisposition ); \
        -: 2760:        catchAssertionHandler.handleMessage( messageType, ( Catch::MessageStream() << __VA_ARGS__ + ::Catch::StreamEndStop() ).m_stream.str() ); \
        -: 2761:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 2762:    } while( false )
        -: 2763:
        -: 2764:///////////////////////////////////////////////////////////////////////////////
        -: 2765:#define INTERNAL_CATCH_CAPTURE( varName, macroName, ... ) \
        -: 2766:    auto varName = Catch::Capturer( macroName, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info, #__VA_ARGS__ ); \
        -: 2767:    varName.captureValues( 0, __VA_ARGS__ )
        -: 2768:
        -: 2769:///////////////////////////////////////////////////////////////////////////////
        -: 2770:#define INTERNAL_CATCH_INFO( macroName, log ) \
        -: 2771:    Catch::ScopedMessage INTERNAL_CATCH_UNIQUE_NAME( scopedMessage )( Catch::MessageBuilder( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) << log );
        -: 2772:
        -: 2773:///////////////////////////////////////////////////////////////////////////////
        -: 2774:#define INTERNAL_CATCH_UNSCOPED_INFO( macroName, log ) \
        -: 2775:    Catch::getResultCapture().emplaceUnscopedMessage( Catch::MessageBuilder( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) << log )
        -: 2776:
        -: 2777:///////////////////////////////////////////////////////////////////////////////
        -: 2778:// Although this is matcher-based, it can be used with just a string
        -: 2779:#define INTERNAL_CATCH_THROWS_STR_MATCHES( macroName, resultDisposition, matcher, ... ) \
        -: 2780:    do { \
        -: 2781:        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__) ", " CATCH_INTERNAL_STRINGIFY(matcher), resultDisposition ); \
        -: 2782:        if( catchAssertionHandler.allowThrows() ) \
        -: 2783:            try { \
        -: 2784:                static_cast<void>(__VA_ARGS__); \
        -: 2785:                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \
        -: 2786:            } \
        -: 2787:            catch( ... ) { \
        -: 2788:                Catch::handleExceptionMatchExpr( catchAssertionHandler, matcher, #matcher##_catch_sr ); \
        -: 2789:            } \
        -: 2790:        else \
        -: 2791:            catchAssertionHandler.handleThrowingCallSkipped(); \
        -: 2792:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 2793:    } while( false )
        -: 2794:
        -: 2795:#endif // CATCH_CONFIG_DISABLE
        -: 2796:
        -: 2797:// end catch_capture.hpp
        -: 2798:// start catch_section.h
        -: 2799:
        -: 2800:// start catch_section_info.h
        -: 2801:
        -: 2802:// start catch_totals.h
        -: 2803:
        -: 2804:#include <cstddef>
        -: 2805:
        -: 2806:namespace Catch {
        -: 2807:
        -: 2808:struct Counts {
        -: 2809:Counts operator - ( Counts const& other ) const;
        -: 2810:Counts& operator += ( Counts const& other );
        -: 2811:
        -: 2812:std::size_t total() const;
        -: 2813:bool allPassed() const;
        -: 2814:bool allOk() const;
        -: 2815:
        -: 2816:std::size_t passed = 0;
        -: 2817:std::size_t failed = 0;
        -: 2818:std::size_t failedButOk = 0;
        -: 2819:};
        -: 2820:
        -: 2821:struct Totals {
        -: 2822:
        -: 2823:Totals operator - ( Totals const& other ) const;
        -: 2824:Totals& operator += ( Totals const& other );
        -: 2825:
        -: 2826:Totals delta( Totals const& prevTotals ) const;
        -: 2827:
        -: 2828:int error = 0;
        -: 2829:Counts assertions;
        -: 2830:Counts testCases;
        -: 2831:};
        -: 2832:}
        -: 2833:
        -: 2834:// end catch_totals.h
        -: 2835:#include <string>
        -: 2836:
        -: 2837:namespace Catch {
        -: 2838:
        -: 2839:struct SectionInfo {
        -: 2840:SectionInfo
        -: 2841:(   SourceLineInfo const& _lineInfo,
        -: 2842:std::string const& _name );
        -: 2843:
        -: 2844:// Deprecated
        -: 2845:SectionInfo
        -: 2846:(   SourceLineInfo const& _lineInfo,
        -: 2847:std::string const& _name,
        -: 2848:std::string const& ) : SectionInfo( _lineInfo, _name ) {}
        -: 2849:
        -: 2850:std::string name;
        -: 2851:std::string description; // !Deprecated: this will always be empty
        -: 2852:SourceLineInfo lineInfo;
        -: 2853:};
        -: 2854:
        -: 2855:struct SectionEndInfo {
        -: 2856:SectionInfo sectionInfo;
        -: 2857:Counts prevAssertions;
        -: 2858:double durationInSeconds;
        -: 2859:};
        -: 2860:
        -: 2861:} // end namespace Catch
        -: 2862:
        -: 2863:// end catch_section_info.h
        -: 2864:// start catch_timer.h
        -: 2865:
        -: 2866:#include <cstdint>
        -: 2867:
        -: 2868:namespace Catch {
        -: 2869:
        -: 2870:auto getCurrentNanosecondsSinceEpoch() -> uint64_t;
        -: 2871:auto getEstimatedClockResolution() -> uint64_t;
        -: 2872:
        -: 2873:class Timer {
        -: 2874:uint64_t m_nanoseconds = 0;
        -: 2875:public:
        -: 2876:void start();
        -: 2877:auto getElapsedNanoseconds() const -> uint64_t;
        -: 2878:auto getElapsedMicroseconds() const -> uint64_t;
        -: 2879:auto getElapsedMilliseconds() const -> unsigned int;
        -: 2880:auto getElapsedSeconds() const -> double;
        -: 2881:};
        -: 2882:
        -: 2883:} // namespace Catch
        -: 2884:
        -: 2885:// end catch_timer.h
        -: 2886:#include <string>
        -: 2887:
        -: 2888:namespace Catch {
        -: 2889:
        -: 2890:class Section : NonCopyable {
        -: 2891:public:
        -: 2892:Section( SectionInfo const& info );
        -: 2893:~Section();
        -: 2894:
        -: 2895:// This indicates whether the section should be executed or not
        -: 2896:explicit operator bool() const;
        -: 2897:
        -: 2898:private:
        -: 2899:SectionInfo m_info;
        -: 2900:
        -: 2901:std::string m_name;
        -: 2902:Counts m_assertions;
        -: 2903:bool m_sectionIncluded;
        -: 2904:Timer m_timer;
        -: 2905:};
        -: 2906:
        -: 2907:} // end namespace Catch
        -: 2908:
        -: 2909:#define INTERNAL_CATCH_SECTION( ... ) \
        -: 2910:    CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS \
        -: 2911:    if( Catch::Section const& INTERNAL_CATCH_UNIQUE_NAME( catch_internal_Section ) = Catch::SectionInfo( CATCH_INTERNAL_LINEINFO, __VA_ARGS__ ) ) \
        -: 2912:    CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS
        -: 2913:
        -: 2914:#define INTERNAL_CATCH_DYNAMIC_SECTION( ... ) \
        -: 2915:    CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS \
        -: 2916:    if( Catch::Section const& INTERNAL_CATCH_UNIQUE_NAME( catch_internal_Section ) = Catch::SectionInfo( CATCH_INTERNAL_LINEINFO, (Catch::ReusableStringStream() << __VA_ARGS__).str() ) ) \
        -: 2917:    CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS
        -: 2918:
        -: 2919:// end catch_section.h
        -: 2920:// start catch_interfaces_exception.h
        -: 2921:
        -: 2922:// start catch_interfaces_registry_hub.h
        -: 2923:
        -: 2924:#include <string>
        -: 2925:#include <memory>
        -: 2926:
        -: 2927:namespace Catch {
        -: 2928:
        -: 2929:class TestCase;
        -: 2930:struct ITestCaseRegistry;
        -: 2931:struct IExceptionTranslatorRegistry;
        -: 2932:struct IExceptionTranslator;
        -: 2933:struct IReporterRegistry;
        -: 2934:struct IReporterFactory;
        -: 2935:struct ITagAliasRegistry;
        -: 2936:struct IMutableEnumValuesRegistry;
        -: 2937:
        -: 2938:class StartupExceptionRegistry;
        -: 2939:
        -: 2940:using IReporterFactoryPtr = std::shared_ptr<IReporterFactory>;
        -: 2941:
       1*: 2942:struct IRegistryHub {
------------------
_ZN5Catch12IRegistryHubD0Ev:
function _ZN5Catch12IRegistryHubD0Ev called 0 returned 0% blocks executed 0%
    #####: 2942:struct IRegistryHub {
    %%%%%: 2942-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch12IRegistryHubD2Ev:
function _ZN5Catch12IRegistryHubD2Ev called 1 returned 100% blocks executed 100%
        1: 2942:struct IRegistryHub {
------------------
        -: 2943:virtual ~IRegistryHub();
        -: 2944:
        -: 2945:virtual IReporterRegistry const& getReporterRegistry() const = 0;
        -: 2946:virtual ITestCaseRegistry const& getTestCaseRegistry() const = 0;
        -: 2947:virtual ITagAliasRegistry const& getTagAliasRegistry() const = 0;
        -: 2948:virtual IExceptionTranslatorRegistry const& getExceptionTranslatorRegistry() const = 0;
        -: 2949:
        -: 2950:virtual StartupExceptionRegistry const& getStartupExceptionRegistry() const = 0;
        -: 2951:};
        -: 2952:
       1*: 2953:struct IMutableRegistryHub {
------------------
_ZN5Catch19IMutableRegistryHubD0Ev:
function _ZN5Catch19IMutableRegistryHubD0Ev called 0 returned 0% blocks executed 0%
    #####: 2953:struct IMutableRegistryHub {
    %%%%%: 2953-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch19IMutableRegistryHubD2Ev:
function _ZN5Catch19IMutableRegistryHubD2Ev called 1 returned 100% blocks executed 100%
        1: 2953:struct IMutableRegistryHub {
------------------
        -: 2954:virtual ~IMutableRegistryHub();
        -: 2955:virtual void registerReporter( std::string const& name, IReporterFactoryPtr const& factory ) = 0;
        -: 2956:virtual void registerListener( IReporterFactoryPtr const& factory ) = 0;
        -: 2957:virtual void registerTest( TestCase const& testInfo ) = 0;
        -: 2958:virtual void registerTranslator( const IExceptionTranslator* translator ) = 0;
        -: 2959:virtual void registerTagAlias( std::string const& alias, std::string const& tag, SourceLineInfo const& lineInfo ) = 0;
        -: 2960:virtual void registerStartupException() noexcept = 0;
        -: 2961:virtual IMutableEnumValuesRegistry& getMutableEnumValuesRegistry() = 0;
        -: 2962:};
        -: 2963:
        -: 2964:IRegistryHub const& getRegistryHub();
        -: 2965:IMutableRegistryHub& getMutableRegistryHub();
        -: 2966:void cleanUp();
        -: 2967:std::string translateActiveException();
        -: 2968:
        -: 2969:}
        -: 2970:
        -: 2971:// end catch_interfaces_registry_hub.h
        -: 2972:#if defined(CATCH_CONFIG_DISABLE)
        -: 2973:#define INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG( translatorName, signature) \
        -: 2974:        static std::string translatorName( signature )
        -: 2975:#endif
        -: 2976:
        -: 2977:#include <exception>
        -: 2978:#include <string>
        -: 2979:#include <vector>
        -: 2980:
        -: 2981:namespace Catch {
        -: 2982:using exceptionTranslateFunction = std::string(*)();
        -: 2983:
        -: 2984:struct IExceptionTranslator;
        -: 2985:using ExceptionTranslators = std::vector<std::unique_ptr<IExceptionTranslator const>>;
        -: 2986:
    #####: 2987:struct IExceptionTranslator {
------------------
_ZN5Catch20IExceptionTranslatorD0Ev:
function _ZN5Catch20IExceptionTranslatorD0Ev called 0 returned 0% blocks executed 0%
    #####: 2987:struct IExceptionTranslator {
    %%%%%: 2987-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch20IExceptionTranslatorD2Ev:
function _ZN5Catch20IExceptionTranslatorD2Ev called 0 returned 0% blocks executed 0%
    #####: 2987:struct IExceptionTranslator {
------------------
        -: 2988:virtual ~IExceptionTranslator();
        -: 2989:virtual std::string translate( ExceptionTranslators::const_iterator it, ExceptionTranslators::const_iterator itEnd ) const = 0;
        -: 2990:};
        -: 2991:
       1*: 2992:struct IExceptionTranslatorRegistry {
------------------
_ZN5Catch28IExceptionTranslatorRegistryD0Ev:
function _ZN5Catch28IExceptionTranslatorRegistryD0Ev called 0 returned 0% blocks executed 0%
    #####: 2992:struct IExceptionTranslatorRegistry {
    %%%%%: 2992-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch28IExceptionTranslatorRegistryD2Ev:
function _ZN5Catch28IExceptionTranslatorRegistryD2Ev called 1 returned 100% blocks executed 100%
        1: 2992:struct IExceptionTranslatorRegistry {
------------------
        -: 2993:virtual ~IExceptionTranslatorRegistry();
        -: 2994:
        -: 2995:virtual std::string translateActiveException() const = 0;
        -: 2996:};
        -: 2997:
        -: 2998:class ExceptionTranslatorRegistrar {
        -: 2999:template<typename T>
        -: 3000:class ExceptionTranslator : public IExceptionTranslator {
        -: 3001:public:
        -: 3002:
        -: 3003:ExceptionTranslator( std::string(*translateFunction)( T& ) )
        -: 3004:: m_translateFunction( translateFunction )
        -: 3005:{}
        -: 3006:
        -: 3007:std::string translate( ExceptionTranslators::const_iterator it, ExceptionTranslators::const_iterator itEnd ) const override {
        -: 3008:try {
        -: 3009:if( it == itEnd )
        -: 3010:std::rethrow_exception(std::current_exception());
        -: 3011:else
        -: 3012:return (*it)->translate( it+1, itEnd );
        -: 3013:}
        -: 3014:catch( T& ex ) {
        -: 3015:return m_translateFunction( ex );
        -: 3016:}
        -: 3017:}
        -: 3018:
        -: 3019:protected:
        -: 3020:std::string(*m_translateFunction)( T& );
        -: 3021:};
        -: 3022:
        -: 3023:public:
        -: 3024:template<typename T>
        -: 3025:ExceptionTranslatorRegistrar( std::string(*translateFunction)( T& ) ) {
        -: 3026:getMutableRegistryHub().registerTranslator
        -: 3027:( new ExceptionTranslator<T>( translateFunction ) );
        -: 3028:}
        -: 3029:};
        -: 3030:}
        -: 3031:
        -: 3032:///////////////////////////////////////////////////////////////////////////////
        -: 3033:#define INTERNAL_CATCH_TRANSLATE_EXCEPTION2( translatorName, signature ) \
        -: 3034:    static std::string translatorName( signature ); \
        -: 3035:    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -: 3036:    namespace{ Catch::ExceptionTranslatorRegistrar INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionRegistrar )( &translatorName ); } \
        -: 3037:    CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
        -: 3038:    static std::string translatorName( signature )
        -: 3039:
        -: 3040:#define INTERNAL_CATCH_TRANSLATE_EXCEPTION( signature ) INTERNAL_CATCH_TRANSLATE_EXCEPTION2( INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionTranslator ), signature )
        -: 3041:
        -: 3042:// end catch_interfaces_exception.h
        -: 3043:// start catch_approx.h
        -: 3044:
        -: 3045:#include <type_traits>
        -: 3046:
        -: 3047:namespace Catch {
        -: 3048:namespace Detail {
        -: 3049:
        -: 3050:class Approx {
        -: 3051:private:
        -: 3052:bool equalityComparisonImpl(double other) const;
        -: 3053:// Validates the new margin (margin >= 0)
        -: 3054:// out-of-line to avoid including stdexcept in the header
        -: 3055:void setMargin(double margin);
        -: 3056:// Validates the new epsilon (0 < epsilon < 1)
        -: 3057:// out-of-line to avoid including stdexcept in the header
        -: 3058:void setEpsilon(double epsilon);
        -: 3059:
        -: 3060:public:
        -: 3061:explicit Approx ( double value );
        -: 3062:
        -: 3063:static Approx custom();
        -: 3064:
        -: 3065:Approx operator-() const;
        -: 3066:
        -: 3067:template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3068:Approx operator()( T const& value ) {
        -: 3069:Approx approx( static_cast<double>(value) );
        -: 3070:approx.m_epsilon = m_epsilon;
        -: 3071:approx.m_margin = m_margin;
        -: 3072:approx.m_scale = m_scale;
        -: 3073:return approx;
        -: 3074:}
        -: 3075:
        -: 3076:template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
    #####: 3077:explicit Approx( T const& value ): Approx(static_cast<double>(value))
    #####: 3078:{}
------------------
_ZN5Catch6Detail6ApproxC1IyvEERKT_:
function _ZN5Catch6Detail6ApproxC1IyvEERKT_ called 0 returned 0% blocks executed 0%
    #####: 3077:explicit Approx( T const& value ): Approx(static_cast<double>(value))
    %%%%%: 3077-block  0
call    0 never executed
    #####: 3078:{}
------------------
_ZN5Catch6Detail6ApproxC1IevEERKT_:
function _ZN5Catch6Detail6ApproxC1IevEERKT_ called 0 returned 0% blocks executed 0%
    #####: 3077:explicit Approx( T const& value ): Approx(static_cast<double>(value))
    %%%%%: 3077-block  0
call    0 never executed
    #####: 3078:{}
------------------
_ZN5Catch6Detail6ApproxC1IivEERKT_:
function _ZN5Catch6Detail6ApproxC1IivEERKT_ called 0 returned 0% blocks executed 0%
    #####: 3077:explicit Approx( T const& value ): Approx(static_cast<double>(value))
    %%%%%: 3077-block  0
call    0 never executed
    #####: 3078:{}
------------------
        -: 3079:
        -: 3080:template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3081:friend bool operator == ( const T& lhs, Approx const& rhs ) {
        -: 3082:auto lhs_v = static_cast<double>(lhs);
        -: 3083:return rhs.equalityComparisonImpl(lhs_v);
        -: 3084:}
        -: 3085:
        -: 3086:template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3087:friend bool operator == ( Approx const& lhs, const T& rhs ) {
        -: 3088:return operator==( rhs, lhs );
        -: 3089:}
        -: 3090:
        -: 3091:template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3092:friend bool operator != ( T const& lhs, Approx const& rhs ) {
        -: 3093:return !operator==( lhs, rhs );
        -: 3094:}
        -: 3095:
        -: 3096:template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3097:friend bool operator != ( Approx const& lhs, T const& rhs ) {
        -: 3098:return !operator==( rhs, lhs );
        -: 3099:}
        -: 3100:
        -: 3101:template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3102:friend bool operator <= ( T const& lhs, Approx const& rhs ) {
        -: 3103:return static_cast<double>(lhs) < rhs.m_value || lhs == rhs;
        -: 3104:}
        -: 3105:
        -: 3106:template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3107:friend bool operator <= ( Approx const& lhs, T const& rhs ) {
        -: 3108:return lhs.m_value < static_cast<double>(rhs) || lhs == rhs;
        -: 3109:}
        -: 3110:
        -: 3111:template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3112:friend bool operator >= ( T const& lhs, Approx const& rhs ) {
        -: 3113:return static_cast<double>(lhs) > rhs.m_value || lhs == rhs;
        -: 3114:}
        -: 3115:
        -: 3116:template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3117:friend bool operator >= ( Approx const& lhs, T const& rhs ) {
        -: 3118:return lhs.m_value > static_cast<double>(rhs) || lhs == rhs;
        -: 3119:}
        -: 3120:
        -: 3121:template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3122:Approx& epsilon( T const& newEpsilon ) {
        -: 3123:double epsilonAsDouble = static_cast<double>(newEpsilon);
        -: 3124:setEpsilon(epsilonAsDouble);
        -: 3125:return *this;
        -: 3126:}
        -: 3127:
        -: 3128:template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3129:Approx& margin( T const& newMargin ) {
        -: 3130:double marginAsDouble = static_cast<double>(newMargin);
        -: 3131:setMargin(marginAsDouble);
        -: 3132:return *this;
        -: 3133:}
        -: 3134:
        -: 3135:template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3136:Approx& scale( T const& newScale ) {
        -: 3137:m_scale = static_cast<double>(newScale);
        -: 3138:return *this;
        -: 3139:}
        -: 3140:
        -: 3141:std::string toString() const;
        -: 3142:
        -: 3143:private:
        -: 3144:double m_epsilon;
        -: 3145:double m_margin;
        -: 3146:double m_scale;
        -: 3147:double m_value;
        -: 3148:};
        -: 3149:} // end namespace Detail
        -: 3150:
        -: 3151:namespace literals {
        -: 3152:Detail::Approx operator "" _a(long double val);
        -: 3153:Detail::Approx operator "" _a(unsigned long long val);
        -: 3154:} // end namespace literals
        -: 3155:
        -: 3156:template<>
        -: 3157:struct StringMaker<Catch::Detail::Approx> {
        -: 3158:static std::string convert(Catch::Detail::Approx const& value);
        -: 3159:};
        -: 3160:
        -: 3161:} // end namespace Catch
        -: 3162:
        -: 3163:// end catch_approx.h
        -: 3164:// start catch_string_manip.h
        -: 3165:
        -: 3166:#include <string>
        -: 3167:#include <iosfwd>
        -: 3168:#include <vector>
        -: 3169:
        -: 3170:namespace Catch {
        -: 3171:
        -: 3172:bool startsWith( std::string const& s, std::string const& prefix );
        -: 3173:bool startsWith( std::string const& s, char prefix );
        -: 3174:bool endsWith( std::string const& s, std::string const& suffix );
        -: 3175:bool endsWith( std::string const& s, char suffix );
        -: 3176:bool contains( std::string const& s, std::string const& infix );
        -: 3177:void toLowerInPlace( std::string& s );
        -: 3178:std::string toLower( std::string const& s );
        -: 3179://! Returns a new string without whitespace at the start/end
        -: 3180:std::string trim( std::string const& str );
        -: 3181://! Returns a substring of the original ref without whitespace. Beware lifetimes!
        -: 3182:StringRef trim(StringRef ref);
        -: 3183:
        -: 3184:// !!! Be aware, returns refs into original string - make sure original string outlives them
        -: 3185:std::vector<StringRef> splitStringRef( StringRef str, char delimiter );
        -: 3186:bool replaceInPlace( std::string& str, std::string const& replaceThis, std::string const& withThis );
        -: 3187:
        -: 3188:struct pluralise {
        -: 3189:pluralise( std::size_t count, std::string const& label );
        -: 3190:
        -: 3191:friend std::ostream& operator << ( std::ostream& os, pluralise const& pluraliser );
        -: 3192:
        -: 3193:std::size_t m_count;
        -: 3194:std::string m_label;
        -: 3195:};
        -: 3196:}
        -: 3197:
        -: 3198:// end catch_string_manip.h
        -: 3199:#ifndef CATCH_CONFIG_DISABLE_MATCHERS
        -: 3200:// start catch_capture_matchers.h
        -: 3201:
        -: 3202:// start catch_matchers.h
        -: 3203:
        -: 3204:#include <string>
        -: 3205:#include <vector>
        -: 3206:
        -: 3207:namespace Catch {
        -: 3208:namespace Matchers {
        -: 3209:namespace Impl {
        -: 3210:
        -: 3211:template<typename ArgT> struct MatchAllOf;
        -: 3212:template<typename ArgT> struct MatchAnyOf;
        -: 3213:template<typename ArgT> struct MatchNotOf;
        -: 3214:
    #####: 3215:class MatcherUntypedBase {
------------------
_ZN5Catch8Matchers4Impl18MatcherUntypedBaseD0Ev:
function _ZN5Catch8Matchers4Impl18MatcherUntypedBaseD0Ev called 0 returned 0% blocks executed 0%
    #####: 3215:class MatcherUntypedBase {
    %%%%%: 3215-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch8Matchers4Impl18MatcherUntypedBaseD2Ev:
function _ZN5Catch8Matchers4Impl18MatcherUntypedBaseD2Ev called 0 returned 0% blocks executed 0%
    #####: 3215:class MatcherUntypedBase {
    %%%%%: 3215-block  0
call    0 never executed
------------------
        -: 3216:public:
function _ZN5Catch8Matchers4Impl18MatcherUntypedBaseC2Ev called 0 returned 0% blocks executed 0%
    #####: 3217:MatcherUntypedBase() = default;
    %%%%%: 3217-block  0
call    0 never executed
        -: 3218:MatcherUntypedBase ( MatcherUntypedBase const& ) = default;
        -: 3219:MatcherUntypedBase& operator = ( MatcherUntypedBase const& ) = delete;
        -: 3220:std::string toString() const;
        -: 3221:
        -: 3222:protected:
        -: 3223:virtual ~MatcherUntypedBase();
        -: 3224:virtual std::string describe() const = 0;
        -: 3225:mutable std::string m_cachedToString;
        -: 3226:};
        -: 3227:
        -: 3228:#ifdef __clang__
        -: 3229:#    pragma clang diagnostic push
        -: 3230:#    pragma clang diagnostic ignored "-Wnon-virtual-dtor"
        -: 3231:#endif
        -: 3232:
        -: 3233:template<typename ObjectT>
        -: 3234:struct MatcherMethod {
        -: 3235:virtual bool match( ObjectT const& arg ) const = 0;
        -: 3236:};
        -: 3237:
        -: 3238:#if defined(__OBJC__)
        -: 3239:// Hack to fix Catch GH issue #1661. Could use id for generic Object support.
        -: 3240:// use of const for Object pointers is very uncommon and under ARC it causes some kind of signature mismatch that breaks compilation
        -: 3241:template<>
        -: 3242:struct MatcherMethod<NSString*> {
        -: 3243:virtual bool match( NSString* arg ) const = 0;
        -: 3244:};
        -: 3245:#endif
        -: 3246:
        -: 3247:#ifdef __clang__
        -: 3248:#    pragma clang diagnostic pop
        -: 3249:#endif
        -: 3250:
        -: 3251:template<typename T>
        -: 3252:struct MatcherBase : MatcherUntypedBase, MatcherMethod<T> {
        -: 3253:
        -: 3254:MatchAllOf<T> operator && ( MatcherBase const& other ) const;
        -: 3255:MatchAnyOf<T> operator || ( MatcherBase const& other ) const;
        -: 3256:MatchNotOf<T> operator ! () const;
        -: 3257:};
        -: 3258:
        -: 3259:template<typename ArgT>
        -: 3260:struct MatchAllOf : MatcherBase<ArgT> {
        -: 3261:bool match( ArgT const& arg ) const override {
        -: 3262:for( auto matcher : m_matchers ) {
        -: 3263:if (!matcher->match(arg))
        -: 3264:return false;
        -: 3265:}
        -: 3266:return true;
        -: 3267:}
        -: 3268:std::string describe() const override {
        -: 3269:std::string description;
        -: 3270:description.reserve( 4 + m_matchers.size()*32 );
        -: 3271:description += "( ";
        -: 3272:bool first = true;
        -: 3273:for( auto matcher : m_matchers ) {
        -: 3274:if( first )
        -: 3275:first = false;
        -: 3276:else
        -: 3277:description += " and ";
        -: 3278:description += matcher->toString();
        -: 3279:}
        -: 3280:description += " )";
        -: 3281:return description;
        -: 3282:}
        -: 3283:
        -: 3284:MatchAllOf<ArgT>& operator && ( MatcherBase<ArgT> const& other ) {
        -: 3285:m_matchers.push_back( &other );
        -: 3286:return *this;
        -: 3287:}
        -: 3288:
        -: 3289:std::vector<MatcherBase<ArgT> const*> m_matchers;
        -: 3290:};
        -: 3291:template<typename ArgT>
        -: 3292:struct MatchAnyOf : MatcherBase<ArgT> {
        -: 3293:
        -: 3294:bool match( ArgT const& arg ) const override {
        -: 3295:for( auto matcher : m_matchers ) {
        -: 3296:if (matcher->match(arg))
        -: 3297:return true;
        -: 3298:}
        -: 3299:return false;
        -: 3300:}
        -: 3301:std::string describe() const override {
        -: 3302:std::string description;
        -: 3303:description.reserve( 4 + m_matchers.size()*32 );
        -: 3304:description += "( ";
        -: 3305:bool first = true;
        -: 3306:for( auto matcher : m_matchers ) {
        -: 3307:if( first )
        -: 3308:first = false;
        -: 3309:else
        -: 3310:description += " or ";
        -: 3311:description += matcher->toString();
        -: 3312:}
        -: 3313:description += " )";
        -: 3314:return description;
        -: 3315:}
        -: 3316:
        -: 3317:MatchAnyOf<ArgT>& operator || ( MatcherBase<ArgT> const& other ) {
        -: 3318:m_matchers.push_back( &other );
        -: 3319:return *this;
        -: 3320:}
        -: 3321:
        -: 3322:std::vector<MatcherBase<ArgT> const*> m_matchers;
        -: 3323:};
        -: 3324:
        -: 3325:template<typename ArgT>
        -: 3326:struct MatchNotOf : MatcherBase<ArgT> {
        -: 3327:
        -: 3328:MatchNotOf( MatcherBase<ArgT> const& underlyingMatcher ) : m_underlyingMatcher( underlyingMatcher ) {}
        -: 3329:
        -: 3330:bool match( ArgT const& arg ) const override {
        -: 3331:return !m_underlyingMatcher.match( arg );
        -: 3332:}
        -: 3333:
        -: 3334:std::string describe() const override {
        -: 3335:return "not " + m_underlyingMatcher.toString();
        -: 3336:}
        -: 3337:MatcherBase<ArgT> const& m_underlyingMatcher;
        -: 3338:};
        -: 3339:
        -: 3340:template<typename T>
        -: 3341:MatchAllOf<T> MatcherBase<T>::operator && ( MatcherBase const& other ) const {
        -: 3342:return MatchAllOf<T>() && *this && other;
        -: 3343:}
        -: 3344:template<typename T>
        -: 3345:MatchAnyOf<T> MatcherBase<T>::operator || ( MatcherBase const& other ) const {
        -: 3346:return MatchAnyOf<T>() || *this || other;
        -: 3347:}
        -: 3348:template<typename T>
        -: 3349:MatchNotOf<T> MatcherBase<T>::operator ! () const {
        -: 3350:return MatchNotOf<T>( *this );
        -: 3351:}
        -: 3352:
        -: 3353:} // namespace Impl
        -: 3354:
        -: 3355:} // namespace Matchers
        -: 3356:
        -: 3357:using namespace Matchers;
        -: 3358:using Matchers::Impl::MatcherBase;
        -: 3359:
        -: 3360:} // namespace Catch
        -: 3361:
        -: 3362:// end catch_matchers.h
        -: 3363:// start catch_matchers_exception.hpp
        -: 3364:
        -: 3365:namespace Catch {
        -: 3366:namespace Matchers {
        -: 3367:namespace Exception {
        -: 3368:
        -: 3369:class ExceptionMessageMatcher : public MatcherBase<std::exception> {
        -: 3370:std::string m_message;
        -: 3371:public:
        -: 3372:
function _ZN5Catch8Matchers9Exception23ExceptionMessageMatcherC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3373:ExceptionMessageMatcher(std::string const& message):
    #####: 3374:m_message(message)
    %%%%%: 3374-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3374-block  1
call    4 never executed
    #####: 3375:{}
    %%%%%: 3375-block  0
        -: 3376:
        -: 3377:bool match(std::exception const& ex) const override;
        -: 3378:
        -: 3379:std::string describe() const override;
        -: 3380:};
        -: 3381:
        -: 3382:} // namespace Exception
        -: 3383:
        -: 3384:Exception::ExceptionMessageMatcher Message(std::string const& message);
        -: 3385:
        -: 3386:} // namespace Matchers
        -: 3387:} // namespace Catch
        -: 3388:
        -: 3389:// end catch_matchers_exception.hpp
        -: 3390:// start catch_matchers_floating.h
        -: 3391:
        -: 3392:namespace Catch {
        -: 3393:namespace Matchers {
        -: 3394:
        -: 3395:namespace Floating {
        -: 3396:
        -: 3397:enum class FloatingPointKind : uint8_t;
        -: 3398:
        -: 3399:struct WithinAbsMatcher : MatcherBase<double> {
        -: 3400:WithinAbsMatcher(double target, double margin);
        -: 3401:bool match(double const& matchee) const override;
        -: 3402:std::string describe() const override;
        -: 3403:private:
        -: 3404:double m_target;
        -: 3405:double m_margin;
        -: 3406:};
        -: 3407:
        -: 3408:struct WithinUlpsMatcher : MatcherBase<double> {
        -: 3409:WithinUlpsMatcher(double target, uint64_t ulps, FloatingPointKind baseType);
        -: 3410:bool match(double const& matchee) const override;
        -: 3411:std::string describe() const override;
        -: 3412:private:
        -: 3413:double m_target;
        -: 3414:uint64_t m_ulps;
        -: 3415:FloatingPointKind m_type;
        -: 3416:};
        -: 3417:
        -: 3418:// Given IEEE-754 format for floats and doubles, we can assume
        -: 3419:// that float -> double promotion is lossless. Given this, we can
        -: 3420:// assume that if we do the standard relative comparison of
        -: 3421:// |lhs - rhs| <= epsilon * max(fabs(lhs), fabs(rhs)), then we get
        -: 3422:// the same result if we do this for floats, as if we do this for
        -: 3423:// doubles that were promoted from floats.
        -: 3424:struct WithinRelMatcher : MatcherBase<double> {
        -: 3425:WithinRelMatcher(double target, double epsilon);
        -: 3426:bool match(double const& matchee) const override;
        -: 3427:std::string describe() const override;
        -: 3428:private:
        -: 3429:double m_target;
        -: 3430:double m_epsilon;
        -: 3431:};
        -: 3432:
        -: 3433:} // namespace Floating
        -: 3434:
        -: 3435:// The following functions create the actual matcher objects.
        -: 3436:// This allows the types to be inferred
        -: 3437:Floating::WithinUlpsMatcher WithinULP(double target, uint64_t maxUlpDiff);
        -: 3438:Floating::WithinUlpsMatcher WithinULP(float target, uint64_t maxUlpDiff);
        -: 3439:Floating::WithinAbsMatcher WithinAbs(double target, double margin);
        -: 3440:Floating::WithinRelMatcher WithinRel(double target, double eps);
        -: 3441:// defaults epsilon to 100*numeric_limits<double>::epsilon()
        -: 3442:Floating::WithinRelMatcher WithinRel(double target);
        -: 3443:Floating::WithinRelMatcher WithinRel(float target, float eps);
        -: 3444:// defaults epsilon to 100*numeric_limits<float>::epsilon()
        -: 3445:Floating::WithinRelMatcher WithinRel(float target);
        -: 3446:
        -: 3447:} // namespace Matchers
        -: 3448:} // namespace Catch
        -: 3449:
        -: 3450:// end catch_matchers_floating.h
        -: 3451:// start catch_matchers_generic.hpp
        -: 3452:
        -: 3453:#include <functional>
        -: 3454:#include <string>
        -: 3455:
        -: 3456:namespace Catch {
        -: 3457:namespace Matchers {
        -: 3458:namespace Generic {
        -: 3459:
        -: 3460:namespace Detail {
        -: 3461:std::string finalizeDescription(const std::string& desc);
        -: 3462:}
        -: 3463:
        -: 3464:template <typename T>
        -: 3465:class PredicateMatcher : public MatcherBase<T> {
        -: 3466:std::function<bool(T const&)> m_predicate;
        -: 3467:std::string m_description;
        -: 3468:public:
        -: 3469:
        -: 3470:PredicateMatcher(std::function<bool(T const&)> const& elem, std::string const& descr)
        -: 3471::m_predicate(std::move(elem)),
        -: 3472:m_description(Detail::finalizeDescription(descr))
        -: 3473:{}
        -: 3474:
        -: 3475:bool match( T const& item ) const override {
        -: 3476:return m_predicate(item);
        -: 3477:}
        -: 3478:
        -: 3479:std::string describe() const override {
        -: 3480:return m_description;
        -: 3481:}
        -: 3482:};
        -: 3483:
        -: 3484:} // namespace Generic
        -: 3485:
        -: 3486:// The following functions create the actual matcher objects.
        -: 3487:// The user has to explicitly specify type to the function, because
        -: 3488:// inferring std::function<bool(T const&)> is hard (but possible) and
        -: 3489:// requires a lot of TMP.
        -: 3490:template<typename T>
        -: 3491:Generic::PredicateMatcher<T> Predicate(std::function<bool(T const&)> const& predicate, std::string const& description = "") {
        -: 3492:return Generic::PredicateMatcher<T>(predicate, description);
        -: 3493:}
        -: 3494:
        -: 3495:} // namespace Matchers
        -: 3496:} // namespace Catch
        -: 3497:
        -: 3498:// end catch_matchers_generic.hpp
        -: 3499:// start catch_matchers_string.h
        -: 3500:
        -: 3501:#include <string>
        -: 3502:
        -: 3503:namespace Catch {
        -: 3504:namespace Matchers {
        -: 3505:
        -: 3506:namespace StdString {
        -: 3507:
        -: 3508:struct CasedString
        -: 3509:{
        -: 3510:CasedString( std::string const& str, CaseSensitive::Choice caseSensitivity );
        -: 3511:std::string adjustString( std::string const& str ) const;
        -: 3512:std::string caseSensitivitySuffix() const;
        -: 3513:
        -: 3514:CaseSensitive::Choice m_caseSensitivity;
        -: 3515:std::string m_str;
        -: 3516:};
        -: 3517:
        -: 3518:struct StringMatcherBase : MatcherBase<std::string> {
        -: 3519:StringMatcherBase( std::string const& operation, CasedString const& comparator );
        -: 3520:std::string describe() const override;
        -: 3521:
        -: 3522:CasedString m_comparator;
        -: 3523:std::string m_operation;
        -: 3524:};
        -: 3525:
        -: 3526:struct EqualsMatcher : StringMatcherBase {
        -: 3527:EqualsMatcher( CasedString const& comparator );
        -: 3528:bool match( std::string const& source ) const override;
        -: 3529:};
        -: 3530:struct ContainsMatcher : StringMatcherBase {
        -: 3531:ContainsMatcher( CasedString const& comparator );
        -: 3532:bool match( std::string const& source ) const override;
        -: 3533:};
        -: 3534:struct StartsWithMatcher : StringMatcherBase {
        -: 3535:StartsWithMatcher( CasedString const& comparator );
        -: 3536:bool match( std::string const& source ) const override;
        -: 3537:};
        -: 3538:struct EndsWithMatcher : StringMatcherBase {
        -: 3539:EndsWithMatcher( CasedString const& comparator );
        -: 3540:bool match( std::string const& source ) const override;
        -: 3541:};
        -: 3542:
        -: 3543:struct RegexMatcher : MatcherBase<std::string> {
        -: 3544:RegexMatcher( std::string regex, CaseSensitive::Choice caseSensitivity );
        -: 3545:bool match( std::string const& matchee ) const override;
        -: 3546:std::string describe() const override;
        -: 3547:
        -: 3548:private:
        -: 3549:std::string m_regex;
        -: 3550:CaseSensitive::Choice m_caseSensitivity;
        -: 3551:};
        -: 3552:
        -: 3553:} // namespace StdString
        -: 3554:
        -: 3555:// The following functions create the actual matcher objects.
        -: 3556:// This allows the types to be inferred
        -: 3557:
        -: 3558:StdString::EqualsMatcher Equals( std::string const& str, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes );
        -: 3559:StdString::ContainsMatcher Contains( std::string const& str, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes );
        -: 3560:StdString::EndsWithMatcher EndsWith( std::string const& str, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes );
        -: 3561:StdString::StartsWithMatcher StartsWith( std::string const& str, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes );
        -: 3562:StdString::RegexMatcher Matches( std::string const& regex, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes );
        -: 3563:
        -: 3564:} // namespace Matchers
        -: 3565:} // namespace Catch
        -: 3566:
        -: 3567:// end catch_matchers_string.h
        -: 3568:// start catch_matchers_vector.h
        -: 3569:
        -: 3570:#include <algorithm>
        -: 3571:
        -: 3572:namespace Catch {
        -: 3573:namespace Matchers {
        -: 3574:
        -: 3575:namespace Vector {
        -: 3576:template<typename T>
        -: 3577:struct ContainsElementMatcher : MatcherBase<std::vector<T>> {
        -: 3578:
        -: 3579:ContainsElementMatcher(T const &comparator) : m_comparator( comparator) {}
        -: 3580:
        -: 3581:bool match(std::vector<T> const &v) const override {
        -: 3582:for (auto const& el : v) {
        -: 3583:if (el == m_comparator) {
        -: 3584:return true;
        -: 3585:}
        -: 3586:}
        -: 3587:return false;
        -: 3588:}
        -: 3589:
        -: 3590:std::string describe() const override {
        -: 3591:return "Contains: " + ::Catch::Detail::stringify( m_comparator );
        -: 3592:}
        -: 3593:
        -: 3594:T const& m_comparator;
        -: 3595:};
        -: 3596:
        -: 3597:template<typename T>
        -: 3598:struct ContainsMatcher : MatcherBase<std::vector<T>> {
        -: 3599:
        -: 3600:ContainsMatcher(std::vector<T> const &comparator) : m_comparator( comparator ) {}
        -: 3601:
        -: 3602:bool match(std::vector<T> const &v) const override {
        -: 3603:// !TBD: see note in EqualsMatcher
        -: 3604:if (m_comparator.size() > v.size())
        -: 3605:return false;
        -: 3606:for (auto const& comparator : m_comparator) {
        -: 3607:auto present = false;
        -: 3608:for (const auto& el : v) {
        -: 3609:if (el == comparator) {
        -: 3610:present = true;
        -: 3611:break;
        -: 3612:}
        -: 3613:}
        -: 3614:if (!present) {
        -: 3615:return false;
        -: 3616:}
        -: 3617:}
        -: 3618:return true;
        -: 3619:}
        -: 3620:std::string describe() const override {
        -: 3621:return "Contains: " + ::Catch::Detail::stringify( m_comparator );
        -: 3622:}
        -: 3623:
        -: 3624:std::vector<T> const& m_comparator;
        -: 3625:};
        -: 3626:
        -: 3627:template<typename T>
        -: 3628:struct EqualsMatcher : MatcherBase<std::vector<T>> {
        -: 3629:
        -: 3630:EqualsMatcher(std::vector<T> const &comparator) : m_comparator( comparator ) {}
        -: 3631:
        -: 3632:bool match(std::vector<T> const &v) const override {
        -: 3633:// !TBD: This currently works if all elements can be compared using !=
        -: 3634:// - a more general approach would be via a compare template that defaults
        -: 3635:// to using !=. but could be specialised for, e.g. std::vector<T> etc
        -: 3636:// - then just call that directly
        -: 3637:if (m_comparator.size() != v.size())
        -: 3638:return false;
        -: 3639:for (std::size_t i = 0; i < v.size(); ++i)
        -: 3640:if (m_comparator[i] != v[i])
        -: 3641:return false;
        -: 3642:return true;
        -: 3643:}
        -: 3644:std::string describe() const override {
        -: 3645:return "Equals: " + ::Catch::Detail::stringify( m_comparator );
        -: 3646:}
        -: 3647:std::vector<T> const& m_comparator;
        -: 3648:};
        -: 3649:
        -: 3650:template<typename T>
        -: 3651:struct ApproxMatcher : MatcherBase<std::vector<T>> {
        -: 3652:
        -: 3653:ApproxMatcher(std::vector<T> const& comparator) : m_comparator( comparator ) {}
        -: 3654:
        -: 3655:bool match(std::vector<T> const &v) const override {
        -: 3656:if (m_comparator.size() != v.size())
        -: 3657:return false;
        -: 3658:for (std::size_t i = 0; i < v.size(); ++i)
        -: 3659:if (m_comparator[i] != approx(v[i]))
        -: 3660:return false;
        -: 3661:return true;
        -: 3662:}
        -: 3663:std::string describe() const override {
        -: 3664:return "is approx: " + ::Catch::Detail::stringify( m_comparator );
        -: 3665:}
        -: 3666:template <typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3667:ApproxMatcher& epsilon( T const& newEpsilon ) {
        -: 3668:approx.epsilon(newEpsilon);
        -: 3669:return *this;
        -: 3670:}
        -: 3671:template <typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3672:ApproxMatcher& margin( T const& newMargin ) {
        -: 3673:approx.margin(newMargin);
        -: 3674:return *this;
        -: 3675:}
        -: 3676:template <typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 3677:ApproxMatcher& scale( T const& newScale ) {
        -: 3678:approx.scale(newScale);
        -: 3679:return *this;
        -: 3680:}
        -: 3681:
        -: 3682:std::vector<T> const& m_comparator;
        -: 3683:mutable Catch::Detail::Approx approx = Catch::Detail::Approx::custom();
        -: 3684:};
        -: 3685:
        -: 3686:template<typename T>
        -: 3687:struct UnorderedEqualsMatcher : MatcherBase<std::vector<T>> {
        -: 3688:UnorderedEqualsMatcher(std::vector<T> const& target) : m_target(target) {}
        -: 3689:bool match(std::vector<T> const& vec) const override {
        -: 3690:// Note: This is a reimplementation of std::is_permutation,
        -: 3691://       because I don't want to include <algorithm> inside the common path
        -: 3692:if (m_target.size() != vec.size()) {
        -: 3693:return false;
        -: 3694:}
        -: 3695:return std::is_permutation(m_target.begin(), m_target.end(), vec.begin());
        -: 3696:}
        -: 3697:
        -: 3698:std::string describe() const override {
        -: 3699:return "UnorderedEquals: " + ::Catch::Detail::stringify(m_target);
        -: 3700:}
        -: 3701:private:
        -: 3702:std::vector<T> const& m_target;
        -: 3703:};
        -: 3704:
        -: 3705:} // namespace Vector
        -: 3706:
        -: 3707:// The following functions create the actual matcher objects.
        -: 3708:// This allows the types to be inferred
        -: 3709:
        -: 3710:template<typename T>
        -: 3711:Vector::ContainsMatcher<T> Contains( std::vector<T> const& comparator ) {
        -: 3712:return Vector::ContainsMatcher<T>( comparator );
        -: 3713:}
        -: 3714:
        -: 3715:template<typename T>
        -: 3716:Vector::ContainsElementMatcher<T> VectorContains( T const& comparator ) {
        -: 3717:return Vector::ContainsElementMatcher<T>( comparator );
        -: 3718:}
        -: 3719:
        -: 3720:template<typename T>
        -: 3721:Vector::EqualsMatcher<T> Equals( std::vector<T> const& comparator ) {
        -: 3722:return Vector::EqualsMatcher<T>( comparator );
        -: 3723:}
        -: 3724:
        -: 3725:template<typename T>
        -: 3726:Vector::ApproxMatcher<T> Approx( std::vector<T> const& comparator ) {
        -: 3727:return Vector::ApproxMatcher<T>( comparator );
        -: 3728:}
        -: 3729:
        -: 3730:template<typename T>
        -: 3731:Vector::UnorderedEqualsMatcher<T> UnorderedEquals(std::vector<T> const& target) {
        -: 3732:return Vector::UnorderedEqualsMatcher<T>(target);
        -: 3733:}
        -: 3734:
        -: 3735:} // namespace Matchers
        -: 3736:} // namespace Catch
        -: 3737:
        -: 3738:// end catch_matchers_vector.h
        -: 3739:namespace Catch {
        -: 3740:
        -: 3741:template<typename ArgT, typename MatcherT>
        -: 3742:class MatchExpr : public ITransientExpression {
        -: 3743:ArgT const& m_arg;
        -: 3744:MatcherT m_matcher;
        -: 3745:StringRef m_matcherString;
        -: 3746:public:
function _ZN5Catch9MatchExprINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_8Matchers4Impl11MatcherBaseIS6_EEEC1ERKS6_SC_RKNS_9StringRefE called 0 returned 0% blocks executed 0%
    #####: 3747:MatchExpr( ArgT const& arg, MatcherT const& matcher, StringRef const& matcherString )
        -: 3748::   ITransientExpression{ true, matcher.match( arg ) },
        -: 3749:m_arg( arg ),
        -: 3750:m_matcher( matcher ),
    #####: 3751:m_matcherString( matcherString )
    %%%%%: 3751-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3752:{}
        -: 3753:
function _ZNK5Catch9MatchExprINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_8Matchers4Impl11MatcherBaseIS6_EEE29streamReconstructedExpressionERSo called 0 returned 0% blocks executed 0%
    #####: 3754:void streamReconstructedExpression( std::ostream &os ) const override {
    #####: 3755:auto matcherAsString = m_matcher.toString();
    %%%%%: 3755-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3755-block  1
call    3 never executed
    $$$$$: 3755-block  2
call    4 never executed
    #####: 3756:os << Catch::Detail::stringify( m_arg ) << ' ';
    %%%%%: 3756-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3756-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3756-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3756-block  3
call    9 never executed
    $$$$$: 3756-block  4
call   10 never executed
    $$$$$: 3756-block  5
    #####: 3757:if( matcherAsString == Detail::unprintableString )
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3758:os << m_matcherString;
    %%%%%: 3758-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3759:else
    #####: 3760:os << matcherAsString;
    %%%%%: 3760-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3761:}
        -: 3762:};
        -: 3763:
        -: 3764:using StringMatcher = Matchers::Impl::MatcherBase<std::string>;
        -: 3765:
        -: 3766:void handleExceptionMatchExpr( AssertionHandler& handler, StringMatcher const& matcher, StringRef const& matcherString  );
        -: 3767:
        -: 3768:template<typename ArgT, typename MatcherT>
        -: 3769:auto makeMatchExpr( ArgT const& arg, MatcherT const& matcher, StringRef const& matcherString  ) -> MatchExpr<ArgT, MatcherT> {
        -: 3770:return MatchExpr<ArgT, MatcherT>( arg, matcher, matcherString );
        -: 3771:}
        -: 3772:
        -: 3773:} // namespace Catch
        -: 3774:
        -: 3775:///////////////////////////////////////////////////////////////////////////////
        -: 3776:#define INTERNAL_CHECK_THAT( macroName, matcher, resultDisposition, arg ) \
        -: 3777:    do { \
        -: 3778:        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(arg) ", " CATCH_INTERNAL_STRINGIFY(matcher), resultDisposition ); \
        -: 3779:        INTERNAL_CATCH_TRY { \
        -: 3780:            catchAssertionHandler.handleExpr( Catch::makeMatchExpr( arg, matcher, #matcher##_catch_sr ) ); \
        -: 3781:        } INTERNAL_CATCH_CATCH( catchAssertionHandler ) \
        -: 3782:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 3783:    } while( false )
        -: 3784:
        -: 3785:///////////////////////////////////////////////////////////////////////////////
        -: 3786:#define INTERNAL_CATCH_THROWS_MATCHES( macroName, exceptionType, resultDisposition, matcher, ... ) \
        -: 3787:    do { \
        -: 3788:        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__) ", " CATCH_INTERNAL_STRINGIFY(exceptionType) ", " CATCH_INTERNAL_STRINGIFY(matcher), resultDisposition ); \
        -: 3789:        if( catchAssertionHandler.allowThrows() ) \
        -: 3790:            try { \
        -: 3791:                static_cast<void>(__VA_ARGS__ ); \
        -: 3792:                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \
        -: 3793:            } \
        -: 3794:            catch( exceptionType const& ex ) { \
        -: 3795:                catchAssertionHandler.handleExpr( Catch::makeMatchExpr( ex, matcher, #matcher##_catch_sr ) ); \
        -: 3796:            } \
        -: 3797:            catch( ... ) { \
        -: 3798:                catchAssertionHandler.handleUnexpectedInflightException(); \
        -: 3799:            } \
        -: 3800:        else \
        -: 3801:            catchAssertionHandler.handleThrowingCallSkipped(); \
        -: 3802:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 3803:    } while( false )
        -: 3804:
        -: 3805:// end catch_capture_matchers.h
        -: 3806:#endif
        -: 3807:// start catch_generators.hpp
        -: 3808:
        -: 3809:// start catch_interfaces_generatortracker.h
        -: 3810:
        -: 3811:
        -: 3812:#include <memory>
        -: 3813:
        -: 3814:namespace Catch {
        -: 3815:
        -: 3816:namespace Generators {
        -: 3817:class GeneratorUntypedBase {
        -: 3818:public:
        -: 3819:GeneratorUntypedBase() = default;
        -: 3820:virtual ~GeneratorUntypedBase();
        -: 3821:// Attempts to move the generator to the next element
        -: 3822://
        -: 3823:// Returns true iff the move succeeded (and a valid element
        -: 3824:// can be retrieved).
        -: 3825:virtual bool next() = 0;
        -: 3826:};
        -: 3827:using GeneratorBasePtr = std::unique_ptr<GeneratorUntypedBase>;
        -: 3828:
        -: 3829:} // namespace Generators
        -: 3830:
        -: 3831:struct IGeneratorTracker {
        -: 3832:virtual ~IGeneratorTracker();
        -: 3833:virtual auto hasGenerator() const -> bool = 0;
        -: 3834:virtual auto getGenerator() const -> Generators::GeneratorBasePtr const& = 0;
        -: 3835:virtual void setGenerator( Generators::GeneratorBasePtr&& generator ) = 0;
        -: 3836:};
        -: 3837:
        -: 3838:} // namespace Catch
        -: 3839:
        -: 3840:// end catch_interfaces_generatortracker.h
        -: 3841:// start catch_enforce.h
        -: 3842:
        -: 3843:#include <exception>
        -: 3844:
        -: 3845:namespace Catch {
        -: 3846:#if !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)
        -: 3847:template <typename Ex>
        -: 3848:[[noreturn]]
    #####: 3849:void throw_exception(Ex const& e) {
    #####: 3850:throw e;
        -: 3851:}
------------------
_ZN5Catch15throw_exceptionISt13runtime_errorEEvRKT_:
function _ZN5Catch15throw_exceptionISt13runtime_errorEEvRKT_ called 0 returned 0% blocks executed 0%
    #####: 3849:void throw_exception(Ex const& e) {
    #####: 3850:throw e;
    %%%%%: 3850-block  0
call    0 never executed
call    1 never executed
        -: 3851:}
------------------
_ZN5Catch15throw_exceptionISt12domain_errorEEvRKT_:
function _ZN5Catch15throw_exceptionISt12domain_errorEEvRKT_ called 0 returned 0% blocks executed 0%
    #####: 3849:void throw_exception(Ex const& e) {
    #####: 3850:throw e;
    %%%%%: 3850-block  0
call    0 never executed
call    1 never executed
        -: 3851:}
------------------
_ZN5Catch15throw_exceptionISt11logic_errorEEvRKT_:
function _ZN5Catch15throw_exceptionISt11logic_errorEEvRKT_ called 0 returned 0% blocks executed 0%
    #####: 3849:void throw_exception(Ex const& e) {
    #####: 3850:throw e;
    %%%%%: 3850-block  0
call    0 never executed
call    1 never executed
        -: 3851:}
------------------
        -: 3852:#else // ^^ Exceptions are enabled //  Exceptions are disabled vv
        -: 3853:[[noreturn]]
        -: 3854:void throw_exception(std::exception const& e);
        -: 3855:#endif
        -: 3856:
        -: 3857:[[noreturn]]
        -: 3858:void throw_logic_error(std::string const& msg);
        -: 3859:[[noreturn]]
        -: 3860:void throw_domain_error(std::string const& msg);
        -: 3861:[[noreturn]]
        -: 3862:void throw_runtime_error(std::string const& msg);
        -: 3863:
        -: 3864:} // namespace Catch;
        -: 3865:
        -: 3866:#define CATCH_MAKE_MSG(...) \
        -: 3867:    (Catch::ReusableStringStream() << __VA_ARGS__).str()
        -: 3868:
        -: 3869:#define CATCH_INTERNAL_ERROR(...) \
        -: 3870:    Catch::throw_logic_error(CATCH_MAKE_MSG( CATCH_INTERNAL_LINEINFO << ": Internal Catch2 error: " << __VA_ARGS__))
        -: 3871:
        -: 3872:#define CATCH_ERROR(...) \
        -: 3873:    Catch::throw_domain_error(CATCH_MAKE_MSG( __VA_ARGS__ ))
        -: 3874:
        -: 3875:#define CATCH_RUNTIME_ERROR(...) \
        -: 3876:    Catch::throw_runtime_error(CATCH_MAKE_MSG( __VA_ARGS__ ))
        -: 3877:
        -: 3878:#define CATCH_ENFORCE( condition, ... ) \
        -: 3879:    do{ if( !(condition) ) CATCH_ERROR( __VA_ARGS__ ); } while(false)
        -: 3880:
        -: 3881:// end catch_enforce.h
        -: 3882:#include <memory>
        -: 3883:#include <vector>
        -: 3884:#include <cassert>
        -: 3885:
        -: 3886:#include <utility>
        -: 3887:#include <exception>
        -: 3888:
        -: 3889:namespace Catch {
        -: 3890:
        -: 3891:class GeneratorException : public std::exception {
        -: 3892:const char* const m_msg = "";
        -: 3893:
        -: 3894:public:
        -: 3895:GeneratorException(const char* msg):
        -: 3896:m_msg(msg)
        -: 3897:{}
        -: 3898:
        -: 3899:const char* what() const noexcept override final;
        -: 3900:};
        -: 3901:
        -: 3902:namespace Generators {
        -: 3903:
        -: 3904:// !TBD move this into its own location?
        -: 3905:namespace pf{
        -: 3906:template<typename T, typename... Args>
        -: 3907:std::unique_ptr<T> make_unique( Args&&... args ) {
        -: 3908:return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
        -: 3909:}
        -: 3910:}
        -: 3911:
        -: 3912:template<typename T>
        -: 3913:struct IGenerator : GeneratorUntypedBase {
        -: 3914:virtual ~IGenerator() = default;
        -: 3915:
        -: 3916:// Returns the current element of the generator
        -: 3917://
        -: 3918:// \Precondition The generator is either freshly constructed,
        -: 3919:// or the last call to `next()` returned true
        -: 3920:virtual T const& get() const = 0;
        -: 3921:using type = T;
        -: 3922:};
        -: 3923:
        -: 3924:template<typename T>
        -: 3925:class SingleValueGenerator final : public IGenerator<T> {
        -: 3926:T m_value;
        -: 3927:public:
        -: 3928:SingleValueGenerator(T const& value) : m_value( value ) {}
        -: 3929:SingleValueGenerator(T&& value) : m_value(std::move(value)) {}
        -: 3930:
        -: 3931:T const& get() const override {
        -: 3932:return m_value;
        -: 3933:}
        -: 3934:bool next() override {
        -: 3935:return false;
        -: 3936:}
        -: 3937:};
        -: 3938:
        -: 3939:template<typename T>
        -: 3940:class FixedValuesGenerator final : public IGenerator<T> {
        -: 3941:static_assert(!std::is_same<T, bool>::value,
        -: 3942:"FixedValuesGenerator does not support bools because of std::vector<bool>"
        -: 3943:"specialization, use SingleValue Generator instead.");
        -: 3944:std::vector<T> m_values;
        -: 3945:size_t m_idx = 0;
        -: 3946:public:
        -: 3947:FixedValuesGenerator( std::initializer_list<T> values ) : m_values( values ) {}
        -: 3948:
        -: 3949:T const& get() const override {
        -: 3950:return m_values[m_idx];
        -: 3951:}
        -: 3952:bool next() override {
        -: 3953:++m_idx;
        -: 3954:return m_idx < m_values.size();
        -: 3955:}
        -: 3956:};
        -: 3957:
        -: 3958:template <typename T>
        -: 3959:class GeneratorWrapper final {
        -: 3960:std::unique_ptr<IGenerator<T>> m_generator;
        -: 3961:public:
        -: 3962:GeneratorWrapper(std::unique_ptr<IGenerator<T>> generator):
        -: 3963:m_generator(std::move(generator))
        -: 3964:{}
        -: 3965:T const& get() const {
        -: 3966:return m_generator->get();
        -: 3967:}
        -: 3968:bool next() {
        -: 3969:return m_generator->next();
        -: 3970:}
        -: 3971:};
        -: 3972:
        -: 3973:template <typename T>
        -: 3974:GeneratorWrapper<T> value(T&& value) {
        -: 3975:return GeneratorWrapper<T>(pf::make_unique<SingleValueGenerator<T>>(std::forward<T>(value)));
        -: 3976:}
        -: 3977:template <typename T>
        -: 3978:GeneratorWrapper<T> values(std::initializer_list<T> values) {
        -: 3979:return GeneratorWrapper<T>(pf::make_unique<FixedValuesGenerator<T>>(values));
        -: 3980:}
        -: 3981:
        -: 3982:template<typename T>
        -: 3983:class Generators : public IGenerator<T> {
        -: 3984:std::vector<GeneratorWrapper<T>> m_generators;
        -: 3985:size_t m_current = 0;
        -: 3986:
        -: 3987:void populate(GeneratorWrapper<T>&& generator) {
        -: 3988:m_generators.emplace_back(std::move(generator));
        -: 3989:}
        -: 3990:void populate(T&& val) {
        -: 3991:m_generators.emplace_back(value(std::move(val)));
        -: 3992:}
        -: 3993:template<typename U>
        -: 3994:void populate(U&& val) {
        -: 3995:populate(T(std::move(val)));
        -: 3996:}
        -: 3997:template<typename U, typename... Gs>
        -: 3998:void populate(U&& valueOrGenerator, Gs... moreGenerators) {
        -: 3999:populate(std::forward<U>(valueOrGenerator));
        -: 4000:populate(std::forward<Gs>(moreGenerators)...);
        -: 4001:}
        -: 4002:
        -: 4003:public:
        -: 4004:template <typename... Gs>
        -: 4005:Generators(Gs... moreGenerators) {
        -: 4006:m_generators.reserve(sizeof...(Gs));
        -: 4007:populate(std::forward<Gs>(moreGenerators)...);
        -: 4008:}
        -: 4009:
        -: 4010:T const& get() const override {
        -: 4011:return m_generators[m_current].get();
        -: 4012:}
        -: 4013:
        -: 4014:bool next() override {
        -: 4015:if (m_current >= m_generators.size()) {
        -: 4016:return false;
        -: 4017:}
        -: 4018:const bool current_status = m_generators[m_current].next();
        -: 4019:if (!current_status) {
        -: 4020:++m_current;
        -: 4021:}
        -: 4022:return m_current < m_generators.size();
        -: 4023:}
        -: 4024:};
        -: 4025:
        -: 4026:template<typename... Ts>
        -: 4027:GeneratorWrapper<std::tuple<Ts...>> table( std::initializer_list<std::tuple<typename std::decay<Ts>::type...>> tuples ) {
        -: 4028:return values<std::tuple<Ts...>>( tuples );
        -: 4029:}
        -: 4030:
        -: 4031:// Tag type to signal that a generator sequence should convert arguments to a specific type
        -: 4032:template <typename T>
        -: 4033:struct as {};
        -: 4034:
        -: 4035:template<typename T, typename... Gs>
        -: 4036:auto makeGenerators( GeneratorWrapper<T>&& generator, Gs... moreGenerators ) -> Generators<T> {
        -: 4037:return Generators<T>(std::move(generator), std::forward<Gs>(moreGenerators)...);
        -: 4038:}
        -: 4039:template<typename T>
        -: 4040:auto makeGenerators( GeneratorWrapper<T>&& generator ) -> Generators<T> {
        -: 4041:return Generators<T>(std::move(generator));
        -: 4042:}
        -: 4043:template<typename T, typename... Gs>
        -: 4044:auto makeGenerators( T&& val, Gs... moreGenerators ) -> Generators<T> {
        -: 4045:return makeGenerators( value( std::forward<T>( val ) ), std::forward<Gs>( moreGenerators )... );
        -: 4046:}
        -: 4047:template<typename T, typename U, typename... Gs>
        -: 4048:auto makeGenerators( as<T>, U&& val, Gs... moreGenerators ) -> Generators<T> {
        -: 4049:return makeGenerators( value( T( std::forward<U>( val ) ) ), std::forward<Gs>( moreGenerators )... );
        -: 4050:}
        -: 4051:
        -: 4052:auto acquireGeneratorTracker( SourceLineInfo const& lineInfo ) -> IGeneratorTracker&;
        -: 4053:
        -: 4054:template<typename L>
        -: 4055:// Note: The type after -> is weird, because VS2015 cannot parse
        -: 4056://       the expression used in the typedef inside, when it is in
        -: 4057://       return type. Yeah.
        -: 4058:auto generate( SourceLineInfo const& lineInfo, L const& generatorExpression ) -> decltype(std::declval<decltype(generatorExpression())>().get()) {
        -: 4059:using UnderlyingType = typename decltype(generatorExpression())::type;
        -: 4060:
        -: 4061:IGeneratorTracker& tracker = acquireGeneratorTracker( lineInfo );
        -: 4062:if (!tracker.hasGenerator()) {
        -: 4063:tracker.setGenerator(pf::make_unique<Generators<UnderlyingType>>(generatorExpression()));
        -: 4064:}
        -: 4065:
        -: 4066:auto const& generator = static_cast<IGenerator<UnderlyingType> const&>( *tracker.getGenerator() );
        -: 4067:return generator.get();
        -: 4068:}
        -: 4069:
        -: 4070:} // namespace Generators
        -: 4071:} // namespace Catch
        -: 4072:
        -: 4073:#define GENERATE( ... ) \
        -: 4074:    Catch::Generators::generate( CATCH_INTERNAL_LINEINFO, [ ]{ using namespace Catch::Generators; return makeGenerators( __VA_ARGS__ ); } )
        -: 4075:#define GENERATE_COPY( ... ) \
        -: 4076:    Catch::Generators::generate( CATCH_INTERNAL_LINEINFO, [=]{ using namespace Catch::Generators; return makeGenerators( __VA_ARGS__ ); } )
        -: 4077:#define GENERATE_REF( ... ) \
        -: 4078:    Catch::Generators::generate( CATCH_INTERNAL_LINEINFO, [&]{ using namespace Catch::Generators; return makeGenerators( __VA_ARGS__ ); } )
        -: 4079:
        -: 4080:// end catch_generators.hpp
        -: 4081:// start catch_generators_generic.hpp
        -: 4082:
        -: 4083:namespace Catch {
        -: 4084:namespace Generators {
        -: 4085:
        -: 4086:template <typename T>
        -: 4087:class TakeGenerator : public IGenerator<T> {
        -: 4088:GeneratorWrapper<T> m_generator;
        -: 4089:size_t m_returned = 0;
        -: 4090:size_t m_target;
        -: 4091:public:
        -: 4092:TakeGenerator(size_t target, GeneratorWrapper<T>&& generator):
        -: 4093:m_generator(std::move(generator)),
        -: 4094:m_target(target)
        -: 4095:{
        -: 4096:assert(target != 0 && "Empty generators are not allowed");
        -: 4097:}
        -: 4098:T const& get() const override {
        -: 4099:return m_generator.get();
        -: 4100:}
        -: 4101:bool next() override {
        -: 4102:++m_returned;
        -: 4103:if (m_returned >= m_target) {
        -: 4104:return false;
        -: 4105:}
        -: 4106:
        -: 4107:const auto success = m_generator.next();
        -: 4108:// If the underlying generator does not contain enough values
        -: 4109:// then we cut short as well
        -: 4110:if (!success) {
        -: 4111:m_returned = m_target;
        -: 4112:}
        -: 4113:return success;
        -: 4114:}
        -: 4115:};
        -: 4116:
        -: 4117:template <typename T>
        -: 4118:GeneratorWrapper<T> take(size_t target, GeneratorWrapper<T>&& generator) {
        -: 4119:return GeneratorWrapper<T>(pf::make_unique<TakeGenerator<T>>(target, std::move(generator)));
        -: 4120:}
        -: 4121:
        -: 4122:template <typename T, typename Predicate>
        -: 4123:class FilterGenerator : public IGenerator<T> {
        -: 4124:GeneratorWrapper<T> m_generator;
        -: 4125:Predicate m_predicate;
        -: 4126:public:
        -: 4127:template <typename P = Predicate>
        -: 4128:FilterGenerator(P&& pred, GeneratorWrapper<T>&& generator):
        -: 4129:m_generator(std::move(generator)),
        -: 4130:m_predicate(std::forward<P>(pred))
        -: 4131:{
        -: 4132:if (!m_predicate(m_generator.get())) {
        -: 4133:// It might happen that there are no values that pass the
        -: 4134:// filter. In that case we throw an exception.
        -: 4135:auto has_initial_value = next();
        -: 4136:if (!has_initial_value) {
        -: 4137:Catch::throw_exception(GeneratorException("No valid value found in filtered generator"));
        -: 4138:}
        -: 4139:}
        -: 4140:}
        -: 4141:
        -: 4142:T const& get() const override {
        -: 4143:return m_generator.get();
        -: 4144:}
        -: 4145:
        -: 4146:bool next() override {
        -: 4147:bool success = m_generator.next();
        -: 4148:if (!success) {
        -: 4149:return false;
        -: 4150:}
        -: 4151:while (!m_predicate(m_generator.get()) && (success = m_generator.next()) == true);
        -: 4152:return success;
        -: 4153:}
        -: 4154:};
        -: 4155:
        -: 4156:template <typename T, typename Predicate>
        -: 4157:GeneratorWrapper<T> filter(Predicate&& pred, GeneratorWrapper<T>&& generator) {
        -: 4158:return GeneratorWrapper<T>(std::unique_ptr<IGenerator<T>>(pf::make_unique<FilterGenerator<T, Predicate>>(std::forward<Predicate>(pred), std::move(generator))));
        -: 4159:}
        -: 4160:
        -: 4161:template <typename T>
        -: 4162:class RepeatGenerator : public IGenerator<T> {
        -: 4163:static_assert(!std::is_same<T, bool>::value,
        -: 4164:"RepeatGenerator currently does not support bools"
        -: 4165:"because of std::vector<bool> specialization");
        -: 4166:GeneratorWrapper<T> m_generator;
        -: 4167:mutable std::vector<T> m_returned;
        -: 4168:size_t m_target_repeats;
        -: 4169:size_t m_current_repeat = 0;
        -: 4170:size_t m_repeat_index = 0;
        -: 4171:public:
        -: 4172:RepeatGenerator(size_t repeats, GeneratorWrapper<T>&& generator):
        -: 4173:m_generator(std::move(generator)),
        -: 4174:m_target_repeats(repeats)
        -: 4175:{
        -: 4176:assert(m_target_repeats > 0 && "Repeat generator must repeat at least once");
        -: 4177:}
        -: 4178:
        -: 4179:T const& get() const override {
        -: 4180:if (m_current_repeat == 0) {
        -: 4181:m_returned.push_back(m_generator.get());
        -: 4182:return m_returned.back();
        -: 4183:}
        -: 4184:return m_returned[m_repeat_index];
        -: 4185:}
        -: 4186:
        -: 4187:bool next() override {
        -: 4188:// There are 2 basic cases:
        -: 4189:// 1) We are still reading the generator
        -: 4190:// 2) We are reading our own cache
        -: 4191:
        -: 4192:// In the first case, we need to poke the underlying generator.
        -: 4193:// If it happily moves, we are left in that state, otherwise it is time to start reading from our cache
        -: 4194:if (m_current_repeat == 0) {
        -: 4195:const auto success = m_generator.next();
        -: 4196:if (!success) {
        -: 4197:++m_current_repeat;
        -: 4198:}
        -: 4199:return m_current_repeat < m_target_repeats;
        -: 4200:}
        -: 4201:
        -: 4202:// In the second case, we need to move indices forward and check that we haven't run up against the end
        -: 4203:++m_repeat_index;
        -: 4204:if (m_repeat_index == m_returned.size()) {
        -: 4205:m_repeat_index = 0;
        -: 4206:++m_current_repeat;
        -: 4207:}
        -: 4208:return m_current_repeat < m_target_repeats;
        -: 4209:}
        -: 4210:};
        -: 4211:
        -: 4212:template <typename T>
        -: 4213:GeneratorWrapper<T> repeat(size_t repeats, GeneratorWrapper<T>&& generator) {
        -: 4214:return GeneratorWrapper<T>(pf::make_unique<RepeatGenerator<T>>(repeats, std::move(generator)));
        -: 4215:}
        -: 4216:
        -: 4217:template <typename T, typename U, typename Func>
        -: 4218:class MapGenerator : public IGenerator<T> {
        -: 4219:// TBD: provide static assert for mapping function, for friendly error message
        -: 4220:GeneratorWrapper<U> m_generator;
        -: 4221:Func m_function;
        -: 4222:// To avoid returning dangling reference, we have to save the values
        -: 4223:T m_cache;
        -: 4224:public:
        -: 4225:template <typename F2 = Func>
        -: 4226:MapGenerator(F2&& function, GeneratorWrapper<U>&& generator) :
        -: 4227:m_generator(std::move(generator)),
        -: 4228:m_function(std::forward<F2>(function)),
        -: 4229:m_cache(m_function(m_generator.get()))
        -: 4230:{}
        -: 4231:
        -: 4232:T const& get() const override {
        -: 4233:return m_cache;
        -: 4234:}
        -: 4235:bool next() override {
        -: 4236:const auto success = m_generator.next();
        -: 4237:if (success) {
        -: 4238:m_cache = m_function(m_generator.get());
        -: 4239:}
        -: 4240:return success;
        -: 4241:}
        -: 4242:};
        -: 4243:
        -: 4244:#if defined(__cpp_lib_is_invocable) && __cpp_lib_is_invocable >= 201703
        -: 4245:// std::result_of is deprecated in C++17 and removed in C++20. Hence, it is
        -: 4246:// replaced with std::invoke_result here. Also *_t format is preferred over
        -: 4247:// typename *::type format.
        -: 4248:template <typename Func, typename U>
        -: 4249:using MapFunctionReturnType = std::remove_reference_t<std::remove_cv_t<std::invoke_result_t<Func, U>>>;
        -: 4250:#else
        -: 4251:template <typename Func, typename U>
        -: 4252:using MapFunctionReturnType = typename std::remove_reference<typename std::remove_cv<typename std::result_of<Func(U)>::type>::type>::type;
        -: 4253:#endif
        -: 4254:
        -: 4255:template <typename Func, typename U, typename T = MapFunctionReturnType<Func, U>>
        -: 4256:GeneratorWrapper<T> map(Func&& function, GeneratorWrapper<U>&& generator) {
        -: 4257:return GeneratorWrapper<T>(
        -: 4258:pf::make_unique<MapGenerator<T, U, Func>>(std::forward<Func>(function), std::move(generator))
        -: 4259:);
        -: 4260:}
        -: 4261:
        -: 4262:template <typename T, typename U, typename Func>
        -: 4263:GeneratorWrapper<T> map(Func&& function, GeneratorWrapper<U>&& generator) {
        -: 4264:return GeneratorWrapper<T>(
        -: 4265:pf::make_unique<MapGenerator<T, U, Func>>(std::forward<Func>(function), std::move(generator))
        -: 4266:);
        -: 4267:}
        -: 4268:
        -: 4269:template <typename T>
        -: 4270:class ChunkGenerator final : public IGenerator<std::vector<T>> {
        -: 4271:std::vector<T> m_chunk;
        -: 4272:size_t m_chunk_size;
        -: 4273:GeneratorWrapper<T> m_generator;
        -: 4274:bool m_used_up = false;
        -: 4275:public:
        -: 4276:ChunkGenerator(size_t size, GeneratorWrapper<T> generator) :
        -: 4277:m_chunk_size(size), m_generator(std::move(generator))
        -: 4278:{
        -: 4279:m_chunk.reserve(m_chunk_size);
        -: 4280:if (m_chunk_size != 0) {
        -: 4281:m_chunk.push_back(m_generator.get());
        -: 4282:for (size_t i = 1; i < m_chunk_size; ++i) {
        -: 4283:if (!m_generator.next()) {
        -: 4284:Catch::throw_exception(GeneratorException("Not enough values to initialize the first chunk"));
        -: 4285:}
        -: 4286:m_chunk.push_back(m_generator.get());
        -: 4287:}
        -: 4288:}
        -: 4289:}
        -: 4290:std::vector<T> const& get() const override {
        -: 4291:return m_chunk;
        -: 4292:}
        -: 4293:bool next() override {
        -: 4294:m_chunk.clear();
        -: 4295:for (size_t idx = 0; idx < m_chunk_size; ++idx) {
        -: 4296:if (!m_generator.next()) {
        -: 4297:return false;
        -: 4298:}
        -: 4299:m_chunk.push_back(m_generator.get());
        -: 4300:}
        -: 4301:return true;
        -: 4302:}
        -: 4303:};
        -: 4304:
        -: 4305:template <typename T>
        -: 4306:GeneratorWrapper<std::vector<T>> chunk(size_t size, GeneratorWrapper<T>&& generator) {
        -: 4307:return GeneratorWrapper<std::vector<T>>(
        -: 4308:pf::make_unique<ChunkGenerator<T>>(size, std::move(generator))
        -: 4309:);
        -: 4310:}
        -: 4311:
        -: 4312:} // namespace Generators
        -: 4313:} // namespace Catch
        -: 4314:
        -: 4315:// end catch_generators_generic.hpp
        -: 4316:// start catch_generators_specific.hpp
        -: 4317:
        -: 4318:// start catch_context.h
        -: 4319:
        -: 4320:#include <memory>
        -: 4321:
        -: 4322:namespace Catch {
        -: 4323:
        -: 4324:struct IResultCapture;
        -: 4325:struct IRunner;
        -: 4326:struct IConfig;
        -: 4327:struct IMutableContext;
        -: 4328:
        -: 4329:using IConfigPtr = std::shared_ptr<IConfig const>;
        -: 4330:
       1*: 4331:struct IContext
------------------
_ZN5Catch8IContextD0Ev:
function _ZN5Catch8IContextD0Ev called 0 returned 0% blocks executed 0%
    #####: 4331:struct IContext
    %%%%%: 4331-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch8IContextD2Ev:
function _ZN5Catch8IContextD2Ev called 1 returned 100% blocks executed 100%
        1: 4331:struct IContext
------------------
        -: 4332:{
        -: 4333:virtual ~IContext();
        -: 4334:
        -: 4335:virtual IResultCapture* getResultCapture() = 0;
        -: 4336:virtual IRunner* getRunner() = 0;
        -: 4337:virtual IConfigPtr const& getConfig() const = 0;
        -: 4338:};
        -: 4339:
       1*: 4340:struct IMutableContext : IContext
------------------
_ZN5Catch15IMutableContextD0Ev:
function _ZN5Catch15IMutableContextD0Ev called 0 returned 0% blocks executed 0%
    #####: 4340:struct IMutableContext : IContext
    %%%%%: 4340-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch15IMutableContextD2Ev:
function _ZN5Catch15IMutableContextD2Ev called 1 returned 100% blocks executed 100%
        1: 4340:struct IMutableContext : IContext
        1: 4340-block  0
call    0 returned 1
------------------
        -: 4341:{
        -: 4342:virtual ~IMutableContext();
        -: 4343:virtual void setResultCapture( IResultCapture* resultCapture ) = 0;
        -: 4344:virtual void setRunner( IRunner* runner ) = 0;
        -: 4345:virtual void setConfig( IConfigPtr const& config ) = 0;
        -: 4346:
        -: 4347:private:
        -: 4348:static IMutableContext *currentContext;
        -: 4349:friend IMutableContext& getCurrentMutableContext();
        -: 4350:friend void cleanUpContext();
        -: 4351:static void createContext();
        -: 4352:};
        -: 4353:
function _ZN5Catch24getCurrentMutableContextEv called 54 returned 100% blocks executed 100%
       54: 4354:inline IMutableContext& getCurrentMutableContext()
        -: 4355:{
       54: 4356:if( !IMutableContext::currentContext )
       54: 4356-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 53
        1: 4357:IMutableContext::createContext();
        1: 4357-block  0
call    0 returned 1
        -: 4358:// NOLINTNEXTLINE(clang-analyzer-core.uninitialized.UndefReturn)
       54: 4359:return *IMutableContext::currentContext;
       54: 4359-block  0
        -: 4360:}
        -: 4361:
function _ZN5Catch17getCurrentContextEv called 52 returned 100% blocks executed 100%
       52: 4362:inline IContext& getCurrentContext()
        -: 4363:{
       52: 4364:return getCurrentMutableContext();
       52: 4364-block  0
call    0 returned 52
        -: 4365:}
        -: 4366:
        -: 4367:void cleanUpContext();
        -: 4368:
        -: 4369:class SimplePcg32;
        -: 4370:SimplePcg32& rng();
        -: 4371:}
        -: 4372:
        -: 4373:// end catch_context.h
        -: 4374:// start catch_interfaces_config.h
        -: 4375:
        -: 4376:// start catch_option.hpp
        -: 4377:
        -: 4378:namespace Catch {
        -: 4379:
        -: 4380:// An optional type
        -: 4381:template<typename T>
        -: 4382:class Option {
        -: 4383:public:
        5: 4384:Option() : nullableValue( nullptr ) {}
------------------
_ZN5Catch6OptionINS_12TestCaseInfoEEC2Ev:
function _ZN5Catch6OptionINS_12TestCaseInfoEEC2Ev called 1 returned 100% blocks executed 100%
        1: 4384:Option() : nullableValue( nullptr ) {}
------------------
_ZN5Catch6OptionINS_9GroupInfoEEC2Ev:
function _ZN5Catch6OptionINS_9GroupInfoEEC2Ev called 1 returned 100% blocks executed 100%
        1: 4384:Option() : nullableValue( nullptr ) {}
------------------
_ZN5Catch6OptionINS_11TestRunInfoEEC2Ev:
function _ZN5Catch6OptionINS_11TestRunInfoEEC2Ev called 1 returned 100% blocks executed 100%
        1: 4384:Option() : nullableValue( nullptr ) {}
------------------
_ZN5Catch6OptionINS_15AssertionResultEEC1Ev:
function _ZN5Catch6OptionINS_15AssertionResultEEC1Ev called 1 returned 100% blocks executed 100%
        1: 4384:Option() : nullableValue( nullptr ) {}
------------------
_ZN5Catch6OptionIjEC1Ev:
function _ZN5Catch6OptionIjEC1Ev called 1 returned 100% blocks executed 100%
        1: 4384:Option() : nullableValue( nullptr ) {}
------------------
        -: 4385:Option( T const& _value )
        -: 4386:: nullableValue( new( storage ) T( _value ) )
        -: 4387:{}
        -: 4388:Option( Option const& _other )
        -: 4389:: nullableValue( _other ? new( storage ) T( *_other ) : nullptr )
        -: 4390:{}
        -: 4391:
        5: 4392:~Option() {
        5: 4393:reset();
        5: 4394:}
------------------
_ZN5Catch6OptionINS_12TestCaseInfoEED2Ev:
function _ZN5Catch6OptionINS_12TestCaseInfoEED2Ev called 1 returned 100% blocks executed 100%
        1: 4392:~Option() {
        1: 4393:reset();
        1: 4393-block  0
call    0 returned 1
        1: 4394:}
------------------
_ZN5Catch6OptionINS_9GroupInfoEED2Ev:
function _ZN5Catch6OptionINS_9GroupInfoEED2Ev called 1 returned 100% blocks executed 100%
        1: 4392:~Option() {
        1: 4393:reset();
        1: 4393-block  0
call    0 returned 1
        1: 4394:}
------------------
_ZN5Catch6OptionINS_11TestRunInfoEED2Ev:
function _ZN5Catch6OptionINS_11TestRunInfoEED2Ev called 1 returned 100% blocks executed 100%
        1: 4392:~Option() {
        1: 4393:reset();
        1: 4393-block  0
call    0 returned 1
        1: 4394:}
------------------
_ZN5Catch6OptionINS_15AssertionResultEED1Ev:
function _ZN5Catch6OptionINS_15AssertionResultEED1Ev called 1 returned 100% blocks executed 100%
        1: 4392:~Option() {
        1: 4393:reset();
        1: 4393-block  0
call    0 returned 1
        1: 4394:}
------------------
_ZN5Catch6OptionIjED1Ev:
function _ZN5Catch6OptionIjED1Ev called 1 returned 100% blocks executed 100%
        1: 4392:~Option() {
        1: 4393:reset();
        1: 4393-block  0
call    0 returned 1
        1: 4394:}
------------------
        -: 4395:
        -: 4396:Option& operator= ( Option const& _other ) {
        -: 4397:if( &_other != this ) {
        -: 4398:reset();
        -: 4399:if( _other )
        -: 4400:nullableValue = new( storage ) T( *_other );
        -: 4401:}
        -: 4402:return *this;
        -: 4403:}
      10*: 4404:Option& operator = ( T const& _value ) {
      10*: 4405:reset();
      10*: 4406:nullableValue = new( storage ) T( _value );
      10*: 4407:return *this;
        -: 4408:}
------------------
_ZN5Catch6OptionINS_12TestCaseInfoEEaSERKS1_:
function _ZN5Catch6OptionINS_12TestCaseInfoEEaSERKS1_ called 8 returned 100% blocks executed 86%
        8: 4404:Option& operator = ( T const& _value ) {
        8: 4405:reset();
        8: 4405-block  0
call    0 returned 8
        8: 4406:nullableValue = new( storage ) T( _value );
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 4406-block  0
call    4 never executed
        8: 4407:return *this;
        8: 4407-block  0
        8: 4407-block  1
        -: 4408:}
------------------
_ZN5Catch6OptionINS_9GroupInfoEEaSERKS1_:
function _ZN5Catch6OptionINS_9GroupInfoEEaSERKS1_ called 1 returned 100% blocks executed 86%
        1: 4404:Option& operator = ( T const& _value ) {
        1: 4405:reset();
        1: 4405-block  0
call    0 returned 1
        1: 4406:nullableValue = new( storage ) T( _value );
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 4406-block  0
call    4 never executed
        1: 4407:return *this;
        1: 4407-block  0
        1: 4407-block  1
        -: 4408:}
------------------
_ZN5Catch6OptionINS_11TestRunInfoEEaSERKS1_:
function _ZN5Catch6OptionINS_11TestRunInfoEEaSERKS1_ called 1 returned 100% blocks executed 86%
        1: 4404:Option& operator = ( T const& _value ) {
        1: 4405:reset();
        1: 4405-block  0
call    0 returned 1
        1: 4406:nullableValue = new( storage ) T( _value );
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 4406-block  0
call    4 never executed
        1: 4407:return *this;
        1: 4407-block  0
        1: 4407-block  1
        -: 4408:}
------------------
_ZN5Catch6OptionINS_15AssertionResultEEaSERKS1_:
function _ZN5Catch6OptionINS_15AssertionResultEEaSERKS1_ called 0 returned 0% blocks executed 0%
    #####: 4404:Option& operator = ( T const& _value ) {
    #####: 4405:reset();
    %%%%%: 4405-block  0
call    0 never executed
    #####: 4406:nullableValue = new( storage ) T( _value );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4406-block  0
call    4 never executed
    #####: 4407:return *this;
    %%%%%: 4407-block  0
    %%%%%: 4407-block  1
        -: 4408:}
------------------
_ZN5Catch6OptionIjEaSERKj:
function _ZN5Catch6OptionIjEaSERKj called 0 returned 0% blocks executed 0%
    #####: 4404:Option& operator = ( T const& _value ) {
    #####: 4405:reset();
    %%%%%: 4405-block  0
call    0 never executed
    #####: 4406:nullableValue = new( storage ) T( _value );
call    0 never executed
    #####: 4407:return *this;
        -: 4408:}
------------------
        -: 4409:
       27: 4410:void reset() {
       27: 4411:if( nullableValue )
      10*: 4412:nullableValue->~T();
       27: 4413:nullableValue = nullptr;
       27: 4414:}
------------------
_ZN5Catch6OptionINS_12TestCaseInfoEE5resetEv:
function _ZN5Catch6OptionINS_12TestCaseInfoEE5resetEv called 18 returned 100% blocks executed 100%
       18: 4410:void reset() {
       18: 4411:if( nullableValue )
       18: 4411-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 10
        8: 4412:nullableValue->~T();
        8: 4412-block  0
call    0 returned 8
       18: 4413:nullableValue = nullptr;
       18: 4414:}
------------------
_ZN5Catch6OptionINS_9GroupInfoEE5resetEv:
function _ZN5Catch6OptionINS_9GroupInfoEE5resetEv called 4 returned 100% blocks executed 100%
        4: 4410:void reset() {
        4: 4411:if( nullableValue )
        4: 4411-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1: 4412:nullableValue->~T();
        1: 4412-block  0
call    0 returned 1
        4: 4413:nullableValue = nullptr;
        4: 4414:}
------------------
_ZN5Catch6OptionINS_11TestRunInfoEE5resetEv:
function _ZN5Catch6OptionINS_11TestRunInfoEE5resetEv called 3 returned 100% blocks executed 100%
        3: 4410:void reset() {
        3: 4411:if( nullableValue )
        3: 4411-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 4412:nullableValue->~T();
        1: 4412-block  0
call    0 returned 1
        3: 4413:nullableValue = nullptr;
        3: 4414:}
------------------
_ZN5Catch6OptionINS_15AssertionResultEE5resetEv:
function _ZN5Catch6OptionINS_15AssertionResultEE5resetEv called 1 returned 100% blocks executed 67%
        1: 4410:void reset() {
        1: 4411:if( nullableValue )
        1: 4411-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 4412:nullableValue->~T();
    %%%%%: 4412-block  0
call    0 never executed
        1: 4413:nullableValue = nullptr;
        1: 4414:}
------------------
_ZN5Catch6OptionIjE5resetEv:
function _ZN5Catch6OptionIjE5resetEv called 1 returned 100% blocks executed 67%
        1: 4410:void reset() {
        1: 4411:if( nullableValue )
        1: 4411-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 4412:nullableValue->~T();
    %%%%%: 4412-block  0
        1: 4413:nullableValue = nullptr;
        1: 4414:}
------------------
        -: 4415:
function _ZN5Catch6OptionIjEdeEv called 0 returned 0% blocks executed 0%
    #####: 4416:T& operator*() { return *nullableValue; }
    %%%%%: 4416-block  0
function _ZNK5Catch6OptionINS_15AssertionResultEEdeEv called 0 returned 0% blocks executed 0%
    #####: 4417:T const& operator*() const { return *nullableValue; }
    %%%%%: 4417-block  0
    #####: 4418:T* operator->() { return nullableValue; }
------------------
_ZN5Catch6OptionINS_12TestCaseInfoEEptEv:
function _ZN5Catch6OptionINS_12TestCaseInfoEEptEv called 0 returned 0% blocks executed 0%
    #####: 4418:T* operator->() { return nullableValue; }
    %%%%%: 4418-block  0
------------------
_ZN5Catch6OptionINS_9GroupInfoEEptEv:
function _ZN5Catch6OptionINS_9GroupInfoEEptEv called 0 returned 0% blocks executed 0%
    #####: 4418:T* operator->() { return nullableValue; }
    %%%%%: 4418-block  0
------------------
_ZN5Catch6OptionINS_11TestRunInfoEEptEv:
function _ZN5Catch6OptionINS_11TestRunInfoEEptEv called 0 returned 0% blocks executed 0%
    #####: 4418:T* operator->() { return nullableValue; }
    %%%%%: 4418-block  0
------------------
        -: 4419:const T* operator->() const { return nullableValue; }
        -: 4420:
function _ZNK5Catch6OptionIjE7valueOrERKj called 0 returned 0% blocks executed 0%
    #####: 4421:T valueOr( T const& defaultValue ) const {
    #####: 4422:return nullableValue ? *nullableValue : defaultValue;
    %%%%%: 4422-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4422-block  1
    %%%%%: 4422-block  2
    %%%%%: 4422-block  3
        -: 4423:}
        -: 4424:
function _ZNK5Catch6OptionIjE4someEv called 1 returned 100% blocks executed 100%
        1: 4425:bool some() const { return nullableValue != nullptr; }
        1: 4425-block  0
        -: 4426:bool none() const { return nullableValue == nullptr; }
        -: 4427:
        -: 4428:bool operator !() const { return nullableValue == nullptr; }
function _ZNK5Catch6OptionIjEcvbEv called 1 returned 100% blocks executed 100%
        1: 4429:explicit operator bool() const {
        1: 4430:return some();
        1: 4430-block  0
call    0 returned 1
        -: 4431:}
        -: 4432:
        -: 4433:private:
        -: 4434:T *nullableValue;
        -: 4435:alignas(alignof(T)) char storage[sizeof(T)];
        -: 4436:};
        -: 4437:
        -: 4438:} // end namespace Catch
        -: 4439:
        -: 4440:// end catch_option.hpp
        -: 4441:#include <iosfwd>
        -: 4442:#include <string>
        -: 4443:#include <vector>
        -: 4444:#include <memory>
        -: 4445:
        -: 4446:namespace Catch {
        -: 4447:
        -: 4448:enum class Verbosity {
        -: 4449:Quiet = 0,
        -: 4450:Normal,
        -: 4451:High
        -: 4452:};
        -: 4453:
        -: 4454:struct WarnAbout { enum What {
        -: 4455:Nothing = 0x00,
        -: 4456:NoAssertions = 0x01,
        -: 4457:NoTests = 0x02
        -: 4458:}; };
        -: 4459:
        -: 4460:struct ShowDurations { enum OrNot {
        -: 4461:DefaultForReporter,
        -: 4462:Always,
        -: 4463:Never
        -: 4464:}; };
        -: 4465:struct RunTests { enum InWhatOrder {
        -: 4466:InDeclarationOrder,
        -: 4467:InLexicographicalOrder,
        -: 4468:InRandomOrder
        -: 4469:}; };
        -: 4470:struct UseColour { enum YesOrNo {
        -: 4471:Auto,
        -: 4472:Yes,
        -: 4473:No
        -: 4474:}; };
        -: 4475:struct WaitForKeypress { enum When {
        -: 4476:Never,
        -: 4477:BeforeStart = 1,
        -: 4478:BeforeExit = 2,
        -: 4479:BeforeStartAndExit = BeforeStart | BeforeExit
        -: 4480:}; };
        -: 4481:
        -: 4482:class TestSpec;
        -: 4483:
       1*: 4484:struct IConfig : NonCopyable {
------------------
_ZN5Catch7IConfigD0Ev:
function _ZN5Catch7IConfigD0Ev called 0 returned 0% blocks executed 0%
    #####: 4484:struct IConfig : NonCopyable {
    %%%%%: 4484-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch7IConfigD2Ev:
function _ZN5Catch7IConfigD2Ev called 1 returned 100% blocks executed 100%
        1: 4484:struct IConfig : NonCopyable {
        1: 4484-block  0
call    0 returned 1
------------------
        -: 4485:
        -: 4486:virtual ~IConfig();
        -: 4487:
        -: 4488:virtual bool allowThrows() const = 0;
        -: 4489:virtual std::ostream& stream() const = 0;
        -: 4490:virtual std::string name() const = 0;
        -: 4491:virtual bool includeSuccessfulResults() const = 0;
        -: 4492:virtual bool shouldDebugBreak() const = 0;
        -: 4493:virtual bool warnAboutMissingAssertions() const = 0;
        -: 4494:virtual bool warnAboutNoTests() const = 0;
        -: 4495:virtual int abortAfter() const = 0;
        -: 4496:virtual bool showInvisibles() const = 0;
        -: 4497:virtual ShowDurations::OrNot showDurations() const = 0;
        -: 4498:virtual TestSpec const& testSpec() const = 0;
        -: 4499:virtual bool hasTestFilters() const = 0;
        -: 4500:virtual std::vector<std::string> const& getTestsOrTags() const = 0;
        -: 4501:virtual RunTests::InWhatOrder runOrder() const = 0;
        -: 4502:virtual unsigned int rngSeed() const = 0;
        -: 4503:virtual UseColour::YesOrNo useColour() const = 0;
        -: 4504:virtual std::vector<std::string> const& getSectionsToRun() const = 0;
        -: 4505:virtual Verbosity verbosity() const = 0;
        -: 4506:
        -: 4507:virtual bool benchmarkNoAnalysis() const = 0;
        -: 4508:virtual int benchmarkSamples() const = 0;
        -: 4509:virtual double benchmarkConfidenceInterval() const = 0;
        -: 4510:virtual unsigned int benchmarkResamples() const = 0;
        -: 4511:};
        -: 4512:
        -: 4513:using IConfigPtr = std::shared_ptr<IConfig const>;
        -: 4514:}
        -: 4515:
        -: 4516:// end catch_interfaces_config.h
        -: 4517:// start catch_random_number_generator.h
        -: 4518:
        -: 4519:#include <cstdint>
        -: 4520:
        -: 4521:namespace Catch {
        -: 4522:
        -: 4523:// This is a simple implementation of C++11 Uniform Random Number
        -: 4524:// Generator. It does not provide all operators, because Catch2
        -: 4525:// does not use it, but it should behave as expected inside stdlib's
        -: 4526:// distributions.
        -: 4527:// The implementation is based on the PCG family (http://pcg-random.org)
        -: 4528:class SimplePcg32 {
        -: 4529:using state_type = std::uint64_t;
        -: 4530:public:
        -: 4531:using result_type = std::uint32_t;
        -: 4532:static constexpr result_type (min)() {
        -: 4533:return 0;
        -: 4534:}
        -: 4535:static constexpr result_type (max)() {
        -: 4536:return static_cast<result_type>(-1);
        -: 4537:}
        -: 4538:
        -: 4539:// Provide some default initial state for the default constructor
function _ZN5Catch11SimplePcg32C1Ev called 0 returned 0% blocks executed 0%
    #####: 4540:SimplePcg32():SimplePcg32(0xed743cc4U) {}
    %%%%%: 4540-block  0
call    0 never executed
        -: 4541:
        -: 4542:explicit SimplePcg32(result_type seed_);
        -: 4543:
        -: 4544:void seed(result_type seed_);
        -: 4545:void discard(uint64_t skip);
        -: 4546:
        -: 4547:result_type operator()();
        -: 4548:
        -: 4549:private:
        -: 4550:friend bool operator==(SimplePcg32 const& lhs, SimplePcg32 const& rhs);
        -: 4551:friend bool operator!=(SimplePcg32 const& lhs, SimplePcg32 const& rhs);
        -: 4552:
        -: 4553:// In theory we also need operator<< and operator>>
        -: 4554:// In practice we do not use them, so we will skip them for now
        -: 4555:
        -: 4556:std::uint64_t m_state;
        -: 4557:// This part of the state determines which "stream" of the numbers
        -: 4558:// is chosen -- we take it as a constant for Catch2, so we only
        -: 4559:// need to deal with seeding the main state.
        -: 4560:// Picked by reading 8 bytes from `/dev/random` :-)
        -: 4561:static const std::uint64_t s_inc = (0x13ed0cc53f939476ULL << 1ULL) | 1ULL;
        -: 4562:};
        -: 4563:
        -: 4564:} // end namespace Catch
        -: 4565:
        -: 4566:// end catch_random_number_generator.h
        -: 4567:#include <random>
        -: 4568:
        -: 4569:namespace Catch {
        -: 4570:namespace Generators {
        -: 4571:
        -: 4572:template <typename Float>
        -: 4573:class RandomFloatingGenerator final : public IGenerator<Float> {
        -: 4574:Catch::SimplePcg32& m_rng;
        -: 4575:std::uniform_real_distribution<Float> m_dist;
        -: 4576:Float m_current_number;
        -: 4577:public:
        -: 4578:
        -: 4579:RandomFloatingGenerator(Float a, Float b):
        -: 4580:m_rng(rng()),
        -: 4581:m_dist(a, b) {
        -: 4582:static_cast<void>(next());
        -: 4583:}
        -: 4584:
        -: 4585:Float const& get() const override {
        -: 4586:return m_current_number;
        -: 4587:}
        -: 4588:bool next() override {
        -: 4589:m_current_number = m_dist(m_rng);
        -: 4590:return true;
        -: 4591:}
        -: 4592:};
        -: 4593:
        -: 4594:template <typename Integer>
        -: 4595:class RandomIntegerGenerator final : public IGenerator<Integer> {
        -: 4596:Catch::SimplePcg32& m_rng;
        -: 4597:std::uniform_int_distribution<Integer> m_dist;
        -: 4598:Integer m_current_number;
        -: 4599:public:
        -: 4600:
        -: 4601:RandomIntegerGenerator(Integer a, Integer b):
        -: 4602:m_rng(rng()),
        -: 4603:m_dist(a, b) {
        -: 4604:static_cast<void>(next());
        -: 4605:}
        -: 4606:
        -: 4607:Integer const& get() const override {
        -: 4608:return m_current_number;
        -: 4609:}
        -: 4610:bool next() override {
        -: 4611:m_current_number = m_dist(m_rng);
        -: 4612:return true;
        -: 4613:}
        -: 4614:};
        -: 4615:
        -: 4616:// TODO: Ideally this would be also constrained against the various char types,
        -: 4617://       but I don't expect users to run into that in practice.
        -: 4618:template <typename T>
        -: 4619:typename std::enable_if<std::is_integral<T>::value && !std::is_same<T, bool>::value,
        -: 4620:GeneratorWrapper<T>>::type
        -: 4621:random(T a, T b) {
        -: 4622:return GeneratorWrapper<T>(
        -: 4623:pf::make_unique<RandomIntegerGenerator<T>>(a, b)
        -: 4624:);
        -: 4625:}
        -: 4626:
        -: 4627:template <typename T>
        -: 4628:typename std::enable_if<std::is_floating_point<T>::value,
        -: 4629:GeneratorWrapper<T>>::type
        -: 4630:random(T a, T b) {
        -: 4631:return GeneratorWrapper<T>(
        -: 4632:pf::make_unique<RandomFloatingGenerator<T>>(a, b)
        -: 4633:);
        -: 4634:}
        -: 4635:
        -: 4636:template <typename T>
        -: 4637:class RangeGenerator final : public IGenerator<T> {
        -: 4638:T m_current;
        -: 4639:T m_end;
        -: 4640:T m_step;
        -: 4641:bool m_positive;
        -: 4642:
        -: 4643:public:
        -: 4644:RangeGenerator(T const& start, T const& end, T const& step):
        -: 4645:m_current(start),
        -: 4646:m_end(end),
        -: 4647:m_step(step),
        -: 4648:m_positive(m_step > T(0))
        -: 4649:{
        -: 4650:assert(m_current != m_end && "Range start and end cannot be equal");
        -: 4651:assert(m_step != T(0) && "Step size cannot be zero");
        -: 4652:assert(((m_positive && m_current <= m_end) || (!m_positive && m_current >= m_end)) && "Step moves away from end");
        -: 4653:}
        -: 4654:
        -: 4655:RangeGenerator(T const& start, T const& end):
        -: 4656:RangeGenerator(start, end, (start < end) ? T(1) : T(-1))
        -: 4657:{}
        -: 4658:
        -: 4659:T const& get() const override {
        -: 4660:return m_current;
        -: 4661:}
        -: 4662:
        -: 4663:bool next() override {
        -: 4664:m_current += m_step;
        -: 4665:return (m_positive) ? (m_current < m_end) : (m_current > m_end);
        -: 4666:}
        -: 4667:};
        -: 4668:
        -: 4669:template <typename T>
        -: 4670:GeneratorWrapper<T> range(T const& start, T const& end, T const& step) {
        -: 4671:static_assert(std::is_integral<T>::value && !std::is_same<T, bool>::value, "Type must be an integer");
        -: 4672:return GeneratorWrapper<T>(pf::make_unique<RangeGenerator<T>>(start, end, step));
        -: 4673:}
        -: 4674:
        -: 4675:template <typename T>
        -: 4676:GeneratorWrapper<T> range(T const& start, T const& end) {
        -: 4677:static_assert(std::is_integral<T>::value && !std::is_same<T, bool>::value, "Type must be an integer");
        -: 4678:return GeneratorWrapper<T>(pf::make_unique<RangeGenerator<T>>(start, end));
        -: 4679:}
        -: 4680:
        -: 4681:template <typename T>
        -: 4682:class IteratorGenerator final : public IGenerator<T> {
        -: 4683:static_assert(!std::is_same<T, bool>::value,
        -: 4684:"IteratorGenerator currently does not support bools"
        -: 4685:"because of std::vector<bool> specialization");
        -: 4686:
        -: 4687:std::vector<T> m_elems;
        -: 4688:size_t m_current = 0;
        -: 4689:public:
        -: 4690:template <typename InputIterator, typename InputSentinel>
        -: 4691:IteratorGenerator(InputIterator first, InputSentinel last):m_elems(first, last) {
        -: 4692:if (m_elems.empty()) {
        -: 4693:Catch::throw_exception(GeneratorException("IteratorGenerator received no valid values"));
        -: 4694:}
        -: 4695:}
        -: 4696:
        -: 4697:T const& get() const override {
        -: 4698:return m_elems[m_current];
        -: 4699:}
        -: 4700:
        -: 4701:bool next() override {
        -: 4702:++m_current;
        -: 4703:return m_current != m_elems.size();
        -: 4704:}
        -: 4705:};
        -: 4706:
        -: 4707:template <typename InputIterator,
        -: 4708:typename InputSentinel,
        -: 4709:typename ResultType = typename std::iterator_traits<InputIterator>::value_type>
        -: 4710:GeneratorWrapper<ResultType> from_range(InputIterator from, InputSentinel to) {
        -: 4711:return GeneratorWrapper<ResultType>(pf::make_unique<IteratorGenerator<ResultType>>(from, to));
        -: 4712:}
        -: 4713:
        -: 4714:template <typename Container,
        -: 4715:typename ResultType = typename Container::value_type>
        -: 4716:GeneratorWrapper<ResultType> from_range(Container const& cnt) {
        -: 4717:return GeneratorWrapper<ResultType>(pf::make_unique<IteratorGenerator<ResultType>>(cnt.begin(), cnt.end()));
        -: 4718:}
        -: 4719:
        -: 4720:} // namespace Generators
        -: 4721:} // namespace Catch
        -: 4722:
        -: 4723:// end catch_generators_specific.hpp
        -: 4724:
        -: 4725:// These files are included here so the single_include script doesn't put them
        -: 4726:// in the conditionally compiled sections
        -: 4727:// start catch_test_case_info.h
        -: 4728:
        -: 4729:#include <string>
        -: 4730:#include <vector>
        -: 4731:#include <memory>
        -: 4732:
        -: 4733:#ifdef __clang__
        -: 4734:#pragma clang diagnostic push
        -: 4735:#pragma clang diagnostic ignored "-Wpadded"
        -: 4736:#endif
        -: 4737:
        -: 4738:namespace Catch {
        -: 4739:
        -: 4740:struct ITestInvoker;
        -: 4741:
        -: 4742:struct TestCaseInfo {
        -: 4743:enum SpecialProperties{
        -: 4744:None = 0,
        -: 4745:IsHidden = 1 << 1,
        -: 4746:ShouldFail = 1 << 2,
        -: 4747:MayFail = 1 << 3,
        -: 4748:Throws = 1 << 4,
        -: 4749:NonPortable = 1 << 5,
        -: 4750:Benchmark = 1 << 6
        -: 4751:};
        -: 4752:
        -: 4753:TestCaseInfo(   std::string const& _name,
        -: 4754:std::string const& _className,
        -: 4755:std::string const& _description,
        -: 4756:std::vector<std::string> const& _tags,
        -: 4757:SourceLineInfo const& _lineInfo );
        -: 4758:
        -: 4759:friend void setTags( TestCaseInfo& testCaseInfo, std::vector<std::string> tags );
        -: 4760:
        -: 4761:bool isHidden() const;
        -: 4762:bool throws() const;
        -: 4763:bool okToFail() const;
        -: 4764:bool expectedToFail() const;
        -: 4765:
        -: 4766:std::string tagsAsString() const;
        -: 4767:
        -: 4768:std::string name;
        -: 4769:std::string className;
        -: 4770:std::string description;
        -: 4771:std::vector<std::string> tags;
        -: 4772:std::vector<std::string> lcaseTags;
        -: 4773:SourceLineInfo lineInfo;
        -: 4774:SpecialProperties properties;
        -: 4775:};
        -: 4776:
        -: 4777:class TestCase : public TestCaseInfo {
        -: 4778:public:
        -: 4779:
        -: 4780:TestCase( ITestInvoker* testCase, TestCaseInfo&& info );
        -: 4781:
        -: 4782:TestCase withName( std::string const& _newName ) const;
        -: 4783:
        -: 4784:void invoke() const;
        -: 4785:
        -: 4786:TestCaseInfo const& getTestCaseInfo() const;
        -: 4787:
        -: 4788:bool operator == ( TestCase const& other ) const;
        -: 4789:bool operator < ( TestCase const& other ) const;
        -: 4790:
        -: 4791:private:
        -: 4792:std::shared_ptr<ITestInvoker> test;
        -: 4793:};
        -: 4794:
        -: 4795:TestCase makeTestCase(  ITestInvoker* testCase,
        -: 4796:std::string const& className,
        -: 4797:NameAndTags const& nameAndTags,
        -: 4798:SourceLineInfo const& lineInfo );
        -: 4799:}
        -: 4800:
        -: 4801:#ifdef __clang__
        -: 4802:#pragma clang diagnostic pop
        -: 4803:#endif
        -: 4804:
        -: 4805:// end catch_test_case_info.h
        -: 4806:// start catch_interfaces_runner.h
        -: 4807:
        -: 4808:namespace Catch {
        -: 4809:
       1*: 4810:struct IRunner {
------------------
_ZN5Catch7IRunnerD0Ev:
function _ZN5Catch7IRunnerD0Ev called 0 returned 0% blocks executed 0%
    #####: 4810:struct IRunner {
    %%%%%: 4810-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch7IRunnerD2Ev:
function _ZN5Catch7IRunnerD2Ev called 1 returned 100% blocks executed 100%
        1: 4810:struct IRunner {
------------------
        -: 4811:virtual ~IRunner();
        -: 4812:virtual bool aborting() const = 0;
        -: 4813:};
        -: 4814:}
        -: 4815:
        -: 4816:// end catch_interfaces_runner.h
        -: 4817:
        -: 4818:#ifdef __OBJC__
        -: 4819:// start catch_objc.hpp
        -: 4820:
        -: 4821:#import <objc/runtime.h>
        -: 4822:
        -: 4823:#include <string>
        -: 4824:
        -: 4825:// NB. Any general catch headers included here must be included
        -: 4826:// in catch.hpp first to make sure they are included by the single
        -: 4827:// header for non obj-usage
        -: 4828:
        -: 4829:///////////////////////////////////////////////////////////////////////////////
        -: 4830:// This protocol is really only here for (self) documenting purposes, since
        -: 4831:// all its methods are optional.
        -: 4832:@protocol OcFixture
        -: 4833:
        -: 4834:@optional
        -: 4835:
        -: 4836:-(void) setUp;
        -: 4837:-(void) tearDown;
        -: 4838:
        -: 4839:@end
        -: 4840:
        -: 4841:namespace Catch {
        -: 4842:
        -: 4843:class OcMethod : public ITestInvoker {
        -: 4844:
        -: 4845:public:
        -: 4846:OcMethod( Class cls, SEL sel ) : m_cls( cls ), m_sel( sel ) {}
        -: 4847:
        -: 4848:virtual void invoke() const {
        -: 4849:id obj = [[m_cls alloc] init];
        -: 4850:
        -: 4851:performOptionalSelector( obj, @selector(setUp)  );
        -: 4852:performOptionalSelector( obj, m_sel );
        -: 4853:performOptionalSelector( obj, @selector(tearDown)  );
        -: 4854:
        -: 4855:arcSafeRelease( obj );
        -: 4856:}
        -: 4857:private:
        -: 4858:virtual ~OcMethod() {}
        -: 4859:
        -: 4860:Class m_cls;
        -: 4861:SEL m_sel;
        -: 4862:};
        -: 4863:
        -: 4864:namespace Detail{
        -: 4865:
        -: 4866:inline std::string getAnnotation(   Class cls,
        -: 4867:std::string const& annotationName,
        -: 4868:std::string const& testCaseName ) {
        -: 4869:NSString* selStr = [[NSString alloc] initWithFormat:@"Catch_%s_%s", annotationName.c_str(), testCaseName.c_str()];
        -: 4870:SEL sel = NSSelectorFromString( selStr );
        -: 4871:arcSafeRelease( selStr );
        -: 4872:id value = performOptionalSelector( cls, sel );
        -: 4873:if( value )
        -: 4874:return [(NSString*)value UTF8String];
        -: 4875:return "";
        -: 4876:}
        -: 4877:}
        -: 4878:
        -: 4879:inline std::size_t registerTestMethods() {
        -: 4880:std::size_t noTestMethods = 0;
        -: 4881:int noClasses = objc_getClassList( nullptr, 0 );
        -: 4882:
        -: 4883:Class* classes = (CATCH_UNSAFE_UNRETAINED Class *)malloc( sizeof(Class) * noClasses);
        -: 4884:objc_getClassList( classes, noClasses );
        -: 4885:
        -: 4886:for( int c = 0; c < noClasses; c++ ) {
        -: 4887:Class cls = classes[c];
        -: 4888:{
        -: 4889:u_int count;
        -: 4890:Method* methods = class_copyMethodList( cls, &count );
        -: 4891:for( u_int m = 0; m < count ; m++ ) {
        -: 4892:SEL selector = method_getName(methods[m]);
        -: 4893:std::string methodName = sel_getName(selector);
        -: 4894:if( startsWith( methodName, "Catch_TestCase_" ) ) {
        -: 4895:std::string testCaseName = methodName.substr( 15 );
        -: 4896:std::string name = Detail::getAnnotation( cls, "Name", testCaseName );
        -: 4897:std::string desc = Detail::getAnnotation( cls, "Description", testCaseName );
        -: 4898:const char* className = class_getName( cls );
        -: 4899:
        -: 4900:getMutableRegistryHub().registerTest( makeTestCase( new OcMethod( cls, selector ), className, NameAndTags( name.c_str(), desc.c_str() ), SourceLineInfo("",0) ) );
        -: 4901:noTestMethods++;
        -: 4902:}
        -: 4903:}
        -: 4904:free(methods);
        -: 4905:}
        -: 4906:}
        -: 4907:return noTestMethods;
        -: 4908:}
        -: 4909:
        -: 4910:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -: 4911:
        -: 4912:namespace Matchers {
        -: 4913:namespace Impl {
        -: 4914:namespace NSStringMatchers {
        -: 4915:
        -: 4916:struct StringHolder : MatcherBase<NSString*>{
        -: 4917:StringHolder( NSString* substr ) : m_substr( [substr copy] ){}
        -: 4918:StringHolder( StringHolder const& other ) : m_substr( [other.m_substr copy] ){}
        -: 4919:StringHolder() {
        -: 4920:arcSafeRelease( m_substr );
        -: 4921:}
        -: 4922:
        -: 4923:bool match( NSString* str ) const override {
        -: 4924:return false;
        -: 4925:}
        -: 4926:
        -: 4927:NSString* CATCH_ARC_STRONG m_substr;
        -: 4928:};
        -: 4929:
        -: 4930:struct Equals : StringHolder {
        -: 4931:Equals( NSString* substr ) : StringHolder( substr ){}
        -: 4932:
        -: 4933:bool match( NSString* str ) const override {
        -: 4934:return  (str != nil || m_substr == nil ) &&
        -: 4935:[str isEqualToString:m_substr];
        -: 4936:}
        -: 4937:
        -: 4938:std::string describe() const override {
        -: 4939:return "equals string: " + Catch::Detail::stringify( m_substr );
        -: 4940:}
        -: 4941:};
        -: 4942:
        -: 4943:struct Contains : StringHolder {
        -: 4944:Contains( NSString* substr ) : StringHolder( substr ){}
        -: 4945:
        -: 4946:bool match( NSString* str ) const override {
        -: 4947:return  (str != nil || m_substr == nil ) &&
        -: 4948:[str rangeOfString:m_substr].location != NSNotFound;
        -: 4949:}
        -: 4950:
        -: 4951:std::string describe() const override {
        -: 4952:return "contains string: " + Catch::Detail::stringify( m_substr );
        -: 4953:}
        -: 4954:};
        -: 4955:
        -: 4956:struct StartsWith : StringHolder {
        -: 4957:StartsWith( NSString* substr ) : StringHolder( substr ){}
        -: 4958:
        -: 4959:bool match( NSString* str ) const override {
        -: 4960:return  (str != nil || m_substr == nil ) &&
        -: 4961:[str rangeOfString:m_substr].location == 0;
        -: 4962:}
        -: 4963:
        -: 4964:std::string describe() const override {
        -: 4965:return "starts with: " + Catch::Detail::stringify( m_substr );
        -: 4966:}
        -: 4967:};
        -: 4968:struct EndsWith : StringHolder {
        -: 4969:EndsWith( NSString* substr ) : StringHolder( substr ){}
        -: 4970:
        -: 4971:bool match( NSString* str ) const override {
        -: 4972:return  (str != nil || m_substr == nil ) &&
        -: 4973:[str rangeOfString:m_substr].location == [str length] - [m_substr length];
        -: 4974:}
        -: 4975:
        -: 4976:std::string describe() const override {
        -: 4977:return "ends with: " + Catch::Detail::stringify( m_substr );
        -: 4978:}
        -: 4979:};
        -: 4980:
        -: 4981:} // namespace NSStringMatchers
        -: 4982:} // namespace Impl
        -: 4983:
        -: 4984:inline Impl::NSStringMatchers::Equals
        -: 4985:Equals( NSString* substr ){ return Impl::NSStringMatchers::Equals( substr ); }
        -: 4986:
        -: 4987:inline Impl::NSStringMatchers::Contains
        -: 4988:Contains( NSString* substr ){ return Impl::NSStringMatchers::Contains( substr ); }
        -: 4989:
        -: 4990:inline Impl::NSStringMatchers::StartsWith
        -: 4991:StartsWith( NSString* substr ){ return Impl::NSStringMatchers::StartsWith( substr ); }
        -: 4992:
        -: 4993:inline Impl::NSStringMatchers::EndsWith
        -: 4994:EndsWith( NSString* substr ){ return Impl::NSStringMatchers::EndsWith( substr ); }
        -: 4995:
        -: 4996:} // namespace Matchers
        -: 4997:
        -: 4998:using namespace Matchers;
        -: 4999:
        -: 5000:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -: 5001:
        -: 5002:} // namespace Catch
        -: 5003:
        -: 5004:///////////////////////////////////////////////////////////////////////////////
        -: 5005:#define OC_MAKE_UNIQUE_NAME( root, uniqueSuffix ) root##uniqueSuffix
        -: 5006:#define OC_TEST_CASE2( name, desc, uniqueSuffix ) \
        -: 5007:+(NSString*) OC_MAKE_UNIQUE_NAME( Catch_Name_test_, uniqueSuffix ) \
        -: 5008:{ \
        -: 5009:return @ name; \
        -: 5010:} \
        -: 5011:+(NSString*) OC_MAKE_UNIQUE_NAME( Catch_Description_test_, uniqueSuffix ) \
        -: 5012:{ \
        -: 5013:return @ desc; \
        -: 5014:} \
        -: 5015:-(void) OC_MAKE_UNIQUE_NAME( Catch_TestCase_test_, uniqueSuffix )
        -: 5016:
        -: 5017:#define OC_TEST_CASE( name, desc ) OC_TEST_CASE2( name, desc, __LINE__ )
        -: 5018:
        -: 5019:// end catch_objc.hpp
        -: 5020:#endif
        -: 5021:
        -: 5022:// Benchmarking needs the externally-facing parts of reporters to work
        -: 5023:#if defined(CATCH_CONFIG_EXTERNAL_INTERFACES) || defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -: 5024:// start catch_external_interfaces.h
        -: 5025:
        -: 5026:// start catch_reporter_bases.hpp
        -: 5027:
        -: 5028:// start catch_interfaces_reporter.h
        -: 5029:
        -: 5030:// start catch_config.hpp
        -: 5031:
        -: 5032:// start catch_test_spec_parser.h
        -: 5033:
        -: 5034:#ifdef __clang__
        -: 5035:#pragma clang diagnostic push
        -: 5036:#pragma clang diagnostic ignored "-Wpadded"
        -: 5037:#endif
        -: 5038:
        -: 5039:// start catch_test_spec.h
        -: 5040:
        -: 5041:#ifdef __clang__
        -: 5042:#pragma clang diagnostic push
        -: 5043:#pragma clang diagnostic ignored "-Wpadded"
        -: 5044:#endif
        -: 5045:
        -: 5046:// start catch_wildcard_pattern.h
        -: 5047:
        -: 5048:namespace Catch
        -: 5049:{
        -: 5050:class WildcardPattern {
        -: 5051:enum WildcardPosition {
        -: 5052:NoWildcard = 0,
        -: 5053:WildcardAtStart = 1,
        -: 5054:WildcardAtEnd = 2,
        -: 5055:WildcardAtBothEnds = WildcardAtStart | WildcardAtEnd
        -: 5056:};
        -: 5057:
        -: 5058:public:
        -: 5059:
        -: 5060:WildcardPattern( std::string const& pattern, CaseSensitive::Choice caseSensitivity );
    #####: 5061:virtual ~WildcardPattern() = default;
------------------
_ZN5Catch15WildcardPatternD0Ev:
function _ZN5Catch15WildcardPatternD0Ev called 0 returned 0% blocks executed 0%
    #####: 5061:virtual ~WildcardPattern() = default;
    %%%%%: 5061-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch15WildcardPatternD1Ev:
function _ZN5Catch15WildcardPatternD1Ev called 0 returned 0% blocks executed 0%
    #####: 5061:virtual ~WildcardPattern() = default;
    %%%%%: 5061-block  0
call    0 never executed
------------------
        -: 5062:virtual bool matches( std::string const& str ) const;
        -: 5063:
        -: 5064:private:
        -: 5065:std::string normaliseString( std::string const& str ) const;
        -: 5066:CaseSensitive::Choice m_caseSensitivity;
        -: 5067:WildcardPosition m_wildcard = NoWildcard;
        -: 5068:std::string m_pattern;
        -: 5069:};
        -: 5070:}
        -: 5071:
        -: 5072:// end catch_wildcard_pattern.h
        -: 5073:#include <string>
        -: 5074:#include <vector>
        -: 5075:#include <memory>
        -: 5076:
        -: 5077:namespace Catch {
        -: 5078:
        -: 5079:struct IConfig;
        -: 5080:
        -: 5081:class TestSpec {
    #####: 5082:class Pattern {
------------------
_ZN5Catch8TestSpec7PatternD0Ev:
function _ZN5Catch8TestSpec7PatternD0Ev called 0 returned 0% blocks executed 0%
    #####: 5082:class Pattern {
    %%%%%: 5082-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch8TestSpec7PatternD2Ev:
function _ZN5Catch8TestSpec7PatternD2Ev called 0 returned 0% blocks executed 0%
    #####: 5082:class Pattern {
    %%%%%: 5082-block  0
call    0 never executed
------------------
        -: 5083:public:
        -: 5084:explicit Pattern( std::string const& name );
        -: 5085:virtual ~Pattern();
        -: 5086:virtual bool matches( TestCaseInfo const& testCase ) const = 0;
        -: 5087:std::string const& name() const;
        -: 5088:private:
        -: 5089:std::string const m_name;
        -: 5090:};
        -: 5091:using PatternPtr = std::shared_ptr<Pattern>;
        -: 5092:
        -: 5093:class NamePattern : public Pattern {
        -: 5094:public:
        -: 5095:explicit NamePattern( std::string const& name, std::string const& filterString );
        -: 5096:bool matches( TestCaseInfo const& testCase ) const override;
        -: 5097:private:
        -: 5098:WildcardPattern m_wildcardPattern;
        -: 5099:};
        -: 5100:
        -: 5101:class TagPattern : public Pattern {
        -: 5102:public:
        -: 5103:explicit TagPattern( std::string const& tag, std::string const& filterString );
        -: 5104:bool matches( TestCaseInfo const& testCase ) const override;
        -: 5105:private:
        -: 5106:std::string m_tag;
        -: 5107:};
        -: 5108:
        -: 5109:class ExcludedPattern : public Pattern {
        -: 5110:public:
        -: 5111:explicit ExcludedPattern( PatternPtr const& underlyingPattern );
        -: 5112:bool matches( TestCaseInfo const& testCase ) const override;
        -: 5113:private:
        -: 5114:PatternPtr m_underlyingPattern;
        -: 5115:};
        -: 5116:
        -: 5117:struct Filter {
        -: 5118:std::vector<PatternPtr> m_patterns;
        -: 5119:
        -: 5120:bool matches( TestCaseInfo const& testCase ) const;
        -: 5121:std::string name() const;
        -: 5122:};
        -: 5123:
        -: 5124:public:
        -: 5125:struct FilterMatch {
        -: 5126:std::string name;
        -: 5127:std::vector<TestCase const*> tests;
        -: 5128:};
        -: 5129:using Matches = std::vector<FilterMatch>;
        -: 5130:using vectorStrings = std::vector<std::string>;
        -: 5131:
        -: 5132:bool hasFilters() const;
        -: 5133:bool matches( TestCaseInfo const& testCase ) const;
        -: 5134:Matches matchesByFilter( std::vector<TestCase> const& testCases, IConfig const& config ) const;
        -: 5135:const vectorStrings & getInvalidArgs() const;
        -: 5136:
        -: 5137:private:
        -: 5138:std::vector<Filter> m_filters;
        -: 5139:std::vector<std::string> m_invalidArgs;
        -: 5140:friend class TestSpecParser;
        -: 5141:};
        -: 5142:}
        -: 5143:
        -: 5144:#ifdef __clang__
        -: 5145:#pragma clang diagnostic pop
        -: 5146:#endif
        -: 5147:
        -: 5148:// end catch_test_spec.h
        -: 5149:// start catch_interfaces_tag_alias_registry.h
        -: 5150:
        -: 5151:#include <string>
        -: 5152:
        -: 5153:namespace Catch {
        -: 5154:
        -: 5155:struct TagAlias;
        -: 5156:
        -: 5157:struct ITagAliasRegistry {
        -: 5158:virtual ~ITagAliasRegistry();
        -: 5159:// Nullptr if not present
        -: 5160:virtual TagAlias const* find( std::string const& alias ) const = 0;
        -: 5161:virtual std::string expandAliases( std::string const& unexpandedTestSpec ) const = 0;
        -: 5162:
        -: 5163:static ITagAliasRegistry const& get();
        -: 5164:};
        -: 5165:
        -: 5166:} // end namespace Catch
        -: 5167:
        -: 5168:// end catch_interfaces_tag_alias_registry.h
        -: 5169:namespace Catch {
        -: 5170:
        -: 5171:class TestSpecParser {
        -: 5172:enum Mode{ None, Name, QuotedName, Tag, EscapedName };
        -: 5173:Mode m_mode = None;
        -: 5174:Mode lastMode = None;
        -: 5175:bool m_exclusion = false;
        -: 5176:std::size_t m_pos = 0;
        -: 5177:std::size_t m_realPatternPos = 0;
        -: 5178:std::string m_arg;
        -: 5179:std::string m_substring;
        -: 5180:std::string m_patternName;
        -: 5181:std::vector<std::size_t> m_escapeChars;
        -: 5182:TestSpec::Filter m_currentFilter;
        -: 5183:TestSpec m_testSpec;
        -: 5184:ITagAliasRegistry const* m_tagAliases = nullptr;
        -: 5185:
        -: 5186:public:
        -: 5187:TestSpecParser( ITagAliasRegistry const& tagAliases );
        -: 5188:
        -: 5189:TestSpecParser& parse( std::string const& arg );
        -: 5190:TestSpec testSpec();
        -: 5191:
        -: 5192:private:
        -: 5193:bool visitChar( char c );
        -: 5194:void startNewMode( Mode mode );
        -: 5195:bool processNoneChar( char c );
        -: 5196:void processNameChar( char c );
        -: 5197:bool processOtherChar( char c );
        -: 5198:void endMode();
        -: 5199:void escape();
        -: 5200:bool isControlChar( char c ) const;
        -: 5201:void saveLastMode();
        -: 5202:void revertBackToLastMode();
        -: 5203:void addFilter();
        -: 5204:bool separate();
        -: 5205:
        -: 5206:template<typename T>
    #####: 5207:void addPattern() {
    #####: 5208:std::string token = m_patternName;
    #####: 5209:for( std::size_t i = 0; i < m_escapeChars.size(); ++i )
    #####: 5210:token = token.substr( 0, m_escapeChars[i] - i ) + token.substr( m_escapeChars[i] -i +1 );
    #####: 5211:m_escapeChars.clear();
    #####: 5212:if( startsWith( token, "exclude:" ) ) {
    #####: 5213:m_exclusion = true;
    #####: 5214:token = token.substr( 8 );
        -: 5215:}
    #####: 5216:if( !token.empty() ) {
    #####: 5217:TestSpec::PatternPtr pattern = std::make_shared<T>( token, m_substring );
    #####: 5218:if( m_exclusion )
    #####: 5219:pattern = std::make_shared<TestSpec::ExcludedPattern>( pattern );
    #####: 5220:m_currentFilter.m_patterns.push_back( pattern );
        -: 5221:}
    #####: 5222:m_substring.clear();
    #####: 5223:m_patternName.clear();
    #####: 5224:m_exclusion = false;
    #####: 5225:m_mode = None;
    #####: 5226:}
------------------
_ZN5Catch14TestSpecParser10addPatternINS_8TestSpec10TagPatternEEEvv:
function _ZN5Catch14TestSpecParser10addPatternINS_8TestSpec10TagPatternEEEvv called 0 returned 0% blocks executed 0%
    #####: 5207:void addPattern() {
    #####: 5208:std::string token = m_patternName;
    %%%%%: 5208-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5208-block  1
call    3 never executed
    #####: 5209:for( std::size_t i = 0; i < m_escapeChars.size(); ++i )
    %%%%%: 5209-block  0
    %%%%%: 5209-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5210:token = token.substr( 0, m_escapeChars[i] - i ) + token.substr( m_escapeChars[i] -i +1 );
    %%%%%: 5210-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5210-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5210-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5210-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 5210-block  4
call   15 never executed
    $$$$$: 5210-block  5
    $$$$$: 5210-block  6
call   16 never executed
    $$$$$: 5210-block  7
    #####: 5211:m_escapeChars.clear();
    %%%%%: 5211-block  0
call    0 never executed
    #####: 5212:if( startsWith( token, "exclude:" ) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5212-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5212-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 5212-block  2
call   11 never executed
    $$$$$: 5212-block  3
    $$$$$: 5212-block  4
call   12 never executed
    $$$$$: 5212-block  5
    #####: 5213:m_exclusion = true;
    #####: 5214:token = token.substr( 8 );
    %%%%%: 5214-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5214-block  1
call    3 never executed
call    4 never executed
        -: 5215:}
    #####: 5216:if( !token.empty() ) {
    %%%%%: 5216-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5217:TestSpec::PatternPtr pattern = std::make_shared<T>( token, m_substring );
    %%%%%: 5217-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5217-block  1
call    3 never executed
    %%%%%: 5217-block  2
call    4 never executed
    $$$$$: 5217-block  3
call    5 never executed
    #####: 5218:if( m_exclusion )
branch  0 never executed
branch  1 never executed
    #####: 5219:pattern = std::make_shared<TestSpec::ExcludedPattern>( pattern );
    %%%%%: 5219-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5219-block  1
call    3 never executed
call    4 never executed
    #####: 5220:m_currentFilter.m_patterns.push_back( pattern );
    %%%%%: 5220-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5221:}
    #####: 5222:m_substring.clear();
    %%%%%: 5222-block  0
call    0 never executed
    #####: 5223:m_patternName.clear();
call    0 never executed
    #####: 5224:m_exclusion = false;
    #####: 5225:m_mode = None;
call    0 never executed
    #####: 5226:}
------------------
_ZN5Catch14TestSpecParser10addPatternINS_8TestSpec11NamePatternEEEvv:
function _ZN5Catch14TestSpecParser10addPatternINS_8TestSpec11NamePatternEEEvv called 0 returned 0% blocks executed 0%
    #####: 5207:void addPattern() {
    #####: 5208:std::string token = m_patternName;
    %%%%%: 5208-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5208-block  1
call    3 never executed
    #####: 5209:for( std::size_t i = 0; i < m_escapeChars.size(); ++i )
    %%%%%: 5209-block  0
    %%%%%: 5209-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5210:token = token.substr( 0, m_escapeChars[i] - i ) + token.substr( m_escapeChars[i] -i +1 );
    %%%%%: 5210-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5210-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5210-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5210-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 5210-block  4
call   15 never executed
    $$$$$: 5210-block  5
    $$$$$: 5210-block  6
call   16 never executed
    $$$$$: 5210-block  7
    #####: 5211:m_escapeChars.clear();
    %%%%%: 5211-block  0
call    0 never executed
    #####: 5212:if( startsWith( token, "exclude:" ) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5212-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5212-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 5212-block  2
call   11 never executed
    $$$$$: 5212-block  3
    $$$$$: 5212-block  4
call   12 never executed
    $$$$$: 5212-block  5
    #####: 5213:m_exclusion = true;
    #####: 5214:token = token.substr( 8 );
    %%%%%: 5214-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5214-block  1
call    3 never executed
call    4 never executed
        -: 5215:}
    #####: 5216:if( !token.empty() ) {
    %%%%%: 5216-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5217:TestSpec::PatternPtr pattern = std::make_shared<T>( token, m_substring );
    %%%%%: 5217-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5217-block  1
call    3 never executed
    %%%%%: 5217-block  2
call    4 never executed
    $$$$$: 5217-block  3
call    5 never executed
    #####: 5218:if( m_exclusion )
branch  0 never executed
branch  1 never executed
    #####: 5219:pattern = std::make_shared<TestSpec::ExcludedPattern>( pattern );
    %%%%%: 5219-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5219-block  1
call    3 never executed
call    4 never executed
    #####: 5220:m_currentFilter.m_patterns.push_back( pattern );
    %%%%%: 5220-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5221:}
    #####: 5222:m_substring.clear();
    %%%%%: 5222-block  0
call    0 never executed
    #####: 5223:m_patternName.clear();
call    0 never executed
    #####: 5224:m_exclusion = false;
    #####: 5225:m_mode = None;
call    0 never executed
    #####: 5226:}
------------------
        -: 5227:
function _ZN5Catch14TestSpecParser16addCharToPatternEc called 0 returned 0% blocks executed 0%
    #####: 5228:inline void addCharToPattern(char c) {
    #####: 5229:m_substring += c;
    %%%%%: 5229-block  0
call    0 never executed
    #####: 5230:m_patternName += c;
call    0 never executed
    #####: 5231:m_realPatternPos++;
    #####: 5232:}
        -: 5233:
        -: 5234:};
        -: 5235:TestSpec parseTestSpec( std::string const& arg );
        -: 5236:
        -: 5237:} // namespace Catch
        -: 5238:
        -: 5239:#ifdef __clang__
        -: 5240:#pragma clang diagnostic pop
        -: 5241:#endif
        -: 5242:
        -: 5243:// end catch_test_spec_parser.h
        -: 5244:// Libstdc++ doesn't like incomplete classes for unique_ptr
        -: 5245:
        -: 5246:#include <memory>
        -: 5247:#include <vector>
        -: 5248:#include <string>
        -: 5249:
        -: 5250:#ifndef CATCH_CONFIG_CONSOLE_WIDTH
        -: 5251:#define CATCH_CONFIG_CONSOLE_WIDTH 80
        -: 5252:#endif
        -: 5253:
        -: 5254:namespace Catch {
        -: 5255:
        -: 5256:struct IStream;
        -: 5257:
        -: 5258:struct ConfigData {
        -: 5259:bool listTests = false;
        -: 5260:bool listTags = false;
        -: 5261:bool listReporters = false;
        -: 5262:bool listTestNamesOnly = false;
        -: 5263:
        -: 5264:bool showSuccessfulTests = false;
        -: 5265:bool shouldDebugBreak = false;
        -: 5266:bool noThrow = false;
        -: 5267:bool showHelp = false;
        -: 5268:bool showInvisibles = false;
        -: 5269:bool filenamesAsTags = false;
        -: 5270:bool libIdentify = false;
        -: 5271:
        -: 5272:int abortAfter = -1;
        -: 5273:unsigned int rngSeed = 0;
        -: 5274:
        -: 5275:bool benchmarkNoAnalysis = false;
        -: 5276:unsigned int benchmarkSamples = 100;
        -: 5277:double benchmarkConfidenceInterval = 0.95;
        -: 5278:unsigned int benchmarkResamples = 100000;
        -: 5279:
        -: 5280:Verbosity verbosity = Verbosity::Normal;
        -: 5281:WarnAbout::What warnings = WarnAbout::Nothing;
        -: 5282:ShowDurations::OrNot showDurations = ShowDurations::DefaultForReporter;
        -: 5283:RunTests::InWhatOrder runOrder = RunTests::InDeclarationOrder;
        -: 5284:UseColour::YesOrNo useColour = UseColour::Auto;
        -: 5285:WaitForKeypress::When waitForKeypress = WaitForKeypress::Never;
        -: 5286:
        -: 5287:std::string outputFilename;
        -: 5288:std::string name;
        -: 5289:std::string processName;
        -: 5290:#ifndef CATCH_CONFIG_DEFAULT_REPORTER
        -: 5291:#define CATCH_CONFIG_DEFAULT_REPORTER "console"
        -: 5292:#endif
        -: 5293:std::string reporterName = CATCH_CONFIG_DEFAULT_REPORTER;
        -: 5294:#undef CATCH_CONFIG_DEFAULT_REPORTER
        -: 5295:
        -: 5296:std::vector<std::string> testsOrTags;
        -: 5297:std::vector<std::string> sectionsToRun;
        -: 5298:};
        -: 5299:
        -: 5300:class Config : public IConfig {
        -: 5301:public:
        -: 5302:
        -: 5303:Config() = default;
        -: 5304:Config( ConfigData const& data );
       1*: 5305:virtual ~Config() = default;
------------------
_ZN5Catch6ConfigD0Ev:
function _ZN5Catch6ConfigD0Ev called 0 returned 0% blocks executed 0%
    #####: 5305:virtual ~Config() = default;
    %%%%%: 5305-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch6ConfigD1Ev:
function _ZN5Catch6ConfigD1Ev called 1 returned 100% blocks executed 100%
        1: 5305:virtual ~Config() = default;
        1: 5305-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
------------------
        -: 5306:
        -: 5307:std::string const& getFilename() const;
        -: 5308:
        -: 5309:bool listTests() const;
        -: 5310:bool listTestNamesOnly() const;
        -: 5311:bool listTags() const;
        -: 5312:bool listReporters() const;
        -: 5313:
        -: 5314:std::string getProcessName() const;
        -: 5315:std::string const& getReporterName() const;
        -: 5316:
        -: 5317:std::vector<std::string> const& getTestsOrTags() const override;
        -: 5318:std::vector<std::string> const& getSectionsToRun() const override;
        -: 5319:
        -: 5320:TestSpec const& testSpec() const override;
        -: 5321:bool hasTestFilters() const override;
        -: 5322:
        -: 5323:bool showHelp() const;
        -: 5324:
        -: 5325:// IConfig interface
        -: 5326:bool allowThrows() const override;
        -: 5327:std::ostream& stream() const override;
        -: 5328:std::string name() const override;
        -: 5329:bool includeSuccessfulResults() const override;
        -: 5330:bool warnAboutMissingAssertions() const override;
        -: 5331:bool warnAboutNoTests() const override;
        -: 5332:ShowDurations::OrNot showDurations() const override;
        -: 5333:RunTests::InWhatOrder runOrder() const override;
        -: 5334:unsigned int rngSeed() const override;
        -: 5335:UseColour::YesOrNo useColour() const override;
        -: 5336:bool shouldDebugBreak() const override;
        -: 5337:int abortAfter() const override;
        -: 5338:bool showInvisibles() const override;
        -: 5339:Verbosity verbosity() const override;
        -: 5340:bool benchmarkNoAnalysis() const override;
        -: 5341:int benchmarkSamples() const override;
        -: 5342:double benchmarkConfidenceInterval() const override;
        -: 5343:unsigned int benchmarkResamples() const override;
        -: 5344:
        -: 5345:private:
        -: 5346:
        -: 5347:IStream const* openStream();
        -: 5348:ConfigData m_data;
        -: 5349:
        -: 5350:std::unique_ptr<IStream const> m_stream;
        -: 5351:TestSpec m_testSpec;
        -: 5352:bool m_hasTestFilters = false;
        -: 5353:};
        -: 5354:
        -: 5355:} // end namespace Catch
        -: 5356:
        -: 5357:// end catch_config.hpp
        -: 5358:// start catch_assertionresult.h
        -: 5359:
        -: 5360:#include <string>
        -: 5361:
        -: 5362:namespace Catch {
        -: 5363:
        -: 5364:struct AssertionResultData
        -: 5365:{
        -: 5366:AssertionResultData() = delete;
        -: 5367:
        -: 5368:AssertionResultData( ResultWas::OfType _resultType, LazyExpression const& _lazyExpression );
        -: 5369:
        -: 5370:std::string message;
        -: 5371:mutable std::string reconstructedExpression;
        -: 5372:LazyExpression lazyExpression;
        -: 5373:ResultWas::OfType resultType;
        -: 5374:
        -: 5375:std::string reconstructExpression() const;
        -: 5376:};
        -: 5377:
        -: 5378:class AssertionResult {
        -: 5379:public:
        -: 5380:AssertionResult() = delete;
        -: 5381:AssertionResult( AssertionInfo const& info, AssertionResultData const& data );
        -: 5382:
        -: 5383:bool isOk() const;
        -: 5384:bool succeeded() const;
        -: 5385:ResultWas::OfType getResultType() const;
        -: 5386:bool hasExpression() const;
        -: 5387:bool hasMessage() const;
        -: 5388:std::string getExpression() const;
        -: 5389:std::string getExpressionInMacro() const;
        -: 5390:bool hasExpandedExpression() const;
        -: 5391:std::string getExpandedExpression() const;
        -: 5392:std::string getMessage() const;
        -: 5393:SourceLineInfo getSourceInfo() const;
        -: 5394:StringRef getTestMacroName() const;
        -: 5395:
        -: 5396://protected:
        -: 5397:AssertionInfo m_info;
        -: 5398:AssertionResultData m_resultData;
        -: 5399:};
        -: 5400:
        -: 5401:} // end namespace Catch
        -: 5402:
        -: 5403:// end catch_assertionresult.h
        -: 5404:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -: 5405:// start catch_estimate.hpp
        -: 5406:
        -: 5407:// Statistics estimates
        -: 5408:
        -: 5409:
        -: 5410:namespace Catch {
        -: 5411:namespace Benchmark {
        -: 5412:template <typename Duration>
        -: 5413:struct Estimate {
        -: 5414:Duration point;
        -: 5415:Duration lower_bound;
        -: 5416:Duration upper_bound;
        -: 5417:double confidence_interval;
        -: 5418:
        -: 5419:template <typename Duration2>
        -: 5420:operator Estimate<Duration2>() const {
        -: 5421:return { point, lower_bound, upper_bound, confidence_interval };
        -: 5422:}
        -: 5423:};
        -: 5424:} // namespace Benchmark
        -: 5425:} // namespace Catch
        -: 5426:
        -: 5427:// end catch_estimate.hpp
        -: 5428:// start catch_outlier_classification.hpp
        -: 5429:
        -: 5430:// Outlier information
        -: 5431:
        -: 5432:namespace Catch {
        -: 5433:namespace Benchmark {
        -: 5434:struct OutlierClassification {
        -: 5435:int samples_seen = 0;
        -: 5436:int low_severe = 0;     // more than 3 times IQR below Q1
        -: 5437:int low_mild = 0;       // 1.5 to 3 times IQR below Q1
        -: 5438:int high_mild = 0;      // 1.5 to 3 times IQR above Q3
        -: 5439:int high_severe = 0;    // more than 3 times IQR above Q3
        -: 5440:
        -: 5441:int total() const {
        -: 5442:return low_severe + low_mild + high_mild + high_severe;
        -: 5443:}
        -: 5444:};
        -: 5445:} // namespace Benchmark
        -: 5446:} // namespace Catch
        -: 5447:
        -: 5448:// end catch_outlier_classification.hpp
        -: 5449:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -: 5450:
        -: 5451:#include <string>
        -: 5452:#include <iosfwd>
        -: 5453:#include <map>
        -: 5454:#include <set>
        -: 5455:#include <memory>
        -: 5456:#include <algorithm>
        -: 5457:
        -: 5458:namespace Catch {
        -: 5459:
        -: 5460:struct ReporterConfig {
        -: 5461:explicit ReporterConfig( IConfigPtr const& _fullConfig );
        -: 5462:
        -: 5463:ReporterConfig( IConfigPtr const& _fullConfig, std::ostream& _stream );
        -: 5464:
        -: 5465:std::ostream& stream() const;
        -: 5466:IConfigPtr fullConfig() const;
        -: 5467:
        -: 5468:private:
        -: 5469:std::ostream* m_stream;
        -: 5470:IConfigPtr m_fullConfig;
        -: 5471:};
        -: 5472:
        -: 5473:struct ReporterPreferences {
        -: 5474:bool shouldRedirectStdOut = false;
        -: 5475:bool shouldReportAllAssertions = false;
        -: 5476:};
        -: 5477:
        -: 5478:template<typename T>
        -: 5479:struct LazyStat : Option<T> {
       10: 5480:LazyStat& operator=( T const& _value ) {
       10: 5481:Option<T>::operator=( _value );
       10: 5482:used = false;
       10: 5483:return *this;
        -: 5484:}
------------------
_ZN5Catch8LazyStatINS_12TestCaseInfoEEaSERKS1_:
function _ZN5Catch8LazyStatINS_12TestCaseInfoEEaSERKS1_ called 8 returned 100% blocks executed 100%
        8: 5480:LazyStat& operator=( T const& _value ) {
        8: 5481:Option<T>::operator=( _value );
        8: 5481-block  0
call    0 returned 8
        8: 5482:used = false;
        8: 5483:return *this;
        -: 5484:}
------------------
_ZN5Catch8LazyStatINS_9GroupInfoEEaSERKS1_:
function _ZN5Catch8LazyStatINS_9GroupInfoEEaSERKS1_ called 1 returned 100% blocks executed 100%
        1: 5480:LazyStat& operator=( T const& _value ) {
        1: 5481:Option<T>::operator=( _value );
        1: 5481-block  0
call    0 returned 1
        1: 5482:used = false;
        1: 5483:return *this;
        -: 5484:}
------------------
_ZN5Catch8LazyStatINS_11TestRunInfoEEaSERKS1_:
function _ZN5Catch8LazyStatINS_11TestRunInfoEEaSERKS1_ called 1 returned 100% blocks executed 100%
        1: 5480:LazyStat& operator=( T const& _value ) {
        1: 5481:Option<T>::operator=( _value );
        1: 5481-block  0
call    0 returned 1
        1: 5482:used = false;
        1: 5483:return *this;
        -: 5484:}
------------------
       12: 5485:void reset() {
       12: 5486:Option<T>::reset();
       12: 5487:used = false;
       12: 5488:}
------------------
_ZN5Catch8LazyStatINS_11TestRunInfoEE5resetEv:
function _ZN5Catch8LazyStatINS_11TestRunInfoEE5resetEv called 1 returned 100% blocks executed 100%
        1: 5485:void reset() {
        1: 5486:Option<T>::reset();
        1: 5486-block  0
call    0 returned 1
        1: 5487:used = false;
        1: 5488:}
------------------
_ZN5Catch8LazyStatINS_9GroupInfoEE5resetEv:
function _ZN5Catch8LazyStatINS_9GroupInfoEE5resetEv called 2 returned 100% blocks executed 100%
        2: 5485:void reset() {
        2: 5486:Option<T>::reset();
        2: 5486-block  0
call    0 returned 2
        2: 5487:used = false;
        2: 5488:}
------------------
_ZN5Catch8LazyStatINS_12TestCaseInfoEE5resetEv:
function _ZN5Catch8LazyStatINS_12TestCaseInfoEE5resetEv called 9 returned 100% blocks executed 100%
        9: 5485:void reset() {
        9: 5486:Option<T>::reset();
        9: 5486-block  0
call    0 returned 9
        9: 5487:used = false;
        9: 5488:}
------------------
        -: 5489:bool used = false;
        -: 5490:};
        -: 5491:
        -: 5492:struct TestRunInfo {
        -: 5493:TestRunInfo( std::string const& _name );
        -: 5494:std::string name;
        -: 5495:};
        -: 5496:struct GroupInfo {
        -: 5497:GroupInfo(  std::string const& _name,
        -: 5498:std::size_t _groupIndex,
        -: 5499:std::size_t _groupsCount );
        -: 5500:
        -: 5501:std::string name;
        -: 5502:std::size_t groupIndex;
        -: 5503:std::size_t groupsCounts;
        -: 5504:};
        -: 5505:
    #####: 5506:struct AssertionStats {
------------------
_ZN5Catch14AssertionStatsD0Ev:
function _ZN5Catch14AssertionStatsD0Ev called 0 returned 0% blocks executed 0%
    #####: 5506:struct AssertionStats {
    %%%%%: 5506-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch14AssertionStatsD2Ev:
function _ZN5Catch14AssertionStatsD2Ev called 0 returned 0% blocks executed 0%
    #####: 5506:struct AssertionStats {
    %%%%%: 5506-block  0
call    0 never executed
call    1 never executed
------------------
        -: 5507:AssertionStats( AssertionResult const& _assertionResult,
        -: 5508:std::vector<MessageInfo> const& _infoMessages,
        -: 5509:Totals const& _totals );
        -: 5510:
function _ZN5Catch14AssertionStatsC1ERKS0_ called 0 returned 0% blocks executed 0%
    #####: 5511:AssertionStats( AssertionStats const& )              = default;
    %%%%%: 5511-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5511-block  1
    $$$$$: 5511-block  2
call    4 never executed
        -: 5512:AssertionStats( AssertionStats && )                  = default;
        -: 5513:AssertionStats& operator = ( AssertionStats const& ) = delete;
        -: 5514:AssertionStats& operator = ( AssertionStats && )     = delete;
        -: 5515:virtual ~AssertionStats();
        -: 5516:
        -: 5517:AssertionResult assertionResult;
        -: 5518:std::vector<MessageInfo> infoMessages;
        -: 5519:Totals totals;
        -: 5520:};
        -: 5521:
       8*: 5522:struct SectionStats {
------------------
_ZN5Catch12SectionStatsaSERKS0_:
function _ZN5Catch12SectionStatsaSERKS0_ called 0 returned 0% blocks executed 0%
    #####: 5522:struct SectionStats {
    %%%%%: 5522-block  0
call    0 never executed
------------------
_ZN5Catch12SectionStatsD0Ev:
function _ZN5Catch12SectionStatsD0Ev called 0 returned 0% blocks executed 0%
    #####: 5522:struct SectionStats {
    %%%%%: 5522-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch12SectionStatsD2Ev:
function _ZN5Catch12SectionStatsD2Ev called 8 returned 100% blocks executed 100%
        8: 5522:struct SectionStats {
        8: 5522-block  0
call    0 returned 8
------------------
        -: 5523:SectionStats(   SectionInfo const& _sectionInfo,
        -: 5524:Counts const& _assertions,
        -: 5525:double _durationInSeconds,
        -: 5526:bool _missingAssertions );
function _ZN5Catch12SectionStatsC1ERKS0_ called 0 returned 0% blocks executed 0%
    #####: 5527:SectionStats( SectionStats const& )              = default;
    %%%%%: 5527-block  0
call    0 never executed
        -: 5528:SectionStats( SectionStats && )                  = default;
        -: 5529:SectionStats& operator = ( SectionStats const& ) = default;
        -: 5530:SectionStats& operator = ( SectionStats && )     = default;
        -: 5531:virtual ~SectionStats();
        -: 5532:
        -: 5533:SectionInfo sectionInfo;
        -: 5534:Counts assertions;
        -: 5535:double durationInSeconds;
        -: 5536:bool missingAssertions;
        -: 5537:};
        -: 5538:
       8*: 5539:struct TestCaseStats {
------------------
_ZN5Catch13TestCaseStatsD0Ev:
function _ZN5Catch13TestCaseStatsD0Ev called 0 returned 0% blocks executed 0%
    #####: 5539:struct TestCaseStats {
    %%%%%: 5539-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch13TestCaseStatsD2Ev:
function _ZN5Catch13TestCaseStatsD2Ev called 8 returned 100% blocks executed 100%
        8: 5539:struct TestCaseStats {
        8: 5539-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
------------------
        -: 5540:TestCaseStats(  TestCaseInfo const& _testInfo,
        -: 5541:Totals const& _totals,
        -: 5542:std::string const& _stdOut,
        -: 5543:std::string const& _stdErr,
        -: 5544:bool _aborting );
        -: 5545:
function _ZN5Catch13TestCaseStatsC1ERKS0_ called 0 returned 0% blocks executed 0%
    #####: 5546:TestCaseStats( TestCaseStats const& )              = default;
    %%%%%: 5546-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5546-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5546-block  2
    $$$$$: 5546-block  3
call    7 never executed
    $$$$$: 5546-block  4
call    8 never executed
        -: 5547:TestCaseStats( TestCaseStats && )                  = default;
        -: 5548:TestCaseStats& operator = ( TestCaseStats const& ) = default;
        -: 5549:TestCaseStats& operator = ( TestCaseStats && )     = default;
        -: 5550:virtual ~TestCaseStats();
        -: 5551:
        -: 5552:TestCaseInfo testInfo;
        -: 5553:Totals totals;
        -: 5554:std::string stdOut;
        -: 5555:std::string stdErr;
        -: 5556:bool aborting;
        -: 5557:};
        -: 5558:
       1*: 5559:struct TestGroupStats {
------------------
_ZN5Catch14TestGroupStatsD0Ev:
function _ZN5Catch14TestGroupStatsD0Ev called 0 returned 0% blocks executed 0%
    #####: 5559:struct TestGroupStats {
    %%%%%: 5559-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch14TestGroupStatsD2Ev:
function _ZN5Catch14TestGroupStatsD2Ev called 1 returned 100% blocks executed 100%
        1: 5559:struct TestGroupStats {
        1: 5559-block  0
call    0 returned 1
------------------
        -: 5560:TestGroupStats( GroupInfo const& _groupInfo,
        -: 5561:Totals const& _totals,
        -: 5562:bool _aborting );
        -: 5563:TestGroupStats( GroupInfo const& _groupInfo );
        -: 5564:
function _ZN5Catch14TestGroupStatsC1ERKS0_ called 0 returned 0% blocks executed 0%
    #####: 5565:TestGroupStats( TestGroupStats const& )              = default;
    %%%%%: 5565-block  0
call    0 never executed
        -: 5566:TestGroupStats( TestGroupStats && )                  = default;
        -: 5567:TestGroupStats& operator = ( TestGroupStats const& ) = default;
        -: 5568:TestGroupStats& operator = ( TestGroupStats && )     = default;
        -: 5569:virtual ~TestGroupStats();
        -: 5570:
        -: 5571:GroupInfo groupInfo;
        -: 5572:Totals totals;
        -: 5573:bool aborting;
        -: 5574:};
        -: 5575:
       1*: 5576:struct TestRunStats {
------------------
_ZN5Catch12TestRunStatsD0Ev:
function _ZN5Catch12TestRunStatsD0Ev called 0 returned 0% blocks executed 0%
    #####: 5576:struct TestRunStats {
    %%%%%: 5576-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch12TestRunStatsD2Ev:
function _ZN5Catch12TestRunStatsD2Ev called 1 returned 100% blocks executed 100%
        1: 5576:struct TestRunStats {
        1: 5576-block  0
call    0 returned 1
------------------
        -: 5577:TestRunStats(   TestRunInfo const& _runInfo,
        -: 5578:Totals const& _totals,
        -: 5579:bool _aborting );
        -: 5580:
function _ZN5Catch12TestRunStatsC1ERKS0_ called 0 returned 0% blocks executed 0%
    #####: 5581:TestRunStats( TestRunStats const& )              = default;
    %%%%%: 5581-block  0
call    0 never executed
        -: 5582:TestRunStats( TestRunStats && )                  = default;
        -: 5583:TestRunStats& operator = ( TestRunStats const& ) = default;
        -: 5584:TestRunStats& operator = ( TestRunStats && )     = default;
        -: 5585:virtual ~TestRunStats();
        -: 5586:
        -: 5587:TestRunInfo runInfo;
        -: 5588:Totals totals;
        -: 5589:bool aborting;
        -: 5590:};
        -: 5591:
        -: 5592:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -: 5593:struct BenchmarkInfo {
        -: 5594:std::string name;
        -: 5595:double estimatedDuration;
        -: 5596:int iterations;
        -: 5597:int samples;
        -: 5598:unsigned int resamples;
        -: 5599:double clockResolution;
        -: 5600:double clockCost;
        -: 5601:};
        -: 5602:
        -: 5603:template <class Duration>
        -: 5604:struct BenchmarkStats {
        -: 5605:BenchmarkInfo info;
        -: 5606:
        -: 5607:std::vector<Duration> samples;
        -: 5608:Benchmark::Estimate<Duration> mean;
        -: 5609:Benchmark::Estimate<Duration> standardDeviation;
        -: 5610:Benchmark::OutlierClassification outliers;
        -: 5611:double outlierVariance;
        -: 5612:
        -: 5613:template <typename Duration2>
        -: 5614:operator BenchmarkStats<Duration2>() const {
        -: 5615:std::vector<Duration2> samples2;
        -: 5616:samples2.reserve(samples.size());
        -: 5617:std::transform(samples.begin(), samples.end(), std::back_inserter(samples2), [](Duration d) { return Duration2(d); });
        -: 5618:return {
        -: 5619:info,
        -: 5620:std::move(samples2),
        -: 5621:mean,
        -: 5622:standardDeviation,
        -: 5623:outliers,
        -: 5624:outlierVariance,
        -: 5625:};
        -: 5626:}
        -: 5627:};
        -: 5628:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -: 5629:
        -: 5630:struct IStreamingReporter {
function _ZN5Catch18IStreamingReporterD2Ev called 1 returned 100% blocks executed 100%
        1: 5631:virtual ~IStreamingReporter() = default;
        -: 5632:
        -: 5633:// Implementing class must also provide the following static methods:
        -: 5634:// static std::string getDescription();
        -: 5635:// static std::set<Verbosity> getSupportedVerbosities()
        -: 5636:
        -: 5637:virtual ReporterPreferences getPreferences() const = 0;
        -: 5638:
        -: 5639:virtual void noMatchingTestCases( std::string const& spec ) = 0;
        -: 5640:
function _ZN5Catch18IStreamingReporter22reportInvalidArgumentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5641:virtual void reportInvalidArguments(std::string const&) {}
        -: 5642:
        -: 5643:virtual void testRunStarting( TestRunInfo const& testRunInfo ) = 0;
        -: 5644:virtual void testGroupStarting( GroupInfo const& groupInfo ) = 0;
        -: 5645:
        -: 5646:virtual void testCaseStarting( TestCaseInfo const& testInfo ) = 0;
        -: 5647:virtual void sectionStarting( SectionInfo const& sectionInfo ) = 0;
        -: 5648:
        -: 5649:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -: 5650:virtual void benchmarkPreparing( std::string const& ) {}
        -: 5651:virtual void benchmarkStarting( BenchmarkInfo const& ) {}
        -: 5652:virtual void benchmarkEnded( BenchmarkStats<> const& ) {}
        -: 5653:virtual void benchmarkFailed( std::string const& ) {}
        -: 5654:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -: 5655:
        -: 5656:virtual void assertionStarting( AssertionInfo const& assertionInfo ) = 0;
        -: 5657:
        -: 5658:// The return value indicates if the messages buffer should be cleared:
        -: 5659:virtual bool assertionEnded( AssertionStats const& assertionStats ) = 0;
        -: 5660:
        -: 5661:virtual void sectionEnded( SectionStats const& sectionStats ) = 0;
        -: 5662:virtual void testCaseEnded( TestCaseStats const& testCaseStats ) = 0;
        -: 5663:virtual void testGroupEnded( TestGroupStats const& testGroupStats ) = 0;
        -: 5664:virtual void testRunEnded( TestRunStats const& testRunStats ) = 0;
        -: 5665:
        -: 5666:virtual void skipTest( TestCaseInfo const& testInfo ) = 0;
        -: 5667:
        -: 5668:// Default empty implementation provided
        -: 5669:virtual void fatalErrorEncountered( StringRef name );
        -: 5670:
        -: 5671:virtual bool isMulti() const;
        -: 5672:};
        -: 5673:using IStreamingReporterPtr = std::unique_ptr<IStreamingReporter>;
        -: 5674:
       4*: 5675:struct IReporterFactory {
------------------
_ZN5Catch16IReporterFactoryD0Ev:
function _ZN5Catch16IReporterFactoryD0Ev called 0 returned 0% blocks executed 0%
    #####: 5675:struct IReporterFactory {
    %%%%%: 5675-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch16IReporterFactoryD2Ev:
function _ZN5Catch16IReporterFactoryD2Ev called 4 returned 100% blocks executed 100%
        4: 5675:struct IReporterFactory {
------------------
        -: 5676:virtual ~IReporterFactory();
        -: 5677:virtual IStreamingReporterPtr create( ReporterConfig const& config ) const = 0;
        -: 5678:virtual std::string getDescription() const = 0;
        -: 5679:};
        -: 5680:using IReporterFactoryPtr = std::shared_ptr<IReporterFactory>;
        -: 5681:
       1*: 5682:struct IReporterRegistry {
------------------
_ZN5Catch17IReporterRegistryD0Ev:
function _ZN5Catch17IReporterRegistryD0Ev called 0 returned 0% blocks executed 0%
    #####: 5682:struct IReporterRegistry {
    %%%%%: 5682-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch17IReporterRegistryD2Ev:
function _ZN5Catch17IReporterRegistryD2Ev called 1 returned 100% blocks executed 100%
        1: 5682:struct IReporterRegistry {
------------------
        -: 5683:using FactoryMap = std::map<std::string, IReporterFactoryPtr>;
        -: 5684:using Listeners = std::vector<IReporterFactoryPtr>;
        -: 5685:
        -: 5686:virtual ~IReporterRegistry();
        -: 5687:virtual IStreamingReporterPtr create( std::string const& name, IConfigPtr const& config ) const = 0;
        -: 5688:virtual FactoryMap const& getFactories() const = 0;
        -: 5689:virtual Listeners const& getListeners() const = 0;
        -: 5690:};
        -: 5691:
        -: 5692:} // end namespace Catch
        -: 5693:
        -: 5694:// end catch_interfaces_reporter.h
        -: 5695:#include <algorithm>
        -: 5696:#include <cstring>
        -: 5697:#include <cfloat>
        -: 5698:#include <cstdio>
        -: 5699:#include <cassert>
        -: 5700:#include <memory>
        -: 5701:#include <ostream>
        -: 5702:
        -: 5703:namespace Catch {
        -: 5704:void prepareExpandedExpression(AssertionResult& result);
        -: 5705:
        -: 5706:// Returns double formatted as %.3f (format expected on output)
        -: 5707:std::string getFormattedDuration( double duration );
        -: 5708:
        -: 5709:std::string serializeFilters( std::vector<std::string> const& container );
        -: 5710:
        -: 5711:template<typename DerivedT>
        -: 5712:struct StreamingReporterBase : IStreamingReporter {
        -: 5713:
       1*: 5714:StreamingReporterBase( ReporterConfig const& _config )
        -: 5715::   m_config( _config.fullConfig() ),
       1*: 5716:stream( _config.stream() )
        -: 5717:{
       1*: 5718:m_reporterPrefs.shouldRedirectStdOut = false;
       1*: 5719:if( !DerivedT::getSupportedVerbosities().count( m_config->verbosity() ) )
    #####: 5720:CATCH_ERROR( "Verbosity level not supported by this reporter" );
       1*: 5721:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15CompactReporterEEC2ERKNS_14ReporterConfigE:
function _ZN5Catch21StreamingReporterBaseINS_15CompactReporterEEC2ERKNS_14ReporterConfigE called 0 returned 0% blocks executed 0%
    #####: 5714:StreamingReporterBase( ReporterConfig const& _config )
        -: 5715::   m_config( _config.fullConfig() ),
    #####: 5716:stream( _config.stream() )
    %%%%%: 5716-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5716-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5716-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5716-block  3
call   12 never executed
call   13 never executed
    $$$$$: 5716-block  4
call   14 never executed
    $$$$$: 5716-block  5
call   15 never executed
    $$$$$: 5716-block  6
call   16 never executed
    $$$$$: 5716-block  7
call   17 never executed
    $$$$$: 5716-block  8
call   18 never executed
    $$$$$: 5716-block  9
call   19 never executed
        -: 5717:{
    #####: 5718:m_reporterPrefs.shouldRedirectStdOut = false;
    #####: 5719:if( !DerivedT::getSupportedVerbosities().count( m_config->verbosity() ) )
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5719-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5719-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5719-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 5719-block  3
    $$$$$: 5719-block  4
call   13 never executed
    $$$$$: 5719-block  5
    #####: 5720:CATCH_ERROR( "Verbosity level not supported by this reporter" );
    %%%%%: 5720-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5720-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5720-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5720-block  3
call    9 never executed
    $$$$$: 5720-block  4
call   10 never executed
    $$$$$: 5720-block  5
    $$$$$: 5720-block  6
call   11 never executed
    $$$$$: 5720-block  7
    #####: 5721:}
    %%%%%: 5721-block  0
------------------
_ZN5Catch21StreamingReporterBaseINS_11XmlReporterEEC2ERKNS_14ReporterConfigE:
function _ZN5Catch21StreamingReporterBaseINS_11XmlReporterEEC2ERKNS_14ReporterConfigE called 0 returned 0% blocks executed 0%
    #####: 5714:StreamingReporterBase( ReporterConfig const& _config )
        -: 5715::   m_config( _config.fullConfig() ),
    #####: 5716:stream( _config.stream() )
    %%%%%: 5716-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5716-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5716-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5716-block  3
call   12 never executed
call   13 never executed
    $$$$$: 5716-block  4
call   14 never executed
    $$$$$: 5716-block  5
call   15 never executed
    $$$$$: 5716-block  6
call   16 never executed
    $$$$$: 5716-block  7
call   17 never executed
    $$$$$: 5716-block  8
call   18 never executed
    $$$$$: 5716-block  9
call   19 never executed
        -: 5717:{
    #####: 5718:m_reporterPrefs.shouldRedirectStdOut = false;
    #####: 5719:if( !DerivedT::getSupportedVerbosities().count( m_config->verbosity() ) )
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5719-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5719-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5719-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 5719-block  3
    $$$$$: 5719-block  4
call   13 never executed
    $$$$$: 5719-block  5
    #####: 5720:CATCH_ERROR( "Verbosity level not supported by this reporter" );
    %%%%%: 5720-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5720-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5720-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5720-block  3
call    9 never executed
    $$$$$: 5720-block  4
call   10 never executed
    $$$$$: 5720-block  5
    $$$$$: 5720-block  6
call   11 never executed
    $$$$$: 5720-block  7
    #####: 5721:}
    %%%%%: 5721-block  0
------------------
_ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEEC2ERKNS_14ReporterConfigE:
function _ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEEC2ERKNS_14ReporterConfigE called 1 returned 100% blocks executed 39%
        1: 5714:StreamingReporterBase( ReporterConfig const& _config )
        -: 5715::   m_config( _config.fullConfig() ),
        1: 5716:stream( _config.stream() )
        1: 5716-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5716-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 5716-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1: 5716-block  3
call   12 returned 1
call   13 returned 1
    $$$$$: 5716-block  4
call   14 never executed
    $$$$$: 5716-block  5
call   15 never executed
    $$$$$: 5716-block  6
call   16 never executed
    $$$$$: 5716-block  7
call   17 never executed
    $$$$$: 5716-block  8
call   18 never executed
    $$$$$: 5716-block  9
call   19 never executed
        -: 5717:{
        1: 5718:m_reporterPrefs.shouldRedirectStdOut = false;
        1: 5719:if( !DerivedT::getSupportedVerbosities().count( m_config->verbosity() ) )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5719-block  0
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5719-block  1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 5719-block  2
call   10 returned 1
branch 11 taken 0 (fallthrough)
branch 12 taken 1
    $$$$$: 5719-block  3
    $$$$$: 5719-block  4
call   13 never executed
    $$$$$: 5719-block  5
    #####: 5720:CATCH_ERROR( "Verbosity level not supported by this reporter" );
    %%%%%: 5720-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5720-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5720-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5720-block  3
call    9 never executed
    $$$$$: 5720-block  4
call   10 never executed
    $$$$$: 5720-block  5
    $$$$$: 5720-block  6
call   11 never executed
    $$$$$: 5720-block  7
        1: 5721:}
        1: 5721-block  0
------------------
_ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEEC2ERKNS_14ReporterConfigE:
function _ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEEC2ERKNS_14ReporterConfigE called 0 returned 0% blocks executed 0%
    #####: 5714:StreamingReporterBase( ReporterConfig const& _config )
        -: 5715::   m_config( _config.fullConfig() ),
    #####: 5716:stream( _config.stream() )
    %%%%%: 5716-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5716-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5716-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5716-block  3
call   12 never executed
call   13 never executed
    $$$$$: 5716-block  4
call   14 never executed
    $$$$$: 5716-block  5
call   15 never executed
    $$$$$: 5716-block  6
call   16 never executed
    $$$$$: 5716-block  7
call   17 never executed
    $$$$$: 5716-block  8
call   18 never executed
    $$$$$: 5716-block  9
call   19 never executed
        -: 5717:{
    #####: 5718:m_reporterPrefs.shouldRedirectStdOut = false;
    #####: 5719:if( !DerivedT::getSupportedVerbosities().count( m_config->verbosity() ) )
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5719-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5719-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5719-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 5719-block  3
    $$$$$: 5719-block  4
call   13 never executed
    $$$$$: 5719-block  5
    #####: 5720:CATCH_ERROR( "Verbosity level not supported by this reporter" );
    %%%%%: 5720-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5720-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5720-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5720-block  3
call    9 never executed
    $$$$$: 5720-block  4
call   10 never executed
    $$$$$: 5720-block  5
    $$$$$: 5720-block  6
call   11 never executed
    $$$$$: 5720-block  7
    #####: 5721:}
    %%%%%: 5721-block  0
------------------
        -: 5722:
       9*: 5723:ReporterPreferences getPreferences() const override {
       9*: 5724:return m_reporterPrefs;
        -: 5725:}
------------------
_ZNK5Catch21StreamingReporterBaseINS_15CompactReporterEE14getPreferencesEv:
function _ZNK5Catch21StreamingReporterBaseINS_15CompactReporterEE14getPreferencesEv called 0 returned 0% blocks executed 0%
    #####: 5723:ReporterPreferences getPreferences() const override {
    #####: 5724:return m_reporterPrefs;
    %%%%%: 5724-block  0
        -: 5725:}
------------------
_ZNK5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE14getPreferencesEv:
function _ZNK5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE14getPreferencesEv called 0 returned 0% blocks executed 0%
    #####: 5723:ReporterPreferences getPreferences() const override {
    #####: 5724:return m_reporterPrefs;
    %%%%%: 5724-block  0
        -: 5725:}
------------------
_ZNK5Catch21StreamingReporterBaseINS_15ConsoleReporterEE14getPreferencesEv:
function _ZNK5Catch21StreamingReporterBaseINS_15ConsoleReporterEE14getPreferencesEv called 9 returned 100% blocks executed 100%
        9: 5723:ReporterPreferences getPreferences() const override {
        9: 5724:return m_reporterPrefs;
        9: 5724-block  0
        -: 5725:}
------------------
_ZNK5Catch21StreamingReporterBaseINS_11XmlReporterEE14getPreferencesEv:
function _ZNK5Catch21StreamingReporterBaseINS_11XmlReporterEE14getPreferencesEv called 0 returned 0% blocks executed 0%
    #####: 5723:ReporterPreferences getPreferences() const override {
    #####: 5724:return m_reporterPrefs;
    %%%%%: 5724-block  0
        -: 5725:}
------------------
        -: 5726:
       1*: 5727:static std::set<Verbosity> getSupportedVerbosities() {
       1*: 5728:return { Verbosity::Normal };
        -: 5729:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE23getSupportedVerbositiesEv:
function _ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE23getSupportedVerbositiesEv called 0 returned 0% blocks executed 0%
    #####: 5727:static std::set<Verbosity> getSupportedVerbosities() {
    #####: 5728:return { Verbosity::Normal };
    %%%%%: 5728-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5728-block  1
call    4 never executed
    %%%%%: 5728-block  2
    $$$$$: 5728-block  3
call    5 never executed
    $$$$$: 5728-block  4
    $$$$$: 5728-block  5
        -: 5729:}
------------------
_ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE23getSupportedVerbositiesEv:
function _ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE23getSupportedVerbositiesEv called 0 returned 0% blocks executed 0%
    #####: 5727:static std::set<Verbosity> getSupportedVerbosities() {
    #####: 5728:return { Verbosity::Normal };
    %%%%%: 5728-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5728-block  1
call    4 never executed
    %%%%%: 5728-block  2
    $$$$$: 5728-block  3
call    5 never executed
    $$$$$: 5728-block  4
    $$$$$: 5728-block  5
        -: 5729:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE23getSupportedVerbositiesEv:
function _ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE23getSupportedVerbositiesEv called 1 returned 100% blocks executed 60%
        1: 5727:static std::set<Verbosity> getSupportedVerbosities() {
        1: 5728:return { Verbosity::Normal };
        1: 5728-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5728-block  1
call    4 returned 1
        1: 5728-block  2
    $$$$$: 5728-block  3
call    5 never executed
    $$$$$: 5728-block  4
    $$$$$: 5728-block  5
        -: 5729:}
------------------
        -: 5730:
       1*: 5731:~StreamingReporterBase() override = default;
------------------
_ZN5Catch21StreamingReporterBaseINS_11XmlReporterEED2Ev:
function _ZN5Catch21StreamingReporterBaseINS_11XmlReporterEED2Ev called 0 returned 0% blocks executed 0%
    #####: 5731:~StreamingReporterBase() override = default;
    %%%%%: 5731-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
------------------
_ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEED2Ev:
function _ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEED2Ev called 1 returned 100% blocks executed 100%
        1: 5731:~StreamingReporterBase() override = default;
        1: 5731-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
------------------
_ZN5Catch21StreamingReporterBaseINS_15CompactReporterEED2Ev:
function _ZN5Catch21StreamingReporterBaseINS_15CompactReporterEED2Ev called 0 returned 0% blocks executed 0%
    #####: 5731:~StreamingReporterBase() override = default;
    %%%%%: 5731-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
------------------
_ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEED2Ev:
function _ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEED2Ev called 0 returned 0% blocks executed 0%
    #####: 5731:~StreamingReporterBase() override = default;
    %%%%%: 5731-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
------------------
        -: 5732:
    #####: 5733:void noMatchingTestCases(std::string const&) override {}
------------------
_ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE19noMatchingTestCasesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE19noMatchingTestCasesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5733:void noMatchingTestCases(std::string const&) override {}
------------------
_ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE19noMatchingTestCasesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE19noMatchingTestCasesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5733:void noMatchingTestCases(std::string const&) override {}
------------------
_ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE19noMatchingTestCasesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE19noMatchingTestCasesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5733:void noMatchingTestCases(std::string const&) override {}
------------------
_ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE19noMatchingTestCasesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE19noMatchingTestCasesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5733:void noMatchingTestCases(std::string const&) override {}
------------------
        -: 5734:
    #####: 5735:void reportInvalidArguments(std::string const&) override {}
------------------
_ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE22reportInvalidArgumentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE22reportInvalidArgumentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5735:void reportInvalidArguments(std::string const&) override {}
------------------
_ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE22reportInvalidArgumentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE22reportInvalidArgumentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5735:void reportInvalidArguments(std::string const&) override {}
------------------
_ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE22reportInvalidArgumentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE22reportInvalidArgumentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5735:void reportInvalidArguments(std::string const&) override {}
------------------
_ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE22reportInvalidArgumentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE22reportInvalidArgumentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5735:void reportInvalidArguments(std::string const&) override {}
------------------
        -: 5736:
       1*: 5737:void testRunStarting(TestRunInfo const& _testRunInfo) override {
       1*: 5738:currentTestRunInfo = _testRunInfo;
       1*: 5739:}
------------------
_ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE15testRunStartingERKNS_11TestRunInfoE:
function _ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE15testRunStartingERKNS_11TestRunInfoE called 0 returned 0% blocks executed 0%
    #####: 5737:void testRunStarting(TestRunInfo const& _testRunInfo) override {
    #####: 5738:currentTestRunInfo = _testRunInfo;
    %%%%%: 5738-block  0
call    0 never executed
    #####: 5739:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE15testRunStartingERKNS_11TestRunInfoE:
function _ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE15testRunStartingERKNS_11TestRunInfoE called 0 returned 0% blocks executed 0%
    #####: 5737:void testRunStarting(TestRunInfo const& _testRunInfo) override {
    #####: 5738:currentTestRunInfo = _testRunInfo;
    %%%%%: 5738-block  0
call    0 never executed
    #####: 5739:}
------------------
_ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE15testRunStartingERKNS_11TestRunInfoE:
function _ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE15testRunStartingERKNS_11TestRunInfoE called 0 returned 0% blocks executed 0%
    #####: 5737:void testRunStarting(TestRunInfo const& _testRunInfo) override {
    #####: 5738:currentTestRunInfo = _testRunInfo;
    %%%%%: 5738-block  0
call    0 never executed
    #####: 5739:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE15testRunStartingERKNS_11TestRunInfoE:
function _ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE15testRunStartingERKNS_11TestRunInfoE called 1 returned 100% blocks executed 100%
        1: 5737:void testRunStarting(TestRunInfo const& _testRunInfo) override {
        1: 5738:currentTestRunInfo = _testRunInfo;
        1: 5738-block  0
call    0 returned 1
        1: 5739:}
------------------
        -: 5740:
       1*: 5741:void testGroupStarting(GroupInfo const& _groupInfo) override {
       1*: 5742:currentGroupInfo = _groupInfo;
       1*: 5743:}
------------------
_ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE17testGroupStartingERKNS_9GroupInfoE:
function _ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE17testGroupStartingERKNS_9GroupInfoE called 0 returned 0% blocks executed 0%
    #####: 5741:void testGroupStarting(GroupInfo const& _groupInfo) override {
    #####: 5742:currentGroupInfo = _groupInfo;
    %%%%%: 5742-block  0
call    0 never executed
    #####: 5743:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE17testGroupStartingERKNS_9GroupInfoE:
function _ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE17testGroupStartingERKNS_9GroupInfoE called 0 returned 0% blocks executed 0%
    #####: 5741:void testGroupStarting(GroupInfo const& _groupInfo) override {
    #####: 5742:currentGroupInfo = _groupInfo;
    %%%%%: 5742-block  0
call    0 never executed
    #####: 5743:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE17testGroupStartingERKNS_9GroupInfoE:
function _ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE17testGroupStartingERKNS_9GroupInfoE called 1 returned 100% blocks executed 100%
        1: 5741:void testGroupStarting(GroupInfo const& _groupInfo) override {
        1: 5742:currentGroupInfo = _groupInfo;
        1: 5742-block  0
call    0 returned 1
        1: 5743:}
------------------
_ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE17testGroupStartingERKNS_9GroupInfoE:
function _ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE17testGroupStartingERKNS_9GroupInfoE called 0 returned 0% blocks executed 0%
    #####: 5741:void testGroupStarting(GroupInfo const& _groupInfo) override {
    #####: 5742:currentGroupInfo = _groupInfo;
    %%%%%: 5742-block  0
call    0 never executed
    #####: 5743:}
------------------
        -: 5744:
       8*: 5745:void testCaseStarting(TestCaseInfo const& _testInfo) override  {
       8*: 5746:currentTestCaseInfo = _testInfo;
       8*: 5747:}
------------------
_ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE16testCaseStartingERKNS_12TestCaseInfoE:
function _ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE16testCaseStartingERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####: 5745:void testCaseStarting(TestCaseInfo const& _testInfo) override  {
    #####: 5746:currentTestCaseInfo = _testInfo;
    %%%%%: 5746-block  0
call    0 never executed
    #####: 5747:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE16testCaseStartingERKNS_12TestCaseInfoE:
function _ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE16testCaseStartingERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####: 5745:void testCaseStarting(TestCaseInfo const& _testInfo) override  {
    #####: 5746:currentTestCaseInfo = _testInfo;
    %%%%%: 5746-block  0
call    0 never executed
    #####: 5747:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE16testCaseStartingERKNS_12TestCaseInfoE:
function _ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE16testCaseStartingERKNS_12TestCaseInfoE called 8 returned 100% blocks executed 100%
        8: 5745:void testCaseStarting(TestCaseInfo const& _testInfo) override  {
        8: 5746:currentTestCaseInfo = _testInfo;
        8: 5746-block  0
call    0 returned 8
        8: 5747:}
------------------
_ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE16testCaseStartingERKNS_12TestCaseInfoE:
function _ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE16testCaseStartingERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####: 5745:void testCaseStarting(TestCaseInfo const& _testInfo) override  {
    #####: 5746:currentTestCaseInfo = _testInfo;
    %%%%%: 5746-block  0
call    0 never executed
    #####: 5747:}
------------------
       8*: 5748:void sectionStarting(SectionInfo const& _sectionInfo) override {
       8*: 5749:m_sectionStack.push_back(_sectionInfo);
       8*: 5750:}
------------------
_ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE15sectionStartingERKNS_11SectionInfoE:
function _ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE15sectionStartingERKNS_11SectionInfoE called 0 returned 0% blocks executed 0%
    #####: 5748:void sectionStarting(SectionInfo const& _sectionInfo) override {
    #####: 5749:m_sectionStack.push_back(_sectionInfo);
    %%%%%: 5749-block  0
call    0 never executed
    #####: 5750:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE15sectionStartingERKNS_11SectionInfoE:
function _ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE15sectionStartingERKNS_11SectionInfoE called 0 returned 0% blocks executed 0%
    #####: 5748:void sectionStarting(SectionInfo const& _sectionInfo) override {
    #####: 5749:m_sectionStack.push_back(_sectionInfo);
    %%%%%: 5749-block  0
call    0 never executed
    #####: 5750:}
------------------
_ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE15sectionStartingERKNS_11SectionInfoE:
function _ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE15sectionStartingERKNS_11SectionInfoE called 0 returned 0% blocks executed 0%
    #####: 5748:void sectionStarting(SectionInfo const& _sectionInfo) override {
    #####: 5749:m_sectionStack.push_back(_sectionInfo);
    %%%%%: 5749-block  0
call    0 never executed
    #####: 5750:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE15sectionStartingERKNS_11SectionInfoE:
function _ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE15sectionStartingERKNS_11SectionInfoE called 8 returned 100% blocks executed 100%
        8: 5748:void sectionStarting(SectionInfo const& _sectionInfo) override {
        8: 5749:m_sectionStack.push_back(_sectionInfo);
        8: 5749-block  0
call    0 returned 8
        8: 5750:}
------------------
        -: 5751:
       8*: 5752:void sectionEnded(SectionStats const& /* _sectionStats */) override {
       8*: 5753:m_sectionStack.pop_back();
       8*: 5754:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE12sectionEndedERKNS_12SectionStatsE:
function _ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE12sectionEndedERKNS_12SectionStatsE called 0 returned 0% blocks executed 0%
    #####: 5752:void sectionEnded(SectionStats const& /* _sectionStats */) override {
    #####: 5753:m_sectionStack.pop_back();
    %%%%%: 5753-block  0
call    0 never executed
    #####: 5754:}
------------------
_ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE12sectionEndedERKNS_12SectionStatsE:
function _ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE12sectionEndedERKNS_12SectionStatsE called 0 returned 0% blocks executed 0%
    #####: 5752:void sectionEnded(SectionStats const& /* _sectionStats */) override {
    #####: 5753:m_sectionStack.pop_back();
    %%%%%: 5753-block  0
call    0 never executed
    #####: 5754:}
------------------
_ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE12sectionEndedERKNS_12SectionStatsE:
function _ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE12sectionEndedERKNS_12SectionStatsE called 0 returned 0% blocks executed 0%
    #####: 5752:void sectionEnded(SectionStats const& /* _sectionStats */) override {
    #####: 5753:m_sectionStack.pop_back();
    %%%%%: 5753-block  0
call    0 never executed
    #####: 5754:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE12sectionEndedERKNS_12SectionStatsE:
function _ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE12sectionEndedERKNS_12SectionStatsE called 8 returned 100% blocks executed 100%
        8: 5752:void sectionEnded(SectionStats const& /* _sectionStats */) override {
        8: 5753:m_sectionStack.pop_back();
        8: 5753-block  0
call    0 returned 8
        8: 5754:}
------------------
       8*: 5755:void testCaseEnded(TestCaseStats const& /* _testCaseStats */) override {
       8*: 5756:currentTestCaseInfo.reset();
       8*: 5757:}
------------------
_ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE13testCaseEndedERKNS_13TestCaseStatsE:
function _ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE13testCaseEndedERKNS_13TestCaseStatsE called 0 returned 0% blocks executed 0%
    #####: 5755:void testCaseEnded(TestCaseStats const& /* _testCaseStats */) override {
    #####: 5756:currentTestCaseInfo.reset();
    %%%%%: 5756-block  0
call    0 never executed
    #####: 5757:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE13testCaseEndedERKNS_13TestCaseStatsE:
function _ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE13testCaseEndedERKNS_13TestCaseStatsE called 0 returned 0% blocks executed 0%
    #####: 5755:void testCaseEnded(TestCaseStats const& /* _testCaseStats */) override {
    #####: 5756:currentTestCaseInfo.reset();
    %%%%%: 5756-block  0
call    0 never executed
    #####: 5757:}
------------------
_ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE13testCaseEndedERKNS_13TestCaseStatsE:
function _ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE13testCaseEndedERKNS_13TestCaseStatsE called 0 returned 0% blocks executed 0%
    #####: 5755:void testCaseEnded(TestCaseStats const& /* _testCaseStats */) override {
    #####: 5756:currentTestCaseInfo.reset();
    %%%%%: 5756-block  0
call    0 never executed
    #####: 5757:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE13testCaseEndedERKNS_13TestCaseStatsE:
function _ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE13testCaseEndedERKNS_13TestCaseStatsE called 8 returned 100% blocks executed 100%
        8: 5755:void testCaseEnded(TestCaseStats const& /* _testCaseStats */) override {
        8: 5756:currentTestCaseInfo.reset();
        8: 5756-block  0
call    0 returned 8
        8: 5757:}
------------------
       1*: 5758:void testGroupEnded(TestGroupStats const& /* _testGroupStats */) override {
       1*: 5759:currentGroupInfo.reset();
       1*: 5760:}
------------------
_ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE14testGroupEndedERKNS_14TestGroupStatsE:
function _ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE14testGroupEndedERKNS_14TestGroupStatsE called 0 returned 0% blocks executed 0%
    #####: 5758:void testGroupEnded(TestGroupStats const& /* _testGroupStats */) override {
    #####: 5759:currentGroupInfo.reset();
    %%%%%: 5759-block  0
call    0 never executed
    #####: 5760:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE14testGroupEndedERKNS_14TestGroupStatsE:
function _ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE14testGroupEndedERKNS_14TestGroupStatsE called 0 returned 0% blocks executed 0%
    #####: 5758:void testGroupEnded(TestGroupStats const& /* _testGroupStats */) override {
    #####: 5759:currentGroupInfo.reset();
    %%%%%: 5759-block  0
call    0 never executed
    #####: 5760:}
------------------
_ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE14testGroupEndedERKNS_14TestGroupStatsE:
function _ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE14testGroupEndedERKNS_14TestGroupStatsE called 0 returned 0% blocks executed 0%
    #####: 5758:void testGroupEnded(TestGroupStats const& /* _testGroupStats */) override {
    #####: 5759:currentGroupInfo.reset();
    %%%%%: 5759-block  0
call    0 never executed
    #####: 5760:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE14testGroupEndedERKNS_14TestGroupStatsE:
function _ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE14testGroupEndedERKNS_14TestGroupStatsE called 1 returned 100% blocks executed 100%
        1: 5758:void testGroupEnded(TestGroupStats const& /* _testGroupStats */) override {
        1: 5759:currentGroupInfo.reset();
        1: 5759-block  0
call    0 returned 1
        1: 5760:}
------------------
       1*: 5761:void testRunEnded(TestRunStats const& /* _testRunStats */) override {
       1*: 5762:currentTestCaseInfo.reset();
       1*: 5763:currentGroupInfo.reset();
       1*: 5764:currentTestRunInfo.reset();
       1*: 5765:}
------------------
_ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE12testRunEndedERKNS_12TestRunStatsE:
function _ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE12testRunEndedERKNS_12TestRunStatsE called 0 returned 0% blocks executed 0%
    #####: 5761:void testRunEnded(TestRunStats const& /* _testRunStats */) override {
    #####: 5762:currentTestCaseInfo.reset();
    %%%%%: 5762-block  0
call    0 never executed
    #####: 5763:currentGroupInfo.reset();
call    0 never executed
    #####: 5764:currentTestRunInfo.reset();
call    0 never executed
    #####: 5765:}
------------------
_ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE12testRunEndedERKNS_12TestRunStatsE:
function _ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE12testRunEndedERKNS_12TestRunStatsE called 0 returned 0% blocks executed 0%
    #####: 5761:void testRunEnded(TestRunStats const& /* _testRunStats */) override {
    #####: 5762:currentTestCaseInfo.reset();
    %%%%%: 5762-block  0
call    0 never executed
    #####: 5763:currentGroupInfo.reset();
call    0 never executed
    #####: 5764:currentTestRunInfo.reset();
call    0 never executed
    #####: 5765:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE12testRunEndedERKNS_12TestRunStatsE:
function _ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE12testRunEndedERKNS_12TestRunStatsE called 1 returned 100% blocks executed 100%
        1: 5761:void testRunEnded(TestRunStats const& /* _testRunStats */) override {
        1: 5762:currentTestCaseInfo.reset();
        1: 5762-block  0
call    0 returned 1
        1: 5763:currentGroupInfo.reset();
call    0 returned 1
        1: 5764:currentTestRunInfo.reset();
call    0 returned 1
        1: 5765:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE12testRunEndedERKNS_12TestRunStatsE:
function _ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE12testRunEndedERKNS_12TestRunStatsE called 0 returned 0% blocks executed 0%
    #####: 5761:void testRunEnded(TestRunStats const& /* _testRunStats */) override {
    #####: 5762:currentTestCaseInfo.reset();
    %%%%%: 5762-block  0
call    0 never executed
    #####: 5763:currentGroupInfo.reset();
call    0 never executed
    #####: 5764:currentTestRunInfo.reset();
call    0 never executed
    #####: 5765:}
------------------
        -: 5766:
    #####: 5767:void skipTest(TestCaseInfo const&) override {
        -: 5768:// Don't do anything with this by default.
        -: 5769:// It can optionally be overridden in the derived class.
    #####: 5770:}
------------------
_ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE8skipTestERKNS_12TestCaseInfoE:
function _ZN5Catch21StreamingReporterBaseINS_21TestEventListenerBaseEE8skipTestERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####: 5767:void skipTest(TestCaseInfo const&) override {
        -: 5768:// Don't do anything with this by default.
        -: 5769:// It can optionally be overridden in the derived class.
    #####: 5770:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE8skipTestERKNS_12TestCaseInfoE:
function _ZN5Catch21StreamingReporterBaseINS_15CompactReporterEE8skipTestERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####: 5767:void skipTest(TestCaseInfo const&) override {
        -: 5768:// Don't do anything with this by default.
        -: 5769:// It can optionally be overridden in the derived class.
    #####: 5770:}
------------------
_ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE8skipTestERKNS_12TestCaseInfoE:
function _ZN5Catch21StreamingReporterBaseINS_15ConsoleReporterEE8skipTestERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####: 5767:void skipTest(TestCaseInfo const&) override {
        -: 5768:// Don't do anything with this by default.
        -: 5769:// It can optionally be overridden in the derived class.
    #####: 5770:}
------------------
_ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE8skipTestERKNS_12TestCaseInfoE:
function _ZN5Catch21StreamingReporterBaseINS_11XmlReporterEE8skipTestERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####: 5767:void skipTest(TestCaseInfo const&) override {
        -: 5768:// Don't do anything with this by default.
        -: 5769:// It can optionally be overridden in the derived class.
    #####: 5770:}
------------------
        -: 5771:
        -: 5772:IConfigPtr m_config;
        -: 5773:std::ostream& stream;
        -: 5774:
        -: 5775:LazyStat<TestRunInfo> currentTestRunInfo;
        -: 5776:LazyStat<GroupInfo> currentGroupInfo;
        -: 5777:LazyStat<TestCaseInfo> currentTestCaseInfo;
        -: 5778:
        -: 5779:std::vector<SectionInfo> m_sectionStack;
        -: 5780:ReporterPreferences m_reporterPrefs;
        -: 5781:};
        -: 5782:
        -: 5783:template<typename DerivedT>
        -: 5784:struct CumulativeReporterBase : IStreamingReporter {
        -: 5785:template<typename T, typename ChildNodeT>
        -: 5786:struct Node {
    #####: 5787:explicit Node( T const& _value ) : value( _value ) {}
------------------
_ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_12TestRunStatsENS3_INS_14TestGroupStatsENS3_INS_13TestCaseStatsENS2_11SectionNodeEEEEEEC1ERKS4_:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_12TestRunStatsENS3_INS_14TestGroupStatsENS3_INS_13TestCaseStatsENS2_11SectionNodeEEEEEEC1ERKS4_ called 0 returned 0% blocks executed 0%
    #####: 5787:explicit Node( T const& _value ) : value( _value ) {}
    %%%%%: 5787-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_14TestGroupStatsENS3_INS_13TestCaseStatsENS2_11SectionNodeEEEEC1ERKS4_:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_14TestGroupStatsENS3_INS_13TestCaseStatsENS2_11SectionNodeEEEEC1ERKS4_ called 0 returned 0% blocks executed 0%
    #####: 5787:explicit Node( T const& _value ) : value( _value ) {}
    %%%%%: 5787-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_13TestCaseStatsENS2_11SectionNodeEEC1ERKS4_:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_13TestCaseStatsENS2_11SectionNodeEEC1ERKS4_ called 0 returned 0% blocks executed 0%
    #####: 5787:explicit Node( T const& _value ) : value( _value ) {}
    %%%%%: 5787-block  0
call    0 never executed
call    1 never executed
------------------
    #####: 5788:virtual ~Node() {}
------------------
_ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_12TestRunStatsENS3_INS_14TestGroupStatsENS3_INS_13TestCaseStatsENS2_11SectionNodeEEEEEED0Ev:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_12TestRunStatsENS3_INS_14TestGroupStatsENS3_INS_13TestCaseStatsENS2_11SectionNodeEEEEEED0Ev called 0 returned 0% blocks executed 0%
    #####: 5788:virtual ~Node() {}
    %%%%%: 5788-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_12TestRunStatsENS3_INS_14TestGroupStatsENS3_INS_13TestCaseStatsENS2_11SectionNodeEEEEEED1Ev:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_12TestRunStatsENS3_INS_14TestGroupStatsENS3_INS_13TestCaseStatsENS2_11SectionNodeEEEEEED1Ev called 0 returned 0% blocks executed 0%
    #####: 5788:virtual ~Node() {}
    %%%%%: 5788-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_14TestGroupStatsENS3_INS_13TestCaseStatsENS2_11SectionNodeEEEED0Ev:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_14TestGroupStatsENS3_INS_13TestCaseStatsENS2_11SectionNodeEEEED0Ev called 0 returned 0% blocks executed 0%
    #####: 5788:virtual ~Node() {}
    %%%%%: 5788-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_14TestGroupStatsENS3_INS_13TestCaseStatsENS2_11SectionNodeEEEED1Ev:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_14TestGroupStatsENS3_INS_13TestCaseStatsENS2_11SectionNodeEEEED1Ev called 0 returned 0% blocks executed 0%
    #####: 5788:virtual ~Node() {}
    %%%%%: 5788-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_13TestCaseStatsENS2_11SectionNodeEED0Ev:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_13TestCaseStatsENS2_11SectionNodeEED0Ev called 0 returned 0% blocks executed 0%
    #####: 5788:virtual ~Node() {}
    %%%%%: 5788-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_13TestCaseStatsENS2_11SectionNodeEED1Ev:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE4NodeINS_13TestCaseStatsENS2_11SectionNodeEED1Ev called 0 returned 0% blocks executed 0%
    #####: 5788:virtual ~Node() {}
    %%%%%: 5788-block  0
call    0 never executed
call    1 never executed
------------------
        -: 5789:
        -: 5790:using ChildNodes = std::vector<std::shared_ptr<ChildNodeT>>;
        -: 5791:T value;
        -: 5792:ChildNodes children;
        -: 5793:};
        -: 5794:struct SectionNode {
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE11SectionNodeC1ERKNS_12SectionStatsE called 0 returned 0% blocks executed 0%
    #####: 5795:explicit SectionNode(SectionStats const& _stats) : stats(_stats) {}
    %%%%%: 5795-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 5796:virtual ~SectionNode() = default;
------------------
_ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE11SectionNodeD0Ev:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE11SectionNodeD0Ev called 0 returned 0% blocks executed 0%
    #####: 5796:virtual ~SectionNode() = default;
    %%%%%: 5796-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE11SectionNodeD1Ev:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE11SectionNodeD1Ev called 0 returned 0% blocks executed 0%
    #####: 5796:virtual ~SectionNode() = default;
    %%%%%: 5796-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
------------------
        -: 5797:
        -: 5798:bool operator == (SectionNode const& other) const {
        -: 5799:return stats.sectionInfo.lineInfo == other.stats.sectionInfo.lineInfo;
        -: 5800:}
        -: 5801:bool operator == (std::shared_ptr<SectionNode> const& other) const {
        -: 5802:return operator==(*other);
        -: 5803:}
        -: 5804:
        -: 5805:SectionStats stats;
        -: 5806:using ChildSections = std::vector<std::shared_ptr<SectionNode>>;
        -: 5807:using Assertions = std::vector<AssertionStats>;
        -: 5808:ChildSections childSections;
        -: 5809:Assertions assertions;
        -: 5810:std::string stdOut;
        -: 5811:std::string stdErr;
        -: 5812:};
        -: 5813:
        -: 5814:struct BySectionInfo {
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE13BySectionInfoC1ERKNS_11SectionInfoE called 0 returned 0% blocks executed 0%
    #####: 5815:BySectionInfo( SectionInfo const& other ) : m_other( other ) {}
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE13BySectionInfoC1ERKS3_ called 0 returned 0% blocks executed 0%
    #####: 5816:BySectionInfo( BySectionInfo const& other ) : m_other( other.m_other ) {}
function _ZNK5Catch22CumulativeReporterBaseINS_13JunitReporterEE13BySectionInfoclERKSt10shared_ptrINS2_11SectionNodeEE called 0 returned 0% blocks executed 0%
    #####: 5817:bool operator() (std::shared_ptr<SectionNode> const& node) const {
    #####: 5818:return ((node->stats.sectionInfo.name == m_other.name) &&
    %%%%%: 5818-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5818-block  1
    %%%%%: 5818-block  2
    #####: 5819:(node->stats.sectionInfo.lineInfo == m_other.lineInfo));
    %%%%%: 5819-block  0
call    0 never executed
call    1 never executed
    %%%%%: 5819-block  1
        -: 5820:}
        -: 5821:void operator=(BySectionInfo const&) = delete;
        -: 5822:
        -: 5823:private:
        -: 5824:SectionInfo const& m_other;
        -: 5825:};
        -: 5826:
        -: 5827:using TestCaseNode = Node<TestCaseStats, SectionNode>;
        -: 5828:using TestGroupNode = Node<TestGroupStats, TestCaseNode>;
        -: 5829:using TestRunNode = Node<TestRunStats, TestGroupNode>;
        -: 5830:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEEC2ERKNS_14ReporterConfigE called 0 returned 0% blocks executed 0%
    #####: 5831:CumulativeReporterBase( ReporterConfig const& _config )
        -: 5832::   m_config( _config.fullConfig() ),
    #####: 5833:stream( _config.stream() )
    %%%%%: 5833-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 5833-block  1
call   12 never executed
    $$$$$: 5833-block  2
call   13 never executed
    $$$$$: 5833-block  3
call   14 never executed
    $$$$$: 5833-block  4
call   15 never executed
    $$$$$: 5833-block  5
call   16 never executed
    $$$$$: 5833-block  6
call   17 never executed
    $$$$$: 5833-block  7
call   18 never executed
    $$$$$: 5833-block  8
call   19 never executed
    $$$$$: 5833-block  9
call   20 never executed
    $$$$$: 5833-block 10
call   21 never executed
        -: 5834:{
    #####: 5835:m_reporterPrefs.shouldRedirectStdOut = false;
    #####: 5836:if( !DerivedT::getSupportedVerbosities().count( m_config->verbosity() ) )
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5836-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5836-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5836-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 5836-block  3
    $$$$$: 5836-block  4
call   13 never executed
    $$$$$: 5836-block  5
    #####: 5837:CATCH_ERROR( "Verbosity level not supported by this reporter" );
    %%%%%: 5837-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5837-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5837-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5837-block  3
call    9 never executed
    $$$$$: 5837-block  4
call   10 never executed
    $$$$$: 5837-block  5
    $$$$$: 5837-block  6
call   11 never executed
    $$$$$: 5837-block  7
    #####: 5838:}
    %%%%%: 5838-block  0
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEED2Ev called 0 returned 0% blocks executed 0%
    #####: 5839:~CumulativeReporterBase() override = default;
    %%%%%: 5839-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -: 5840:
function _ZNK5Catch22CumulativeReporterBaseINS_13JunitReporterEE14getPreferencesEv called 0 returned 0% blocks executed 0%
    #####: 5841:ReporterPreferences getPreferences() const override {
    #####: 5842:return m_reporterPrefs;
    %%%%%: 5842-block  0
        -: 5843:}
        -: 5844:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE23getSupportedVerbositiesEv called 0 returned 0% blocks executed 0%
    #####: 5845:static std::set<Verbosity> getSupportedVerbosities() {
    #####: 5846:return { Verbosity::Normal };
    %%%%%: 5846-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5846-block  1
call    4 never executed
    %%%%%: 5846-block  2
    $$$$$: 5846-block  3
call    5 never executed
    $$$$$: 5846-block  4
    $$$$$: 5846-block  5
        -: 5847:}
        -: 5848:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE15testRunStartingERKNS_11TestRunInfoE called 0 returned 0% blocks executed 0%
    #####: 5849:void testRunStarting( TestRunInfo const& ) override {}
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE17testGroupStartingERKNS_9GroupInfoE called 0 returned 0% blocks executed 0%
    #####: 5850:void testGroupStarting( GroupInfo const& ) override {}
        -: 5851:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE16testCaseStartingERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####: 5852:void testCaseStarting( TestCaseInfo const& ) override {}
        -: 5853:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE15sectionStartingERKNS_11SectionInfoE called 0 returned 0% blocks executed 0%
    #####: 5854:void sectionStarting( SectionInfo const& sectionInfo ) override {
    #####: 5855:SectionStats incompleteStats( sectionInfo, Counts(), 0, false );
    %%%%%: 5855-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5855-block  1
    $$$$$: 5855-block  2
call    5 never executed
    #####: 5856:std::shared_ptr<SectionNode> node;
call    0 never executed
    $$$$$: 5856-block  0
call    1 never executed
    #####: 5857:if( m_sectionStack.empty() ) {
    %%%%%: 5857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5858:if( !m_rootSection )
    %%%%%: 5858-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5859:m_rootSection = std::make_shared<SectionNode>( incompleteStats );
    %%%%%: 5859-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5859-block  1
call    3 never executed
call    4 never executed
    #####: 5860:node = m_rootSection;
    %%%%%: 5860-block  0
call    0 never executed
        -: 5861:}
        -: 5862:else {
    #####: 5863:SectionNode& parentNode = *m_sectionStack.back();
    %%%%%: 5863-block  0
call    0 never executed
call    1 never executed
        -: 5864:auto it =
    #####: 5865:std::find_if(   parentNode.childSections.begin(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5865-block  0
        -: 5866:parentNode.childSections.end(),
        -: 5867:BySectionInfo( sectionInfo ) );
    #####: 5868:if( it == parentNode.childSections.end() ) {
    %%%%%: 5868-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5869:node = std::make_shared<SectionNode>( incompleteStats );
    %%%%%: 5869-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5869-block  1
call    3 never executed
call    4 never executed
    #####: 5870:parentNode.childSections.push_back( node );
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5871:}
        -: 5872:else
    #####: 5873:node = *it;
    %%%%%: 5873-block  0
call    0 never executed
call    1 never executed
        -: 5874:}
    #####: 5875:m_sectionStack.push_back( node );
    %%%%%: 5875-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5876:m_deepestSection = std::move(node);
    %%%%%: 5876-block  0
call    0 never executed
call    1 never executed
    #####: 5877:}
        -: 5878:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE17assertionStartingERKNS_13AssertionInfoE called 0 returned 0% blocks executed 0%
    #####: 5879:void assertionStarting(AssertionInfo const&) override {}
        -: 5880:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE14assertionEndedERKNS_14AssertionStatsE called 0 returned 0% blocks executed 0%
    #####: 5881:bool assertionEnded(AssertionStats const& assertionStats) override {
    #####: 5882:assert(!m_sectionStack.empty());
    %%%%%: 5882-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5882-block  1
call    3 never executed
    %%%%%: 5882-block  2
        -: 5883:// AssertionResult holds a pointer to a temporary DecomposedExpression,
        -: 5884:// which getExpandedExpression() calls to build the expression string.
        -: 5885:// Our section stack copy of the assertionResult will likely outlive the
        -: 5886:// temporary, so it must be expanded or discarded now to avoid calling
        -: 5887:// a destroyed object later.
    #####: 5888:prepareExpandedExpression(const_cast<AssertionResult&>( assertionStats.assertionResult ) );
    %%%%%: 5888-block  0
call    0 never executed
    #####: 5889:SectionNode& sectionNode = *m_sectionStack.back();
call    0 never executed
call    1 never executed
    #####: 5890:sectionNode.assertions.push_back(assertionStats);
call    0 never executed
    #####: 5891:return true;
        -: 5892:}
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE12sectionEndedERKNS_12SectionStatsE called 0 returned 0% blocks executed 0%
    #####: 5893:void sectionEnded(SectionStats const& sectionStats) override {
    #####: 5894:assert(!m_sectionStack.empty());
    %%%%%: 5894-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5894-block  1
call    3 never executed
    %%%%%: 5894-block  2
    #####: 5895:SectionNode& node = *m_sectionStack.back();
    %%%%%: 5895-block  0
call    0 never executed
call    1 never executed
    #####: 5896:node.stats = sectionStats;
call    0 never executed
    #####: 5897:m_sectionStack.pop_back();
call    0 never executed
    #####: 5898:}
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE13testCaseEndedERKNS_13TestCaseStatsE called 0 returned 0% blocks executed 0%
    #####: 5899:void testCaseEnded(TestCaseStats const& testCaseStats) override {
    #####: 5900:auto node = std::make_shared<TestCaseNode>(testCaseStats);
    %%%%%: 5900-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5900-block  1
call    3 never executed
    $$$$$: 5900-block  2
call    4 never executed
    #####: 5901:assert(m_sectionStack.size() == 0);
    %%%%%: 5901-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5901-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5901-block  2
    %%%%%: 5901-block  3
    #####: 5902:node->children.push_back(m_rootSection);
    %%%%%: 5902-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5903:m_testCases.push_back(node);
    %%%%%: 5903-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5904:m_rootSection.reset();
    %%%%%: 5904-block  0
call    0 never executed
        -: 5905:
    #####: 5906:assert(m_deepestSection);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5906-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5906-block  1
    %%%%%: 5906-block  2
    #####: 5907:m_deepestSection->stdOut = testCaseStats.stdOut;
    %%%%%: 5907-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5908:m_deepestSection->stdErr = testCaseStats.stdErr;
    %%%%%: 5908-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5909:}
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE14testGroupEndedERKNS_14TestGroupStatsE called 0 returned 0% blocks executed 0%
    #####: 5910:void testGroupEnded(TestGroupStats const& testGroupStats) override {
    #####: 5911:auto node = std::make_shared<TestGroupNode>(testGroupStats);
    %%%%%: 5911-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5911-block  1
call    3 never executed
    $$$$$: 5911-block  2
call    4 never executed
    #####: 5912:node->children.swap(m_testCases);
    %%%%%: 5912-block  0
call    0 never executed
call    1 never executed
    #####: 5913:m_testGroups.push_back(node);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5914:}
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE12testRunEndedERKNS_12TestRunStatsE called 0 returned 0% blocks executed 0%
    #####: 5915:void testRunEnded(TestRunStats const& testRunStats) override {
    #####: 5916:auto node = std::make_shared<TestRunNode>(testRunStats);
    %%%%%: 5916-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5916-block  1
call    3 never executed
    $$$$$: 5916-block  2
call    4 never executed
    #####: 5917:node->children.swap(m_testGroups);
    %%%%%: 5917-block  0
call    0 never executed
call    1 never executed
    #####: 5918:m_testRuns.push_back(node);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5919:testRunEndedCumulative();
    %%%%%: 5919-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5920:}
        -: 5921:virtual void testRunEndedCumulative() = 0;
        -: 5922:
function _ZN5Catch22CumulativeReporterBaseINS_13JunitReporterEE8skipTestERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####: 5923:void skipTest(TestCaseInfo const&) override {}
        -: 5924:
        -: 5925:IConfigPtr m_config;
        -: 5926:std::ostream& stream;
        -: 5927:std::vector<AssertionStats> m_assertions;
        -: 5928:std::vector<std::vector<std::shared_ptr<SectionNode>>> m_sections;
        -: 5929:std::vector<std::shared_ptr<TestCaseNode>> m_testCases;
        -: 5930:std::vector<std::shared_ptr<TestGroupNode>> m_testGroups;
        -: 5931:
        -: 5932:std::vector<std::shared_ptr<TestRunNode>> m_testRuns;
        -: 5933:
        -: 5934:std::shared_ptr<SectionNode> m_rootSection;
        -: 5935:std::shared_ptr<SectionNode> m_deepestSection;
        -: 5936:std::vector<std::shared_ptr<SectionNode>> m_sectionStack;
        -: 5937:ReporterPreferences m_reporterPrefs;
        -: 5938:};
        -: 5939:
        -: 5940:template<char C>
    #####: 5941:char const* getLineOfChars() {
        -: 5942:static char line[CATCH_CONFIG_CONSOLE_WIDTH] = {0};
    #####: 5943:if( !*line ) {
    #####: 5944:std::memset( line, C, CATCH_CONFIG_CONSOLE_WIDTH-1 );
    #####: 5945:line[CATCH_CONFIG_CONSOLE_WIDTH-1] = 0;
        -: 5946:}
    #####: 5947:return line;
        -: 5948:}
------------------
_ZN5Catch14getLineOfCharsILc46EEEPKcv:
function _ZN5Catch14getLineOfCharsILc46EEEPKcv called 0 returned 0% blocks executed 0%
    #####: 5941:char const* getLineOfChars() {
        -: 5942:static char line[CATCH_CONFIG_CONSOLE_WIDTH] = {0};
    #####: 5943:if( !*line ) {
    %%%%%: 5943-block  0
branch  0 never executed
branch  1 never executed
    #####: 5944:std::memset( line, C, CATCH_CONFIG_CONSOLE_WIDTH-1 );
    #####: 5945:line[CATCH_CONFIG_CONSOLE_WIDTH-1] = 0;
    %%%%%: 5945-block  0
        -: 5946:}
    #####: 5947:return line;
    %%%%%: 5947-block  0
        -: 5948:}
------------------
_ZN5Catch14getLineOfCharsILc126EEEPKcv:
function _ZN5Catch14getLineOfCharsILc126EEEPKcv called 0 returned 0% blocks executed 0%
    #####: 5941:char const* getLineOfChars() {
        -: 5942:static char line[CATCH_CONFIG_CONSOLE_WIDTH] = {0};
    #####: 5943:if( !*line ) {
    %%%%%: 5943-block  0
branch  0 never executed
branch  1 never executed
    #####: 5944:std::memset( line, C, CATCH_CONFIG_CONSOLE_WIDTH-1 );
    #####: 5945:line[CATCH_CONFIG_CONSOLE_WIDTH-1] = 0;
    %%%%%: 5945-block  0
        -: 5946:}
    #####: 5947:return line;
    %%%%%: 5947-block  0
        -: 5948:}
------------------
_ZN5Catch14getLineOfCharsILc45EEEPKcv:
function _ZN5Catch14getLineOfCharsILc45EEEPKcv called 0 returned 0% blocks executed 0%
    #####: 5941:char const* getLineOfChars() {
        -: 5942:static char line[CATCH_CONFIG_CONSOLE_WIDTH] = {0};
    #####: 5943:if( !*line ) {
    %%%%%: 5943-block  0
branch  0 never executed
branch  1 never executed
    #####: 5944:std::memset( line, C, CATCH_CONFIG_CONSOLE_WIDTH-1 );
    #####: 5945:line[CATCH_CONFIG_CONSOLE_WIDTH-1] = 0;
    %%%%%: 5945-block  0
        -: 5946:}
    #####: 5947:return line;
    %%%%%: 5947-block  0
        -: 5948:}
------------------
        -: 5949:
        -: 5950:struct TestEventListenerBase : StreamingReporterBase<TestEventListenerBase> {
        -: 5951:TestEventListenerBase( ReporterConfig const& _config );
        -: 5952:
        -: 5953:static std::set<Verbosity> getSupportedVerbosities();
        -: 5954:
        -: 5955:void assertionStarting(AssertionInfo const&) override;
        -: 5956:bool assertionEnded(AssertionStats const&) override;
        -: 5957:};
        -: 5958:
        -: 5959:} // end namespace Catch
        -: 5960:
        -: 5961:// end catch_reporter_bases.hpp
        -: 5962:// start catch_console_colour.h
        -: 5963:
        -: 5964:namespace Catch {
        -: 5965:
        -: 5966:struct Colour {
        -: 5967:enum Code {
        -: 5968:None = 0,
        -: 5969:
        -: 5970:White,
        -: 5971:Red,
        -: 5972:Green,
        -: 5973:Blue,
        -: 5974:Cyan,
        -: 5975:Yellow,
        -: 5976:Grey,
        -: 5977:
        -: 5978:Bright = 0x10,
        -: 5979:
        -: 5980:BrightRed = Bright | Red,
        -: 5981:BrightGreen = Bright | Green,
        -: 5982:LightGrey = Bright | Grey,
        -: 5983:BrightWhite = Bright | White,
        -: 5984:BrightYellow = Bright | Yellow,
        -: 5985:
        -: 5986:// By intention
        -: 5987:FileName = LightGrey,
        -: 5988:Warning = BrightYellow,
        -: 5989:ResultError = BrightRed,
        -: 5990:ResultSuccess = BrightGreen,
        -: 5991:ResultExpectedFailure = Warning,
        -: 5992:
        -: 5993:Error = BrightRed,
        -: 5994:Success = Green,
        -: 5995:
        -: 5996:OriginalExpression = Cyan,
        -: 5997:ReconstructedExpression = BrightYellow,
        -: 5998:
        -: 5999:SecondaryText = LightGrey,
        -: 6000:Headers = White
        -: 6001:};
        -: 6002:
        -: 6003:// Use constructed object for RAII guard
        -: 6004:Colour( Code _colourCode );
        -: 6005:Colour( Colour&& other ) noexcept;
        -: 6006:Colour& operator=( Colour&& other ) noexcept;
        -: 6007:~Colour();
        -: 6008:
        -: 6009:// Use static method for one-shot changes
        -: 6010:static void use( Code _colourCode );
        -: 6011:
        -: 6012:private:
        -: 6013:bool m_moved = false;
        -: 6014:};
        -: 6015:
        -: 6016:std::ostream& operator << ( std::ostream& os, Colour const& );
        -: 6017:
        -: 6018:} // end namespace Catch
        -: 6019:
        -: 6020:// end catch_console_colour.h
        -: 6021:// start catch_reporter_registrars.hpp
        -: 6022:
        -: 6023:
        -: 6024:namespace Catch {
        -: 6025:
        -: 6026:template<typename T>
        -: 6027:class ReporterRegistrar {
        -: 6028:
        -: 6029:class ReporterFactory : public IReporterFactory {
        -: 6030:
       1*: 6031:IStreamingReporterPtr create( ReporterConfig const& config ) const override {
       1*: 6032:return std::unique_ptr<T>( new T( config ) );
        -: 6033:}
------------------
_ZNK5Catch17ReporterRegistrarINS_15CompactReporterEE15ReporterFactory6createERKNS_14ReporterConfigE:
function _ZNK5Catch17ReporterRegistrarINS_15CompactReporterEE15ReporterFactory6createERKNS_14ReporterConfigE called 0 returned 0% blocks executed 0%
    #####: 6031:IStreamingReporterPtr create( ReporterConfig const& config ) const override {
    #####: 6032:return std::unique_ptr<T>( new T( config ) );
    %%%%%: 6032-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6032-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    %%%%%: 6032-block  2
    $$$$$: 6032-block  3
call    7 never executed
        -: 6033:}
------------------
_ZNK5Catch17ReporterRegistrarINS_15ConsoleReporterEE15ReporterFactory6createERKNS_14ReporterConfigE:
function _ZNK5Catch17ReporterRegistrarINS_15ConsoleReporterEE15ReporterFactory6createERKNS_14ReporterConfigE called 1 returned 100% blocks executed 89%
        1: 6031:IStreamingReporterPtr create( ReporterConfig const& config ) const override {
        1: 6032:return std::unique_ptr<T>( new T( config ) );
        1: 6032-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 6032-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
        1: 6032-block  2
    $$$$$: 6032-block  3
call    7 never executed
        -: 6033:}
------------------
_ZNK5Catch17ReporterRegistrarINS_13JunitReporterEE15ReporterFactory6createERKNS_14ReporterConfigE:
function _ZNK5Catch17ReporterRegistrarINS_13JunitReporterEE15ReporterFactory6createERKNS_14ReporterConfigE called 0 returned 0% blocks executed 0%
    #####: 6031:IStreamingReporterPtr create( ReporterConfig const& config ) const override {
    #####: 6032:return std::unique_ptr<T>( new T( config ) );
    %%%%%: 6032-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6032-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    %%%%%: 6032-block  2
    $$$$$: 6032-block  3
call    7 never executed
        -: 6033:}
------------------
_ZNK5Catch17ReporterRegistrarINS_11XmlReporterEE15ReporterFactory6createERKNS_14ReporterConfigE:
function _ZNK5Catch17ReporterRegistrarINS_11XmlReporterEE15ReporterFactory6createERKNS_14ReporterConfigE called 0 returned 0% blocks executed 0%
    #####: 6031:IStreamingReporterPtr create( ReporterConfig const& config ) const override {
    #####: 6032:return std::unique_ptr<T>( new T( config ) );
    %%%%%: 6032-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6032-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    %%%%%: 6032-block  2
    $$$$$: 6032-block  3
call    7 never executed
        -: 6033:}
------------------
        -: 6034:
    #####: 6035:std::string getDescription() const override {
    #####: 6036:return T::getDescription();
        -: 6037:}
------------------
_ZNK5Catch17ReporterRegistrarINS_15CompactReporterEE15ReporterFactory14getDescriptionB5cxx11Ev:
function _ZNK5Catch17ReporterRegistrarINS_15CompactReporterEE15ReporterFactory14getDescriptionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6035:std::string getDescription() const override {
    #####: 6036:return T::getDescription();
    %%%%%: 6036-block  0
call    0 never executed
        -: 6037:}
------------------
_ZNK5Catch17ReporterRegistrarINS_15ConsoleReporterEE15ReporterFactory14getDescriptionB5cxx11Ev:
function _ZNK5Catch17ReporterRegistrarINS_15ConsoleReporterEE15ReporterFactory14getDescriptionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6035:std::string getDescription() const override {
    #####: 6036:return T::getDescription();
    %%%%%: 6036-block  0
call    0 never executed
        -: 6037:}
------------------
_ZNK5Catch17ReporterRegistrarINS_13JunitReporterEE15ReporterFactory14getDescriptionB5cxx11Ev:
function _ZNK5Catch17ReporterRegistrarINS_13JunitReporterEE15ReporterFactory14getDescriptionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6035:std::string getDescription() const override {
    #####: 6036:return T::getDescription();
    %%%%%: 6036-block  0
call    0 never executed
        -: 6037:}
------------------
_ZNK5Catch17ReporterRegistrarINS_11XmlReporterEE15ReporterFactory14getDescriptionB5cxx11Ev:
function _ZNK5Catch17ReporterRegistrarINS_11XmlReporterEE15ReporterFactory14getDescriptionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6035:std::string getDescription() const override {
    #####: 6036:return T::getDescription();
    %%%%%: 6036-block  0
call    0 never executed
        -: 6037:}
------------------
        -: 6038:};
        -: 6039:
        -: 6040:public:
        -: 6041:
        4: 6042:explicit ReporterRegistrar( std::string const& name ) {
        4: 6043:getMutableRegistryHub().registerReporter( name, std::make_shared<ReporterFactory>() );
        4: 6044:}
------------------
_ZN5Catch17ReporterRegistrarINS_11XmlReporterEEC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch17ReporterRegistrarINS_11XmlReporterEEC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 62%
        1: 6042:explicit ReporterRegistrar( std::string const& name ) {
        1: 6043:getMutableRegistryHub().registerReporter( name, std::make_shared<ReporterFactory>() );
        1: 6043-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6043-block  1
call    6 returned 1
call    7 returned 1
    $$$$$: 6043-block  2
call    8 never executed
    $$$$$: 6043-block  3
    $$$$$: 6043-block  4
call    9 never executed
        1: 6044:}
------------------
_ZN5Catch17ReporterRegistrarINS_13JunitReporterEEC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch17ReporterRegistrarINS_13JunitReporterEEC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 62%
        1: 6042:explicit ReporterRegistrar( std::string const& name ) {
        1: 6043:getMutableRegistryHub().registerReporter( name, std::make_shared<ReporterFactory>() );
        1: 6043-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6043-block  1
call    6 returned 1
call    7 returned 1
    $$$$$: 6043-block  2
call    8 never executed
    $$$$$: 6043-block  3
    $$$$$: 6043-block  4
call    9 never executed
        1: 6044:}
------------------
_ZN5Catch17ReporterRegistrarINS_15ConsoleReporterEEC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch17ReporterRegistrarINS_15ConsoleReporterEEC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 62%
        1: 6042:explicit ReporterRegistrar( std::string const& name ) {
        1: 6043:getMutableRegistryHub().registerReporter( name, std::make_shared<ReporterFactory>() );
        1: 6043-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6043-block  1
call    6 returned 1
call    7 returned 1
    $$$$$: 6043-block  2
call    8 never executed
    $$$$$: 6043-block  3
    $$$$$: 6043-block  4
call    9 never executed
        1: 6044:}
------------------
_ZN5Catch17ReporterRegistrarINS_15CompactReporterEEC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch17ReporterRegistrarINS_15CompactReporterEEC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 62%
        1: 6042:explicit ReporterRegistrar( std::string const& name ) {
        1: 6043:getMutableRegistryHub().registerReporter( name, std::make_shared<ReporterFactory>() );
        1: 6043-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6043-block  1
call    6 returned 1
call    7 returned 1
    $$$$$: 6043-block  2
call    8 never executed
    $$$$$: 6043-block  3
    $$$$$: 6043-block  4
call    9 never executed
        1: 6044:}
------------------
        -: 6045:};
        -: 6046:
        -: 6047:template<typename T>
        -: 6048:class ListenerRegistrar {
        -: 6049:
        -: 6050:class ListenerFactory : public IReporterFactory {
        -: 6051:
        -: 6052:IStreamingReporterPtr create( ReporterConfig const& config ) const override {
        -: 6053:return std::unique_ptr<T>( new T( config ) );
        -: 6054:}
        -: 6055:std::string getDescription() const override {
        -: 6056:return std::string();
        -: 6057:}
        -: 6058:};
        -: 6059:
        -: 6060:public:
        -: 6061:
        -: 6062:ListenerRegistrar() {
        -: 6063:getMutableRegistryHub().registerListener( std::make_shared<ListenerFactory>() );
        -: 6064:}
        -: 6065:};
        -: 6066:}
        -: 6067:
        -: 6068:#if !defined(CATCH_CONFIG_DISABLE)
        -: 6069:
        -: 6070:#define CATCH_REGISTER_REPORTER( name, reporterType ) \
        -: 6071:    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS          \
        -: 6072:    namespace{ Catch::ReporterRegistrar<reporterType> catch_internal_RegistrarFor##reporterType( name ); } \
        -: 6073:    CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
        -: 6074:
        -: 6075:#define CATCH_REGISTER_LISTENER( listenerType ) \
        -: 6076:     CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS   \
        -: 6077:     namespace{ Catch::ListenerRegistrar<listenerType> catch_internal_RegistrarFor##listenerType; } \
        -: 6078:     CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
        -: 6079:#else // CATCH_CONFIG_DISABLE
        -: 6080:
        -: 6081:#define CATCH_REGISTER_REPORTER(name, reporterType)
        -: 6082:#define CATCH_REGISTER_LISTENER(listenerType)
        -: 6083:
        -: 6084:#endif // CATCH_CONFIG_DISABLE
        -: 6085:
        -: 6086:// end catch_reporter_registrars.hpp
        -: 6087:// Allow users to base their work off existing reporters
        -: 6088:// start catch_reporter_compact.h
        -: 6089:
        -: 6090:namespace Catch {
        -: 6091:
        -: 6092:struct CompactReporter : StreamingReporterBase<CompactReporter> {
        -: 6093:
        -: 6094:using StreamingReporterBase::StreamingReporterBase;
        -: 6095:
        -: 6096:~CompactReporter() override;
        -: 6097:
        -: 6098:static std::string getDescription();
        -: 6099:
        -: 6100:ReporterPreferences getPreferences() const override;
        -: 6101:
        -: 6102:void noMatchingTestCases(std::string const& spec) override;
        -: 6103:
        -: 6104:void assertionStarting(AssertionInfo const&) override;
        -: 6105:
        -: 6106:bool assertionEnded(AssertionStats const& _assertionStats) override;
        -: 6107:
        -: 6108:void sectionEnded(SectionStats const& _sectionStats) override;
        -: 6109:
        -: 6110:void testRunEnded(TestRunStats const& _testRunStats) override;
        -: 6111:
        -: 6112:};
        -: 6113:
        -: 6114:} // end namespace Catch
        -: 6115:
        -: 6116:// end catch_reporter_compact.h
        -: 6117:// start catch_reporter_console.h
        -: 6118:
        -: 6119:#if defined(_MSC_VER)
        -: 6120:#pragma warning(push)
        -: 6121:#pragma warning(disable:4061) // Not all labels are EXPLICITLY handled in switch
        -: 6122:// Note that 4062 (not all labels are handled
        -: 6123:// and default is missing) is enabled
        -: 6124:#endif
        -: 6125:
        -: 6126:namespace Catch {
        -: 6127:// Fwd decls
        -: 6128:struct SummaryColumn;
        -: 6129:class TablePrinter;
        -: 6130:
        2: 6131:struct ConsoleReporter : StreamingReporterBase<ConsoleReporter> {
------------------
_ZN5Catch15ConsoleReporterD0Ev:
function _ZN5Catch15ConsoleReporterD0Ev called 1 returned 100% blocks executed 100%
        1: 6131:struct ConsoleReporter : StreamingReporterBase<ConsoleReporter> {
        1: 6131-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN5Catch15ConsoleReporterD2Ev:
function _ZN5Catch15ConsoleReporterD2Ev called 1 returned 100% blocks executed 100%
        1: 6131:struct ConsoleReporter : StreamingReporterBase<ConsoleReporter> {
        1: 6131-block  0
call    0 returned 1
call    1 returned 1
------------------
        -: 6132:std::unique_ptr<TablePrinter> m_tablePrinter;
        -: 6133:
        -: 6134:ConsoleReporter(ReporterConfig const& config);
        -: 6135:~ConsoleReporter() override;
        -: 6136:static std::string getDescription();
        -: 6137:
        -: 6138:void noMatchingTestCases(std::string const& spec) override;
        -: 6139:
        -: 6140:void reportInvalidArguments(std::string const&arg) override;
        -: 6141:
        -: 6142:void assertionStarting(AssertionInfo const&) override;
        -: 6143:
        -: 6144:bool assertionEnded(AssertionStats const& _assertionStats) override;
        -: 6145:
        -: 6146:void sectionStarting(SectionInfo const& _sectionInfo) override;
        -: 6147:void sectionEnded(SectionStats const& _sectionStats) override;
        -: 6148:
        -: 6149:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -: 6150:void benchmarkPreparing(std::string const& name) override;
        -: 6151:void benchmarkStarting(BenchmarkInfo const& info) override;
        -: 6152:void benchmarkEnded(BenchmarkStats<> const& stats) override;
        -: 6153:void benchmarkFailed(std::string const& error) override;
        -: 6154:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -: 6155:
        -: 6156:void testCaseEnded(TestCaseStats const& _testCaseStats) override;
        -: 6157:void testGroupEnded(TestGroupStats const& _testGroupStats) override;
        -: 6158:void testRunEnded(TestRunStats const& _testRunStats) override;
        -: 6159:void testRunStarting(TestRunInfo const& _testRunInfo) override;
        -: 6160:private:
        -: 6161:
        -: 6162:void lazyPrint();
        -: 6163:
        -: 6164:void lazyPrintWithoutClosingBenchmarkTable();
        -: 6165:void lazyPrintRunInfo();
        -: 6166:void lazyPrintGroupInfo();
        -: 6167:void printTestCaseAndSectionHeader();
        -: 6168:
        -: 6169:void printClosedHeader(std::string const& _name);
        -: 6170:void printOpenHeader(std::string const& _name);
        -: 6171:
        -: 6172:// if string has a : in first line will set indent to follow it on
        -: 6173:// subsequent lines
        -: 6174:void printHeaderString(std::string const& _string, std::size_t indent = 0);
        -: 6175:
        -: 6176:void printTotals(Totals const& totals);
        -: 6177:void printSummaryRow(std::string const& label, std::vector<SummaryColumn> const& cols, std::size_t row);
        -: 6178:
        -: 6179:void printTotalsDivider(Totals const& totals);
        -: 6180:void printSummaryDivider();
        -: 6181:void printTestFilters();
        -: 6182:
        -: 6183:private:
        -: 6184:bool m_headerPrinted = false;
        -: 6185:};
        -: 6186:
        -: 6187:} // end namespace Catch
        -: 6188:
        -: 6189:#if defined(_MSC_VER)
        -: 6190:#pragma warning(pop)
        -: 6191:#endif
        -: 6192:
        -: 6193:// end catch_reporter_console.h
        -: 6194:// start catch_reporter_junit.h
        -: 6195:
        -: 6196:// start catch_xmlwriter.h
        -: 6197:
        -: 6198:#include <vector>
        -: 6199:
        -: 6200:namespace Catch {
        -: 6201:
        -: 6202:class XmlEncode {
        -: 6203:public:
        -: 6204:enum ForWhat { ForTextNodes, ForAttributes };
        -: 6205:
        -: 6206:XmlEncode( std::string const& str, ForWhat forWhat = ForTextNodes );
        -: 6207:
        -: 6208:void encodeTo( std::ostream& os ) const;
        -: 6209:
        -: 6210:friend std::ostream& operator << ( std::ostream& os, XmlEncode const& xmlEncode );
        -: 6211:
        -: 6212:private:
        -: 6213:std::string m_str;
        -: 6214:ForWhat m_forWhat;
        -: 6215:};
        -: 6216:
        -: 6217:class XmlWriter {
        -: 6218:public:
        -: 6219:
        -: 6220:class ScopedElement {
        -: 6221:public:
        -: 6222:ScopedElement( XmlWriter* writer );
        -: 6223:
        -: 6224:ScopedElement( ScopedElement&& other ) noexcept;
        -: 6225:ScopedElement& operator=( ScopedElement&& other ) noexcept;
        -: 6226:
        -: 6227:~ScopedElement();
        -: 6228:
        -: 6229:ScopedElement& writeText( std::string const& text, bool indent = true );
        -: 6230:
        -: 6231:template<typename T>
    #####: 6232:ScopedElement& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6233:m_writer->writeAttribute( name, attribute );
    #####: 6234:return *this;
        -: 6235:}
------------------
_ZN5Catch9XmlWriter13ScopedElement14writeAttributeIbEERS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch9XmlWriter13ScopedElement14writeAttributeIbEERS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 6232:ScopedElement& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6233:m_writer->writeAttribute( name, attribute );
    %%%%%: 6233-block  0
call    0 never executed
    #####: 6234:return *this;
        -: 6235:}
------------------
_ZN5Catch9XmlWriter13ScopedElement14writeAttributeIdEERS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch9XmlWriter13ScopedElement14writeAttributeIdEERS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 6232:ScopedElement& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6233:m_writer->writeAttribute( name, attribute );
    %%%%%: 6233-block  0
call    0 never executed
    #####: 6234:return *this;
        -: 6235:}
------------------
_ZN5Catch9XmlWriter13ScopedElement14writeAttributeIjEERS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch9XmlWriter13ScopedElement14writeAttributeIjEERS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 6232:ScopedElement& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6233:m_writer->writeAttribute( name, attribute );
    %%%%%: 6233-block  0
call    0 never executed
    #####: 6234:return *this;
        -: 6235:}
------------------
_ZN5Catch9XmlWriter13ScopedElement14writeAttributeIA12_cEERS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch9XmlWriter13ScopedElement14writeAttributeIA12_cEERS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 6232:ScopedElement& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6233:m_writer->writeAttribute( name, attribute );
    %%%%%: 6233-block  0
call    0 never executed
    #####: 6234:return *this;
        -: 6235:}
------------------
_ZN5Catch9XmlWriter13ScopedElement14writeAttributeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKS8_RKT_:
function _ZN5Catch9XmlWriter13ScopedElement14writeAttributeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKS8_RKT_ called 0 returned 0% blocks executed 0%
    #####: 6232:ScopedElement& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6233:m_writer->writeAttribute( name, attribute );
    %%%%%: 6233-block  0
call    0 never executed
    #####: 6234:return *this;
        -: 6235:}
------------------
_ZN5Catch9XmlWriter13ScopedElement14writeAttributeIA8_cEERS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch9XmlWriter13ScopedElement14writeAttributeIA8_cEERS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 6232:ScopedElement& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6233:m_writer->writeAttribute( name, attribute );
    %%%%%: 6233-block  0
call    0 never executed
    #####: 6234:return *this;
        -: 6235:}
------------------
        -: 6236:
        -: 6237:private:
        -: 6238:mutable XmlWriter* m_writer = nullptr;
        -: 6239:};
        -: 6240:
        -: 6241:XmlWriter( std::ostream& os = Catch::cout() );
        -: 6242:~XmlWriter();
        -: 6243:
        -: 6244:XmlWriter( XmlWriter const& ) = delete;
        -: 6245:XmlWriter& operator=( XmlWriter const& ) = delete;
        -: 6246:
        -: 6247:XmlWriter& startElement( std::string const& name );
        -: 6248:
        -: 6249:ScopedElement scopedElement( std::string const& name );
        -: 6250:
        -: 6251:XmlWriter& endElement();
        -: 6252:
        -: 6253:XmlWriter& writeAttribute( std::string const& name, std::string const& attribute );
        -: 6254:
        -: 6255:XmlWriter& writeAttribute( std::string const& name, bool attribute );
        -: 6256:
        -: 6257:template<typename T>
    #####: 6258:XmlWriter& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6259:ReusableStringStream rss;
    #####: 6260:rss << attribute;
    #####: 6261:return writeAttribute( name, rss.str() );
        -: 6262:}
------------------
_ZN5Catch9XmlWriter14writeAttributeIA12_cEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch9XmlWriter14writeAttributeIA12_cEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 6258:XmlWriter& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6259:ReusableStringStream rss;
    %%%%%: 6259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6259-block  1
call    3 never executed
    #####: 6260:rss << attribute;
    %%%%%: 6260-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6261:return writeAttribute( name, rss.str() );
    %%%%%: 6261-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6261-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6261-block  2
    %%%%%: 6261-block  3
call    6 never executed
call    7 never executed
    %%%%%: 6261-block  4
    $$$$$: 6261-block  5
call    8 never executed
    $$$$$: 6261-block  6
        -: 6262:}
------------------
_ZN5Catch9XmlWriter14writeAttributeIA8_cEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch9XmlWriter14writeAttributeIA8_cEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 6258:XmlWriter& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6259:ReusableStringStream rss;
    %%%%%: 6259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6259-block  1
call    3 never executed
    #####: 6260:rss << attribute;
    %%%%%: 6260-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6261:return writeAttribute( name, rss.str() );
    %%%%%: 6261-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6261-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6261-block  2
    %%%%%: 6261-block  3
call    6 never executed
call    7 never executed
    %%%%%: 6261-block  4
    $$$$$: 6261-block  5
call    8 never executed
    $$$$$: 6261-block  6
        -: 6262:}
------------------
_ZN5Catch9XmlWriter14writeAttributeIPKcEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch9XmlWriter14writeAttributeIPKcEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 6258:XmlWriter& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6259:ReusableStringStream rss;
    %%%%%: 6259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6259-block  1
call    3 never executed
    #####: 6260:rss << attribute;
    %%%%%: 6260-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6261:return writeAttribute( name, rss.str() );
    %%%%%: 6261-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6261-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6261-block  2
    %%%%%: 6261-block  3
call    6 never executed
call    7 never executed
    %%%%%: 6261-block  4
    $$$$$: 6261-block  5
call    8 never executed
    $$$$$: 6261-block  6
        -: 6262:}
------------------
_ZN5Catch9XmlWriter14writeAttributeINS_9StringRefEEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch9XmlWriter14writeAttributeINS_9StringRefEEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 6258:XmlWriter& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6259:ReusableStringStream rss;
    %%%%%: 6259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6259-block  1
call    3 never executed
    #####: 6260:rss << attribute;
    %%%%%: 6260-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6261:return writeAttribute( name, rss.str() );
    %%%%%: 6261-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6261-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6261-block  2
    %%%%%: 6261-block  3
call    6 never executed
call    7 never executed
    %%%%%: 6261-block  4
    $$$$$: 6261-block  5
call    8 never executed
    $$$$$: 6261-block  6
        -: 6262:}
------------------
_ZN5Catch9XmlWriter14writeAttributeIA5_cEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch9XmlWriter14writeAttributeIA5_cEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 6258:XmlWriter& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6259:ReusableStringStream rss;
    %%%%%: 6259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6259-block  1
call    3 never executed
    #####: 6260:rss << attribute;
    %%%%%: 6260-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6261:return writeAttribute( name, rss.str() );
    %%%%%: 6261-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6261-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6261-block  2
    %%%%%: 6261-block  3
call    6 never executed
call    7 never executed
    %%%%%: 6261-block  4
    $$$$$: 6261-block  5
call    8 never executed
    $$$$$: 6261-block  6
        -: 6262:}
------------------
_ZN5Catch9XmlWriter14writeAttributeIdEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch9XmlWriter14writeAttributeIdEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 6258:XmlWriter& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6259:ReusableStringStream rss;
    %%%%%: 6259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6259-block  1
call    3 never executed
    #####: 6260:rss << attribute;
    %%%%%: 6260-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6261:return writeAttribute( name, rss.str() );
    %%%%%: 6261-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6261-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6261-block  2
    %%%%%: 6261-block  3
call    6 never executed
call    7 never executed
    %%%%%: 6261-block  4
    $$$$$: 6261-block  5
call    8 never executed
    $$$$$: 6261-block  6
        -: 6262:}
------------------
_ZN5Catch9XmlWriter14writeAttributeIA1_cEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch9XmlWriter14writeAttributeIA1_cEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 6258:XmlWriter& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6259:ReusableStringStream rss;
    %%%%%: 6259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6259-block  1
call    3 never executed
    #####: 6260:rss << attribute;
    %%%%%: 6260-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6261:return writeAttribute( name, rss.str() );
    %%%%%: 6261-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6261-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6261-block  2
    %%%%%: 6261-block  3
call    6 never executed
call    7 never executed
    %%%%%: 6261-block  4
    $$$$$: 6261-block  5
call    8 never executed
    $$$$$: 6261-block  6
        -: 6262:}
------------------
_ZN5Catch9XmlWriter14writeAttributeIA4_cEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch9XmlWriter14writeAttributeIA4_cEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 6258:XmlWriter& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6259:ReusableStringStream rss;
    %%%%%: 6259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6259-block  1
call    3 never executed
    #####: 6260:rss << attribute;
    %%%%%: 6260-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6261:return writeAttribute( name, rss.str() );
    %%%%%: 6261-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6261-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6261-block  2
    %%%%%: 6261-block  3
call    6 never executed
call    7 never executed
    %%%%%: 6261-block  4
    $$$$$: 6261-block  5
call    8 never executed
    $$$$$: 6261-block  6
        -: 6262:}
------------------
_ZN5Catch9XmlWriter14writeAttributeIjEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_:
function _ZN5Catch9XmlWriter14writeAttributeIjEERS0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 6258:XmlWriter& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 6259:ReusableStringStream rss;
    %%%%%: 6259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6259-block  1
call    3 never executed
    #####: 6260:rss << attribute;
    %%%%%: 6260-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6261:return writeAttribute( name, rss.str() );
    %%%%%: 6261-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6261-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6261-block  2
    %%%%%: 6261-block  3
call    6 never executed
call    7 never executed
    %%%%%: 6261-block  4
    $$$$$: 6261-block  5
call    8 never executed
    $$$$$: 6261-block  6
        -: 6262:}
------------------
        -: 6263:
        -: 6264:XmlWriter& writeText( std::string const& text, bool indent = true );
        -: 6265:
        -: 6266:XmlWriter& writeComment( std::string const& text );
        -: 6267:
        -: 6268:void writeStylesheetRef( std::string const& url );
        -: 6269:
        -: 6270:XmlWriter& writeBlankLine();
        -: 6271:
        -: 6272:void ensureTagClosed();
        -: 6273:
        -: 6274:private:
        -: 6275:
        -: 6276:void writeDeclaration();
        -: 6277:
        -: 6278:void newlineIfNecessary();
        -: 6279:
        -: 6280:bool m_tagIsOpen = false;
        -: 6281:bool m_needsNewline = false;
        -: 6282:std::vector<std::string> m_tags;
        -: 6283:std::string m_indent;
        -: 6284:std::ostream& m_os;
        -: 6285:};
        -: 6286:
        -: 6287:}
        -: 6288:
        -: 6289:// end catch_xmlwriter.h
        -: 6290:namespace Catch {
        -: 6291:
        -: 6292:class JunitReporter : public CumulativeReporterBase<JunitReporter> {
        -: 6293:public:
        -: 6294:JunitReporter(ReporterConfig const& _config);
        -: 6295:
        -: 6296:~JunitReporter() override;
        -: 6297:
        -: 6298:static std::string getDescription();
        -: 6299:
        -: 6300:void noMatchingTestCases(std::string const& /*spec*/) override;
        -: 6301:
        -: 6302:void testRunStarting(TestRunInfo const& runInfo) override;
        -: 6303:
        -: 6304:void testGroupStarting(GroupInfo const& groupInfo) override;
        -: 6305:
        -: 6306:void testCaseStarting(TestCaseInfo const& testCaseInfo) override;
        -: 6307:bool assertionEnded(AssertionStats const& assertionStats) override;
        -: 6308:
        -: 6309:void testCaseEnded(TestCaseStats const& testCaseStats) override;
        -: 6310:
        -: 6311:void testGroupEnded(TestGroupStats const& testGroupStats) override;
        -: 6312:
        -: 6313:void testRunEndedCumulative() override;
        -: 6314:
        -: 6315:void writeGroup(TestGroupNode const& groupNode, double suiteTime);
        -: 6316:
        -: 6317:void writeTestCase(TestCaseNode const& testCaseNode);
        -: 6318:
        -: 6319:void writeSection(std::string const& className,
        -: 6320:std::string const& rootName,
        -: 6321:SectionNode const& sectionNode);
        -: 6322:
        -: 6323:void writeAssertions(SectionNode const& sectionNode);
        -: 6324:void writeAssertion(AssertionStats const& stats);
        -: 6325:
        -: 6326:XmlWriter xml;
        -: 6327:Timer suiteTimer;
        -: 6328:std::string stdOutForSuite;
        -: 6329:std::string stdErrForSuite;
        -: 6330:unsigned int unexpectedExceptions = 0;
        -: 6331:bool m_okToFail = false;
        -: 6332:};
        -: 6333:
        -: 6334:} // end namespace Catch
        -: 6335:
        -: 6336:// end catch_reporter_junit.h
        -: 6337:// start catch_reporter_xml.h
        -: 6338:
        -: 6339:namespace Catch {
    #####: 6340:class XmlReporter : public StreamingReporterBase<XmlReporter> {
------------------
_ZN5Catch11XmlReporterD0Ev:
function _ZN5Catch11XmlReporterD0Ev called 0 returned 0% blocks executed 0%
    #####: 6340:class XmlReporter : public StreamingReporterBase<XmlReporter> {
    %%%%%: 6340-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch11XmlReporterD2Ev:
function _ZN5Catch11XmlReporterD2Ev called 0 returned 0% blocks executed 0%
    #####: 6340:class XmlReporter : public StreamingReporterBase<XmlReporter> {
    %%%%%: 6340-block  0
call    0 never executed
call    1 never executed
------------------
        -: 6341:public:
        -: 6342:XmlReporter(ReporterConfig const& _config);
        -: 6343:
        -: 6344:~XmlReporter() override;
        -: 6345:
        -: 6346:static std::string getDescription();
        -: 6347:
        -: 6348:virtual std::string getStylesheetRef() const;
        -: 6349:
        -: 6350:void writeSourceInfo(SourceLineInfo const& sourceInfo);
        -: 6351:
        -: 6352:public: // StreamingReporterBase
        -: 6353:
        -: 6354:void noMatchingTestCases(std::string const& s) override;
        -: 6355:
        -: 6356:void testRunStarting(TestRunInfo const& testInfo) override;
        -: 6357:
        -: 6358:void testGroupStarting(GroupInfo const& groupInfo) override;
        -: 6359:
        -: 6360:void testCaseStarting(TestCaseInfo const& testInfo) override;
        -: 6361:
        -: 6362:void sectionStarting(SectionInfo const& sectionInfo) override;
        -: 6363:
        -: 6364:void assertionStarting(AssertionInfo const&) override;
        -: 6365:
        -: 6366:bool assertionEnded(AssertionStats const& assertionStats) override;
        -: 6367:
        -: 6368:void sectionEnded(SectionStats const& sectionStats) override;
        -: 6369:
        -: 6370:void testCaseEnded(TestCaseStats const& testCaseStats) override;
        -: 6371:
        -: 6372:void testGroupEnded(TestGroupStats const& testGroupStats) override;
        -: 6373:
        -: 6374:void testRunEnded(TestRunStats const& testRunStats) override;
        -: 6375:
        -: 6376:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -: 6377:void benchmarkPreparing(std::string const& name) override;
        -: 6378:void benchmarkStarting(BenchmarkInfo const&) override;
        -: 6379:void benchmarkEnded(BenchmarkStats<> const&) override;
        -: 6380:void benchmarkFailed(std::string const&) override;
        -: 6381:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -: 6382:
        -: 6383:private:
        -: 6384:Timer m_testCaseTimer;
        -: 6385:XmlWriter m_xml;
        -: 6386:int m_sectionDepth = 0;
        -: 6387:};
        -: 6388:
        -: 6389:} // end namespace Catch
        -: 6390:
        -: 6391:// end catch_reporter_xml.h
        -: 6392:
        -: 6393:// end catch_external_interfaces.h
        -: 6394:#endif
        -: 6395:
        -: 6396:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -: 6397:// start catch_benchmark.hpp
        -: 6398:
        -: 6399:// Benchmark
        -: 6400:
        -: 6401:// start catch_chronometer.hpp
        -: 6402:
        -: 6403:// User-facing chronometer
        -: 6404:
        -: 6405:
        -: 6406:// start catch_clock.hpp
        -: 6407:
        -: 6408:// Clocks
        -: 6409:
        -: 6410:
        -: 6411:#include <chrono>
        -: 6412:#include <ratio>
        -: 6413:
        -: 6414:namespace Catch {
        -: 6415:namespace Benchmark {
        -: 6416:template <typename Clock>
        -: 6417:using ClockDuration = typename Clock::duration;
        -: 6418:template <typename Clock>
        -: 6419:using FloatDuration = std::chrono::duration<double, typename Clock::period>;
        -: 6420:
        -: 6421:template <typename Clock>
        -: 6422:using TimePoint = typename Clock::time_point;
        -: 6423:
        -: 6424:using default_clock = std::chrono::steady_clock;
        -: 6425:
        -: 6426:template <typename Clock>
        -: 6427:struct now {
        -: 6428:TimePoint<Clock> operator()() const {
        -: 6429:return Clock::now();
        -: 6430:}
        -: 6431:};
        -: 6432:
        -: 6433:using fp_seconds = std::chrono::duration<double, std::ratio<1>>;
        -: 6434:} // namespace Benchmark
        -: 6435:} // namespace Catch
        -: 6436:
        -: 6437:// end catch_clock.hpp
        -: 6438:// start catch_optimizer.hpp
        -: 6439:
        -: 6440:// Hinting the optimizer
        -: 6441:
        -: 6442:
        -: 6443:#if defined(_MSC_VER)
        -: 6444:#   include <atomic> // atomic_thread_fence
        -: 6445:#endif
        -: 6446:
        -: 6447:namespace Catch {
        -: 6448:namespace Benchmark {
        -: 6449:#if defined(__GNUC__) || defined(__clang__)
        -: 6450:template <typename T>
        -: 6451:inline void keep_memory(T* p) {
        -: 6452:asm volatile("" : : "g"(p) : "memory");
        -: 6453:}
        -: 6454:inline void keep_memory() {
        -: 6455:asm volatile("" : : : "memory");
        -: 6456:}
        -: 6457:
        -: 6458:namespace Detail {
        -: 6459:inline void optimizer_barrier() { keep_memory(); }
        -: 6460:} // namespace Detail
        -: 6461:#elif defined(_MSC_VER)
        -: 6462:
        -: 6463:#pragma optimize("", off)
        -: 6464:template <typename T>
        -: 6465:inline void keep_memory(T* p) {
        -: 6466:// thanks @milleniumbug
        -: 6467:*reinterpret_cast<char volatile*>(p) = *reinterpret_cast<char const volatile*>(p);
        -: 6468:}
        -: 6469:// TODO equivalent keep_memory()
        -: 6470:#pragma optimize("", on)
        -: 6471:
        -: 6472:namespace Detail {
        -: 6473:inline void optimizer_barrier() {
        -: 6474:std::atomic_thread_fence(std::memory_order_seq_cst);
        -: 6475:}
        -: 6476:} // namespace Detail
        -: 6477:
        -: 6478:#endif
        -: 6479:
        -: 6480:template <typename T>
        -: 6481:inline void deoptimize_value(T&& x) {
        -: 6482:keep_memory(&x);
        -: 6483:}
        -: 6484:
        -: 6485:template <typename Fn, typename... Args>
        -: 6486:inline auto invoke_deoptimized(Fn&& fn, Args&&... args) -> typename std::enable_if<!std::is_same<void, decltype(fn(args...))>::value>::type {
        -: 6487:deoptimize_value(std::forward<Fn>(fn) (std::forward<Args...>(args...)));
        -: 6488:}
        -: 6489:
        -: 6490:template <typename Fn, typename... Args>
        -: 6491:inline auto invoke_deoptimized(Fn&& fn, Args&&... args) -> typename std::enable_if<std::is_same<void, decltype(fn(args...))>::value>::type {
        -: 6492:std::forward<Fn>(fn) (std::forward<Args...>(args...));
        -: 6493:}
        -: 6494:} // namespace Benchmark
        -: 6495:} // namespace Catch
        -: 6496:
        -: 6497:// end catch_optimizer.hpp
        -: 6498:// start catch_complete_invoke.hpp
        -: 6499:
        -: 6500:// Invoke with a special case for void
        -: 6501:
        -: 6502:
        -: 6503:#include <type_traits>
        -: 6504:#include <utility>
        -: 6505:
        -: 6506:namespace Catch {
        -: 6507:namespace Benchmark {
        -: 6508:namespace Detail {
        -: 6509:template <typename T>
        -: 6510:struct CompleteType { using type = T; };
        -: 6511:template <>
        -: 6512:struct CompleteType<void> { struct type {}; };
        -: 6513:
        -: 6514:template <typename T>
        -: 6515:using CompleteType_t = typename CompleteType<T>::type;
        -: 6516:
        -: 6517:template <typename Result>
        -: 6518:struct CompleteInvoker {
        -: 6519:template <typename Fun, typename... Args>
        -: 6520:static Result invoke(Fun&& fun, Args&&... args) {
        -: 6521:return std::forward<Fun>(fun)(std::forward<Args>(args)...);
        -: 6522:}
        -: 6523:};
        -: 6524:template <>
        -: 6525:struct CompleteInvoker<void> {
        -: 6526:template <typename Fun, typename... Args>
        -: 6527:static CompleteType_t<void> invoke(Fun&& fun, Args&&... args) {
        -: 6528:std::forward<Fun>(fun)(std::forward<Args>(args)...);
        -: 6529:return {};
        -: 6530:}
        -: 6531:};
        -: 6532:template <typename Sig>
        -: 6533:using ResultOf_t = typename std::result_of<Sig>::type;
        -: 6534:
        -: 6535:// invoke and not return void :(
        -: 6536:template <typename Fun, typename... Args>
        -: 6537:CompleteType_t<ResultOf_t<Fun(Args...)>> complete_invoke(Fun&& fun, Args&&... args) {
        -: 6538:return CompleteInvoker<ResultOf_t<Fun(Args...)>>::invoke(std::forward<Fun>(fun), std::forward<Args>(args)...);
        -: 6539:}
        -: 6540:
        -: 6541:const std::string benchmarkErrorMsg = "a benchmark failed to run successfully";
        -: 6542:} // namespace Detail
        -: 6543:
        -: 6544:template <typename Fun>
        -: 6545:Detail::CompleteType_t<Detail::ResultOf_t<Fun()>> user_code(Fun&& fun) {
        -: 6546:CATCH_TRY{
        -: 6547:return Detail::complete_invoke(std::forward<Fun>(fun));
        -: 6548:} CATCH_CATCH_ALL{
        -: 6549:getResultCapture().benchmarkFailed(translateActiveException());
        -: 6550:CATCH_RUNTIME_ERROR(Detail::benchmarkErrorMsg);
        -: 6551:}
        -: 6552:}
        -: 6553:} // namespace Benchmark
        -: 6554:} // namespace Catch
        -: 6555:
        -: 6556:// end catch_complete_invoke.hpp
        -: 6557:namespace Catch {
        -: 6558:namespace Benchmark {
        -: 6559:namespace Detail {
        -: 6560:struct ChronometerConcept {
        -: 6561:virtual void start() = 0;
        -: 6562:virtual void finish() = 0;
        -: 6563:virtual ~ChronometerConcept() = default;
        -: 6564:};
        -: 6565:template <typename Clock>
        -: 6566:struct ChronometerModel final : public ChronometerConcept {
        -: 6567:void start() override { started = Clock::now(); }
        -: 6568:void finish() override { finished = Clock::now(); }
        -: 6569:
        -: 6570:ClockDuration<Clock> elapsed() const { return finished - started; }
        -: 6571:
        -: 6572:TimePoint<Clock> started;
        -: 6573:TimePoint<Clock> finished;
        -: 6574:};
        -: 6575:} // namespace Detail
        -: 6576:
        -: 6577:struct Chronometer {
        -: 6578:public:
        -: 6579:template <typename Fun>
        -: 6580:void measure(Fun&& fun) { measure(std::forward<Fun>(fun), is_callable<Fun(int)>()); }
        -: 6581:
        -: 6582:int runs() const { return k; }
        -: 6583:
        -: 6584:Chronometer(Detail::ChronometerConcept& meter, int k)
        -: 6585:: impl(&meter)
        -: 6586:, k(k) {}
        -: 6587:
        -: 6588:private:
        -: 6589:template <typename Fun>
        -: 6590:void measure(Fun&& fun, std::false_type) {
        -: 6591:measure([&fun](int) { return fun(); }, std::true_type());
        -: 6592:}
        -: 6593:
        -: 6594:template <typename Fun>
        -: 6595:void measure(Fun&& fun, std::true_type) {
        -: 6596:Detail::optimizer_barrier();
        -: 6597:impl->start();
        -: 6598:for (int i = 0; i < k; ++i) invoke_deoptimized(fun, i);
        -: 6599:impl->finish();
        -: 6600:Detail::optimizer_barrier();
        -: 6601:}
        -: 6602:
        -: 6603:Detail::ChronometerConcept* impl;
        -: 6604:int k;
        -: 6605:};
        -: 6606:} // namespace Benchmark
        -: 6607:} // namespace Catch
        -: 6608:
        -: 6609:// end catch_chronometer.hpp
        -: 6610:// start catch_environment.hpp
        -: 6611:
        -: 6612:// Environment information
        -: 6613:
        -: 6614:
        -: 6615:namespace Catch {
        -: 6616:namespace Benchmark {
        -: 6617:template <typename Duration>
        -: 6618:struct EnvironmentEstimate {
        -: 6619:Duration mean;
        -: 6620:OutlierClassification outliers;
        -: 6621:
        -: 6622:template <typename Duration2>
        -: 6623:operator EnvironmentEstimate<Duration2>() const {
        -: 6624:return { mean, outliers };
        -: 6625:}
        -: 6626:};
        -: 6627:template <typename Clock>
        -: 6628:struct Environment {
        -: 6629:using clock_type = Clock;
        -: 6630:EnvironmentEstimate<FloatDuration<Clock>> clock_resolution;
        -: 6631:EnvironmentEstimate<FloatDuration<Clock>> clock_cost;
        -: 6632:};
        -: 6633:} // namespace Benchmark
        -: 6634:} // namespace Catch
        -: 6635:
        -: 6636:// end catch_environment.hpp
        -: 6637:// start catch_execution_plan.hpp
        -: 6638:
        -: 6639:// Execution plan
        -: 6640:
        -: 6641:
        -: 6642:// start catch_benchmark_function.hpp
        -: 6643:
        -: 6644:// Dumb std::function implementation for consistent call overhead
        -: 6645:
        -: 6646:
        -: 6647:#include <cassert>
        -: 6648:#include <type_traits>
        -: 6649:#include <utility>
        -: 6650:#include <memory>
        -: 6651:
        -: 6652:namespace Catch {
        -: 6653:namespace Benchmark {
        -: 6654:namespace Detail {
        -: 6655:template <typename T>
        -: 6656:using Decay = typename std::decay<T>::type;
        -: 6657:template <typename T, typename U>
        -: 6658:struct is_related
        -: 6659:: std::is_same<Decay<T>, Decay<U>> {};
        -: 6660:
        -: 6661:/// We need to reinvent std::function because every piece of code that might add overhead
        -: 6662:/// in a measurement context needs to have consistent performance characteristics so that we
        -: 6663:/// can account for it in the measurement.
        -: 6664:/// Implementations of std::function with optimizations that aren't always applicable, like
        -: 6665:/// small buffer optimizations, are not uncommon.
        -: 6666:/// This is effectively an implementation of std::function without any such optimizations;
        -: 6667:/// it may be slow, but it is consistently slow.
        -: 6668:struct BenchmarkFunction {
        -: 6669:private:
        -: 6670:struct callable {
        -: 6671:virtual void call(Chronometer meter) const = 0;
        -: 6672:virtual callable* clone() const = 0;
        -: 6673:virtual ~callable() = default;
        -: 6674:};
        -: 6675:template <typename Fun>
        -: 6676:struct model : public callable {
        -: 6677:model(Fun&& fun) : fun(std::move(fun)) {}
        -: 6678:model(Fun const& fun) : fun(fun) {}
        -: 6679:
        -: 6680:model<Fun>* clone() const override { return new model<Fun>(*this); }
        -: 6681:
        -: 6682:void call(Chronometer meter) const override {
        -: 6683:call(meter, is_callable<Fun(Chronometer)>());
        -: 6684:}
        -: 6685:void call(Chronometer meter, std::true_type) const {
        -: 6686:fun(meter);
        -: 6687:}
        -: 6688:void call(Chronometer meter, std::false_type) const {
        -: 6689:meter.measure(fun);
        -: 6690:}
        -: 6691:
        -: 6692:Fun fun;
        -: 6693:};
        -: 6694:
        -: 6695:struct do_nothing { void operator()() const {} };
        -: 6696:
        -: 6697:template <typename T>
        -: 6698:BenchmarkFunction(model<T>* c) : f(c) {}
        -: 6699:
        -: 6700:public:
        -: 6701:BenchmarkFunction()
        -: 6702:: f(new model<do_nothing>{ {} }) {}
        -: 6703:
        -: 6704:template <typename Fun,
        -: 6705:typename std::enable_if<!is_related<Fun, BenchmarkFunction>::value, int>::type = 0>
        -: 6706:BenchmarkFunction(Fun&& fun)
        -: 6707:: f(new model<typename std::decay<Fun>::type>(std::forward<Fun>(fun))) {}
        -: 6708:
        -: 6709:BenchmarkFunction(BenchmarkFunction&& that)
        -: 6710:: f(std::move(that.f)) {}
        -: 6711:
        -: 6712:BenchmarkFunction(BenchmarkFunction const& that)
        -: 6713:: f(that.f->clone()) {}
        -: 6714:
        -: 6715:BenchmarkFunction& operator=(BenchmarkFunction&& that) {
        -: 6716:f = std::move(that.f);
        -: 6717:return *this;
        -: 6718:}
        -: 6719:
        -: 6720:BenchmarkFunction& operator=(BenchmarkFunction const& that) {
        -: 6721:f.reset(that.f->clone());
        -: 6722:return *this;
        -: 6723:}
        -: 6724:
        -: 6725:void operator()(Chronometer meter) const { f->call(meter); }
        -: 6726:
        -: 6727:private:
        -: 6728:std::unique_ptr<callable> f;
        -: 6729:};
        -: 6730:} // namespace Detail
        -: 6731:} // namespace Benchmark
        -: 6732:} // namespace Catch
        -: 6733:
        -: 6734:// end catch_benchmark_function.hpp
        -: 6735:// start catch_repeat.hpp
        -: 6736:
        -: 6737:// repeat algorithm
        -: 6738:
        -: 6739:
        -: 6740:#include <type_traits>
        -: 6741:#include <utility>
        -: 6742:
        -: 6743:namespace Catch {
        -: 6744:namespace Benchmark {
        -: 6745:namespace Detail {
        -: 6746:template <typename Fun>
        -: 6747:struct repeater {
        -: 6748:void operator()(int k) const {
        -: 6749:for (int i = 0; i < k; ++i) {
        -: 6750:fun();
        -: 6751:}
        -: 6752:}
        -: 6753:Fun fun;
        -: 6754:};
        -: 6755:template <typename Fun>
        -: 6756:repeater<typename std::decay<Fun>::type> repeat(Fun&& fun) {
        -: 6757:return { std::forward<Fun>(fun) };
        -: 6758:}
        -: 6759:} // namespace Detail
        -: 6760:} // namespace Benchmark
        -: 6761:} // namespace Catch
        -: 6762:
        -: 6763:// end catch_repeat.hpp
        -: 6764:// start catch_run_for_at_least.hpp
        -: 6765:
        -: 6766:// Run a function for a minimum amount of time
        -: 6767:
        -: 6768:
        -: 6769:// start catch_measure.hpp
        -: 6770:
        -: 6771:// Measure
        -: 6772:
        -: 6773:
        -: 6774:// start catch_timing.hpp
        -: 6775:
        -: 6776:// Timing
        -: 6777:
        -: 6778:
        -: 6779:#include <tuple>
        -: 6780:#include <type_traits>
        -: 6781:
        -: 6782:namespace Catch {
        -: 6783:namespace Benchmark {
        -: 6784:template <typename Duration, typename Result>
        -: 6785:struct Timing {
        -: 6786:Duration elapsed;
        -: 6787:Result result;
        -: 6788:int iterations;
        -: 6789:};
        -: 6790:template <typename Clock, typename Sig>
        -: 6791:using TimingOf = Timing<ClockDuration<Clock>, Detail::CompleteType_t<Detail::ResultOf_t<Sig>>>;
        -: 6792:} // namespace Benchmark
        -: 6793:} // namespace Catch
        -: 6794:
        -: 6795:// end catch_timing.hpp
        -: 6796:#include <utility>
        -: 6797:
        -: 6798:namespace Catch {
        -: 6799:namespace Benchmark {
        -: 6800:namespace Detail {
        -: 6801:template <typename Clock, typename Fun, typename... Args>
        -: 6802:TimingOf<Clock, Fun(Args...)> measure(Fun&& fun, Args&&... args) {
        -: 6803:auto start = Clock::now();
        -: 6804:auto&& r = Detail::complete_invoke(fun, std::forward<Args>(args)...);
        -: 6805:auto end = Clock::now();
        -: 6806:auto delta = end - start;
        -: 6807:return { delta, std::forward<decltype(r)>(r), 1 };
        -: 6808:}
        -: 6809:} // namespace Detail
        -: 6810:} // namespace Benchmark
        -: 6811:} // namespace Catch
        -: 6812:
        -: 6813:// end catch_measure.hpp
        -: 6814:#include <utility>
        -: 6815:#include <type_traits>
        -: 6816:
        -: 6817:namespace Catch {
        -: 6818:namespace Benchmark {
        -: 6819:namespace Detail {
        -: 6820:template <typename Clock, typename Fun>
        -: 6821:TimingOf<Clock, Fun(int)> measure_one(Fun&& fun, int iters, std::false_type) {
        -: 6822:return Detail::measure<Clock>(fun, iters);
        -: 6823:}
        -: 6824:template <typename Clock, typename Fun>
        -: 6825:TimingOf<Clock, Fun(Chronometer)> measure_one(Fun&& fun, int iters, std::true_type) {
        -: 6826:Detail::ChronometerModel<Clock> meter;
        -: 6827:auto&& result = Detail::complete_invoke(fun, Chronometer(meter, iters));
        -: 6828:
        -: 6829:return { meter.elapsed(), std::move(result), iters };
        -: 6830:}
        -: 6831:
        -: 6832:template <typename Clock, typename Fun>
        -: 6833:using run_for_at_least_argument_t = typename std::conditional<is_callable<Fun(Chronometer)>::value, Chronometer, int>::type;
        -: 6834:
        -: 6835:struct optimized_away_error : std::exception {
        -: 6836:const char* what() const noexcept override {
        -: 6837:return "could not measure benchmark, maybe it was optimized away";
        -: 6838:}
        -: 6839:};
        -: 6840:
        -: 6841:template <typename Clock, typename Fun>
        -: 6842:TimingOf<Clock, Fun(run_for_at_least_argument_t<Clock, Fun>)> run_for_at_least(ClockDuration<Clock> how_long, int seed, Fun&& fun) {
        -: 6843:auto iters = seed;
        -: 6844:while (iters < (1 << 30)) {
        -: 6845:auto&& Timing = measure_one<Clock>(fun, iters, is_callable<Fun(Chronometer)>());
        -: 6846:
        -: 6847:if (Timing.elapsed >= how_long) {
        -: 6848:return { Timing.elapsed, std::move(Timing.result), iters };
        -: 6849:}
        -: 6850:iters *= 2;
        -: 6851:}
        -: 6852:throw optimized_away_error{};
        -: 6853:}
        -: 6854:} // namespace Detail
        -: 6855:} // namespace Benchmark
        -: 6856:} // namespace Catch
        -: 6857:
        -: 6858:// end catch_run_for_at_least.hpp
        -: 6859:#include <algorithm>
        -: 6860:
        -: 6861:namespace Catch {
        -: 6862:namespace Benchmark {
        -: 6863:template <typename Duration>
        -: 6864:struct ExecutionPlan {
        -: 6865:int iterations_per_sample;
        -: 6866:Duration estimated_duration;
        -: 6867:Detail::BenchmarkFunction benchmark;
        -: 6868:Duration warmup_time;
        -: 6869:int warmup_iterations;
        -: 6870:
        -: 6871:template <typename Duration2>
        -: 6872:operator ExecutionPlan<Duration2>() const {
        -: 6873:return { iterations_per_sample, estimated_duration, benchmark, warmup_time, warmup_iterations };
        -: 6874:}
        -: 6875:
        -: 6876:template <typename Clock>
        -: 6877:std::vector<FloatDuration<Clock>> run(const IConfig &cfg, Environment<FloatDuration<Clock>> env) const {
        -: 6878:// warmup a bit
        -: 6879:Detail::run_for_at_least<Clock>(std::chrono::duration_cast<ClockDuration<Clock>>(warmup_time), warmup_iterations, Detail::repeat(now<Clock>{}));
        -: 6880:
        -: 6881:std::vector<FloatDuration<Clock>> times;
        -: 6882:times.reserve(cfg.benchmarkSamples());
        -: 6883:std::generate_n(std::back_inserter(times), cfg.benchmarkSamples(), [this, env] {
        -: 6884:Detail::ChronometerModel<Clock> model;
        -: 6885:this->benchmark(Chronometer(model, iterations_per_sample));
        -: 6886:auto sample_time = model.elapsed() - env.clock_cost.mean;
        -: 6887:if (sample_time < FloatDuration<Clock>::zero()) sample_time = FloatDuration<Clock>::zero();
        -: 6888:return sample_time / iterations_per_sample;
        -: 6889:});
        -: 6890:return times;
        -: 6891:}
        -: 6892:};
        -: 6893:} // namespace Benchmark
        -: 6894:} // namespace Catch
        -: 6895:
        -: 6896:// end catch_execution_plan.hpp
        -: 6897:// start catch_estimate_clock.hpp
        -: 6898:
        -: 6899:// Environment measurement
        -: 6900:
        -: 6901:
        -: 6902:// start catch_stats.hpp
        -: 6903:
        -: 6904:// Statistical analysis tools
        -: 6905:
        -: 6906:
        -: 6907:#include <algorithm>
        -: 6908:#include <functional>
        -: 6909:#include <vector>
        -: 6910:#include <numeric>
        -: 6911:#include <tuple>
        -: 6912:#include <cmath>
        -: 6913:#include <utility>
        -: 6914:#include <cstddef>
        -: 6915:
        -: 6916:namespace Catch {
        -: 6917:namespace Benchmark {
        -: 6918:namespace Detail {
        -: 6919:using sample = std::vector<double>;
        -: 6920:
        -: 6921:double weighted_average_quantile(int k, int q, std::vector<double>::iterator first, std::vector<double>::iterator last);
        -: 6922:
        -: 6923:template <typename Iterator>
        -: 6924:OutlierClassification classify_outliers(Iterator first, Iterator last) {
        -: 6925:std::vector<double> copy(first, last);
        -: 6926:
        -: 6927:auto q1 = weighted_average_quantile(1, 4, copy.begin(), copy.end());
        -: 6928:auto q3 = weighted_average_quantile(3, 4, copy.begin(), copy.end());
        -: 6929:auto iqr = q3 - q1;
        -: 6930:auto los = q1 - (iqr * 3.);
        -: 6931:auto lom = q1 - (iqr * 1.5);
        -: 6932:auto him = q3 + (iqr * 1.5);
        -: 6933:auto his = q3 + (iqr * 3.);
        -: 6934:
        -: 6935:OutlierClassification o;
        -: 6936:for (; first != last; ++first) {
        -: 6937:auto&& t = *first;
        -: 6938:if (t < los) ++o.low_severe;
        -: 6939:else if (t < lom) ++o.low_mild;
        -: 6940:else if (t > his) ++o.high_severe;
        -: 6941:else if (t > him) ++o.high_mild;
        -: 6942:++o.samples_seen;
        -: 6943:}
        -: 6944:return o;
        -: 6945:}
        -: 6946:
        -: 6947:template <typename Iterator>
        -: 6948:double mean(Iterator first, Iterator last) {
        -: 6949:auto count = last - first;
        -: 6950:double sum = std::accumulate(first, last, 0.);
        -: 6951:return sum / count;
        -: 6952:}
        -: 6953:
        -: 6954:template <typename URng, typename Iterator, typename Estimator>
        -: 6955:sample resample(URng& rng, int resamples, Iterator first, Iterator last, Estimator& estimator) {
        -: 6956:auto n = last - first;
        -: 6957:std::uniform_int_distribution<decltype(n)> dist(0, n - 1);
        -: 6958:
        -: 6959:sample out;
        -: 6960:out.reserve(resamples);
        -: 6961:std::generate_n(std::back_inserter(out), resamples, [n, first, &estimator, &dist, &rng] {
        -: 6962:std::vector<double> resampled;
        -: 6963:resampled.reserve(n);
        -: 6964:std::generate_n(std::back_inserter(resampled), n, [first, &dist, &rng] { return first[dist(rng)]; });
        -: 6965:return estimator(resampled.begin(), resampled.end());
        -: 6966:});
        -: 6967:std::sort(out.begin(), out.end());
        -: 6968:return out;
        -: 6969:}
        -: 6970:
        -: 6971:template <typename Estimator, typename Iterator>
        -: 6972:sample jackknife(Estimator&& estimator, Iterator first, Iterator last) {
        -: 6973:auto n = last - first;
        -: 6974:auto second = std::next(first);
        -: 6975:sample results;
        -: 6976:results.reserve(n);
        -: 6977:
        -: 6978:for (auto it = first; it != last; ++it) {
        -: 6979:std::iter_swap(it, first);
        -: 6980:results.push_back(estimator(second, last));
        -: 6981:}
        -: 6982:
        -: 6983:return results;
        -: 6984:}
        -: 6985:
        -: 6986:inline double normal_cdf(double x) {
        -: 6987:return std::erfc(-x / std::sqrt(2.0)) / 2.0;
        -: 6988:}
        -: 6989:
        -: 6990:double erfc_inv(double x);
        -: 6991:
        -: 6992:double normal_quantile(double p);
        -: 6993:
        -: 6994:template <typename Iterator, typename Estimator>
        -: 6995:Estimate<double> bootstrap(double confidence_level, Iterator first, Iterator last, sample const& resample, Estimator&& estimator) {
        -: 6996:auto n_samples = last - first;
        -: 6997:
        -: 6998:double point = estimator(first, last);
        -: 6999:// Degenerate case with a single sample
        -: 7000:if (n_samples == 1) return { point, point, point, confidence_level };
        -: 7001:
        -: 7002:sample jack = jackknife(estimator, first, last);
        -: 7003:double jack_mean = mean(jack.begin(), jack.end());
        -: 7004:double sum_squares, sum_cubes;
        -: 7005:std::tie(sum_squares, sum_cubes) = std::accumulate(jack.begin(), jack.end(), std::make_pair(0., 0.), [jack_mean](std::pair<double, double> sqcb, double x) -> std::pair<double, double> {
        -: 7006:auto d = jack_mean - x;
        -: 7007:auto d2 = d * d;
        -: 7008:auto d3 = d2 * d;
        -: 7009:return { sqcb.first + d2, sqcb.second + d3 };
        -: 7010:});
        -: 7011:
        -: 7012:double accel = sum_cubes / (6 * std::pow(sum_squares, 1.5));
        -: 7013:int n = static_cast<int>(resample.size());
        -: 7014:double prob_n = std::count_if(resample.begin(), resample.end(), [point](double x) { return x < point; }) / (double)n;
        -: 7015:// degenerate case with uniform samples
        -: 7016:if (prob_n == 0) return { point, point, point, confidence_level };
        -: 7017:
        -: 7018:double bias = normal_quantile(prob_n);
        -: 7019:double z1 = normal_quantile((1. - confidence_level) / 2.);
        -: 7020:
        -: 7021:auto cumn = [n](double x) -> int {
        -: 7022:return std::lround(normal_cdf(x) * n); };
        -: 7023:auto a = [bias, accel](double b) { return bias + b / (1. - accel * b); };
        -: 7024:double b1 = bias + z1;
        -: 7025:double b2 = bias - z1;
        -: 7026:double a1 = a(b1);
        -: 7027:double a2 = a(b2);
        -: 7028:auto lo = std::max(cumn(a1), 0);
        -: 7029:auto hi = std::min(cumn(a2), n - 1);
        -: 7030:
        -: 7031:return { point, resample[lo], resample[hi], confidence_level };
        -: 7032:}
        -: 7033:
        -: 7034:double outlier_variance(Estimate<double> mean, Estimate<double> stddev, int n);
        -: 7035:
        -: 7036:struct bootstrap_analysis {
        -: 7037:Estimate<double> mean;
        -: 7038:Estimate<double> standard_deviation;
        -: 7039:double outlier_variance;
        -: 7040:};
        -: 7041:
        -: 7042:bootstrap_analysis analyse_samples(double confidence_level, int n_resamples, std::vector<double>::iterator first, std::vector<double>::iterator last);
        -: 7043:} // namespace Detail
        -: 7044:} // namespace Benchmark
        -: 7045:} // namespace Catch
        -: 7046:
        -: 7047:// end catch_stats.hpp
        -: 7048:#include <algorithm>
        -: 7049:#include <iterator>
        -: 7050:#include <tuple>
        -: 7051:#include <vector>
        -: 7052:#include <cmath>
        -: 7053:
        -: 7054:namespace Catch {
        -: 7055:namespace Benchmark {
        -: 7056:namespace Detail {
        -: 7057:template <typename Clock>
        -: 7058:std::vector<double> resolution(int k) {
        -: 7059:std::vector<TimePoint<Clock>> times;
        -: 7060:times.reserve(k + 1);
        -: 7061:std::generate_n(std::back_inserter(times), k + 1, now<Clock>{});
        -: 7062:
        -: 7063:std::vector<double> deltas;
        -: 7064:deltas.reserve(k);
        -: 7065:std::transform(std::next(times.begin()), times.end(), times.begin(),
        -: 7066:std::back_inserter(deltas),
        -: 7067:[](TimePoint<Clock> a, TimePoint<Clock> b) { return static_cast<double>((a - b).count()); });
        -: 7068:
        -: 7069:return deltas;
        -: 7070:}
        -: 7071:
        -: 7072:const auto warmup_iterations = 10000;
        -: 7073:const auto warmup_time = std::chrono::milliseconds(100);
        -: 7074:const auto minimum_ticks = 1000;
        -: 7075:const auto warmup_seed = 10000;
        -: 7076:const auto clock_resolution_estimation_time = std::chrono::milliseconds(500);
        -: 7077:const auto clock_cost_estimation_time_limit = std::chrono::seconds(1);
        -: 7078:const auto clock_cost_estimation_tick_limit = 100000;
        -: 7079:const auto clock_cost_estimation_time = std::chrono::milliseconds(10);
        -: 7080:const auto clock_cost_estimation_iterations = 10000;
        -: 7081:
        -: 7082:template <typename Clock>
        -: 7083:int warmup() {
        -: 7084:return run_for_at_least<Clock>(std::chrono::duration_cast<ClockDuration<Clock>>(warmup_time), warmup_seed, &resolution<Clock>)
        -: 7085:.iterations;
        -: 7086:}
        -: 7087:template <typename Clock>
        -: 7088:EnvironmentEstimate<FloatDuration<Clock>> estimate_clock_resolution(int iterations) {
        -: 7089:auto r = run_for_at_least<Clock>(std::chrono::duration_cast<ClockDuration<Clock>>(clock_resolution_estimation_time), iterations, &resolution<Clock>)
        -: 7090:.result;
        -: 7091:return {
        -: 7092:FloatDuration<Clock>(mean(r.begin(), r.end())),
        -: 7093:classify_outliers(r.begin(), r.end()),
        -: 7094:};
        -: 7095:}
        -: 7096:template <typename Clock>
        -: 7097:EnvironmentEstimate<FloatDuration<Clock>> estimate_clock_cost(FloatDuration<Clock> resolution) {
        -: 7098:auto time_limit = std::min(resolution * clock_cost_estimation_tick_limit, FloatDuration<Clock>(clock_cost_estimation_time_limit));
        -: 7099:auto time_clock = [](int k) {
        -: 7100:return Detail::measure<Clock>([k] {
        -: 7101:for (int i = 0; i < k; ++i) {
        -: 7102:volatile auto ignored = Clock::now();
        -: 7103:(void)ignored;
        -: 7104:}
        -: 7105:}).elapsed;
        -: 7106:};
        -: 7107:time_clock(1);
        -: 7108:int iters = clock_cost_estimation_iterations;
        -: 7109:auto&& r = run_for_at_least<Clock>(std::chrono::duration_cast<ClockDuration<Clock>>(clock_cost_estimation_time), iters, time_clock);
        -: 7110:std::vector<double> times;
        -: 7111:int nsamples = static_cast<int>(std::ceil(time_limit / r.elapsed));
        -: 7112:times.reserve(nsamples);
        -: 7113:std::generate_n(std::back_inserter(times), nsamples, [time_clock, &r] {
        -: 7114:return static_cast<double>((time_clock(r.iterations) / r.iterations).count());
        -: 7115:});
        -: 7116:return {
        -: 7117:FloatDuration<Clock>(mean(times.begin(), times.end())),
        -: 7118:classify_outliers(times.begin(), times.end()),
        -: 7119:};
        -: 7120:}
        -: 7121:
        -: 7122:template <typename Clock>
        -: 7123:Environment<FloatDuration<Clock>> measure_environment() {
        -: 7124:static Environment<FloatDuration<Clock>>* env = nullptr;
        -: 7125:if (env) {
        -: 7126:return *env;
        -: 7127:}
        -: 7128:
        -: 7129:auto iters = Detail::warmup<Clock>();
        -: 7130:auto resolution = Detail::estimate_clock_resolution<Clock>(iters);
        -: 7131:auto cost = Detail::estimate_clock_cost<Clock>(resolution.mean);
        -: 7132:
        -: 7133:env = new Environment<FloatDuration<Clock>>{ resolution, cost };
        -: 7134:return *env;
        -: 7135:}
        -: 7136:} // namespace Detail
        -: 7137:} // namespace Benchmark
        -: 7138:} // namespace Catch
        -: 7139:
        -: 7140:// end catch_estimate_clock.hpp
        -: 7141:// start catch_analyse.hpp
        -: 7142:
        -: 7143:// Run and analyse one benchmark
        -: 7144:
        -: 7145:
        -: 7146:// start catch_sample_analysis.hpp
        -: 7147:
        -: 7148:// Benchmark results
        -: 7149:
        -: 7150:
        -: 7151:#include <algorithm>
        -: 7152:#include <vector>
        -: 7153:#include <string>
        -: 7154:#include <iterator>
        -: 7155:
        -: 7156:namespace Catch {
        -: 7157:namespace Benchmark {
        -: 7158:template <typename Duration>
        -: 7159:struct SampleAnalysis {
        -: 7160:std::vector<Duration> samples;
        -: 7161:Estimate<Duration> mean;
        -: 7162:Estimate<Duration> standard_deviation;
        -: 7163:OutlierClassification outliers;
        -: 7164:double outlier_variance;
        -: 7165:
        -: 7166:template <typename Duration2>
        -: 7167:operator SampleAnalysis<Duration2>() const {
        -: 7168:std::vector<Duration2> samples2;
        -: 7169:samples2.reserve(samples.size());
        -: 7170:std::transform(samples.begin(), samples.end(), std::back_inserter(samples2), [](Duration d) { return Duration2(d); });
        -: 7171:return {
        -: 7172:std::move(samples2),
        -: 7173:mean,
        -: 7174:standard_deviation,
        -: 7175:outliers,
        -: 7176:outlier_variance,
        -: 7177:};
        -: 7178:}
        -: 7179:};
        -: 7180:} // namespace Benchmark
        -: 7181:} // namespace Catch
        -: 7182:
        -: 7183:// end catch_sample_analysis.hpp
        -: 7184:#include <algorithm>
        -: 7185:#include <iterator>
        -: 7186:#include <vector>
        -: 7187:
        -: 7188:namespace Catch {
        -: 7189:namespace Benchmark {
        -: 7190:namespace Detail {
        -: 7191:template <typename Duration, typename Iterator>
        -: 7192:SampleAnalysis<Duration> analyse(const IConfig &cfg, Environment<Duration>, Iterator first, Iterator last) {
        -: 7193:if (!cfg.benchmarkNoAnalysis()) {
        -: 7194:std::vector<double> samples;
        -: 7195:samples.reserve(last - first);
        -: 7196:std::transform(first, last, std::back_inserter(samples), [](Duration d) { return d.count(); });
        -: 7197:
        -: 7198:auto analysis = Catch::Benchmark::Detail::analyse_samples(cfg.benchmarkConfidenceInterval(), cfg.benchmarkResamples(), samples.begin(), samples.end());
        -: 7199:auto outliers = Catch::Benchmark::Detail::classify_outliers(samples.begin(), samples.end());
        -: 7200:
        -: 7201:auto wrap_estimate = [](Estimate<double> e) {
        -: 7202:return Estimate<Duration> {
        -: 7203:Duration(e.point),
        -: 7204:Duration(e.lower_bound),
        -: 7205:Duration(e.upper_bound),
        -: 7206:e.confidence_interval,
        -: 7207:};
        -: 7208:};
        -: 7209:std::vector<Duration> samples2;
        -: 7210:samples2.reserve(samples.size());
        -: 7211:std::transform(samples.begin(), samples.end(), std::back_inserter(samples2), [](double d) { return Duration(d); });
        -: 7212:return {
        -: 7213:std::move(samples2),
        -: 7214:wrap_estimate(analysis.mean),
        -: 7215:wrap_estimate(analysis.standard_deviation),
        -: 7216:outliers,
        -: 7217:analysis.outlier_variance,
        -: 7218:};
        -: 7219:} else {
        -: 7220:std::vector<Duration> samples;
        -: 7221:samples.reserve(last - first);
        -: 7222:
        -: 7223:Duration mean = Duration(0);
        -: 7224:int i = 0;
        -: 7225:for (auto it = first; it < last; ++it, ++i) {
        -: 7226:samples.push_back(Duration(*it));
        -: 7227:mean += Duration(*it);
        -: 7228:}
        -: 7229:mean /= i;
        -: 7230:
        -: 7231:return {
        -: 7232:std::move(samples),
        -: 7233:Estimate<Duration>{mean, mean, mean, 0.0},
        -: 7234:Estimate<Duration>{Duration(0), Duration(0), Duration(0), 0.0},
        -: 7235:OutlierClassification{},
        -: 7236:0.0
        -: 7237:};
        -: 7238:}
        -: 7239:}
        -: 7240:} // namespace Detail
        -: 7241:} // namespace Benchmark
        -: 7242:} // namespace Catch
        -: 7243:
        -: 7244:// end catch_analyse.hpp
        -: 7245:#include <algorithm>
        -: 7246:#include <functional>
        -: 7247:#include <string>
        -: 7248:#include <vector>
        -: 7249:#include <cmath>
        -: 7250:
        -: 7251:namespace Catch {
        -: 7252:namespace Benchmark {
        -: 7253:struct Benchmark {
        -: 7254:Benchmark(std::string &&name)
        -: 7255:: name(std::move(name)) {}
        -: 7256:
        -: 7257:template <class FUN>
        -: 7258:Benchmark(std::string &&name, FUN &&func)
        -: 7259:: fun(std::move(func)), name(std::move(name)) {}
        -: 7260:
        -: 7261:template <typename Clock>
        -: 7262:ExecutionPlan<FloatDuration<Clock>> prepare(const IConfig &cfg, Environment<FloatDuration<Clock>> env) const {
        -: 7263:auto min_time = env.clock_resolution.mean * Detail::minimum_ticks;
        -: 7264:auto run_time = std::max(min_time, std::chrono::duration_cast<decltype(min_time)>(Detail::warmup_time));
        -: 7265:auto&& test = Detail::run_for_at_least<Clock>(std::chrono::duration_cast<ClockDuration<Clock>>(run_time), 1, fun);
        -: 7266:int new_iters = static_cast<int>(std::ceil(min_time * test.iterations / test.elapsed));
        -: 7267:return { new_iters, test.elapsed / test.iterations * new_iters * cfg.benchmarkSamples(), fun, std::chrono::duration_cast<FloatDuration<Clock>>(Detail::warmup_time), Detail::warmup_iterations };
        -: 7268:}
        -: 7269:
        -: 7270:template <typename Clock = default_clock>
        -: 7271:void run() {
        -: 7272:IConfigPtr cfg = getCurrentContext().getConfig();
        -: 7273:
        -: 7274:auto env = Detail::measure_environment<Clock>();
        -: 7275:
        -: 7276:getResultCapture().benchmarkPreparing(name);
        -: 7277:CATCH_TRY{
        -: 7278:auto plan = user_code([&] {
        -: 7279:return prepare<Clock>(*cfg, env);
        -: 7280:});
        -: 7281:
        -: 7282:BenchmarkInfo info {
        -: 7283:name,
        -: 7284:plan.estimated_duration.count(),
        -: 7285:plan.iterations_per_sample,
        -: 7286:cfg->benchmarkSamples(),
        -: 7287:cfg->benchmarkResamples(),
        -: 7288:env.clock_resolution.mean.count(),
        -: 7289:env.clock_cost.mean.count()
        -: 7290:};
        -: 7291:
        -: 7292:getResultCapture().benchmarkStarting(info);
        -: 7293:
        -: 7294:auto samples = user_code([&] {
        -: 7295:return plan.template run<Clock>(*cfg, env);
        -: 7296:});
        -: 7297:
        -: 7298:auto analysis = Detail::analyse(*cfg, env, samples.begin(), samples.end());
        -: 7299:BenchmarkStats<std::chrono::duration<double, std::nano>> stats{ info, analysis.samples, analysis.mean, analysis.standard_deviation, analysis.outliers, analysis.outlier_variance };
        -: 7300:getResultCapture().benchmarkEnded(stats);
        -: 7301:
        -: 7302:} CATCH_CATCH_ALL{
        -: 7303:if (translateActiveException() != Detail::benchmarkErrorMsg) // benchmark errors have been reported, otherwise rethrow.
        -: 7304:std::rethrow_exception(std::current_exception());
        -: 7305:}
        -: 7306:}
        -: 7307:
        -: 7308:// sets lambda to be used in fun *and* executes benchmark!
        -: 7309:template <typename Fun,
        -: 7310:typename std::enable_if<!Detail::is_related<Fun, Benchmark>::value, int>::type = 0>
        -: 7311:Benchmark & operator=(Fun func) {
        -: 7312:fun = Detail::BenchmarkFunction(func);
        -: 7313:run();
        -: 7314:return *this;
        -: 7315:}
        -: 7316:
        -: 7317:explicit operator bool() {
        -: 7318:return true;
        -: 7319:}
        -: 7320:
        -: 7321:private:
        -: 7322:Detail::BenchmarkFunction fun;
        -: 7323:std::string name;
        -: 7324:};
        -: 7325:}
        -: 7326:} // namespace Catch
        -: 7327:
        -: 7328:#define INTERNAL_CATCH_GET_1_ARG(arg1, arg2, ...) arg1
        -: 7329:#define INTERNAL_CATCH_GET_2_ARG(arg1, arg2, ...) arg2
        -: 7330:
        -: 7331:#define INTERNAL_CATCH_BENCHMARK(BenchmarkName, name, benchmarkIndex)\
        -: 7332:    if( Catch::Benchmark::Benchmark BenchmarkName{name} ) \
        -: 7333:        BenchmarkName = [&](int benchmarkIndex)
        -: 7334:
        -: 7335:#define INTERNAL_CATCH_BENCHMARK_ADVANCED(BenchmarkName, name)\
        -: 7336:    if( Catch::Benchmark::Benchmark BenchmarkName{name} ) \
        -: 7337:        BenchmarkName = [&]
        -: 7338:
        -: 7339:// end catch_benchmark.hpp
        -: 7340:#endif
        -: 7341:
        -: 7342:#endif // ! CATCH_CONFIG_IMPL_ONLY
        -: 7343:
        -: 7344:#ifdef CATCH_IMPL
        -: 7345:// start catch_impl.hpp
        -: 7346:
        -: 7347:#ifdef __clang__
        -: 7348:#pragma clang diagnostic push
        -: 7349:#pragma clang diagnostic ignored "-Wweak-vtables"
        -: 7350:#endif
        -: 7351:
        -: 7352:// Keep these here for external reporters
        -: 7353:// start catch_test_case_tracker.h
        -: 7354:
        -: 7355:#include <string>
        -: 7356:#include <vector>
        -: 7357:#include <memory>
        -: 7358:
        -: 7359:namespace Catch {
        -: 7360:namespace TestCaseTracking {
        -: 7361:
        -: 7362:struct NameAndLocation {
        -: 7363:std::string name;
        -: 7364:SourceLineInfo location;
        -: 7365:
        -: 7366:NameAndLocation( std::string const& _name, SourceLineInfo const& _location );
        -: 7367:};
        -: 7368:
        -: 7369:struct ITracker;
        -: 7370:
        -: 7371:using ITrackerPtr = std::shared_ptr<ITracker>;
        -: 7372:
      16*: 7373:struct ITracker {
------------------
_ZN5Catch16TestCaseTracking8ITrackerD0Ev:
function _ZN5Catch16TestCaseTracking8ITrackerD0Ev called 0 returned 0% blocks executed 0%
    #####: 7373:struct ITracker {
    %%%%%: 7373-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch16TestCaseTracking8ITrackerD2Ev:
function _ZN5Catch16TestCaseTracking8ITrackerD2Ev called 16 returned 100% blocks executed 100%
       16: 7373:struct ITracker {
------------------
        -: 7374:virtual ~ITracker();
        -: 7375:
        -: 7376:// static queries
        -: 7377:virtual NameAndLocation const& nameAndLocation() const = 0;
        -: 7378:
        -: 7379:// dynamic queries
        -: 7380:virtual bool isComplete() const = 0; // Successfully completed or failed
        -: 7381:virtual bool isSuccessfullyCompleted() const = 0;
        -: 7382:virtual bool isOpen() const = 0; // Started but not complete
        -: 7383:virtual bool hasChildren() const = 0;
        -: 7384:
        -: 7385:virtual ITracker& parent() = 0;
        -: 7386:
        -: 7387:// actions
        -: 7388:virtual void close() = 0; // Successfully complete
        -: 7389:virtual void fail() = 0;
        -: 7390:virtual void markAsNeedingAnotherRun() = 0;
        -: 7391:
        -: 7392:virtual void addChild( ITrackerPtr const& child ) = 0;
        -: 7393:virtual ITrackerPtr findChild( NameAndLocation const& nameAndLocation ) = 0;
        -: 7394:virtual void openChild() = 0;
        -: 7395:
        -: 7396:// Debug/ checking
        -: 7397:virtual bool isSectionTracker() const = 0;
        -: 7398:virtual bool isGeneratorTracker() const = 0;
        -: 7399:};
        -: 7400:
        -: 7401:class TrackerContext {
        -: 7402:
        -: 7403:enum RunState {
        -: 7404:NotStarted,
        -: 7405:Executing,
        -: 7406:CompletedCycle
        -: 7407:};
        -: 7408:
        -: 7409:ITrackerPtr m_rootTracker;
        -: 7410:ITracker* m_currentTracker = nullptr;
        -: 7411:RunState m_runState = NotStarted;
        -: 7412:
        -: 7413:public:
        -: 7414:
        -: 7415:ITracker& startRun();
        -: 7416:void endRun();
        -: 7417:
        -: 7418:void startCycle();
        -: 7419:void completeCycle();
        -: 7420:
        -: 7421:bool completedCycle() const;
        -: 7422:ITracker& currentTracker();
        -: 7423:void setCurrentTracker( ITracker* tracker );
        -: 7424:};
        -: 7425:
        -: 7426:class TrackerBase : public ITracker {
        -: 7427:protected:
        -: 7428:enum CycleState {
        -: 7429:NotStarted,
        -: 7430:Executing,
        -: 7431:ExecutingChildren,
        -: 7432:NeedsAnotherRun,
        -: 7433:CompletedSuccessfully,
        -: 7434:Failed
        -: 7435:};
        -: 7436:
        -: 7437:using Children = std::vector<ITrackerPtr>;
        -: 7438:NameAndLocation m_nameAndLocation;
        -: 7439:TrackerContext& m_ctx;
        -: 7440:ITracker* m_parent;
        -: 7441:Children m_children;
        -: 7442:CycleState m_runState = NotStarted;
        -: 7443:
        -: 7444:public:
        -: 7445:TrackerBase( NameAndLocation const& nameAndLocation, TrackerContext& ctx, ITracker* parent );
        -: 7446:
        -: 7447:NameAndLocation const& nameAndLocation() const override;
        -: 7448:bool isComplete() const override;
        -: 7449:bool isSuccessfullyCompleted() const override;
        -: 7450:bool isOpen() const override;
        -: 7451:bool hasChildren() const override;
        -: 7452:
        -: 7453:void addChild( ITrackerPtr const& child ) override;
        -: 7454:
        -: 7455:ITrackerPtr findChild( NameAndLocation const& nameAndLocation ) override;
        -: 7456:ITracker& parent() override;
        -: 7457:
        -: 7458:void openChild() override;
        -: 7459:
        -: 7460:bool isSectionTracker() const override;
        -: 7461:bool isGeneratorTracker() const override;
        -: 7462:
        -: 7463:void open();
        -: 7464:
        -: 7465:void close() override;
        -: 7466:void fail() override;
        -: 7467:void markAsNeedingAnotherRun() override;
        -: 7468:
        -: 7469:private:
        -: 7470:void moveToParent();
        -: 7471:void moveToThis();
        -: 7472:};
        -: 7473:
        -: 7474:class SectionTracker : public TrackerBase {
        -: 7475:std::vector<std::string> m_filters;
        -: 7476:std::string m_trimmed_name;
        -: 7477:public:
        -: 7478:SectionTracker( NameAndLocation const& nameAndLocation, TrackerContext& ctx, ITracker* parent );
        -: 7479:
        -: 7480:bool isSectionTracker() const override;
        -: 7481:
        -: 7482:bool isComplete() const override;
        -: 7483:
        -: 7484:static SectionTracker& acquire( TrackerContext& ctx, NameAndLocation const& nameAndLocation );
        -: 7485:
        -: 7486:void tryOpen();
        -: 7487:
        -: 7488:void addInitialFilters( std::vector<std::string> const& filters );
        -: 7489:void addNextFilters( std::vector<std::string> const& filters );
        -: 7490:};
        -: 7491:
        -: 7492:} // namespace TestCaseTracking
        -: 7493:
        -: 7494:using TestCaseTracking::ITracker;
        -: 7495:using TestCaseTracking::TrackerContext;
        -: 7496:using TestCaseTracking::SectionTracker;
        -: 7497:
        -: 7498:} // namespace Catch
        -: 7499:
        -: 7500:// end catch_test_case_tracker.h
        -: 7501:
        -: 7502:// start catch_leak_detector.h
        -: 7503:
        -: 7504:namespace Catch {
        -: 7505:
        -: 7506:struct LeakDetector {
        -: 7507:LeakDetector();
        -: 7508:~LeakDetector();
        -: 7509:};
        -: 7510:
        -: 7511:}
        -: 7512:// end catch_leak_detector.h
        -: 7513:// Cpp files will be included in the single-header file here
        -: 7514:// start catch_stats.cpp
        -: 7515:
        -: 7516:// Statistical analysis tools
        -: 7517:
        -: 7518:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -: 7519:
        -: 7520:#include <cassert>
        -: 7521:#include <random>
        -: 7522:
        -: 7523:#if defined(CATCH_CONFIG_USE_ASYNC)
        -: 7524:#include <future>
        -: 7525:#endif
        -: 7526:
        -: 7527:namespace {
        -: 7528:double erf_inv(double x) {
        -: 7529:// Code accompanying the article "Approximating the erfinv function" in GPU Computing Gems, Volume 2
        -: 7530:double w, p;
        -: 7531:
        -: 7532:w = -log((1.0 - x) * (1.0 + x));
        -: 7533:
        -: 7534:if (w < 6.250000) {
        -: 7535:w = w - 3.125000;
        -: 7536:p = -3.6444120640178196996e-21;
        -: 7537:p = -1.685059138182016589e-19 + p * w;
        -: 7538:p = 1.2858480715256400167e-18 + p * w;
        -: 7539:p = 1.115787767802518096e-17 + p * w;
        -: 7540:p = -1.333171662854620906e-16 + p * w;
        -: 7541:p = 2.0972767875968561637e-17 + p * w;
        -: 7542:p = 6.6376381343583238325e-15 + p * w;
        -: 7543:p = -4.0545662729752068639e-14 + p * w;
        -: 7544:p = -8.1519341976054721522e-14 + p * w;
        -: 7545:p = 2.6335093153082322977e-12 + p * w;
        -: 7546:p = -1.2975133253453532498e-11 + p * w;
        -: 7547:p = -5.4154120542946279317e-11 + p * w;
        -: 7548:p = 1.051212273321532285e-09 + p * w;
        -: 7549:p = -4.1126339803469836976e-09 + p * w;
        -: 7550:p = -2.9070369957882005086e-08 + p * w;
        -: 7551:p = 4.2347877827932403518e-07 + p * w;
        -: 7552:p = -1.3654692000834678645e-06 + p * w;
        -: 7553:p = -1.3882523362786468719e-05 + p * w;
        -: 7554:p = 0.0001867342080340571352 + p * w;
        -: 7555:p = -0.00074070253416626697512 + p * w;
        -: 7556:p = -0.0060336708714301490533 + p * w;
        -: 7557:p = 0.24015818242558961693 + p * w;
        -: 7558:p = 1.6536545626831027356 + p * w;
        -: 7559:} else if (w < 16.000000) {
        -: 7560:w = sqrt(w) - 3.250000;
        -: 7561:p = 2.2137376921775787049e-09;
        -: 7562:p = 9.0756561938885390979e-08 + p * w;
        -: 7563:p = -2.7517406297064545428e-07 + p * w;
        -: 7564:p = 1.8239629214389227755e-08 + p * w;
        -: 7565:p = 1.5027403968909827627e-06 + p * w;
        -: 7566:p = -4.013867526981545969e-06 + p * w;
        -: 7567:p = 2.9234449089955446044e-06 + p * w;
        -: 7568:p = 1.2475304481671778723e-05 + p * w;
        -: 7569:p = -4.7318229009055733981e-05 + p * w;
        -: 7570:p = 6.8284851459573175448e-05 + p * w;
        -: 7571:p = 2.4031110387097893999e-05 + p * w;
        -: 7572:p = -0.0003550375203628474796 + p * w;
        -: 7573:p = 0.00095328937973738049703 + p * w;
        -: 7574:p = -0.0016882755560235047313 + p * w;
        -: 7575:p = 0.0024914420961078508066 + p * w;
        -: 7576:p = -0.0037512085075692412107 + p * w;
        -: 7577:p = 0.005370914553590063617 + p * w;
        -: 7578:p = 1.0052589676941592334 + p * w;
        -: 7579:p = 3.0838856104922207635 + p * w;
        -: 7580:} else {
        -: 7581:w = sqrt(w) - 5.000000;
        -: 7582:p = -2.7109920616438573243e-11;
        -: 7583:p = -2.5556418169965252055e-10 + p * w;
        -: 7584:p = 1.5076572693500548083e-09 + p * w;
        -: 7585:p = -3.7894654401267369937e-09 + p * w;
        -: 7586:p = 7.6157012080783393804e-09 + p * w;
        -: 7587:p = -1.4960026627149240478e-08 + p * w;
        -: 7588:p = 2.9147953450901080826e-08 + p * w;
        -: 7589:p = -6.7711997758452339498e-08 + p * w;
        -: 7590:p = 2.2900482228026654717e-07 + p * w;
        -: 7591:p = -9.9298272942317002539e-07 + p * w;
        -: 7592:p = 4.5260625972231537039e-06 + p * w;
        -: 7593:p = -1.9681778105531670567e-05 + p * w;
        -: 7594:p = 7.5995277030017761139e-05 + p * w;
        -: 7595:p = -0.00021503011930044477347 + p * w;
        -: 7596:p = -0.00013871931833623122026 + p * w;
        -: 7597:p = 1.0103004648645343977 + p * w;
        -: 7598:p = 4.8499064014085844221 + p * w;
        -: 7599:}
        -: 7600:return p * x;
        -: 7601:}
        -: 7602:
        -: 7603:double standard_deviation(std::vector<double>::iterator first, std::vector<double>::iterator last) {
        -: 7604:auto m = Catch::Benchmark::Detail::mean(first, last);
        -: 7605:double variance = std::accumulate(first, last, 0., [m](double a, double b) {
        -: 7606:double diff = b - m;
        -: 7607:return a + diff * diff;
        -: 7608:}) / (last - first);
        -: 7609:return std::sqrt(variance);
        -: 7610:}
        -: 7611:
        -: 7612:}
        -: 7613:
        -: 7614:namespace Catch {
        -: 7615:namespace Benchmark {
        -: 7616:namespace Detail {
        -: 7617:
        -: 7618:double weighted_average_quantile(int k, int q, std::vector<double>::iterator first, std::vector<double>::iterator last) {
        -: 7619:auto count = last - first;
        -: 7620:double idx = (count - 1) * k / static_cast<double>(q);
        -: 7621:int j = static_cast<int>(idx);
        -: 7622:double g = idx - j;
        -: 7623:std::nth_element(first, first + j, last);
        -: 7624:auto xj = first[j];
        -: 7625:if (g == 0) return xj;
        -: 7626:
        -: 7627:auto xj1 = *std::min_element(first + (j + 1), last);
        -: 7628:return xj + g * (xj1 - xj);
        -: 7629:}
        -: 7630:
        -: 7631:double erfc_inv(double x) {
        -: 7632:return erf_inv(1.0 - x);
        -: 7633:}
        -: 7634:
        -: 7635:double normal_quantile(double p) {
        -: 7636:static const double ROOT_TWO = std::sqrt(2.0);
        -: 7637:
        -: 7638:double result = 0.0;
        -: 7639:assert(p >= 0 && p <= 1);
        -: 7640:if (p < 0 || p > 1) {
        -: 7641:return result;
        -: 7642:}
        -: 7643:
        -: 7644:result = -erfc_inv(2.0 * p);
        -: 7645:// result *= normal distribution standard deviation (1.0) * sqrt(2)
        -: 7646:result *= /*sd * */ ROOT_TWO;
        -: 7647:// result += normal disttribution mean (0)
        -: 7648:return result;
        -: 7649:}
        -: 7650:
        -: 7651:double outlier_variance(Estimate<double> mean, Estimate<double> stddev, int n) {
        -: 7652:double sb = stddev.point;
        -: 7653:double mn = mean.point / n;
        -: 7654:double mg_min = mn / 2.;
        -: 7655:double sg = std::min(mg_min / 4., sb / std::sqrt(n));
        -: 7656:double sg2 = sg * sg;
        -: 7657:double sb2 = sb * sb;
        -: 7658:
        -: 7659:auto c_max = [n, mn, sb2, sg2](double x) -> double {
        -: 7660:double k = mn - x;
        -: 7661:double d = k * k;
        -: 7662:double nd = n * d;
        -: 7663:double k0 = -n * nd;
        -: 7664:double k1 = sb2 - n * sg2 + nd;
        -: 7665:double det = k1 * k1 - 4 * sg2 * k0;
        -: 7666:return (int)(-2. * k0 / (k1 + std::sqrt(det)));
        -: 7667:};
        -: 7668:
        -: 7669:auto var_out = [n, sb2, sg2](double c) {
        -: 7670:double nc = n - c;
        -: 7671:return (nc / n) * (sb2 - nc * sg2);
        -: 7672:};
        -: 7673:
        -: 7674:return std::min(var_out(1), var_out(std::min(c_max(0.), c_max(mg_min)))) / sb2;
        -: 7675:}
        -: 7676:
        -: 7677:bootstrap_analysis analyse_samples(double confidence_level, int n_resamples, std::vector<double>::iterator first, std::vector<double>::iterator last) {
        -: 7678:CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
        -: 7679:static std::random_device entropy;
        -: 7680:CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
        -: 7681:
        -: 7682:auto n = static_cast<int>(last - first); // seriously, one can't use integral types without hell in C++
        -: 7683:
        -: 7684:auto mean = &Detail::mean<std::vector<double>::iterator>;
        -: 7685:auto stddev = &standard_deviation;
        -: 7686:
        -: 7687:#if defined(CATCH_CONFIG_USE_ASYNC)
        -: 7688:auto Estimate = [=](double(*f)(std::vector<double>::iterator, std::vector<double>::iterator)) {
        -: 7689:auto seed = entropy();
        -: 7690:return std::async(std::launch::async, [=] {
        -: 7691:std::mt19937 rng(seed);
        -: 7692:auto resampled = resample(rng, n_resamples, first, last, f);
        -: 7693:return bootstrap(confidence_level, first, last, resampled, f);
        -: 7694:});
        -: 7695:};
        -: 7696:
        -: 7697:auto mean_future = Estimate(mean);
        -: 7698:auto stddev_future = Estimate(stddev);
        -: 7699:
        -: 7700:auto mean_estimate = mean_future.get();
        -: 7701:auto stddev_estimate = stddev_future.get();
        -: 7702:#else
        -: 7703:auto Estimate = [=](double(*f)(std::vector<double>::iterator, std::vector<double>::iterator)) {
        -: 7704:auto seed = entropy();
        -: 7705:std::mt19937 rng(seed);
        -: 7706:auto resampled = resample(rng, n_resamples, first, last, f);
        -: 7707:return bootstrap(confidence_level, first, last, resampled, f);
        -: 7708:};
        -: 7709:
        -: 7710:auto mean_estimate = Estimate(mean);
        -: 7711:auto stddev_estimate = Estimate(stddev);
        -: 7712:#endif // CATCH_USE_ASYNC
        -: 7713:
        -: 7714:double outlier_variance = Detail::outlier_variance(mean_estimate, stddev_estimate, n);
        -: 7715:
        -: 7716:return { mean_estimate, stddev_estimate, outlier_variance };
        -: 7717:}
        -: 7718:} // namespace Detail
        -: 7719:} // namespace Benchmark
        -: 7720:} // namespace Catch
        -: 7721:
        -: 7722:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -: 7723:// end catch_stats.cpp
        -: 7724:// start catch_approx.cpp
        -: 7725:
        -: 7726:#include <cmath>
        -: 7727:#include <limits>
        -: 7728:
        -: 7729:namespace {
        -: 7730:
        -: 7731:// Performs equivalent check of std::fabs(lhs - rhs) <= margin
        -: 7732:// But without the subtraction to allow for INFINITY in comparison
function _ZN12_GLOBAL__N_116marginComparisonEddd called 0 returned 0% blocks executed 0%
    #####: 7733:bool marginComparison(double lhs, double rhs, double margin) {
    #####: 7734:return (lhs + margin >= rhs) && (rhs + margin >= lhs);
    %%%%%: 7734-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 7734-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 7734-block  2
    %%%%%: 7734-block  3
    %%%%%: 7734-block  4
        -: 7735:}
        -: 7736:
        -: 7737:}
        -: 7738:
        -: 7739:namespace Catch {
        -: 7740:namespace Detail {
        -: 7741:
function _ZN5Catch6Detail6ApproxC2Ed called 0 returned 0% blocks executed 0%
    #####: 7742:Approx::Approx ( double value )
    #####: 7743::   m_epsilon( std::numeric_limits<float>::epsilon()*100 ),
    %%%%%: 7743-block  0
call    0 never executed
        -: 7744:m_margin( 0.0 ),
        -: 7745:m_scale( 0.0 ),
    #####: 7746:m_value( value )
    #####: 7747:{}
        -: 7748:
function _ZN5Catch6Detail6Approx6customEv called 0 returned 0% blocks executed 0%
    #####: 7749:Approx Approx::custom() {
    #####: 7750:return Approx( 0 );
    %%%%%: 7750-block  0
call    0 never executed
        -: 7751:}
        -: 7752:
function _ZNK5Catch6Detail6ApproxngEv called 0 returned 0% blocks executed 0%
    #####: 7753:Approx Approx::operator-() const {
    #####: 7754:auto temp(*this);
    #####: 7755:temp.m_value = -temp.m_value;
    #####: 7756:return temp;
    %%%%%: 7756-block  0
        -: 7757:}
        -: 7758:
function _ZNK5Catch6Detail6Approx8toStringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 7759:std::string Approx::toString() const {
    #####: 7760:ReusableStringStream rss;
    %%%%%: 7760-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7760-block  1
call    3 never executed
    $$$$$: 7760-block  2
call    4 never executed
    #####: 7761:rss << "Approx( " << ::Catch::Detail::stringify( m_value ) << " )";
    %%%%%: 7761-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7761-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 7761-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 7761-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 7761-block  4
call   12 never executed
    $$$$$: 7761-block  5
call   13 never executed
    $$$$$: 7761-block  6
    #####: 7762:return rss.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7762-block  0
    %%%%%: 7762-block  1
        -: 7763:}
        -: 7764:
function _ZNK5Catch6Detail6Approx22equalityComparisonImplEd called 0 returned 0% blocks executed 0%
    #####: 7765:bool Approx::equalityComparisonImpl(const double other) const {
        -: 7766:// First try with fixed margin, then compute margin based on epsilon, scale and Approx's value
        -: 7767:// Thanks to Richard Harris for his help refining the scaled margin value
    #####: 7768:return marginComparison(m_value, other, m_margin)
    %%%%%: 7768-block  0
call    0 never executed
    #####: 7769:|| marginComparison(m_value, other, m_epsilon * (m_scale + std::fabs(std::isinf(m_value)? 0 : m_value)));
branch  0 never executed
branch  1 never executed
    %%%%%: 7769-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 7769-block  1
    %%%%%: 7769-block  2
    %%%%%: 7769-block  3
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 7769-block  4
    %%%%%: 7769-block  5
    %%%%%: 7769-block  6
        -: 7770:}
        -: 7771:
function _ZN5Catch6Detail6Approx9setMarginEd called 0 returned 0% blocks executed 0%
    #####: 7772:void Approx::setMargin(double newMargin) {
    #####: 7773:CATCH_ENFORCE(newMargin >= 0,
    %%%%%: 7773-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 7773-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 7773-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 7773-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 7773-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 7773-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 7773-block  6
call   18 never executed
    $$$$$: 7773-block  7
call   19 never executed
    $$$$$: 7773-block  8
    $$$$$: 7773-block  9
    $$$$$: 7773-block 10
call   20 never executed
        -: 7774:"Invalid Approx::margin: " << newMargin << '.'
        -: 7775:<< " Approx::Margin has to be non-negative.");
    #####: 7776:m_margin = newMargin;
    #####: 7777:}
    %%%%%: 7777-block  0
        -: 7778:
function _ZN5Catch6Detail6Approx10setEpsilonEd called 0 returned 0% blocks executed 0%
    #####: 7779:void Approx::setEpsilon(double newEpsilon) {
    #####: 7780:CATCH_ENFORCE(newEpsilon >= 0 && newEpsilon <= 1.0,
    %%%%%: 7780-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 7780-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 7780-block  2
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 7780-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 7780-block  4
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 7780-block  5
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 7780-block  6
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 7780-block  7
call   20 never executed
    $$$$$: 7780-block  8
call   21 never executed
    $$$$$: 7780-block  9
    $$$$$: 7780-block 10
    $$$$$: 7780-block 11
call   22 never executed
        -: 7781:"Invalid Approx::epsilon: " << newEpsilon << '.'
        -: 7782:<< " Approx::epsilon has to be in [0, 1]");
    #####: 7783:m_epsilon = newEpsilon;
    #####: 7784:}
    %%%%%: 7784-block  0
        -: 7785:
        -: 7786:} // end namespace Detail
        -: 7787:
        -: 7788:namespace literals {
function _ZN5Catch8literalsli2_aEe called 0 returned 0% blocks executed 0%
    #####: 7789:Detail::Approx operator "" _a(long double val) {
    #####: 7790:return Detail::Approx(val);
    %%%%%: 7790-block  0
call    0 never executed
        -: 7791:}
function _ZN5Catch8literalsli2_aEy called 0 returned 0% blocks executed 0%
    #####: 7792:Detail::Approx operator "" _a(unsigned long long val) {
    #####: 7793:return Detail::Approx(val);
    %%%%%: 7793-block  0
call    0 never executed
        -: 7794:}
        -: 7795:} // end namespace literals
        -: 7796:
function _ZN5Catch11StringMakerINS_6Detail6ApproxEvE7convertB5cxx11ERKS2_ called 0 returned 0% blocks executed 0%
    #####: 7797:std::string StringMaker<Catch::Detail::Approx>::convert(Catch::Detail::Approx const& value) {
    #####: 7798:return value.toString();
    %%%%%: 7798-block  0
call    0 never executed
        -: 7799:}
        -: 7800:
        -: 7801:} // end namespace Catch
        -: 7802:// end catch_approx.cpp
        -: 7803:// start catch_assertionhandler.cpp
        -: 7804:
        -: 7805:// start catch_debugger.h
        -: 7806:
        -: 7807:namespace Catch {
        -: 7808:bool isDebuggerActive();
        -: 7809:}
        -: 7810:
        -: 7811:#ifdef CATCH_PLATFORM_MAC
        -: 7812:
        -: 7813:#define CATCH_TRAP() __asm__("int $3\n" : : ) /* NOLINT */
        -: 7814:
        -: 7815:#elif defined(CATCH_PLATFORM_LINUX)
        -: 7816:// If we can use inline assembler, do it because this allows us to break
        -: 7817:// directly at the location of the failing check instead of breaking inside
        -: 7818:// raise() called from it, i.e. one stack frame below.
        -: 7819:#if defined(__GNUC__) && (defined(__i386) || defined(__x86_64))
        -: 7820:#define CATCH_TRAP() asm volatile ("int $3") /* NOLINT */
        -: 7821:#else // Fall back to the generic way.
        -: 7822:#include <signal.h>
        -: 7823:
        -: 7824:#define CATCH_TRAP() raise(SIGTRAP)
        -: 7825:#endif
        -: 7826:#elif defined(_MSC_VER)
        -: 7827:#define CATCH_TRAP() __debugbreak()
        -: 7828:#elif defined(__MINGW32__)
        -: 7829:extern "C" __declspec(dllimport) void __stdcall DebugBreak();
        -: 7830:#define CATCH_TRAP() DebugBreak()
        -: 7831:#endif
        -: 7832:
        -: 7833:#ifdef CATCH_TRAP
        -: 7834:#define CATCH_BREAK_INTO_DEBUGGER() []{ if( Catch::isDebuggerActive() ) { CATCH_TRAP(); } }()
        -: 7835:#else
        -: 7836:#define CATCH_BREAK_INTO_DEBUGGER() []{}()
        -: 7837:#endif
        -: 7838:
        -: 7839:// end catch_debugger.h
        -: 7840:// start catch_run_context.h
        -: 7841:
        -: 7842:// start catch_fatal_condition.h
        -: 7843:
        -: 7844:// start catch_windows_h_proxy.h
        -: 7845:
        -: 7846:
        -: 7847:#if defined(CATCH_PLATFORM_WINDOWS)
        -: 7848:
        -: 7849:#if !defined(NOMINMAX) && !defined(CATCH_CONFIG_NO_NOMINMAX)
        -: 7850:#  define CATCH_DEFINED_NOMINMAX
        -: 7851:#  define NOMINMAX
        -: 7852:#endif
        -: 7853:#if !defined(WIN32_LEAN_AND_MEAN) && !defined(CATCH_CONFIG_NO_WIN32_LEAN_AND_MEAN)
        -: 7854:#  define CATCH_DEFINED_WIN32_LEAN_AND_MEAN
        -: 7855:#  define WIN32_LEAN_AND_MEAN
        -: 7856:#endif
        -: 7857:
        -: 7858:#ifdef __AFXDLL
        -: 7859:#include <AfxWin.h>
        -: 7860:#else
        -: 7861:#include <windows.h>
        -: 7862:#endif
        -: 7863:
        -: 7864:#ifdef CATCH_DEFINED_NOMINMAX
        -: 7865:#  undef NOMINMAX
        -: 7866:#endif
        -: 7867:#ifdef CATCH_DEFINED_WIN32_LEAN_AND_MEAN
        -: 7868:#  undef WIN32_LEAN_AND_MEAN
        -: 7869:#endif
        -: 7870:
        -: 7871:#endif // defined(CATCH_PLATFORM_WINDOWS)
        -: 7872:
        -: 7873:// end catch_windows_h_proxy.h
        -: 7874:#if defined( CATCH_CONFIG_WINDOWS_SEH )
        -: 7875:
        -: 7876:namespace Catch {
        -: 7877:
        -: 7878:struct FatalConditionHandler {
        -: 7879:
        -: 7880:static LONG CALLBACK handleVectoredException(PEXCEPTION_POINTERS ExceptionInfo);
        -: 7881:FatalConditionHandler();
        -: 7882:static void reset();
        -: 7883:~FatalConditionHandler();
        -: 7884:
        -: 7885:private:
        -: 7886:static bool isSet;
        -: 7887:static ULONG guaranteeSize;
        -: 7888:static PVOID exceptionHandlerHandle;
        -: 7889:};
        -: 7890:
        -: 7891:} // namespace Catch
        -: 7892:
        -: 7893:#elif defined ( CATCH_CONFIG_POSIX_SIGNALS )
        -: 7894:
        -: 7895:#include <signal.h>
        -: 7896:
        -: 7897:namespace Catch {
        -: 7898:
        -: 7899:struct FatalConditionHandler {
        -: 7900:
        -: 7901:static bool isSet;
        -: 7902:static struct sigaction oldSigActions[];
        -: 7903:static stack_t oldSigStack;
        -: 7904:static char altStackMem[];
        -: 7905:
        -: 7906:static void handleSignal( int sig );
        -: 7907:
        -: 7908:FatalConditionHandler();
        -: 7909:~FatalConditionHandler();
        -: 7910:static void reset();
        -: 7911:};
        -: 7912:
        -: 7913:} // namespace Catch
        -: 7914:
        -: 7915:#else
        -: 7916:
        -: 7917:namespace Catch {
        -: 7918:struct FatalConditionHandler {
        -: 7919:void reset();
        -: 7920:};
        -: 7921:}
        -: 7922:
        -: 7923:#endif
        -: 7924:
        -: 7925:// end catch_fatal_condition.h
        -: 7926:#include <string>
        -: 7927:
        -: 7928:namespace Catch {
        -: 7929:
        -: 7930:struct IMutableContext;
        -: 7931:
        -: 7932:///////////////////////////////////////////////////////////////////////////
        -: 7933:
        -: 7934:class RunContext : public IResultCapture, public IRunner {
        -: 7935:
        -: 7936:public:
        -: 7937:RunContext( RunContext const& ) = delete;
        -: 7938:RunContext& operator =( RunContext const& ) = delete;
        -: 7939:
        -: 7940:explicit RunContext( IConfigPtr const& _config, IStreamingReporterPtr&& reporter );
        -: 7941:
        -: 7942:~RunContext() override;
        -: 7943:
        -: 7944:void testGroupStarting( std::string const& testSpec, std::size_t groupIndex, std::size_t groupsCount );
        -: 7945:void testGroupEnded( std::string const& testSpec, Totals const& totals, std::size_t groupIndex, std::size_t groupsCount );
        -: 7946:
        -: 7947:Totals runTest(TestCase const& testCase);
        -: 7948:
        -: 7949:IConfigPtr config() const;
        -: 7950:IStreamingReporter& reporter() const;
        -: 7951:
        -: 7952:public: // IResultCapture
        -: 7953:
        -: 7954:// Assertion handlers
        -: 7955:void handleExpr
        -: 7956:(   AssertionInfo const& info,
        -: 7957:ITransientExpression const& expr,
        -: 7958:AssertionReaction& reaction ) override;
        -: 7959:void handleMessage
        -: 7960:(   AssertionInfo const& info,
        -: 7961:ResultWas::OfType resultType,
        -: 7962:StringRef const& message,
        -: 7963:AssertionReaction& reaction ) override;
        -: 7964:void handleUnexpectedExceptionNotThrown
        -: 7965:(   AssertionInfo const& info,
        -: 7966:AssertionReaction& reaction ) override;
        -: 7967:void handleUnexpectedInflightException
        -: 7968:(   AssertionInfo const& info,
        -: 7969:std::string const& message,
        -: 7970:AssertionReaction& reaction ) override;
        -: 7971:void handleIncomplete
        -: 7972:(   AssertionInfo const& info ) override;
        -: 7973:void handleNonExpr
        -: 7974:(   AssertionInfo const &info,
        -: 7975:ResultWas::OfType resultType,
        -: 7976:AssertionReaction &reaction ) override;
        -: 7977:
        -: 7978:bool sectionStarted( SectionInfo const& sectionInfo, Counts& assertions ) override;
        -: 7979:
        -: 7980:void sectionEnded( SectionEndInfo const& endInfo ) override;
        -: 7981:void sectionEndedEarly( SectionEndInfo const& endInfo ) override;
        -: 7982:
        -: 7983:auto acquireGeneratorTracker( SourceLineInfo const& lineInfo ) -> IGeneratorTracker& override;
        -: 7984:
        -: 7985:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -: 7986:void benchmarkPreparing( std::string const& name ) override;
        -: 7987:void benchmarkStarting( BenchmarkInfo const& info ) override;
        -: 7988:void benchmarkEnded( BenchmarkStats<> const& stats ) override;
        -: 7989:void benchmarkFailed( std::string const& error ) override;
        -: 7990:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -: 7991:
        -: 7992:void pushScopedMessage( MessageInfo const& message ) override;
        -: 7993:void popScopedMessage( MessageInfo const& message ) override;
        -: 7994:
        -: 7995:void emplaceUnscopedMessage( MessageBuilder const& builder ) override;
        -: 7996:
        -: 7997:std::string getCurrentTestName() const override;
        -: 7998:
        -: 7999:const AssertionResult* getLastResult() const override;
        -: 8000:
        -: 8001:void exceptionEarlyReported() override;
        -: 8002:
        -: 8003:void handleFatalErrorCondition( StringRef message ) override;
        -: 8004:
        -: 8005:bool lastAssertionPassed() override;
        -: 8006:
        -: 8007:void assertionPassed() override;
        -: 8008:
        -: 8009:public:
        -: 8010:// !TBD We need to do this another way!
        -: 8011:bool aborting() const final;
        -: 8012:
        -: 8013:private:
        -: 8014:
        -: 8015:void runCurrentTest( std::string& redirectedCout, std::string& redirectedCerr );
        -: 8016:void invokeActiveTestCase();
        -: 8017:
        -: 8018:void resetAssertionInfo();
        -: 8019:bool testForMissingAssertions( Counts& assertions );
        -: 8020:
        -: 8021:void assertionEnded( AssertionResult const& result );
        -: 8022:void reportExpr
        -: 8023:(   AssertionInfo const &info,
        -: 8024:ResultWas::OfType resultType,
        -: 8025:ITransientExpression const *expr,
        -: 8026:bool negated );
        -: 8027:
        -: 8028:void populateReaction( AssertionReaction& reaction );
        -: 8029:
        -: 8030:private:
        -: 8031:
        -: 8032:void handleUnfinishedSections();
        -: 8033:
        -: 8034:TestRunInfo m_runInfo;
        -: 8035:IMutableContext& m_context;
        -: 8036:TestCase const* m_activeTestCase = nullptr;
        -: 8037:ITracker* m_testCaseTracker = nullptr;
        -: 8038:Option<AssertionResult> m_lastResult;
        -: 8039:
        -: 8040:IConfigPtr m_config;
        -: 8041:Totals m_totals;
        -: 8042:IStreamingReporterPtr m_reporter;
        -: 8043:std::vector<MessageInfo> m_messages;
        -: 8044:std::vector<ScopedMessage> m_messageScopes; /* Keeps owners of so-called unscoped messages. */
        -: 8045:AssertionInfo m_lastAssertionInfo;
        -: 8046:std::vector<SectionEndInfo> m_unfinishedSections;
        -: 8047:std::vector<ITracker*> m_activeSections;
        -: 8048:TrackerContext m_trackerContext;
        -: 8049:bool m_lastAssertionPassed = false;
        -: 8050:bool m_shouldReportUnexpected = true;
        -: 8051:bool m_includeSuccessfulResults;
        -: 8052:};
        -: 8053:
        -: 8054:void seedRng(IConfig const& config);
        -: 8055:unsigned int rngSeed();
        -: 8056:} // end namespace Catch
        -: 8057:
        -: 8058:// end catch_run_context.h
        -: 8059:namespace Catch {
        -: 8060:
        -: 8061:namespace {
function _ZN5Catch12_GLOBAL__N_1lsERSoRKNS_20ITransientExpressionE called 0 returned 0% blocks executed 0%
    #####: 8062:auto operator <<( std::ostream& os, ITransientExpression const& expr ) -> std::ostream& {
    #####: 8063:expr.streamReconstructedExpression( os );
    %%%%%: 8063-block  0
call    0 never executed
    #####: 8064:return os;
        -: 8065:}
        -: 8066:}
        -: 8067:
function _ZN5Catch14LazyExpressionC2Eb called 0 returned 0% blocks executed 0%
    #####: 8068:LazyExpression::LazyExpression( bool isNegated )
    #####: 8069::   m_isNegated( isNegated )
    #####: 8070:{}
        -: 8071:
function _ZN5Catch14LazyExpressionC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####: 8072:LazyExpression::LazyExpression( LazyExpression const& other ) : m_isNegated( other.m_isNegated ) {}
        -: 8073:
function _ZNK5Catch14LazyExpressioncvbEv called 0 returned 0% blocks executed 0%
    #####: 8074:LazyExpression::operator bool() const {
    #####: 8075:return m_transientExpression != nullptr;
    %%%%%: 8075-block  0
        -: 8076:}
        -: 8077:
function _ZN5CatchlsERSoRKNS_14LazyExpressionE called 0 returned 0% blocks executed 0%
    #####: 8078:auto operator << ( std::ostream& os, LazyExpression const& lazyExpr ) -> std::ostream& {
    #####: 8079:if( lazyExpr.m_isNegated )
    %%%%%: 8079-block  0
branch  0 never executed
branch  1 never executed
    #####: 8080:os << "!";
    %%%%%: 8080-block  0
call    0 never executed
        -: 8081:
    #####: 8082:if( lazyExpr ) {
    %%%%%: 8082-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8083:if( lazyExpr.m_isNegated && lazyExpr.m_transientExpression->isBinaryExpression() )
    %%%%%: 8083-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8083-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8083-block  2
    %%%%%: 8083-block  3
    %%%%%: 8083-block  4
branch  5 never executed
branch  6 never executed
    #####: 8084:os << "(" << *lazyExpr.m_transientExpression << ")";
    %%%%%: 8084-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 8085:else
    #####: 8086:os << *lazyExpr.m_transientExpression;
    %%%%%: 8086-block  0
call    0 never executed
        -: 8087:}
        -: 8088:else {
    #####: 8089:os << "{** error - unchecked empty expression requested **}";
    %%%%%: 8089-block  0
call    0 never executed
        -: 8090:}
    #####: 8091:return os;
    %%%%%: 8091-block  0
        -: 8092:}
        -: 8093:
function _ZN5Catch16AssertionHandlerC2ERKNS_9StringRefERKNS_14SourceLineInfoES1_NS_17ResultDisposition5FlagsE called 51 returned 100% blocks executed 86%
       51: 8094:AssertionHandler::AssertionHandler
        -: 8095:(   StringRef const& macroName,
        -: 8096:SourceLineInfo const& lineInfo,
        -: 8097:StringRef capturedExpression,
       51: 8098:ResultDisposition::Flags resultDisposition )
        -: 8099::   m_assertionInfo{ macroName, lineInfo, capturedExpression, resultDisposition },
       51: 8100:m_resultCapture( getResultCapture() )
       51: 8100-block  0
call    0 returned 51
call    1 returned 51
call    2 returned 51
call    3 returned 51
branch  4 taken 51 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 8100-block  1
call    6 never executed
       51: 8101:{}
       51: 8101-block  0
        -: 8102:
function _ZN5Catch16AssertionHandler10handleExprERKNS_20ITransientExpressionE called 51 returned 100% blocks executed 100%
       51: 8103:void AssertionHandler::handleExpr( ITransientExpression const& expr ) {
       51: 8104:m_resultCapture.handleExpr( m_assertionInfo, expr, m_reaction );
       51: 8104-block  0
call    0 returned 51
       51: 8105:}
function _ZN5Catch16AssertionHandler13handleMessageENS_9ResultWas6OfTypeERKNS_9StringRefE called 0 returned 0% blocks executed 0%
    #####: 8106:void AssertionHandler::handleMessage(ResultWas::OfType resultType, StringRef const& message) {
    #####: 8107:m_resultCapture.handleMessage( m_assertionInfo, resultType, message, m_reaction );
    %%%%%: 8107-block  0
call    0 never executed
    #####: 8108:}
        -: 8109:
function _ZNK5Catch16AssertionHandler11allowThrowsEv called 0 returned 0% blocks executed 0%
    #####: 8110:auto AssertionHandler::allowThrows() const -> bool {
    #####: 8111:return getCurrentContext().getConfig()->allowThrows();
    %%%%%: 8111-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 8112:}
        -: 8113:
function _ZN5Catch16AssertionHandler8completeEv called 51 returned 100% blocks executed 56%
       51: 8114:void AssertionHandler::complete() {
       51: 8115:setCompleted();
       51: 8115-block  0
call    0 returned 51
       51: 8116:if( m_reaction.shouldDebugBreak ) {
branch  0 taken 0 (fallthrough)
branch  1 taken 51
        -: 8117:
        -: 8118:// If you find your debugger stopping you here then go one level up on the
        -: 8119:// call-stack for the code that caused it (typically a failed assertion)
        -: 8120:
        -: 8121:// (To go back to the test and change execution, jump over the throw, next)
    #####: 8122:CATCH_BREAK_INTO_DEBUGGER();
    %%%%%: 8122-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8122-block  1
        -: 8123:}
       51: 8124:if (m_reaction.shouldThrow) {
       51: 8124-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 51
        -: 8125:#if !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)
    #####: 8126:throw Catch::TestFailureException();
    %%%%%: 8126-block  0
call    0 never executed
call    1 never executed
        -: 8127:#else
        -: 8128:CATCH_ERROR( "Test failure requires aborting test!" );
        -: 8129:#endif
        -: 8130:}
       51: 8131:}
       51: 8131-block  0
function _ZN5Catch16AssertionHandler12setCompletedEv called 51 returned 100% blocks executed 100%
       51: 8132:void AssertionHandler::setCompleted() {
       51: 8133:m_completed = true;
       51: 8134:}
        -: 8135:
function _ZN5Catch16AssertionHandler33handleUnexpectedInflightExceptionEv called 0 returned 0% blocks executed 0%
    #####: 8136:void AssertionHandler::handleUnexpectedInflightException() {
    #####: 8137:m_resultCapture.handleUnexpectedInflightException( m_assertionInfo, Catch::translateActiveException(), m_reaction );
    %%%%%: 8137-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8137-block  1
call    4 never executed
    $$$$$: 8137-block  2
call    5 never executed
    #####: 8138:}
        -: 8139:
function _ZN5Catch16AssertionHandler31handleExceptionThrownAsExpectedEv called 0 returned 0% blocks executed 0%
    #####: 8140:void AssertionHandler::handleExceptionThrownAsExpected() {
    #####: 8141:m_resultCapture.handleNonExpr(m_assertionInfo, ResultWas::Ok, m_reaction);
    %%%%%: 8141-block  0
call    0 never executed
    #####: 8142:}
function _ZN5Catch16AssertionHandler34handleExceptionNotThrownAsExpectedEv called 0 returned 0% blocks executed 0%
    #####: 8143:void AssertionHandler::handleExceptionNotThrownAsExpected() {
    #####: 8144:m_resultCapture.handleNonExpr(m_assertionInfo, ResultWas::Ok, m_reaction);
    %%%%%: 8144-block  0
call    0 never executed
    #####: 8145:}
        -: 8146:
function _ZN5Catch16AssertionHandler34handleUnexpectedExceptionNotThrownEv called 0 returned 0% blocks executed 0%
    #####: 8147:void AssertionHandler::handleUnexpectedExceptionNotThrown() {
    #####: 8148:m_resultCapture.handleUnexpectedExceptionNotThrown( m_assertionInfo, m_reaction );
    %%%%%: 8148-block  0
call    0 never executed
    #####: 8149:}
        -: 8150:
function _ZN5Catch16AssertionHandler25handleThrowingCallSkippedEv called 0 returned 0% blocks executed 0%
    #####: 8151:void AssertionHandler::handleThrowingCallSkipped() {
    #####: 8152:m_resultCapture.handleNonExpr(m_assertionInfo, ResultWas::Ok, m_reaction);
    %%%%%: 8152-block  0
call    0 never executed
    #####: 8153:}
        -: 8154:
        -: 8155:// This is the overload that takes a string and infers the Equals matcher from it
        -: 8156:// The more general overload, that takes any string matcher, is in catch_capture_matchers.cpp
function _ZN5Catch24handleExceptionMatchExprERNS_16AssertionHandlerERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9StringRefE called 0 returned 0% blocks executed 0%
    #####: 8157:void handleExceptionMatchExpr( AssertionHandler& handler, std::string const& str, StringRef const& matcherString  ) {
    #####: 8158:handleExceptionMatchExpr( handler, Matchers::Equals( str ), matcherString );
    %%%%%: 8158-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8158-block  1
call    4 never executed
    $$$$$: 8158-block  2
call    5 never executed
    #####: 8159:}
        -: 8160:
        -: 8161:} // namespace Catch
        -: 8162:// end catch_assertionhandler.cpp
        -: 8163:// start catch_assertionresult.cpp
        -: 8164:
        -: 8165:namespace Catch {
function _ZN5Catch19AssertionResultDataC2ENS_9ResultWas6OfTypeERKNS_14LazyExpressionE called 0 returned 0% blocks executed 0%
    #####: 8166:AssertionResultData::AssertionResultData(ResultWas::OfType _resultType, LazyExpression const & _lazyExpression):
        -: 8167:lazyExpression(_lazyExpression),
    #####: 8168:resultType(_resultType) {}
    %%%%%: 8168-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 8169:
function _ZNK5Catch19AssertionResultData21reconstructExpressionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 8170:std::string AssertionResultData::reconstructExpression() const {
        -: 8171:
    #####: 8172:if( reconstructedExpression.empty() ) {
    %%%%%: 8172-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8173:if( lazyExpression ) {
    %%%%%: 8173-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8174:ReusableStringStream rss;
    %%%%%: 8174-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 8174-block  1
call    3 never executed
    #####: 8175:rss << lazyExpression;
    %%%%%: 8175-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8176:reconstructedExpression = rss.str();
    %%%%%: 8176-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8176-block  1
call    3 never executed
call    4 never executed
call    5 never executed
        -: 8177:}
        -: 8178:}
    #####: 8179:return reconstructedExpression;
    %%%%%: 8179-block  0
call    0 never executed
        -: 8180:}
        -: 8181:
function _ZN5Catch15AssertionResultC2ERKNS_13AssertionInfoERKNS_19AssertionResultDataE called 0 returned 0% blocks executed 0%
    #####: 8182:AssertionResult::AssertionResult( AssertionInfo const& info, AssertionResultData const& data )
        -: 8183::   m_info( info ),
    #####: 8184:m_resultData( data )
    %%%%%: 8184-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 8184-block  1
call    4 never executed
    #####: 8185:{}
    %%%%%: 8185-block  0
        -: 8186:
        -: 8187:// Result was a success
function _ZNK5Catch15AssertionResult9succeededEv called 0 returned 0% blocks executed 0%
    #####: 8188:bool AssertionResult::succeeded() const {
    #####: 8189:return Catch::isOk( m_resultData.resultType );
    %%%%%: 8189-block  0
call    0 never executed
        -: 8190:}
        -: 8191:
        -: 8192:// Result was a success, or failure is suppressed
function _ZNK5Catch15AssertionResult4isOkEv called 0 returned 0% blocks executed 0%
    #####: 8193:bool AssertionResult::isOk() const {
    #####: 8194:return Catch::isOk( m_resultData.resultType ) || shouldSuppressFailure( m_info.resultDisposition );
    %%%%%: 8194-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8194-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8194-block  2
    %%%%%: 8194-block  3
    %%%%%: 8194-block  4
        -: 8195:}
        -: 8196:
function _ZNK5Catch15AssertionResult13getResultTypeEv called 0 returned 0% blocks executed 0%
    #####: 8197:ResultWas::OfType AssertionResult::getResultType() const {
    #####: 8198:return m_resultData.resultType;
    %%%%%: 8198-block  0
        -: 8199:}
        -: 8200:
function _ZNK5Catch15AssertionResult13hasExpressionEv called 0 returned 0% blocks executed 0%
    #####: 8201:bool AssertionResult::hasExpression() const {
    #####: 8202:return !m_info.capturedExpression.empty();
    %%%%%: 8202-block  0
call    0 never executed
        -: 8203:}
        -: 8204:
function _ZNK5Catch15AssertionResult10hasMessageEv called 0 returned 0% blocks executed 0%
    #####: 8205:bool AssertionResult::hasMessage() const {
    #####: 8206:return !m_resultData.message.empty();
    %%%%%: 8206-block  0
call    0 never executed
        -: 8207:}
        -: 8208:
function _ZNK5Catch15AssertionResult13getExpressionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 8209:std::string AssertionResult::getExpression() const {
        -: 8210:// Possibly overallocating by 3 characters should be basically free
    #####: 8211:std::string expr; expr.reserve(m_info.capturedExpression.size() + 3);
    %%%%%: 8211-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8212:if (isFalseTest(m_info.resultDisposition)) {
    %%%%%: 8212-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8213:expr += "!(";
    %%%%%: 8213-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8214:}
    #####: 8215:expr += m_info.capturedExpression;
    %%%%%: 8215-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8216:if (isFalseTest(m_info.resultDisposition)) {
    %%%%%: 8216-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8217:expr += ')';
    %%%%%: 8217-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8218:}
    #####: 8219:return expr;
    %%%%%: 8219-block  0
    %%%%%: 8219-block  1
        -: 8220:}
        -: 8221:
function _ZNK5Catch15AssertionResult20getExpressionInMacroB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 8222:std::string AssertionResult::getExpressionInMacro() const {
    #####: 8223:std::string expr;
    %%%%%: 8223-block  0
call    0 never executed
    #####: 8224:if( m_info.macroName.empty() )
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8225:expr = static_cast<std::string>(m_info.capturedExpression);
    %%%%%: 8225-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8225-block  1
call    3 never executed
call    4 never executed
        -: 8226:else {
    #####: 8227:expr.reserve( m_info.macroName.size() + m_info.capturedExpression.size() + 4 );
    %%%%%: 8227-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8228:expr += m_info.macroName;
    %%%%%: 8228-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8229:expr += "( ";
    %%%%%: 8229-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8230:expr += m_info.capturedExpression;
    %%%%%: 8230-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8231:expr += " )";
    %%%%%: 8231-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8232:}
    #####: 8233:return expr;
    %%%%%: 8233-block  0
    %%%%%: 8233-block  1
        -: 8234:}
        -: 8235:
function _ZNK5Catch15AssertionResult21hasExpandedExpressionEv called 0 returned 0% blocks executed 0%
    #####: 8236:bool AssertionResult::hasExpandedExpression() const {
    #####: 8237:return hasExpression() && getExpandedExpression() != getExpression();
    %%%%%: 8237-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8237-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8237-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8237-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 8237-block  4
    %%%%%: 8237-block  5
    %%%%%: 8237-block  6
branch 12 never executed
branch 13 never executed
    %%%%%: 8237-block  7
call   14 never executed
    %%%%%: 8237-block  8
branch 15 never executed
branch 16 never executed
    %%%%%: 8237-block  9
call   17 never executed
    %%%%%: 8237-block 10
    %%%%%: 8237-block 11
    $$$$$: 8237-block 12
branch 18 never executed
branch 19 never executed
    $$$$$: 8237-block 13
call   20 never executed
    $$$$$: 8237-block 14
    $$$$$: 8237-block 15
branch 21 never executed
branch 22 never executed
    $$$$$: 8237-block 16
call   23 never executed
        -: 8238:}
        -: 8239:
function _ZNK5Catch15AssertionResult21getExpandedExpressionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 8240:std::string AssertionResult::getExpandedExpression() const {
    #####: 8241:std::string expr = m_resultData.reconstructExpression();
    %%%%%: 8241-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8241-block  1
call    3 never executed
    $$$$$: 8241-block  2
call    4 never executed
    #####: 8242:return expr.empty()
    %%%%%: 8242-block  0
call    0 never executed
        -: 8243:? getExpression()
    #####: 8244:: expr;
branch  0 never executed
branch  1 never executed
    %%%%%: 8244-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8244-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 8244-block  2
    %%%%%: 8244-block  3
        -: 8245:}
        -: 8246:
function _ZNK5Catch15AssertionResult10getMessageB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 8247:std::string AssertionResult::getMessage() const {
    #####: 8248:return m_resultData.message;
    %%%%%: 8248-block  0
call    0 never executed
        -: 8249:}
function _ZNK5Catch15AssertionResult13getSourceInfoEv called 0 returned 0% blocks executed 0%
    #####: 8250:SourceLineInfo AssertionResult::getSourceInfo() const {
    #####: 8251:return m_info.lineInfo;
    %%%%%: 8251-block  0
        -: 8252:}
        -: 8253:
function _ZNK5Catch15AssertionResult16getTestMacroNameEv called 0 returned 0% blocks executed 0%
    #####: 8254:StringRef AssertionResult::getTestMacroName() const {
    #####: 8255:return m_info.macroName;
    %%%%%: 8255-block  0
call    0 never executed
        -: 8256:}
        -: 8257:
        -: 8258:} // end namespace Catch
        -: 8259:// end catch_assertionresult.cpp
        -: 8260:// start catch_capture_matchers.cpp
        -: 8261:
        -: 8262:namespace Catch {
        -: 8263:
        -: 8264:using StringMatcher = Matchers::Impl::MatcherBase<std::string>;
        -: 8265:
        -: 8266:// This is the general overload that takes a any string matcher
        -: 8267:// There is another overload, in catch_assertionhandler.h/.cpp, that only takes a string and infers
        -: 8268:// the Equals matcher (so the header does not mention matchers)
function _ZN5Catch24handleExceptionMatchExprERNS_16AssertionHandlerERKNS_8Matchers4Impl11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERKNS_9StringRefE called 0 returned 0% blocks executed 0%
    #####: 8269:void handleExceptionMatchExpr( AssertionHandler& handler, StringMatcher const& matcher, StringRef const& matcherString  ) {
    #####: 8270:std::string exceptionMessage = Catch::translateActiveException();
    %%%%%: 8270-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 8270-block  1
call    4 never executed
    #####: 8271:MatchExpr<std::string, StringMatcher const&> expr( exceptionMessage, matcher, matcherString );
    %%%%%: 8271-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8271-block  1
call    3 never executed
    $$$$$: 8271-block  2
call    4 never executed
    #####: 8272:handler.handleExpr( expr );
    %%%%%: 8272-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8273:}
        -: 8274:
        -: 8275:} // namespace Catch
        -: 8276:// end catch_capture_matchers.cpp
        -: 8277:// start catch_commandline.cpp
        -: 8278:
        -: 8279:// start catch_commandline.h
        -: 8280:
        -: 8281:// start catch_clara.h
        -: 8282:
        -: 8283:// Use Catch's value for console width (store Clara's off to the side, if present)
        -: 8284:#ifdef CLARA_CONFIG_CONSOLE_WIDTH
        -: 8285:#define CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH
        -: 8286:#undef CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH
        -: 8287:#endif
        -: 8288:#define CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH CATCH_CONFIG_CONSOLE_WIDTH-1
        -: 8289:
        -: 8290:#ifdef __clang__
        -: 8291:#pragma clang diagnostic push
        -: 8292:#pragma clang diagnostic ignored "-Wweak-vtables"
        -: 8293:#pragma clang diagnostic ignored "-Wexit-time-destructors"
        -: 8294:#pragma clang diagnostic ignored "-Wshadow"
        -: 8295:#endif
        -: 8296:
        -: 8297:// start clara.hpp
        -: 8298:// Copyright 2017 Two Blue Cubes Ltd. All rights reserved.
        -: 8299://
        -: 8300:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -: 8301:// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -: 8302://
        -: 8303:// See https://github.com/philsquared/Clara for more details
        -: 8304:
        -: 8305:// Clara v1.1.5
        -: 8306:
        -: 8307:
        -: 8308:#ifndef CATCH_CLARA_CONFIG_CONSOLE_WIDTH
        -: 8309:#define CATCH_CLARA_CONFIG_CONSOLE_WIDTH 80
        -: 8310:#endif
        -: 8311:
        -: 8312:#ifndef CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH
        -: 8313:#define CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH CATCH_CLARA_CONFIG_CONSOLE_WIDTH
        -: 8314:#endif
        -: 8315:
        -: 8316:#ifndef CLARA_CONFIG_OPTIONAL_TYPE
        -: 8317:#ifdef __has_include
        -: 8318:#if __has_include(<optional>) && __cplusplus >= 201703L
        -: 8319:#include <optional>
        -: 8320:#define CLARA_CONFIG_OPTIONAL_TYPE std::optional
        -: 8321:#endif
        -: 8322:#endif
        -: 8323:#endif
        -: 8324:
        -: 8325:// ----------- #included from clara_textflow.hpp -----------
        -: 8326:
        -: 8327:// TextFlowCpp
        -: 8328://
        -: 8329:// A single-header library for wrapping and laying out basic text, by Phil Nash
        -: 8330://
        -: 8331:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -: 8332:// file LICENSE.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -: 8333://
        -: 8334:// This project is hosted at https://github.com/philsquared/textflowcpp
        -: 8335:
        -: 8336:
        -: 8337:#include <cassert>
        -: 8338:#include <ostream>
        -: 8339:#include <sstream>
        -: 8340:#include <vector>
        -: 8341:
        -: 8342:#ifndef CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH
        -: 8343:#define CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH 80
        -: 8344:#endif
        -: 8345:
        -: 8346:namespace Catch {
        -: 8347:namespace clara {
        -: 8348:namespace TextFlow {
        -: 8349:
function _ZN5Catch5clara8TextFlow12isWhitespaceEc called 0 returned 0% blocks executed 0%
    #####: 8350:inline auto isWhitespace(char c) -> bool {
    #####: 8351:static std::string chars = " \t\n\r";
    %%%%%: 8351-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8351-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8351-block  2
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8351-block  3
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 8351-block  4
call   12 never executed
    $$$$$: 8351-block  5
    $$$$$: 8351-block  6
branch 13 never executed
branch 14 never executed
    $$$$$: 8351-block  7
call   15 never executed
    #####: 8352:return chars.find(c) != std::string::npos;
    %%%%%: 8352-block  0
call    0 never executed
    %%%%%: 8352-block  1
        -: 8353:}
function _ZN5Catch5clara8TextFlow17isBreakableBeforeEc called 0 returned 0% blocks executed 0%
    #####: 8354:inline auto isBreakableBefore(char c) -> bool {
    #####: 8355:static std::string chars = "[({<|";
    %%%%%: 8355-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8355-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8355-block  2
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8355-block  3
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 8355-block  4
call   12 never executed
    $$$$$: 8355-block  5
    $$$$$: 8355-block  6
branch 13 never executed
branch 14 never executed
    $$$$$: 8355-block  7
call   15 never executed
    #####: 8356:return chars.find(c) != std::string::npos;
    %%%%%: 8356-block  0
call    0 never executed
    %%%%%: 8356-block  1
        -: 8357:}
function _ZN5Catch5clara8TextFlow16isBreakableAfterEc called 0 returned 0% blocks executed 0%
    #####: 8358:inline auto isBreakableAfter(char c) -> bool {
    #####: 8359:static std::string chars = "])}>.,:;*+-=&/\\";
    %%%%%: 8359-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8359-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8359-block  2
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8359-block  3
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 8359-block  4
call   12 never executed
    $$$$$: 8359-block  5
    $$$$$: 8359-block  6
branch 13 never executed
branch 14 never executed
    $$$$$: 8359-block  7
call   15 never executed
    #####: 8360:return chars.find(c) != std::string::npos;
    %%%%%: 8360-block  0
call    0 never executed
    %%%%%: 8360-block  1
        -: 8361:}
        -: 8362:
        -: 8363:class Columns;
        -: 8364:
        -: 8365:class Column {
        -: 8366:std::vector<std::string> m_strings;
        -: 8367:size_t m_width = CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH;
        -: 8368:size_t m_indent = 0;
        -: 8369:size_t m_initialIndent = std::string::npos;
        -: 8370:
        -: 8371:public:
        -: 8372:class iterator {
        -: 8373:friend Column;
        -: 8374:
        -: 8375:Column const& m_column;
        -: 8376:size_t m_stringIndex = 0;
        -: 8377:size_t m_pos = 0;
        -: 8378:
        -: 8379:size_t m_len = 0;
        -: 8380:size_t m_end = 0;
        -: 8381:bool m_suffix = false;
        -: 8382:
function _ZN5Catch5clara8TextFlow6Column8iteratorC1ERKS2_j called 0 returned 0% blocks executed 0%
    #####: 8383:iterator(Column const& column, size_t stringIndex)
    #####: 8384:: m_column(column),
    #####: 8385:m_stringIndex(stringIndex) {}
        -: 8386:
function _ZNK5Catch5clara8TextFlow6Column8iterator4lineB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 8387:auto line() const -> std::string const& { return m_column.m_strings[m_stringIndex]; }
    %%%%%: 8387-block  0
call    0 never executed
        -: 8388:
function _ZNK5Catch5clara8TextFlow6Column8iterator10isBoundaryEj called 0 returned 0% blocks executed 0%
    #####: 8389:auto isBoundary(size_t at) const -> bool {
    #####: 8390:assert(at > 0);
    %%%%%: 8390-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8390-block  1
call    2 never executed
    %%%%%: 8390-block  2
    #####: 8391:assert(at <= line().size());
    %%%%%: 8391-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8391-block  1
call    4 never executed
    %%%%%: 8391-block  2
        -: 8392:
    #####: 8393:return at == line().size() ||
    %%%%%: 8393-block  0
call    0 never executed
call    1 never executed
    #####: 8394:(isWhitespace(line()[at]) && !isWhitespace(line()[at - 1])) ||
    %%%%%: 8394-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8394-block  1
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 8395:isBreakableBefore(line()[at]) ||
branch  0 never executed
branch  1 never executed
    %%%%%: 8395-block  0
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8395-block  1
    %%%%%: 8395-block  2
    #####: 8396:isBreakableAfter(line()[at - 1]);
    %%%%%: 8396-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8396-block  1
        -: 8397:}
        -: 8398:
function _ZN5Catch5clara8TextFlow6Column8iterator10calcLengthEv called 0 returned 0% blocks executed 0%
    #####: 8399:void calcLength() {
    #####: 8400:assert(m_stringIndex < m_column.m_strings.size());
    %%%%%: 8400-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8400-block  1
call    3 never executed
    %%%%%: 8400-block  2
        -: 8401:
    #####: 8402:m_suffix = false;
    #####: 8403:auto width = m_column.m_width - indent();
    %%%%%: 8403-block  0
call    0 never executed
    #####: 8404:m_end = m_pos;
    #####: 8405:if (line()[m_pos] == '\n') {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8406:++m_end;
    %%%%%: 8406-block  0
        -: 8407:}
    #####: 8408:while (m_end < line().size() && line()[m_end] != '\n')
    %%%%%: 8408-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8408-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 8408-block  2
    %%%%%: 8408-block  3
    %%%%%: 8408-block  4
branch  8 never executed
branch  9 never executed
    #####: 8409:++m_end;
    %%%%%: 8409-block  0
        -: 8410:
    #####: 8411:if (m_end < m_pos + width) {
    %%%%%: 8411-block  0
branch  0 never executed
branch  1 never executed
    #####: 8412:m_len = m_end - m_pos;
    %%%%%: 8412-block  0
        -: 8413:} else {
    #####: 8414:size_t len = width;
    %%%%%: 8414-block  0
    #####: 8415:while (len > 0 && !isBoundary(m_pos + len))
    %%%%%: 8415-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8415-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8415-block  2
    %%%%%: 8415-block  3
    %%%%%: 8415-block  4
branch  5 never executed
branch  6 never executed
    #####: 8416:--len;
    %%%%%: 8416-block  0
    #####: 8417:while (len > 0 && isWhitespace(line()[m_pos + len - 1]))
    %%%%%: 8417-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8417-block  1
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8417-block  2
    %%%%%: 8417-block  3
    %%%%%: 8417-block  4
branch  7 never executed
branch  8 never executed
    #####: 8418:--len;
    %%%%%: 8418-block  0
        -: 8419:
    #####: 8420:if (len > 0) {
    %%%%%: 8420-block  0
branch  0 never executed
branch  1 never executed
    #####: 8421:m_len = len;
    %%%%%: 8421-block  0
        -: 8422:} else {
    #####: 8423:m_suffix = true;
    #####: 8424:m_len = width - 1;
    %%%%%: 8424-block  0
        -: 8425:}
        -: 8426:}
    #####: 8427:}
        -: 8428:
function _ZNK5Catch5clara8TextFlow6Column8iterator6indentEv called 0 returned 0% blocks executed 0%
    #####: 8429:auto indent() const -> size_t {
    #####: 8430:auto initial = m_pos == 0 && m_stringIndex == 0 ? m_column.m_initialIndent : std::string::npos;
    %%%%%: 8430-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8430-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 8430-block  2
    %%%%%: 8430-block  3
    #####: 8431:return initial == std::string::npos ? m_column.m_indent : initial;
    %%%%%: 8431-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8431-block  1
    %%%%%: 8431-block  2
    %%%%%: 8431-block  3
        -: 8432:}
        -: 8433:
function _ZNK5Catch5clara8TextFlow6Column8iterator18addIndentAndSuffixERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8434:auto addIndentAndSuffix(std::string const &plain) const -> std::string {
    #####: 8435:return std::string(indent(), ' ') + (m_suffix ? plain + "-" : plain);
    %%%%%: 8435-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8435-block  1
call    2 never executed
    %%%%%: 8435-block  2
call    3 never executed
    %%%%%: 8435-block  3
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8435-block  4
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 8435-block  5
    %%%%%: 8435-block  6
call   12 never executed
call   13 never executed
call   14 never executed
    %%%%%: 8435-block  7
    $$$$$: 8435-block  8
call   15 never executed
    $$$$$: 8435-block  9
    $$$$$: 8435-block 10
call   16 never executed
    $$$$$: 8435-block 11
    $$$$$: 8435-block 12
call   17 never executed
        -: 8436:}
        -: 8437:
        -: 8438:public:
        -: 8439:using difference_type = std::ptrdiff_t;
        -: 8440:using value_type = std::string;
        -: 8441:using pointer = value_type * ;
        -: 8442:using reference = value_type & ;
        -: 8443:using iterator_category = std::forward_iterator_tag;
        -: 8444:
function _ZN5Catch5clara8TextFlow6Column8iteratorC1ERKS2_ called 0 returned 0% blocks executed 0%
    #####: 8445:explicit iterator(Column const& column) : m_column(column) {
    #####: 8446:assert(m_column.m_width > m_column.m_indent);
    %%%%%: 8446-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8446-block  1
call    2 never executed
    %%%%%: 8446-block  2
    #####: 8447:assert(m_column.m_initialIndent == std::string::npos || m_column.m_width > m_column.m_initialIndent);
    %%%%%: 8447-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8447-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 8447-block  2
call    4 never executed
    %%%%%: 8447-block  3
    #####: 8448:calcLength();
    %%%%%: 8448-block  0
call    0 never executed
    #####: 8449:if (m_len == 0)
branch  0 never executed
branch  1 never executed
    #####: 8450:m_stringIndex++; // Empty string
    %%%%%: 8450-block  0
    #####: 8451:}
        -: 8452:
function _ZNK5Catch5clara8TextFlow6Column8iteratordeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 8453:auto operator *() const -> std::string {
    #####: 8454:assert(m_stringIndex < m_column.m_strings.size());
    %%%%%: 8454-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8454-block  1
call    3 never executed
    %%%%%: 8454-block  2
    #####: 8455:assert(m_pos <= m_end);
    %%%%%: 8455-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8455-block  1
call    2 never executed
    %%%%%: 8455-block  2
    #####: 8456:return addIndentAndSuffix(line().substr(m_pos, m_len));
    %%%%%: 8456-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8456-block  1
    %%%%%: 8456-block  2
call    5 never executed
    %%%%%: 8456-block  3
    $$$$$: 8456-block  4
call    6 never executed
        -: 8457:}
        -: 8458:
function _ZN5Catch5clara8TextFlow6Column8iteratorppEv called 0 returned 0% blocks executed 0%
    #####: 8459:auto operator ++() -> iterator& {
    #####: 8460:m_pos += m_len;
    #####: 8461:if (m_pos < line().size() && line()[m_pos] == '\n')
    %%%%%: 8461-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8461-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 8461-block  2
    %%%%%: 8461-block  3
    %%%%%: 8461-block  4
branch  8 never executed
branch  9 never executed
    #####: 8462:m_pos += 1;
    %%%%%: 8462-block  0
        -: 8463:else
    #####: 8464:while (m_pos < line().size() && isWhitespace(line()[m_pos]))
    %%%%%: 8464-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8464-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8464-block  2
    %%%%%: 8464-block  3
    %%%%%: 8464-block  4
branch  9 never executed
branch 10 never executed
    #####: 8465:++m_pos;
    %%%%%: 8465-block  0
        -: 8466:
    #####: 8467:if (m_pos == line().size()) {
    %%%%%: 8467-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8468:m_pos = 0;
    #####: 8469:++m_stringIndex;
    %%%%%: 8469-block  0
        -: 8470:}
    #####: 8471:if (m_stringIndex < m_column.m_strings.size())
    %%%%%: 8471-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8472:calcLength();
    %%%%%: 8472-block  0
call    0 never executed
    #####: 8473:return *this;
    %%%%%: 8473-block  0
        -: 8474:}
        -: 8475:auto operator ++(int) -> iterator {
        -: 8476:iterator prev(*this);
        -: 8477:operator++();
        -: 8478:return prev;
        -: 8479:}
        -: 8480:
function _ZNK5Catch5clara8TextFlow6Column8iteratoreqERKS3_ called 0 returned 0% blocks executed 0%
    #####: 8481:auto operator ==(iterator const& other) const -> bool {
        -: 8482:return
    #####: 8483:m_pos == other.m_pos &&
    #####: 8484:m_stringIndex == other.m_stringIndex &&
    %%%%%: 8484-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8484-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 8484-block  2
    %%%%%: 8484-block  3
    #####: 8485:&m_column == &other.m_column;
    %%%%%: 8485-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8485-block  1
        -: 8486:}
function _ZNK5Catch5clara8TextFlow6Column8iteratorneERKS3_ called 0 returned 0% blocks executed 0%
    #####: 8487:auto operator !=(iterator const& other) const -> bool {
    #####: 8488:return !operator==(other);
    %%%%%: 8488-block  0
call    0 never executed
        -: 8489:}
        -: 8490:};
        -: 8491:using const_iterator = iterator;
        -: 8492:
    #####: 8493:explicit Column(std::string const& text) { m_strings.push_back(text); }
------------------
_ZN5Catch5clara8TextFlow6ColumnC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara8TextFlow6ColumnC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8493:explicit Column(std::string const& text) { m_strings.push_back(text); }
    %%%%%: 8493-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8493-block  1
    $$$$$: 8493-block  2
call    4 never executed
------------------
_ZN5Catch5clara8TextFlow6ColumnC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara8TextFlow6ColumnC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8493:explicit Column(std::string const& text) { m_strings.push_back(text); }
    %%%%%: 8493-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8493-block  1
    $$$$$: 8493-block  2
call    4 never executed
------------------
        -: 8494:
function _ZN5Catch5clara8TextFlow6Column5widthEj called 0 returned 0% blocks executed 0%
    #####: 8495:auto width(size_t newWidth) -> Column& {
    #####: 8496:assert(newWidth > 0);
    %%%%%: 8496-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8496-block  1
call    2 never executed
    %%%%%: 8496-block  2
    #####: 8497:m_width = newWidth;
    #####: 8498:return *this;
    %%%%%: 8498-block  0
        -: 8499:}
function _ZN5Catch5clara8TextFlow6Column6indentEj called 0 returned 0% blocks executed 0%
    #####: 8500:auto indent(size_t newIndent) -> Column& {
    #####: 8501:m_indent = newIndent;
    #####: 8502:return *this;
    %%%%%: 8502-block  0
        -: 8503:}
function _ZN5Catch5clara8TextFlow6Column13initialIndentEj called 0 returned 0% blocks executed 0%
    #####: 8504:auto initialIndent(size_t newIndent) -> Column& {
    #####: 8505:m_initialIndent = newIndent;
    #####: 8506:return *this;
    %%%%%: 8506-block  0
        -: 8507:}
        -: 8508:
function _ZNK5Catch5clara8TextFlow6Column5widthEv called 0 returned 0% blocks executed 0%
    #####: 8509:auto width() const -> size_t { return m_width; }
    %%%%%: 8509-block  0
function _ZNK5Catch5clara8TextFlow6Column5beginEv called 0 returned 0% blocks executed 0%
    #####: 8510:auto begin() const -> iterator { return iterator(*this); }
    %%%%%: 8510-block  0
call    0 never executed
function _ZNK5Catch5clara8TextFlow6Column3endEv called 0 returned 0% blocks executed 0%
    #####: 8511:auto end() const -> iterator { return { *this, m_strings.size() }; }
    %%%%%: 8511-block  0
call    0 never executed
call    1 never executed
        -: 8512:
function _ZN5Catch5clara8TextFlowlsERSoRKNS1_6ColumnE called 0 returned 0% blocks executed 0%
    #####: 8513:inline friend std::ostream& operator << (std::ostream& os, Column const& col) {
    #####: 8514:bool first = true;
    #####: 8515:for (auto line : col) {
    %%%%%: 8515-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8515-block  1
call    3 never executed
    %%%%%: 8515-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8515-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 8515-block  4
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 8515-block  5
    $$$$$: 8515-block  6
call   14 never executed
    #####: 8516:if (first)
    %%%%%: 8516-block  0
branch  0 never executed
branch  1 never executed
    #####: 8517:first = false;
    %%%%%: 8517-block  0
        -: 8518:else
    #####: 8519:os << "\n";
    %%%%%: 8519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8520:os << line;
    %%%%%: 8520-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8521:}
    #####: 8522:return os;
    %%%%%: 8522-block  0
    %%%%%: 8522-block  1
        -: 8523:}
        -: 8524:
        -: 8525:auto operator + (Column const& other)->Columns;
        -: 8526:
        -: 8527:auto toString() const -> std::string {
        -: 8528:std::ostringstream oss;
        -: 8529:oss << *this;
        -: 8530:return oss.str();
        -: 8531:}
        -: 8532:};
        -: 8533:
        -: 8534:class Spacer : public Column {
        -: 8535:
        -: 8536:public:
function _ZN5Catch5clara8TextFlow6SpacerC1Ej called 0 returned 0% blocks executed 0%
    #####: 8537:explicit Spacer(size_t spaceWidth) : Column("") {
    %%%%%: 8537-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8537-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8537-block  2
call    7 never executed
call    8 never executed
    $$$$$: 8537-block  3
call    9 never executed
    $$$$$: 8537-block  4
    $$$$$: 8537-block  5
call   10 never executed
    $$$$$: 8537-block  6
call   11 never executed
    $$$$$: 8537-block  7
call   12 never executed
    #####: 8538:width(spaceWidth);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8539:}
    %%%%%: 8539-block  0
        -: 8540:};
        -: 8541:
        -: 8542:class Columns {
        -: 8543:std::vector<Column> m_columns;
        -: 8544:
        -: 8545:public:
        -: 8546:
        -: 8547:class iterator {
        -: 8548:friend Columns;
        -: 8549:struct EndTag {};
        -: 8550:
        -: 8551:std::vector<Column> const& m_columns;
        -: 8552:std::vector<Column::iterator> m_iterators;
        -: 8553:size_t m_activeIterators;
        -: 8554:
function _ZN5Catch5clara8TextFlow7Columns8iteratorC1ERKS2_NS3_6EndTagE called 0 returned 0% blocks executed 0%
    #####: 8555:iterator(Columns const& columns, EndTag)
    #####: 8556:: m_columns(columns.m_columns),
    #####: 8557:m_activeIterators(0) {
    %%%%%: 8557-block  0
call    0 never executed
    $$$$$: 8557-block  1
call    1 never executed
    #####: 8558:m_iterators.reserve(m_columns.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 8559:
    #####: 8560:for (auto const& col : m_columns)
    %%%%%: 8560-block  0
call    0 never executed
call    1 never executed
    %%%%%: 8560-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8560-block  2
call    5 never executed
    #####: 8561:m_iterators.push_back(col.end());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8561-block  0
call    4 never executed
    $$$$$: 8561-block  1
    #####: 8562:}
    %%%%%: 8562-block  0
        -: 8563:
        -: 8564:public:
        -: 8565:using difference_type = std::ptrdiff_t;
        -: 8566:using value_type = std::string;
        -: 8567:using pointer = value_type * ;
        -: 8568:using reference = value_type & ;
        -: 8569:using iterator_category = std::forward_iterator_tag;
        -: 8570:
function _ZN5Catch5clara8TextFlow7Columns8iteratorC1ERKS2_ called 0 returned 0% blocks executed 0%
    #####: 8571:explicit iterator(Columns const& columns)
    #####: 8572:: m_columns(columns.m_columns),
    #####: 8573:m_activeIterators(m_columns.size()) {
    %%%%%: 8573-block  0
call    0 never executed
call    1 never executed
    $$$$$: 8573-block  1
call    2 never executed
    #####: 8574:m_iterators.reserve(m_columns.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 8575:
    #####: 8576:for (auto const& col : m_columns)
    %%%%%: 8576-block  0
call    0 never executed
call    1 never executed
    %%%%%: 8576-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8576-block  2
call    5 never executed
    #####: 8577:m_iterators.push_back(col.begin());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8577-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8577-block  1
call    6 never executed
    $$$$$: 8577-block  2
    #####: 8578:}
    %%%%%: 8578-block  0
        -: 8579:
        -: 8580:auto operator ==(iterator const& other) const -> bool {
        -: 8581:return m_iterators == other.m_iterators;
        -: 8582:}
function _ZNK5Catch5clara8TextFlow7Columns8iteratorneERKS3_ called 0 returned 0% blocks executed 0%
    #####: 8583:auto operator !=(iterator const& other) const -> bool {
    #####: 8584:return m_iterators != other.m_iterators;
    %%%%%: 8584-block  0
call    0 never executed
        -: 8585:}
function _ZNK5Catch5clara8TextFlow7Columns8iteratordeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 8586:auto operator *() const -> std::string {
    #####: 8587:std::string row, padding;
    %%%%%: 8587-block  0
call    0 never executed
call    1 never executed
    %%%%%: 8587-block  1
call    2 never executed
    $$$$$: 8587-block  2
call    3 never executed
        -: 8588:
    #####: 8589:for (size_t i = 0; i < m_columns.size(); ++i) {
    %%%%%: 8589-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8589-block  1
    #####: 8590:auto width = m_columns[i].width();
    %%%%%: 8590-block  0
call    0 never executed
call    1 never executed
    #####: 8591:if (m_iterators[i] != m_columns[i].end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 8592:std::string col = *m_iterators[i];
    %%%%%: 8592-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8592-block  1
call    4 never executed
    $$$$$: 8592-block  2
call    5 never executed
    #####: 8593:row += padding + col;
    %%%%%: 8593-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8593-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8593-block  2
call    6 never executed
    $$$$$: 8593-block  3
call    7 never executed
    $$$$$: 8593-block  4
    #####: 8594:if (col.size() < width)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8595:padding = std::string(width - col.size(), ' ');
    %%%%%: 8595-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8595-block  1
call    5 never executed
call    6 never executed
call    7 never executed
    $$$$$: 8595-block  2
call    8 never executed
    $$$$$: 8595-block  3
        -: 8596:else
    #####: 8597:padding = "";
    %%%%%: 8597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8598:} else {
    #####: 8599:padding += std::string(width, ' ');
    %%%%%: 8599-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8599-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8599-block  2
call    7 never executed
call    8 never executed
    $$$$$: 8599-block  3
call    9 never executed
    $$$$$: 8599-block  4
    $$$$$: 8599-block  5
call   10 never executed
    $$$$$: 8599-block  6
        -: 8600:}
        -: 8601:}
    #####: 8602:return row;
    %%%%%: 8602-block  0
    %%%%%: 8602-block  1
        -: 8603:}
function _ZN5Catch5clara8TextFlow7Columns8iteratorppEv called 0 returned 0% blocks executed 0%
    #####: 8604:auto operator ++() -> iterator& {
    #####: 8605:for (size_t i = 0; i < m_columns.size(); ++i) {
    %%%%%: 8605-block  0
    %%%%%: 8605-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8605-block  2
    #####: 8606:if (m_iterators[i] != m_columns[i].end())
    %%%%%: 8606-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 8607:++m_iterators[i];
    %%%%%: 8607-block  0
call    0 never executed
call    1 never executed
        -: 8608:}
    #####: 8609:return *this;
    %%%%%: 8609-block  0
        -: 8610:}
        -: 8611:auto operator ++(int) -> iterator {
        -: 8612:iterator prev(*this);
        -: 8613:operator++();
        -: 8614:return prev;
        -: 8615:}
        -: 8616:};
        -: 8617:using const_iterator = iterator;
        -: 8618:
function _ZNK5Catch5clara8TextFlow7Columns5beginEv called 0 returned 0% blocks executed 0%
    #####: 8619:auto begin() const -> iterator { return iterator(*this); }
    %%%%%: 8619-block  0
call    0 never executed
function _ZNK5Catch5clara8TextFlow7Columns3endEv called 0 returned 0% blocks executed 0%
    #####: 8620:auto end() const -> iterator { return { *this, iterator::EndTag() }; }
    %%%%%: 8620-block  0
call    0 never executed
        -: 8621:
function _ZN5Catch5clara8TextFlow7ColumnspLERKNS1_6ColumnE called 0 returned 0% blocks executed 0%
    #####: 8622:auto operator += (Column const& col) -> Columns& {
    #####: 8623:m_columns.push_back(col);
    %%%%%: 8623-block  0
call    0 never executed
    #####: 8624:return *this;
        -: 8625:}
function _ZN5Catch5clara8TextFlow7ColumnsplERKNS1_6ColumnE called 0 returned 0% blocks executed 0%
    #####: 8626:auto operator + (Column const& col) -> Columns {
    #####: 8627:Columns combined = *this;
    %%%%%: 8627-block  0
call    0 never executed
    #####: 8628:combined += col;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8629:return combined;
    %%%%%: 8629-block  0
    %%%%%: 8629-block  1
        -: 8630:}
        -: 8631:
function _ZN5Catch5clara8TextFlowlsERSoRKNS1_7ColumnsE called 0 returned 0% blocks executed 0%
    #####: 8632:inline friend std::ostream& operator << (std::ostream& os, Columns const& cols) {
        -: 8633:
    #####: 8634:bool first = true;
    #####: 8635:for (auto line : cols) {
    %%%%%: 8635-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8635-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8635-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8635-block  3
branch  9 never executed
branch 10 never executed
    %%%%%: 8635-block  4
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 8635-block  5
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 8635-block  6
    %%%%%: 8635-block  7
call   18 never executed
call   19 never executed
    $$$$$: 8635-block  8
call   20 never executed
    $$$$$: 8635-block  9
call   21 never executed
    $$$$$: 8635-block 10
call   22 never executed
    #####: 8636:if (first)
    %%%%%: 8636-block  0
branch  0 never executed
branch  1 never executed
    #####: 8637:first = false;
    %%%%%: 8637-block  0
        -: 8638:else
    #####: 8639:os << "\n";
    %%%%%: 8639-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8640:os << line;
    %%%%%: 8640-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8641:}
    #####: 8642:return os;
    %%%%%: 8642-block  0
        -: 8643:}
        -: 8644:
        -: 8645:auto toString() const -> std::string {
        -: 8646:std::ostringstream oss;
        -: 8647:oss << *this;
        -: 8648:return oss.str();
        -: 8649:}
        -: 8650:};
        -: 8651:
function _ZN5Catch5clara8TextFlow6ColumnplERKS2_ called 0 returned 0% blocks executed 0%
    #####: 8652:inline auto Column::operator + (Column const& other) -> Columns {
    #####: 8653:Columns cols;
    %%%%%: 8653-block  0
call    0 never executed
    #####: 8654:cols += *this;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8655:cols += other;
    %%%%%: 8655-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8656:return cols;
    %%%%%: 8656-block  0
    %%%%%: 8656-block  1
        -: 8657:}
        -: 8658:}
        -: 8659:
        -: 8660:}
        -: 8661:}
        -: 8662:
        -: 8663:// ----------- end of #include from clara_textflow.hpp -----------
        -: 8664:// ........... back in clara.hpp
        -: 8665:
        -: 8666:#include <cctype>
        -: 8667:#include <string>
        -: 8668:#include <memory>
        -: 8669:#include <set>
        -: 8670:#include <algorithm>
        -: 8671:
        -: 8672:#if !defined(CATCH_PLATFORM_WINDOWS) && ( defined(WIN32) || defined(__WIN32__) || defined(_WIN32) || defined(_MSC_VER) )
        -: 8673:#define CATCH_PLATFORM_WINDOWS
        -: 8674:#endif
        -: 8675:
        -: 8676:namespace Catch { namespace clara {
        -: 8677:namespace detail {
        -: 8678:
        -: 8679:// Traits for extracting arg and return type of lambdas (for single argument lambdas)
        -: 8680:template<typename L>
        -: 8681:struct UnaryLambdaTraits : UnaryLambdaTraits<decltype( &L::operator() )> {};
        -: 8682:
        -: 8683:template<typename ClassT, typename ReturnT, typename... Args>
        -: 8684:struct UnaryLambdaTraits<ReturnT( ClassT::* )( Args... ) const> {
        -: 8685:static const bool isValid = false;
        -: 8686:};
        -: 8687:
        -: 8688:template<typename ClassT, typename ReturnT, typename ArgT>
        -: 8689:struct UnaryLambdaTraits<ReturnT( ClassT::* )( ArgT ) const> {
        -: 8690:static const bool isValid = true;
        -: 8691:using ArgType = typename std::remove_const<typename std::remove_reference<ArgT>::type>::type;
        -: 8692:using ReturnType = ReturnT;
        -: 8693:};
        -: 8694:
        -: 8695:class TokenStream;
        -: 8696:
        -: 8697:// Transport for raw args (copied from main args, or supplied via init list for testing)
        -: 8698:class Args {
        -: 8699:friend TokenStream;
        -: 8700:std::string m_exeName;
        -: 8701:std::vector<std::string> m_args;
        -: 8702:
        -: 8703:public:
function _ZN5Catch5clara6detail4ArgsC1EiPKPKc called 1 returned 100% blocks executed 53%
        1: 8704:Args( int argc, char const* const* argv )
        1: 8705:: m_exeName(argv[0]),
        1: 8706:m_args(argv + 1, argv + argc) {}
        1: 8706-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 8706-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 8706-block  2
call    9 returned 1
    $$$$$: 8706-block  3
call   10 never executed
    $$$$$: 8706-block  4
call   11 never executed
    $$$$$: 8706-block  5
call   12 never executed
    $$$$$: 8706-block  6
    $$$$$: 8706-block  7
call   13 never executed
        -: 8707:
        -: 8708:Args( std::initializer_list<std::string> args )
        -: 8709::   m_exeName( *args.begin() ),
        -: 8710:m_args( args.begin()+1, args.end() )
        -: 8711:{}
        -: 8712:
function _ZNK5Catch5clara6detail4Args7exeNameB5cxx11Ev called 1 returned 100% blocks executed 100%
        1: 8713:auto exeName() const -> std::string {
        1: 8714:return m_exeName;
        1: 8714-block  0
call    0 returned 1
        -: 8715:}
        -: 8716:};
        -: 8717:
        -: 8718:// Wraps a token coming from a token stream. These may not directly correspond to strings as a single string
        -: 8719:// may encode an option + its argument if the : or = form is used
        -: 8720:enum class TokenType {
        -: 8721:Option, Argument
        -: 8722:};
        -: 8723:struct Token {
        -: 8724:TokenType type;
        -: 8725:std::string token;
        -: 8726:};
        -: 8727:
function _ZN5Catch5clara6detail11isOptPrefixEc called 0 returned 0% blocks executed 0%
    #####: 8728:inline auto isOptPrefix( char c ) -> bool {
        -: 8729:return c == '-'
        -: 8730:#ifdef CATCH_PLATFORM_WINDOWS
    #####: 8731:|| c == '/'
    %%%%%: 8731-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8731-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 8731-block  2
    %%%%%: 8731-block  3
    %%%%%: 8731-block  4
        -: 8732:#endif
        -: 8733:;
        -: 8734:}
        -: 8735:
        -: 8736:// Abstracts iterators into args as a stream of tokens, with option arguments uniformly handled
        -: 8737:class TokenStream {
        -: 8738:using Iterator = std::vector<std::string>::const_iterator;
        -: 8739:Iterator it;
        -: 8740:Iterator itEnd;
        -: 8741:std::vector<Token> m_tokenBuffer;
        -: 8742:
function _ZN5Catch5clara6detail11TokenStream10loadBufferEv called 1 returned 100% blocks executed 11%
        1: 8743:void loadBuffer() {
        1: 8744:m_tokenBuffer.resize( 0 );
        1: 8744-block  0
call    0 returned 1
        -: 8745:
        -: 8746:// Skip any empty strings
       1*: 8747:while( it != itEnd && it->empty() )
        1: 8747-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 8747-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8747-block  2
        1: 8747-block  3
        1: 8747-block  4
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    #####: 8748:++it;
    %%%%%: 8748-block  0
call    0 never executed
        -: 8749:
        1: 8750:if( it != itEnd ) {
        1: 8750-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 8751:auto const &next = *it;
    %%%%%: 8751-block  0
call    0 never executed
    #####: 8752:if( isOptPrefix( next[0] ) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8753:auto delimiterPos = next.find_first_of( " :=" );
    %%%%%: 8753-block  0
call    0 never executed
    #####: 8754:if( delimiterPos != std::string::npos ) {
branch  0 never executed
branch  1 never executed
    #####: 8755:m_tokenBuffer.push_back( { TokenType::Option, next.substr( 0, delimiterPos ) } );
    %%%%%: 8755-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8755-block  1
call    4 never executed
    $$$$$: 8755-block  2
call    5 never executed
    $$$$$: 8755-block  3
call    6 never executed
    #####: 8756:m_tokenBuffer.push_back( { TokenType::Argument, next.substr( delimiterPos + 1 ) } );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8756-block  0
call    4 never executed
    $$$$$: 8756-block  1
call    5 never executed
    $$$$$: 8756-block  2
call    6 never executed
        -: 8757:} else {
    #####: 8758:if( next[1] != '-' && next.size() > 2 ) {
    %%%%%: 8758-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8758-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8758-block  2
    %%%%%: 8758-block  3
    %%%%%: 8758-block  4
branch  6 never executed
branch  7 never executed
    #####: 8759:std::string opt = "- ";
    %%%%%: 8759-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8759-block  1
call    4 never executed
    $$$$$: 8759-block  2
    $$$$$: 8759-block  3
call    5 never executed
    #####: 8760:for( size_t i = 1; i < next.size(); ++i ) {
    %%%%%: 8760-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8761:opt[1] = next[i];
    %%%%%: 8761-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8762:m_tokenBuffer.push_back( { TokenType::Option, opt } );
    %%%%%: 8762-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8762-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8762-block  2
call    6 never executed
    $$$$$: 8762-block  3
call    7 never executed
    $$$$$: 8762-block  4
        -: 8763:}
        -: 8764:} else {
    #####: 8765:m_tokenBuffer.push_back( { TokenType::Option, next } );
    %%%%%: 8765-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8765-block  1
call    4 never executed
    $$$$$: 8765-block  2
call    5 never executed
    $$$$$: 8765-block  3
call    6 never executed
        -: 8766:}
        -: 8767:}
        -: 8768:} else {
    #####: 8769:m_tokenBuffer.push_back( { TokenType::Argument, next } );
    %%%%%: 8769-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8769-block  1
call    4 never executed
    $$$$$: 8769-block  2
call    5 never executed
        -: 8770:}
        -: 8771:}
        1: 8772:}
        1: 8772-block  0
        -: 8773:
        -: 8774:public:
function _ZN5Catch5clara6detail11TokenStreamC1ERKNS1_4ArgsE called 1 returned 100% blocks executed 100%
        1: 8775:explicit TokenStream( Args const &args ) : TokenStream( args.m_args.begin(), args.m_args.end() ) {}
        1: 8775-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -: 8776:
function _ZN5Catch5clara6detail11TokenStreamC1EN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorISA_SaISA_EEEESG_ called 1 returned 100% blocks executed 80%
        1: 8777:TokenStream( Iterator it, Iterator itEnd ) : it( it ), itEnd( itEnd ) {
        1: 8777-block  0
call    0 returned 1
    $$$$$: 8777-block  1
call    1 never executed
        1: 8778:loadBuffer();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 8779:}
        1: 8779-block  0
        -: 8780:
function _ZNK5Catch5clara6detail11TokenStreamcvbEv called 1 returned 100% blocks executed 88%
        1: 8781:explicit operator bool() const {
       1*: 8782:return !m_tokenBuffer.empty() || it != itEnd;
        1: 8782-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 8782-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 8782-block  2
        1: 8782-block  3
        1: 8782-block  4
        -: 8783:}
        -: 8784:
        -: 8785:auto count() const -> size_t { return m_tokenBuffer.size() + (itEnd - it); }
        -: 8786:
function _ZNK5Catch5clara6detail11TokenStreamdeEv called 0 returned 0% blocks executed 0%
    #####: 8787:auto operator*() const -> Token {
    #####: 8788:assert( !m_tokenBuffer.empty() );
    %%%%%: 8788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8788-block  1
call    3 never executed
    %%%%%: 8788-block  2
    #####: 8789:return m_tokenBuffer.front();
    %%%%%: 8789-block  0
call    0 never executed
call    1 never executed
        -: 8790:}
        -: 8791:
function _ZNK5Catch5clara6detail11TokenStreamptEv called 0 returned 0% blocks executed 0%
    #####: 8792:auto operator->() const -> Token const * {
    #####: 8793:assert( !m_tokenBuffer.empty() );
    %%%%%: 8793-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8793-block  1
call    3 never executed
    %%%%%: 8793-block  2
    #####: 8794:return &m_tokenBuffer.front();
    %%%%%: 8794-block  0
call    0 never executed
        -: 8795:}
        -: 8796:
function _ZN5Catch5clara6detail11TokenStreamppEv called 0 returned 0% blocks executed 0%
    #####: 8797:auto operator++() -> TokenStream & {
    #####: 8798:if( m_tokenBuffer.size() >= 2 ) {
    %%%%%: 8798-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8799:m_tokenBuffer.erase( m_tokenBuffer.begin() );
    %%%%%: 8799-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8799-block  1
    $$$$$: 8799-block  2
        -: 8800:} else {
    #####: 8801:if( it != itEnd )
    %%%%%: 8801-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8802:++it;
    %%%%%: 8802-block  0
call    0 never executed
    #####: 8803:loadBuffer();
    %%%%%: 8803-block  0
call    0 never executed
        -: 8804:}
    #####: 8805:return *this;
    %%%%%: 8805-block  0
    %%%%%: 8805-block  1
        -: 8806:}
        -: 8807:};
        -: 8808:
        -: 8809:class ResultBase {
        -: 8810:public:
        -: 8811:enum Type {
        -: 8812:Ok, LogicError, RuntimeError
        -: 8813:};
        -: 8814:
        -: 8815:protected:
function _ZN5Catch5clara6detail10ResultBaseC2ENS2_4TypeE called 2 returned 100% blocks executed 100%
        2: 8816:ResultBase( Type type ) : m_type( type ) {}
function _ZN5Catch5clara6detail10ResultBaseD2Ev called 3 returned 100% blocks executed 100%
        3: 8817:virtual ~ResultBase() = default;
        -: 8818:
        -: 8819:virtual void enforceOk() const = 0;
        -: 8820:
        -: 8821:Type m_type;
        -: 8822:};
        -: 8823:
        -: 8824:template<typename T>
        -: 8825:class ResultValueBase : public ResultBase {
        -: 8826:public:
       1*: 8827:auto value() const -> T const & {
       1*: 8828:enforceOk();
       1*: 8829:return m_value;
        -: 8830:}
------------------
_ZNK5Catch5clara6detail15ResultValueBaseINS1_10ParseStateEE5valueEv:
function _ZNK5Catch5clara6detail15ResultValueBaseINS1_10ParseStateEE5valueEv called 1 returned 100% blocks executed 100%
        1: 8827:auto value() const -> T const & {
        1: 8828:enforceOk();
        1: 8828-block  0
call    0 returned 1
        1: 8829:return m_value;
        -: 8830:}
------------------
_ZNK5Catch5clara6detail15ResultValueBaseINS1_15ParseResultTypeEE5valueEv:
function _ZNK5Catch5clara6detail15ResultValueBaseINS1_15ParseResultTypeEE5valueEv called 0 returned 0% blocks executed 0%
    #####: 8827:auto value() const -> T const & {
    #####: 8828:enforceOk();
    %%%%%: 8828-block  0
call    0 never executed
    #####: 8829:return m_value;
        -: 8830:}
------------------
        -: 8831:
        -: 8832:protected:
    #####: 8833:ResultValueBase( Type type ) : ResultBase( type ) {}
------------------
_ZN5Catch5clara6detail15ResultValueBaseINS1_15ParseResultTypeEEC2ENS1_10ResultBase4TypeE:
function _ZN5Catch5clara6detail15ResultValueBaseINS1_15ParseResultTypeEEC2ENS1_10ResultBase4TypeE called 0 returned 0% blocks executed 0%
    #####: 8833:ResultValueBase( Type type ) : ResultBase( type ) {}
    %%%%%: 8833-block  0
call    0 never executed
------------------
_ZN5Catch5clara6detail15ResultValueBaseINS1_10ParseStateEEC2ENS1_10ResultBase4TypeE:
function _ZN5Catch5clara6detail15ResultValueBaseINS1_10ParseStateEEC2ENS1_10ResultBase4TypeE called 0 returned 0% blocks executed 0%
    #####: 8833:ResultValueBase( Type type ) : ResultBase( type ) {}
    %%%%%: 8833-block  0
call    0 never executed
------------------
        -: 8834:
       1*: 8835:ResultValueBase( ResultValueBase const &other ) : ResultBase( other ) {
       1*: 8836:if( m_type == ResultBase::Ok )
       1*: 8837:new( &m_value ) T( other.m_value );
       1*: 8838:}
------------------
_ZN5Catch5clara6detail15ResultValueBaseINS1_15ParseResultTypeEEC2ERKS4_:
function _ZN5Catch5clara6detail15ResultValueBaseINS1_15ParseResultTypeEEC2ERKS4_ called 0 returned 0% blocks executed 0%
    #####: 8835:ResultValueBase( ResultValueBase const &other ) : ResultBase( other ) {
    %%%%%: 8835-block  0
call    0 never executed
    #####: 8836:if( m_type == ResultBase::Ok )
branch  0 never executed
branch  1 never executed
    #####: 8837:new( &m_value ) T( other.m_value );
    %%%%%: 8837-block  0
call    0 never executed
    #####: 8838:}
------------------
_ZN5Catch5clara6detail15ResultValueBaseINS1_10ParseStateEEC2ERKS4_:
function _ZN5Catch5clara6detail15ResultValueBaseINS1_10ParseStateEEC2ERKS4_ called 1 returned 100% blocks executed 70%
        1: 8835:ResultValueBase( ResultValueBase const &other ) : ResultBase( other ) {
        1: 8835-block  0
call    0 returned 1
    $$$$$: 8835-block  1
call    1 never executed
        1: 8836:if( m_type == ResultBase::Ok )
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 8837:new( &m_value ) T( other.m_value );
        1: 8837-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 8837-block  1
call    4 never executed
        1: 8838:}
        1: 8838-block  0
------------------
        -: 8839:
        2: 8840:ResultValueBase( Type, T const &value ) : ResultBase( Ok ) {
        2: 8841:new( &m_value ) T( value );
        2: 8842:}
------------------
_ZN5Catch5clara6detail15ResultValueBaseINS1_10ParseStateEEC2ENS1_10ResultBase4TypeERKS3_:
function _ZN5Catch5clara6detail15ResultValueBaseINS1_10ParseStateEEC2ENS1_10ResultBase4TypeERKS3_ called 1 returned 100% blocks executed 63%
        1: 8840:ResultValueBase( Type, T const &value ) : ResultBase( Ok ) {
        1: 8840-block  0
call    0 returned 1
    $$$$$: 8840-block  1
call    1 never executed
        1: 8841:new( &m_value ) T( value );
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 8841-block  0
call    4 never executed
        1: 8842:}
        1: 8842-block  0
------------------
_ZN5Catch5clara6detail15ResultValueBaseINS1_15ParseResultTypeEEC2ENS1_10ResultBase4TypeERKS3_:
function _ZN5Catch5clara6detail15ResultValueBaseINS1_15ParseResultTypeEEC2ENS1_10ResultBase4TypeERKS3_ called 1 returned 100% blocks executed 100%
        1: 8840:ResultValueBase( Type, T const &value ) : ResultBase( Ok ) {
        1: 8840-block  0
call    0 returned 1
        1: 8841:new( &m_value ) T( value );
call    0 returned 1
        1: 8842:}
------------------
        -: 8843:
function _ZN5Catch5clara6detail15ResultValueBaseINS1_10ParseStateEEaSERKS4_ called 0 returned 0% blocks executed 0%
    #####: 8844:auto operator=( ResultValueBase const &other ) -> ResultValueBase & {
    #####: 8845:if( m_type == ResultBase::Ok )
    %%%%%: 8845-block  0
branch  0 never executed
branch  1 never executed
    #####: 8846:m_value.~T();
    %%%%%: 8846-block  0
call    0 never executed
    #####: 8847:ResultBase::operator=(other);
    %%%%%: 8847-block  0
call    0 never executed
    #####: 8848:if( m_type == ResultBase::Ok )
branch  0 never executed
branch  1 never executed
    #####: 8849:new( &m_value ) T( other.m_value );
    %%%%%: 8849-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 8849-block  1
call    4 never executed
    #####: 8850:return *this;
    %%%%%: 8850-block  0
    %%%%%: 8850-block  1
        -: 8851:}
        -: 8852:
        3: 8853:~ResultValueBase() override {
        3: 8854:if( m_type == Ok )
        2: 8855:m_value.~T();
        5: 8856:}
------------------
_ZN5Catch5clara6detail15ResultValueBaseINS1_15ParseResultTypeEED2Ev:
function _ZN5Catch5clara6detail15ResultValueBaseINS1_15ParseResultTypeEED2Ev called 1 returned 100% blocks executed 100%
        1: 8853:~ResultValueBase() override {
        1: 8854:if( m_type == Ok )
        -: 8855:m_value.~T();
        1: 8856:}
        1: 8856-block  0
        1: 8856-block  1
call    0 returned 1
------------------
_ZN5Catch5clara6detail15ResultValueBaseINS1_10ParseStateEED2Ev:
function _ZN5Catch5clara6detail15ResultValueBaseINS1_10ParseStateEED2Ev called 2 returned 100% blocks executed 100%
        2: 8853:~ResultValueBase() override {
        2: 8854:if( m_type == Ok )
        2: 8855:m_value.~T();
        2: 8855-block  0
call    0 returned 2
        4: 8856:}
        2: 8856-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 8856-block  1
call    2 returned 2
------------------
        -: 8857:
        -: 8858:union {
        -: 8859:T m_value;
        -: 8860:};
        -: 8861:};
        -: 8862:
        -: 8863:template<>
        -: 8864:class ResultValueBase<void> : public ResultBase {
        -: 8865:protected:
        -: 8866:using ResultBase::ResultBase;
        -: 8867:};
        -: 8868:
        -: 8869:template<typename T = void>
        -: 8870:class BasicResult : public ResultValueBase<T> {
        -: 8871:public:
        -: 8872:template<typename U>
    #####: 8873:explicit BasicResult( BasicResult<U> const &other )
        -: 8874::   ResultValueBase<T>( other.type() ),
    #####: 8875:m_errorMessage( other.errorMessage() )
        -: 8876:{
    #####: 8877:assert( type() != ResultBase::Ok );
    #####: 8878:}
------------------
_ZN5Catch5clara6detail11BasicResultINS1_10ParseStateEEC1INS1_15ParseResultTypeEEERKNS2_IT_EE:
function _ZN5Catch5clara6detail11BasicResultINS1_10ParseStateEEC1INS1_15ParseResultTypeEEERKNS2_IT_EE called 0 returned 0% blocks executed 0%
    #####: 8873:explicit BasicResult( BasicResult<U> const &other )
        -: 8874::   ResultValueBase<T>( other.type() ),
    #####: 8875:m_errorMessage( other.errorMessage() )
    %%%%%: 8875-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 8875-block  1
call    5 never executed
    $$$$$: 8875-block  2
call    6 never executed
        -: 8876:{
    #####: 8877:assert( type() != ResultBase::Ok );
    %%%%%: 8877-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8877-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8877-block  2
    %%%%%: 8877-block  3
    #####: 8878:}
    %%%%%: 8878-block  0
------------------
_ZN5Catch5clara6detail11BasicResultINS1_10ParseStateEEC1IvEERKNS2_IT_EE:
function _ZN5Catch5clara6detail11BasicResultINS1_10ParseStateEEC1IvEERKNS2_IT_EE called 0 returned 0% blocks executed 0%
    #####: 8873:explicit BasicResult( BasicResult<U> const &other )
        -: 8874::   ResultValueBase<T>( other.type() ),
    #####: 8875:m_errorMessage( other.errorMessage() )
    %%%%%: 8875-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 8875-block  1
call    5 never executed
    $$$$$: 8875-block  2
call    6 never executed
        -: 8876:{
    #####: 8877:assert( type() != ResultBase::Ok );
    %%%%%: 8877-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8877-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8877-block  2
    %%%%%: 8877-block  3
    #####: 8878:}
    %%%%%: 8878-block  0
------------------
        -: 8879:
        -: 8880:template<typename U>
        2: 8881:static auto ok( U const &value ) -> BasicResult { return { ResultBase::Ok, value }; }
------------------
_ZN5Catch5clara6detail11BasicResultINS1_10ParseStateEE2okIS3_EES4_RKT_:
function _ZN5Catch5clara6detail11BasicResultINS1_10ParseStateEE2okIS3_EES4_RKT_ called 1 returned 100% blocks executed 100%
        1: 8881:static auto ok( U const &value ) -> BasicResult { return { ResultBase::Ok, value }; }
        1: 8881-block  0
call    0 returned 1
------------------
_ZN5Catch5clara6detail11BasicResultINS1_15ParseResultTypeEE2okIS3_EES4_RKT_:
function _ZN5Catch5clara6detail11BasicResultINS1_15ParseResultTypeEE2okIS3_EES4_RKT_ called 1 returned 100% blocks executed 100%
        1: 8881:static auto ok( U const &value ) -> BasicResult { return { ResultBase::Ok, value }; }
        1: 8881-block  0
call    0 returned 1
------------------
function _ZN5Catch5clara6detail11BasicResultIvE2okEv called 0 returned 0% blocks executed 0%
    #####: 8882:static auto ok() -> BasicResult { return { ResultBase::Ok }; }
    %%%%%: 8882-block  0
call    0 never executed
function _ZN5Catch5clara6detail11BasicResultIvE10logicErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8883:static auto logicError( std::string const &message ) -> BasicResult { return { ResultBase::LogicError, message }; }
    %%%%%: 8883-block  0
call    0 never executed
    #####: 8884:static auto runtimeError( std::string const &message ) -> BasicResult { return { ResultBase::RuntimeError, message }; }
------------------
_ZN5Catch5clara6detail11BasicResultINS1_10ParseStateEE12runtimeErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail11BasicResultINS1_10ParseStateEE12runtimeErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8884:static auto runtimeError( std::string const &message ) -> BasicResult { return { ResultBase::RuntimeError, message }; }
    %%%%%: 8884-block  0
call    0 never executed
------------------
_ZN5Catch5clara6detail11BasicResultINS1_15ParseResultTypeEE12runtimeErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail11BasicResultINS1_15ParseResultTypeEE12runtimeErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8884:static auto runtimeError( std::string const &message ) -> BasicResult { return { ResultBase::RuntimeError, message }; }
    %%%%%: 8884-block  0
call    0 never executed
------------------
        -: 8885:
       1*: 8886:explicit operator bool() const { return m_type == ResultBase::Ok; }
------------------
_ZNK5Catch5clara6detail11BasicResultINS1_10ParseStateEEcvbEv:
function _ZNK5Catch5clara6detail11BasicResultINS1_10ParseStateEEcvbEv called 1 returned 100% blocks executed 100%
        1: 8886:explicit operator bool() const { return m_type == ResultBase::Ok; }
        1: 8886-block  0
------------------
_ZNK5Catch5clara6detail11BasicResultINS1_15ParseResultTypeEEcvbEv:
function _ZNK5Catch5clara6detail11BasicResultINS1_15ParseResultTypeEEcvbEv called 0 returned 0% blocks executed 0%
    #####: 8886:explicit operator bool() const { return m_type == ResultBase::Ok; }
    %%%%%: 8886-block  0
------------------
_ZNK5Catch5clara6detail11BasicResultIvEcvbEv:
function _ZNK5Catch5clara6detail11BasicResultIvEcvbEv called 0 returned 0% blocks executed 0%
    #####: 8886:explicit operator bool() const { return m_type == ResultBase::Ok; }
    %%%%%: 8886-block  0
------------------
    #####: 8887:auto type() const -> ResultBase::Type { return m_type; }
------------------
_ZNK5Catch5clara6detail11BasicResultINS1_15ParseResultTypeEE4typeEv:
function _ZNK5Catch5clara6detail11BasicResultINS1_15ParseResultTypeEE4typeEv called 0 returned 0% blocks executed 0%
    #####: 8887:auto type() const -> ResultBase::Type { return m_type; }
    %%%%%: 8887-block  0
------------------
_ZNK5Catch5clara6detail11BasicResultINS1_10ParseStateEE4typeEv:
function _ZNK5Catch5clara6detail11BasicResultINS1_10ParseStateEE4typeEv called 0 returned 0% blocks executed 0%
    #####: 8887:auto type() const -> ResultBase::Type { return m_type; }
    %%%%%: 8887-block  0
------------------
_ZNK5Catch5clara6detail11BasicResultIvE4typeEv:
function _ZNK5Catch5clara6detail11BasicResultIvE4typeEv called 0 returned 0% blocks executed 0%
    #####: 8887:auto type() const -> ResultBase::Type { return m_type; }
    %%%%%: 8887-block  0
------------------
    #####: 8888:auto errorMessage() const -> std::string { return m_errorMessage; }
------------------
_ZNK5Catch5clara6detail11BasicResultINS1_15ParseResultTypeEE12errorMessageB5cxx11Ev:
function _ZNK5Catch5clara6detail11BasicResultINS1_15ParseResultTypeEE12errorMessageB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 8888:auto errorMessage() const -> std::string { return m_errorMessage; }
    %%%%%: 8888-block  0
call    0 never executed
------------------
_ZNK5Catch5clara6detail11BasicResultIvE12errorMessageB5cxx11Ev:
function _ZNK5Catch5clara6detail11BasicResultIvE12errorMessageB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 8888:auto errorMessage() const -> std::string { return m_errorMessage; }
    %%%%%: 8888-block  0
call    0 never executed
------------------
_ZNK5Catch5clara6detail11BasicResultINS1_10ParseStateEE12errorMessageB5cxx11Ev:
function _ZNK5Catch5clara6detail11BasicResultINS1_10ParseStateEE12errorMessageB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 8888:auto errorMessage() const -> std::string { return m_errorMessage; }
    %%%%%: 8888-block  0
call    0 never executed
------------------
        -: 8889:
        -: 8890:protected:
       1*: 8891:void enforceOk() const override {
        -: 8892:
        -: 8893:// Errors shouldn't reach this point, but if they do
        -: 8894:// the actual error message will be in m_errorMessage
       1*: 8895:assert( m_type != ResultBase::LogicError );
       1*: 8896:assert( m_type != ResultBase::RuntimeError );
       1*: 8897:if( m_type != ResultBase::Ok )
    #####: 8898:std::abort();
       1*: 8899:}
------------------
_ZNK5Catch5clara6detail11BasicResultINS1_15ParseResultTypeEE9enforceOkEv:
function _ZNK5Catch5clara6detail11BasicResultINS1_15ParseResultTypeEE9enforceOkEv called 0 returned 0% blocks executed 0%
    #####: 8891:void enforceOk() const override {
        -: 8892:
        -: 8893:// Errors shouldn't reach this point, but if they do
        -: 8894:// the actual error message will be in m_errorMessage
    #####: 8895:assert( m_type != ResultBase::LogicError );
    %%%%%: 8895-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8895-block  1
call    2 never executed
    %%%%%: 8895-block  2
    #####: 8896:assert( m_type != ResultBase::RuntimeError );
    %%%%%: 8896-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8896-block  1
call    2 never executed
    %%%%%: 8896-block  2
    #####: 8897:if( m_type != ResultBase::Ok )
    %%%%%: 8897-block  0
branch  0 never executed
branch  1 never executed
    #####: 8898:std::abort();
    %%%%%: 8898-block  0
call    0 never executed
    #####: 8899:}
------------------
_ZNK5Catch5clara6detail11BasicResultIvE9enforceOkEv:
function _ZNK5Catch5clara6detail11BasicResultIvE9enforceOkEv called 0 returned 0% blocks executed 0%
    #####: 8891:void enforceOk() const override {
        -: 8892:
        -: 8893:// Errors shouldn't reach this point, but if they do
        -: 8894:// the actual error message will be in m_errorMessage
    #####: 8895:assert( m_type != ResultBase::LogicError );
    %%%%%: 8895-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8895-block  1
call    2 never executed
    %%%%%: 8895-block  2
    #####: 8896:assert( m_type != ResultBase::RuntimeError );
    %%%%%: 8896-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8896-block  1
call    2 never executed
    %%%%%: 8896-block  2
    #####: 8897:if( m_type != ResultBase::Ok )
    %%%%%: 8897-block  0
branch  0 never executed
branch  1 never executed
    #####: 8898:std::abort();
    %%%%%: 8898-block  0
call    0 never executed
    #####: 8899:}
------------------
_ZNK5Catch5clara6detail11BasicResultINS1_10ParseStateEE9enforceOkEv:
function _ZNK5Catch5clara6detail11BasicResultINS1_10ParseStateEE9enforceOkEv called 1 returned 100% blocks executed 55%
        1: 8891:void enforceOk() const override {
        -: 8892:
        -: 8893:// Errors shouldn't reach this point, but if they do
        -: 8894:// the actual error message will be in m_errorMessage
       1*: 8895:assert( m_type != ResultBase::LogicError );
        1: 8895-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 8895-block  1
call    2 never executed
        1: 8895-block  2
       1*: 8896:assert( m_type != ResultBase::RuntimeError );
        1: 8896-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 8896-block  1
call    2 never executed
        1: 8896-block  2
        1: 8897:if( m_type != ResultBase::Ok )
        1: 8897-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 8898:std::abort();
    %%%%%: 8898-block  0
call    0 never executed
        1: 8899:}
------------------
        -: 8900:
        -: 8901:std::string m_errorMessage; // Only populated if resultType is an error
        -: 8902:
    #####: 8903:BasicResult( ResultBase::Type type, std::string const &message )
        -: 8904::   ResultValueBase<T>(type),
    #####: 8905:m_errorMessage(message)
        -: 8906:{
    #####: 8907:assert( m_type != ResultBase::Ok );
    #####: 8908:}
------------------
_ZN5Catch5clara6detail11BasicResultIvEC1ENS1_10ResultBase4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail11BasicResultIvEC1ENS1_10ResultBase4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8903:BasicResult( ResultBase::Type type, std::string const &message )
        -: 8904::   ResultValueBase<T>(type),
    #####: 8905:m_errorMessage(message)
    %%%%%: 8905-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 8905-block  1
call    4 never executed
    $$$$$: 8905-block  2
call    5 never executed
        -: 8906:{
    #####: 8907:assert( m_type != ResultBase::Ok );
    %%%%%: 8907-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8907-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8907-block  2
    %%%%%: 8907-block  3
    #####: 8908:}
    %%%%%: 8908-block  0
------------------
_ZN5Catch5clara6detail11BasicResultINS1_10ParseStateEEC1ENS1_10ResultBase4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail11BasicResultINS1_10ParseStateEEC1ENS1_10ResultBase4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8903:BasicResult( ResultBase::Type type, std::string const &message )
        -: 8904::   ResultValueBase<T>(type),
    #####: 8905:m_errorMessage(message)
    %%%%%: 8905-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 8905-block  1
call    4 never executed
    $$$$$: 8905-block  2
call    5 never executed
        -: 8906:{
    #####: 8907:assert( m_type != ResultBase::Ok );
    %%%%%: 8907-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8907-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8907-block  2
    %%%%%: 8907-block  3
    #####: 8908:}
    %%%%%: 8908-block  0
------------------
_ZN5Catch5clara6detail11BasicResultINS1_15ParseResultTypeEEC1ENS1_10ResultBase4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail11BasicResultINS1_15ParseResultTypeEEC1ENS1_10ResultBase4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8903:BasicResult( ResultBase::Type type, std::string const &message )
        -: 8904::   ResultValueBase<T>(type),
    #####: 8905:m_errorMessage(message)
    %%%%%: 8905-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 8905-block  1
call    4 never executed
    $$$$$: 8905-block  2
call    5 never executed
        -: 8906:{
    #####: 8907:assert( m_type != ResultBase::Ok );
    %%%%%: 8907-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8907-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8907-block  2
    %%%%%: 8907-block  3
    #####: 8908:}
    %%%%%: 8908-block  0
------------------
        -: 8909:
        -: 8910:using ResultValueBase<T>::ResultValueBase;
        -: 8911:using ResultBase::m_type;
        -: 8912:};
        -: 8913:
        -: 8914:enum class ParseResultType {
        -: 8915:Matched, NoMatch, ShortCircuitAll, ShortCircuitSame
        -: 8916:};
        -: 8917:
        -: 8918:class ParseState {
        -: 8919:public:
        -: 8920:
function _ZN5Catch5clara6detail10ParseStateC1ENS1_15ParseResultTypeERKNS1_11TokenStreamE called 1 returned 100% blocks executed 100%
        1: 8921:ParseState( ParseResultType type, TokenStream const &remainingTokens )
        1: 8922:: m_type(type),
        1: 8923:m_remainingTokens( remainingTokens )
        1: 8923-block  0
call    0 returned 1
        1: 8924:{}
        -: 8925:
function _ZNK5Catch5clara6detail10ParseState4typeEv called 0 returned 0% blocks executed 0%
    #####: 8926:auto type() const -> ParseResultType { return m_type; }
    %%%%%: 8926-block  0
function _ZNK5Catch5clara6detail10ParseState15remainingTokensEv called 1 returned 100% blocks executed 100%
        1: 8927:auto remainingTokens() const -> TokenStream { return m_remainingTokens; }
        1: 8927-block  0
call    0 returned 1
        -: 8928:
        -: 8929:private:
        -: 8930:ParseResultType m_type;
        -: 8931:TokenStream m_remainingTokens;
        -: 8932:};
        -: 8933:
        -: 8934:using Result = BasicResult<void>;
        -: 8935:using ParserResult = BasicResult<ParseResultType>;
        -: 8936:using InternalParseResult = BasicResult<ParseState>;
        -: 8937:
        -: 8938:struct HelpColumns {
        -: 8939:std::string left;
        -: 8940:std::string right;
        -: 8941:};
        -: 8942:
        -: 8943:template<typename T>
    #####: 8944:inline auto convertInto( std::string const &source, T& target ) -> ParserResult {
    #####: 8945:std::stringstream ss;
    #####: 8946:ss << source;
    #####: 8947:ss >> target;
    #####: 8948:if( ss.fail() )
    #####: 8949:return ParserResult::runtimeError( "Unable to convert '" + source + "' to destination type" );
        -: 8950:else
    #####: 8951:return ParserResult::ok( ParseResultType::Matched );
        -: 8952:}
------------------
_ZN5Catch5clara6detail11convertIntoIiEENS1_11BasicResultINS1_15ParseResultTypeEEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERT_:
function _ZN5Catch5clara6detail11convertIntoIiEENS1_11BasicResultINS1_15ParseResultTypeEEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERT_ called 0 returned 0% blocks executed 0%
    #####: 8944:inline auto convertInto( std::string const &source, T& target ) -> ParserResult {
    #####: 8945:std::stringstream ss;
    %%%%%: 8945-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8945-block  1
call    4 never executed
    $$$$$: 8945-block  2
call    5 never executed
    #####: 8946:ss << source;
    %%%%%: 8946-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8947:ss >> target;
    %%%%%: 8947-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8948:if( ss.fail() )
    %%%%%: 8948-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8948-block  1
branch  3 never executed
branch  4 never executed
    #####: 8949:return ParserResult::runtimeError( "Unable to convert '" + source + "' to destination type" );
    %%%%%: 8949-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8949-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8949-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8949-block  3
call    9 never executed
call   10 never executed
    $$$$$: 8949-block  4
call   11 never executed
    $$$$$: 8949-block  5
    $$$$$: 8949-block  6
call   12 never executed
    $$$$$: 8949-block  7
        -: 8950:else
    #####: 8951:return ParserResult::ok( ParseResultType::Matched );
    %%%%%: 8951-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8951-block  1
    %%%%%: 8951-block  2
    $$$$$: 8951-block  3
        -: 8952:}
------------------
_ZN5Catch5clara6detail11convertIntoIdEENS1_11BasicResultINS1_15ParseResultTypeEEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERT_:
function _ZN5Catch5clara6detail11convertIntoIdEENS1_11BasicResultINS1_15ParseResultTypeEEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERT_ called 0 returned 0% blocks executed 0%
    #####: 8944:inline auto convertInto( std::string const &source, T& target ) -> ParserResult {
    #####: 8945:std::stringstream ss;
    %%%%%: 8945-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8945-block  1
call    4 never executed
    $$$$$: 8945-block  2
call    5 never executed
    #####: 8946:ss << source;
    %%%%%: 8946-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8947:ss >> target;
    %%%%%: 8947-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8948:if( ss.fail() )
    %%%%%: 8948-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8948-block  1
branch  3 never executed
branch  4 never executed
    #####: 8949:return ParserResult::runtimeError( "Unable to convert '" + source + "' to destination type" );
    %%%%%: 8949-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8949-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8949-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8949-block  3
call    9 never executed
call   10 never executed
    $$$$$: 8949-block  4
call   11 never executed
    $$$$$: 8949-block  5
    $$$$$: 8949-block  6
call   12 never executed
    $$$$$: 8949-block  7
        -: 8950:else
    #####: 8951:return ParserResult::ok( ParseResultType::Matched );
    %%%%%: 8951-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8951-block  1
    %%%%%: 8951-block  2
    $$$$$: 8951-block  3
        -: 8952:}
------------------
_ZN5Catch5clara6detail11convertIntoIjEENS1_11BasicResultINS1_15ParseResultTypeEEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERT_:
function _ZN5Catch5clara6detail11convertIntoIjEENS1_11BasicResultINS1_15ParseResultTypeEEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERT_ called 0 returned 0% blocks executed 0%
    #####: 8944:inline auto convertInto( std::string const &source, T& target ) -> ParserResult {
    #####: 8945:std::stringstream ss;
    %%%%%: 8945-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8945-block  1
call    4 never executed
    $$$$$: 8945-block  2
call    5 never executed
    #####: 8946:ss << source;
    %%%%%: 8946-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8947:ss >> target;
    %%%%%: 8947-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8948:if( ss.fail() )
    %%%%%: 8948-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8948-block  1
branch  3 never executed
branch  4 never executed
    #####: 8949:return ParserResult::runtimeError( "Unable to convert '" + source + "' to destination type" );
    %%%%%: 8949-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8949-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8949-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8949-block  3
call    9 never executed
call   10 never executed
    $$$$$: 8949-block  4
call   11 never executed
    $$$$$: 8949-block  5
    $$$$$: 8949-block  6
call   12 never executed
    $$$$$: 8949-block  7
        -: 8950:else
    #####: 8951:return ParserResult::ok( ParseResultType::Matched );
    %%%%%: 8951-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8951-block  1
    %%%%%: 8951-block  2
    $$$$$: 8951-block  3
        -: 8952:}
------------------
function _ZN5Catch5clara6detail11convertIntoERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS7_ called 1 returned 100% blocks executed 100%
        1: 8953:inline auto convertInto( std::string const &source, std::string& target ) -> ParserResult {
        1: 8954:target = source;
        1: 8954-block  0
call    0 returned 1
        1: 8955:return ParserResult::ok( ParseResultType::Matched );
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 8955-block  0
        1: 8955-block  1
        1: 8955-block  2
        -: 8956:}
function _ZN5Catch5clara6detail11convertIntoERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERb called 0 returned 0% blocks executed 0%
    #####: 8957:inline auto convertInto( std::string const &source, bool &target ) -> ParserResult {
    #####: 8958:std::string srcLC = source;
    %%%%%: 8958-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8958-block  1
call    3 never executed
    $$$$$: 8958-block  2
call    4 never executed
    #####: 8959:std::transform( srcLC.begin(), srcLC.end(), srcLC.begin(), []( char c ) { return static_cast<char>( std::tolower(c) ); } );
    %%%%%: 8959-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 8960:if (srcLC == "y" || srcLC == "1" || srcLC == "true" || srcLC == "yes" || srcLC == "on")
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8960-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8960-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8960-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 8960-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 8960-block  4
    %%%%%: 8960-block  5
    %%%%%: 8960-block  6
branch 15 never executed
branch 16 never executed
    #####: 8961:target = true;
    %%%%%: 8961-block  0
    #####: 8962:else if (srcLC == "n" || srcLC == "0" || srcLC == "false" || srcLC == "no" || srcLC == "off")
    %%%%%: 8962-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8962-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8962-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8962-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 8962-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 8962-block  5
    %%%%%: 8962-block  6
    %%%%%: 8962-block  7
branch 15 never executed
branch 16 never executed
    #####: 8963:target = false;
    %%%%%: 8963-block  0
        -: 8964:else
    #####: 8965:return ParserResult::runtimeError( "Expected a boolean value but did not recognise: '" + source + "'" );
    %%%%%: 8965-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8965-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8965-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8965-block  3
    %%%%%: 8965-block  4
call    9 never executed
call   10 never executed
    $$$$$: 8965-block  5
call   11 never executed
    $$$$$: 8965-block  6
    $$$$$: 8965-block  7
call   12 never executed
    $$$$$: 8965-block  8
    #####: 8966:return ParserResult::ok( ParseResultType::Matched );
    %%%%%: 8966-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8966-block  1
    %%%%%: 8966-block  2
    $$$$$: 8966-block  3
        -: 8967:}
        -: 8968:#ifdef CLARA_CONFIG_OPTIONAL_TYPE
        -: 8969:template<typename T>
        -: 8970:inline auto convertInto( std::string const &source, CLARA_CONFIG_OPTIONAL_TYPE<T>& target ) -> ParserResult {
        -: 8971:T temp;
        -: 8972:auto result = convertInto( source, temp );
        -: 8973:if( result )
        -: 8974:target = std::move(temp);
        -: 8975:return result;
        -: 8976:}
        -: 8977:#endif // CLARA_CONFIG_OPTIONAL_TYPE
        -: 8978:
        -: 8979:struct NonCopyable {
        -: 8980:NonCopyable() = default;
        -: 8981:NonCopyable( NonCopyable const & ) = delete;
        -: 8982:NonCopyable( NonCopyable && ) = delete;
        -: 8983:NonCopyable &operator=( NonCopyable const & ) = delete;
        -: 8984:NonCopyable &operator=( NonCopyable && ) = delete;
        -: 8985:};
        -: 8986:
        -: 8987:struct BoundRef : NonCopyable {
      31*: 8988:virtual ~BoundRef() = default;
------------------
_ZN5Catch5clara6detail8BoundRefD0Ev:
function _ZN5Catch5clara6detail8BoundRefD0Ev called 0 returned 0% blocks executed 0%
    #####: 8988:virtual ~BoundRef() = default;
    %%%%%: 8988-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch5clara6detail8BoundRefD1Ev:
function _ZN5Catch5clara6detail8BoundRefD1Ev called 0 returned 0% blocks executed 0%
    #####: 8988:virtual ~BoundRef() = default;
------------------
_ZN5Catch5clara6detail8BoundRefD2Ev:
function _ZN5Catch5clara6detail8BoundRefD2Ev called 31 returned 100% blocks executed 100%
       31: 8988:virtual ~BoundRef() = default;
------------------
function _ZNK5Catch5clara6detail8BoundRef11isContainerEv called 0 returned 0% blocks executed 0%
    #####: 8989:virtual auto isContainer() const -> bool { return false; }
    %%%%%: 8989-block  0
function _ZNK5Catch5clara6detail8BoundRef6isFlagEv called 0 returned 0% blocks executed 0%
    #####: 8990:virtual auto isFlag() const -> bool { return false; }
    %%%%%: 8990-block  0
        -: 8991:};
        -: 8992:struct BoundValueRefBase : BoundRef {
        -: 8993:virtual auto setValue( std::string const &arg ) -> ParserResult = 0;
        -: 8994:};
        -: 8995:struct BoundFlagRefBase : BoundRef {
        -: 8996:virtual auto setFlag( bool flag ) -> ParserResult = 0;
function _ZNK5Catch5clara6detail16BoundFlagRefBase6isFlagEv called 0 returned 0% blocks executed 0%
    #####: 8997:virtual auto isFlag() const -> bool { return true; }
    %%%%%: 8997-block  0
        -: 8998:};
        -: 8999:
        -: 9000:template<typename T>
        -: 9001:struct BoundValueRef : BoundValueRefBase {
        -: 9002:T &m_ref;
        -: 9003:
        6: 9004:explicit BoundValueRef( T &ref ) : m_ref( ref ) {}
------------------
_ZN5Catch5clara6detail13BoundValueRefIdEC1ERd:
function _ZN5Catch5clara6detail13BoundValueRefIdEC1ERd called 1 returned 100% blocks executed 100%
        1: 9004:explicit BoundValueRef( T &ref ) : m_ref( ref ) {}
        1: 9004-block  0
call    0 returned 1
------------------
_ZN5Catch5clara6detail13BoundValueRefIjEC1ERj:
function _ZN5Catch5clara6detail13BoundValueRefIjEC1ERj called 2 returned 100% blocks executed 100%
        2: 9004:explicit BoundValueRef( T &ref ) : m_ref( ref ) {}
        2: 9004-block  0
call    0 returned 2
------------------
_ZN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERS8_:
function _ZN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERS8_ called 3 returned 100% blocks executed 100%
        3: 9004:explicit BoundValueRef( T &ref ) : m_ref( ref ) {}
        3: 9004-block  0
call    0 returned 3
------------------
        -: 9005:
       1*: 9006:auto setValue( std::string const &arg ) -> ParserResult override {
       1*: 9007:return convertInto( arg, m_ref );
        -: 9008:}
------------------
_ZN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8setValueERKS8_:
function _ZN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8setValueERKS8_ called 1 returned 100% blocks executed 100%
        1: 9006:auto setValue( std::string const &arg ) -> ParserResult override {
        1: 9007:return convertInto( arg, m_ref );
        1: 9007-block  0
call    0 returned 1
        -: 9008:}
------------------
_ZN5Catch5clara6detail13BoundValueRefIjE8setValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail13BoundValueRefIjE8setValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 9006:auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 9007:return convertInto( arg, m_ref );
    %%%%%: 9007-block  0
call    0 never executed
        -: 9008:}
------------------
_ZN5Catch5clara6detail13BoundValueRefIdE8setValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail13BoundValueRefIdE8setValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 9006:auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 9007:return convertInto( arg, m_ref );
    %%%%%: 9007-block  0
call    0 never executed
        -: 9008:}
------------------
        -: 9009:};
        -: 9010:
        -: 9011:template<typename T>
        -: 9012:struct BoundValueRef<std::vector<T>> : BoundValueRefBase {
        -: 9013:std::vector<T> &m_ref;
        -: 9014:
function _ZN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EEEC1ERSB_ called 2 returned 100% blocks executed 100%
        2: 9015:explicit BoundValueRef( std::vector<T> &ref ) : m_ref( ref ) {}
        2: 9015-block  0
call    0 returned 2
        -: 9016:
function _ZNK5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EEE11isContainerEv called 0 returned 0% blocks executed 0%
    #####: 9017:auto isContainer() const -> bool override { return true; }
    %%%%%: 9017-block  0
        -: 9018:
function _ZN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EEE8setValueERKS9_ called 0 returned 0% blocks executed 0%
    #####: 9019:auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 9020:T temp;
    %%%%%: 9020-block  0
call    0 never executed
    %%%%%: 9020-block  1
call    1 never executed
    $$$$$: 9020-block  2
call    2 never executed
    #####: 9021:auto result = convertInto( arg, temp );
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9022:if( result )
    %%%%%: 9022-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9023:m_ref.push_back( temp );
    %%%%%: 9023-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9024:return result;
    %%%%%: 9024-block  0
    %%%%%: 9024-block  1
        -: 9025:}
        -: 9026:};
        -: 9027:
        -: 9028:struct BoundFlagRef : BoundFlagRefBase {
        -: 9029:bool &m_ref;
        -: 9030:
function _ZN5Catch5clara6detail12BoundFlagRefC1ERb called 11 returned 100% blocks executed 100%
       11: 9031:explicit BoundFlagRef( bool &ref ) : m_ref( ref ) {}
       11: 9031-block  0
call    0 returned 11
        -: 9032:
function _ZN5Catch5clara6detail12BoundFlagRef7setFlagEb called 0 returned 0% blocks executed 0%
    #####: 9033:auto setFlag( bool flag ) -> ParserResult override {
    #####: 9034:m_ref = flag;
    #####: 9035:return ParserResult::ok( ParseResultType::Matched );
    %%%%%: 9035-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9035-block  1
    %%%%%: 9035-block  2
    %%%%%: 9035-block  3
        -: 9036:}
        -: 9037:};
        -: 9038:
        -: 9039:template<typename ReturnType>
        -: 9040:struct LambdaInvoker {
        -: 9041:static_assert( std::is_same<ReturnType, ParserResult>::value, "Lambda must return void or clara::ParserResult" );
        -: 9042:
        -: 9043:template<typename L, typename ArgType>
    #####: 9044:static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 9045:return lambda( arg );
        -: 9046:}
------------------
_ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_SF_EES5_RKT_RKT0_:
function _ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_SF_EES5_RKT_RKT0_ called 0 returned 0% blocks executed 0%
    #####: 9044:static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 9045:return lambda( arg );
    %%%%%: 9045-block  0
call    0 never executed
        -: 9046:}
------------------
_ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_SF_EES5_RKT_RKT0_:
function _ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_SF_EES5_RKT_RKT0_ called 0 returned 0% blocks executed 0%
    #####: 9044:static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 9045:return lambda( arg );
    %%%%%: 9045-block  0
call    0 never executed
        -: 9046:}
------------------
_ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_SF_EES5_RKT_RKT0_:
function _ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_SF_EES5_RKT_RKT0_ called 0 returned 0% blocks executed 0%
    #####: 9044:static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 9045:return lambda( arg );
    %%%%%: 9045-block  0
call    0 never executed
        -: 9046:}
------------------
_ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_SF_EES5_RKT_RKT0_:
function _ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_SF_EES5_RKT_RKT0_ called 0 returned 0% blocks executed 0%
    #####: 9044:static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 9045:return lambda( arg );
    %%%%%: 9045-block  0
call    0 never executed
        -: 9046:}
------------------
_ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_SF_EES5_RKT_RKT0_:
function _ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_SF_EES5_RKT_RKT0_ called 0 returned 0% blocks executed 0%
    #####: 9044:static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 9045:return lambda( arg );
    %%%%%: 9045-block  0
call    0 never executed
        -: 9046:}
------------------
_ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_SF_EES5_RKT_RKT0_:
function _ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_SF_EES5_RKT_RKT0_ called 0 returned 0% blocks executed 0%
    #####: 9044:static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 9045:return lambda( arg );
    %%%%%: 9045-block  0
call    0 never executed
        -: 9046:}
------------------
_ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_SF_EES5_RKT_RKT0_:
function _ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_SF_EES5_RKT_RKT0_ called 0 returned 0% blocks executed 0%
    #####: 9044:static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 9045:return lambda( arg );
    %%%%%: 9045-block  0
call    0 never executed
        -: 9046:}
------------------
_ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_SF_EES5_RKT_RKT0_:
function _ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_SF_EES5_RKT_RKT0_ called 0 returned 0% blocks executed 0%
    #####: 9044:static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 9045:return lambda( arg );
    %%%%%: 9045-block  0
call    0 never executed
        -: 9046:}
------------------
_ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS1_4HelpC4ERbEUlbE_bEES5_RKT_RKT0_:
function _ZN5Catch5clara6detail13LambdaInvokerINS1_11BasicResultINS1_15ParseResultTypeEEEE6invokeIZNS1_4HelpC4ERbEUlbE_bEES5_RKT_RKT0_ called 0 returned 0% blocks executed 0%
    #####: 9044:static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 9045:return lambda( arg );
    %%%%%: 9045-block  0
call    0 never executed
        -: 9046:}
------------------
        -: 9047:};
        -: 9048:
        -: 9049:template<>
        -: 9050:struct LambdaInvoker<void> {
        -: 9051:template<typename L, typename ArgType>
    #####: 9052:static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 9053:lambda( arg );
    #####: 9054:return ParserResult::ok( ParseResultType::Matched );
        -: 9055:}
------------------
_ZN5Catch5clara6detail13LambdaInvokerIvE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUliE8_iEENS1_11BasicResultINS1_15ParseResultTypeEEERKT_RKT0_:
function _ZN5Catch5clara6detail13LambdaInvokerIvE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUliE8_iEENS1_11BasicResultINS1_15ParseResultTypeEEERKT_RKT0_ called 0 returned 0% blocks executed 0%
    #####: 9052:static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 9053:lambda( arg );
    %%%%%: 9053-block  0
call    0 never executed
    #####: 9054:return ParserResult::ok( ParseResultType::Matched );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9054-block  0
    %%%%%: 9054-block  1
    %%%%%: 9054-block  2
        -: 9055:}
------------------
_ZN5Catch5clara6detail13LambdaInvokerIvE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE9_bEENS1_11BasicResultINS1_15ParseResultTypeEEERKT_RKT0_:
function _ZN5Catch5clara6detail13LambdaInvokerIvE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE9_bEENS1_11BasicResultINS1_15ParseResultTypeEEERKT_RKT0_ called 0 returned 0% blocks executed 0%
    #####: 9052:static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 9053:lambda( arg );
    %%%%%: 9053-block  0
call    0 never executed
    #####: 9054:return ParserResult::ok( ParseResultType::Matched );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9054-block  0
    %%%%%: 9054-block  1
    %%%%%: 9054-block  2
        -: 9055:}
------------------
_ZN5Catch5clara6detail13LambdaInvokerIvE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE7_bEENS1_11BasicResultINS1_15ParseResultTypeEEERKT_RKT0_:
function _ZN5Catch5clara6detail13LambdaInvokerIvE6invokeIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE7_bEENS1_11BasicResultINS1_15ParseResultTypeEEERKT_RKT0_ called 0 returned 0% blocks executed 0%
    #####: 9052:static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 9053:lambda( arg );
    %%%%%: 9053-block  0
call    0 never executed
    #####: 9054:return ParserResult::ok( ParseResultType::Matched );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9054-block  0
    %%%%%: 9054-block  1
    %%%%%: 9054-block  2
        -: 9055:}
------------------
        -: 9056:};
        -: 9057:
        -: 9058:template<typename ArgType, typename L>
    #####: 9059:inline auto invokeLambda( L const &lambda, std::string const &arg ) -> ParserResult {
    #####: 9060:ArgType temp{};
    #####: 9061:auto result = convertInto( arg, temp );
    #####: 9062:return !result
        -: 9063:? result
    #####: 9064:: LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( lambda, temp );
        -: 9065:}
------------------
_ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E6_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_:
function _ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E6_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_ called 0 returned 0% blocks executed 0%
    #####: 9059:inline auto invokeLambda( L const &lambda, std::string const &arg ) -> ParserResult {
    #####: 9060:ArgType temp{};
    %%%%%: 9060-block  0
call    0 never executed
call    1 never executed
    $$$$$: 9060-block  1
call    2 never executed
    #####: 9061:auto result = convertInto( arg, temp );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9061-block  0
call    3 never executed
    $$$$$: 9061-block  1
call    4 never executed
    #####: 9062:return !result
    %%%%%: 9062-block  0
call    0 never executed
        -: 9063:? result
    #####: 9064:: LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( lambda, temp );
branch  0 never executed
branch  1 never executed
    %%%%%: 9064-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9064-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9064-block  2
    %%%%%: 9064-block  3
        -: 9065:}
------------------
_ZN5Catch5clara6detail12invokeLambdaIiZNS_21makeCommandLineParserERNS_10ConfigDataEEUliE8_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail12invokeLambdaIiZNS_21makeCommandLineParserERNS_10ConfigDataEEUliE8_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 9059:inline auto invokeLambda( L const &lambda, std::string const &arg ) -> ParserResult {
    #####: 9060:ArgType temp{};
    #####: 9061:auto result = convertInto( arg, temp );
    %%%%%: 9061-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9061-block  1
call    3 never executed
    $$$$$: 9061-block  2
call    4 never executed
    #####: 9062:return !result
    %%%%%: 9062-block  0
call    0 never executed
        -: 9063:? result
    #####: 9064:: LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( lambda, temp );
branch  0 never executed
branch  1 never executed
    %%%%%: 9064-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9064-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9064-block  2
    %%%%%: 9064-block  3
        -: 9065:}
------------------
_ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_:
function _ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_ called 0 returned 0% blocks executed 0%
    #####: 9059:inline auto invokeLambda( L const &lambda, std::string const &arg ) -> ParserResult {
    #####: 9060:ArgType temp{};
    %%%%%: 9060-block  0
call    0 never executed
call    1 never executed
    $$$$$: 9060-block  1
call    2 never executed
    #####: 9061:auto result = convertInto( arg, temp );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9061-block  0
call    3 never executed
    $$$$$: 9061-block  1
call    4 never executed
    #####: 9062:return !result
    %%%%%: 9062-block  0
call    0 never executed
        -: 9063:? result
    #####: 9064:: LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( lambda, temp );
branch  0 never executed
branch  1 never executed
    %%%%%: 9064-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9064-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9064-block  2
    %%%%%: 9064-block  3
        -: 9065:}
------------------
_ZN5Catch5clara6detail12invokeLambdaIbZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE9_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail12invokeLambdaIbZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE9_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 9059:inline auto invokeLambda( L const &lambda, std::string const &arg ) -> ParserResult {
    #####: 9060:ArgType temp{};
    #####: 9061:auto result = convertInto( arg, temp );
    %%%%%: 9061-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9061-block  1
call    3 never executed
    $$$$$: 9061-block  2
call    4 never executed
    #####: 9062:return !result
    %%%%%: 9062-block  0
call    0 never executed
        -: 9063:? result
    #####: 9064:: LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( lambda, temp );
branch  0 never executed
branch  1 never executed
    %%%%%: 9064-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9064-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9064-block  2
    %%%%%: 9064-block  3
        -: 9065:}
------------------
_ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E0_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_:
function _ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E0_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_ called 0 returned 0% blocks executed 0%
    #####: 9059:inline auto invokeLambda( L const &lambda, std::string const &arg ) -> ParserResult {
    #####: 9060:ArgType temp{};
    %%%%%: 9060-block  0
call    0 never executed
call    1 never executed
    $$$$$: 9060-block  1
call    2 never executed
    #####: 9061:auto result = convertInto( arg, temp );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9061-block  0
call    3 never executed
    $$$$$: 9061-block  1
call    4 never executed
    #####: 9062:return !result
    %%%%%: 9062-block  0
call    0 never executed
        -: 9063:? result
    #####: 9064:: LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( lambda, temp );
branch  0 never executed
branch  1 never executed
    %%%%%: 9064-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9064-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9064-block  2
    %%%%%: 9064-block  3
        -: 9065:}
------------------
_ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E5_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_:
function _ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E5_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_ called 0 returned 0% blocks executed 0%
    #####: 9059:inline auto invokeLambda( L const &lambda, std::string const &arg ) -> ParserResult {
    #####: 9060:ArgType temp{};
    %%%%%: 9060-block  0
call    0 never executed
call    1 never executed
    $$$$$: 9060-block  1
call    2 never executed
    #####: 9061:auto result = convertInto( arg, temp );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9061-block  0
call    3 never executed
    $$$$$: 9061-block  1
call    4 never executed
    #####: 9062:return !result
    %%%%%: 9062-block  0
call    0 never executed
        -: 9063:? result
    #####: 9064:: LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( lambda, temp );
branch  0 never executed
branch  1 never executed
    %%%%%: 9064-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9064-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9064-block  2
    %%%%%: 9064-block  3
        -: 9065:}
------------------
_ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E1_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_:
function _ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E1_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_ called 0 returned 0% blocks executed 0%
    #####: 9059:inline auto invokeLambda( L const &lambda, std::string const &arg ) -> ParserResult {
    #####: 9060:ArgType temp{};
    %%%%%: 9060-block  0
call    0 never executed
call    1 never executed
    $$$$$: 9060-block  1
call    2 never executed
    #####: 9061:auto result = convertInto( arg, temp );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9061-block  0
call    3 never executed
    $$$$$: 9061-block  1
call    4 never executed
    #####: 9062:return !result
    %%%%%: 9062-block  0
call    0 never executed
        -: 9063:? result
    #####: 9064:: LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( lambda, temp );
branch  0 never executed
branch  1 never executed
    %%%%%: 9064-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9064-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9064-block  2
    %%%%%: 9064-block  3
        -: 9065:}
------------------
_ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E2_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_:
function _ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E2_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_ called 0 returned 0% blocks executed 0%
    #####: 9059:inline auto invokeLambda( L const &lambda, std::string const &arg ) -> ParserResult {
    #####: 9060:ArgType temp{};
    %%%%%: 9060-block  0
call    0 never executed
call    1 never executed
    $$$$$: 9060-block  1
call    2 never executed
    #####: 9061:auto result = convertInto( arg, temp );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9061-block  0
call    3 never executed
    $$$$$: 9061-block  1
call    4 never executed
    #####: 9062:return !result
    %%%%%: 9062-block  0
call    0 never executed
        -: 9063:? result
    #####: 9064:: LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( lambda, temp );
branch  0 never executed
branch  1 never executed
    %%%%%: 9064-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9064-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9064-block  2
    %%%%%: 9064-block  3
        -: 9065:}
------------------
_ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E3_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_:
function _ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E3_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_ called 0 returned 0% blocks executed 0%
    #####: 9059:inline auto invokeLambda( L const &lambda, std::string const &arg ) -> ParserResult {
    #####: 9060:ArgType temp{};
    %%%%%: 9060-block  0
call    0 never executed
call    1 never executed
    $$$$$: 9060-block  1
call    2 never executed
    #####: 9061:auto result = convertInto( arg, temp );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9061-block  0
call    3 never executed
    $$$$$: 9061-block  1
call    4 never executed
    #####: 9062:return !result
    %%%%%: 9062-block  0
call    0 never executed
        -: 9063:? result
    #####: 9064:: LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( lambda, temp );
branch  0 never executed
branch  1 never executed
    %%%%%: 9064-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9064-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9064-block  2
    %%%%%: 9064-block  3
        -: 9065:}
------------------
_ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E4_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_:
function _ZN5Catch5clara6detail12invokeLambdaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKS8_E4_EENS1_11BasicResultINS1_15ParseResultTypeEEERKT0_SC_ called 0 returned 0% blocks executed 0%
    #####: 9059:inline auto invokeLambda( L const &lambda, std::string const &arg ) -> ParserResult {
    #####: 9060:ArgType temp{};
    %%%%%: 9060-block  0
call    0 never executed
call    1 never executed
    $$$$$: 9060-block  1
call    2 never executed
    #####: 9061:auto result = convertInto( arg, temp );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9061-block  0
call    3 never executed
    $$$$$: 9061-block  1
call    4 never executed
    #####: 9062:return !result
    %%%%%: 9062-block  0
call    0 never executed
        -: 9063:? result
    #####: 9064:: LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( lambda, temp );
branch  0 never executed
branch  1 never executed
    %%%%%: 9064-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9064-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9064-block  2
    %%%%%: 9064-block  3
        -: 9065:}
------------------
        -: 9066:
        -: 9067:template<typename L>
        -: 9068:struct BoundLambda : BoundValueRefBase {
        -: 9069:L m_lambda;
        -: 9070:
        -: 9071:static_assert( UnaryLambdaTraits<L>::isValid, "Supplied lambda must take exactly one argument" );
       10: 9072:explicit BoundLambda( L const &lambda ) : m_lambda( lambda ) {}
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EC2ERKSD_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EC2ERKSD_ called 1 returned 100% blocks executed 100%
        1: 9072:explicit BoundLambda( L const &lambda ) : m_lambda( lambda ) {}
        1: 9072-block  0
call    0 returned 1
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EC2ERKSD_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EC2ERKSD_ called 1 returned 100% blocks executed 100%
        1: 9072:explicit BoundLambda( L const &lambda ) : m_lambda( lambda ) {}
        1: 9072-block  0
call    0 returned 1
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EC2ERKSD_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EC2ERKSD_ called 1 returned 100% blocks executed 100%
        1: 9072:explicit BoundLambda( L const &lambda ) : m_lambda( lambda ) {}
        1: 9072-block  0
call    0 returned 1
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EC2ERKSD_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EC2ERKSD_ called 1 returned 100% blocks executed 100%
        1: 9072:explicit BoundLambda( L const &lambda ) : m_lambda( lambda ) {}
        1: 9072-block  0
call    0 returned 1
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EC2ERKSD_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EC2ERKSD_ called 1 returned 100% blocks executed 100%
        1: 9072:explicit BoundLambda( L const &lambda ) : m_lambda( lambda ) {}
        1: 9072-block  0
call    0 returned 1
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EC2ERKSD_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EC2ERKSD_ called 1 returned 100% blocks executed 100%
        1: 9072:explicit BoundLambda( L const &lambda ) : m_lambda( lambda ) {}
        1: 9072-block  0
call    0 returned 1
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE9_EC2ERKS5_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE9_EC2ERKS5_ called 1 returned 100% blocks executed 100%
        1: 9072:explicit BoundLambda( L const &lambda ) : m_lambda( lambda ) {}
        1: 9072-block  0
call    0 returned 1
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EC2ERKSD_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EC2ERKSD_ called 1 returned 100% blocks executed 100%
        1: 9072:explicit BoundLambda( L const &lambda ) : m_lambda( lambda ) {}
        1: 9072-block  0
call    0 returned 1
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUliE8_EC2ERKS5_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUliE8_EC2ERKS5_ called 1 returned 100% blocks executed 100%
        1: 9072:explicit BoundLambda( L const &lambda ) : m_lambda( lambda ) {}
        1: 9072-block  0
call    0 returned 1
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EC2ERKSD_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EC2ERKSD_ called 1 returned 100% blocks executed 100%
        1: 9072:explicit BoundLambda( L const &lambda ) : m_lambda( lambda ) {}
        1: 9072-block  0
call    0 returned 1
------------------
        -: 9073:
    #####: 9074:auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 9075:return invokeLambda<typename UnaryLambdaTraits<L>::ArgType>( m_lambda, arg );
        -: 9076:}
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_E8setValueESC_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_E8setValueESC_ called 0 returned 0% blocks executed 0%
    #####: 9074:auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 9075:return invokeLambda<typename UnaryLambdaTraits<L>::ArgType>( m_lambda, arg );
    %%%%%: 9075-block  0
call    0 never executed
        -: 9076:}
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUliE8_E8setValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUliE8_E8setValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 9074:auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 9075:return invokeLambda<typename UnaryLambdaTraits<L>::ArgType>( m_lambda, arg );
    %%%%%: 9075-block  0
call    0 never executed
        -: 9076:}
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_E8setValueESC_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_E8setValueESC_ called 0 returned 0% blocks executed 0%
    #####: 9074:auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 9075:return invokeLambda<typename UnaryLambdaTraits<L>::ArgType>( m_lambda, arg );
    %%%%%: 9075-block  0
call    0 never executed
        -: 9076:}
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE9_E8setValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE9_E8setValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 9074:auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 9075:return invokeLambda<typename UnaryLambdaTraits<L>::ArgType>( m_lambda, arg );
    %%%%%: 9075-block  0
call    0 never executed
        -: 9076:}
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_E8setValueESC_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_E8setValueESC_ called 0 returned 0% blocks executed 0%
    #####: 9074:auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 9075:return invokeLambda<typename UnaryLambdaTraits<L>::ArgType>( m_lambda, arg );
    %%%%%: 9075-block  0
call    0 never executed
        -: 9076:}
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_E8setValueESC_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_E8setValueESC_ called 0 returned 0% blocks executed 0%
    #####: 9074:auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 9075:return invokeLambda<typename UnaryLambdaTraits<L>::ArgType>( m_lambda, arg );
    %%%%%: 9075-block  0
call    0 never executed
        -: 9076:}
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_E8setValueESC_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_E8setValueESC_ called 0 returned 0% blocks executed 0%
    #####: 9074:auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 9075:return invokeLambda<typename UnaryLambdaTraits<L>::ArgType>( m_lambda, arg );
    %%%%%: 9075-block  0
call    0 never executed
        -: 9076:}
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_E8setValueESC_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_E8setValueESC_ called 0 returned 0% blocks executed 0%
    #####: 9074:auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 9075:return invokeLambda<typename UnaryLambdaTraits<L>::ArgType>( m_lambda, arg );
    %%%%%: 9075-block  0
call    0 never executed
        -: 9076:}
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_E8setValueESC_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_E8setValueESC_ called 0 returned 0% blocks executed 0%
    #####: 9074:auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 9075:return invokeLambda<typename UnaryLambdaTraits<L>::ArgType>( m_lambda, arg );
    %%%%%: 9075-block  0
call    0 never executed
        -: 9076:}
------------------
_ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_E8setValueESC_:
function _ZN5Catch5clara6detail11BoundLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_E8setValueESC_ called 0 returned 0% blocks executed 0%
    #####: 9074:auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 9075:return invokeLambda<typename UnaryLambdaTraits<L>::ArgType>( m_lambda, arg );
    %%%%%: 9075-block  0
call    0 never executed
        -: 9076:}
------------------
        -: 9077:};
        -: 9078:
        -: 9079:template<typename L>
        -: 9080:struct BoundFlagLambda : BoundFlagRefBase {
        -: 9081:L m_lambda;
        -: 9082:
        -: 9083:static_assert( UnaryLambdaTraits<L>::isValid, "Supplied lambda must take exactly one argument" );
        -: 9084:static_assert( std::is_same<typename UnaryLambdaTraits<L>::ArgType, bool>::value, "flags must be boolean" );
        -: 9085:
        2: 9086:explicit BoundFlagLambda( L const &lambda ) : m_lambda( lambda ) {}
------------------
_ZN5Catch5clara6detail15BoundFlagLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE7_EC2ERKS5_:
function _ZN5Catch5clara6detail15BoundFlagLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE7_EC2ERKS5_ called 1 returned 100% blocks executed 100%
        1: 9086:explicit BoundFlagLambda( L const &lambda ) : m_lambda( lambda ) {}
        1: 9086-block  0
call    0 returned 1
------------------
_ZN5Catch5clara6detail15BoundFlagLambdaIZNS1_4HelpC4ERbEUlbE_EC1ERKS5_:
function _ZN5Catch5clara6detail15BoundFlagLambdaIZNS1_4HelpC4ERbEUlbE_EC1ERKS5_ called 1 returned 100% blocks executed 100%
        1: 9086:explicit BoundFlagLambda( L const &lambda ) : m_lambda( lambda ) {}
        1: 9086-block  0
call    0 returned 1
------------------
        -: 9087:
    #####: 9088:auto setFlag( bool flag ) -> ParserResult override {
    #####: 9089:return LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( m_lambda, flag );
        -: 9090:}
------------------
_ZN5Catch5clara6detail15BoundFlagLambdaIZNS1_4HelpC4ERbEUlbE_E7setFlagEb:
function _ZN5Catch5clara6detail15BoundFlagLambdaIZNS1_4HelpC4ERbEUlbE_E7setFlagEb called 0 returned 0% blocks executed 0%
    #####: 9088:auto setFlag( bool flag ) -> ParserResult override {
    #####: 9089:return LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( m_lambda, flag );
    %%%%%: 9089-block  0
call    0 never executed
        -: 9090:}
------------------
_ZN5Catch5clara6detail15BoundFlagLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE7_E7setFlagEb:
function _ZN5Catch5clara6detail15BoundFlagLambdaIZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE7_E7setFlagEb called 0 returned 0% blocks executed 0%
    #####: 9088:auto setFlag( bool flag ) -> ParserResult override {
    #####: 9089:return LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( m_lambda, flag );
    %%%%%: 9089-block  0
call    0 never executed
        -: 9090:}
------------------
        -: 9091:};
        -: 9092:
        -: 9093:enum class Optionality { Optional, Required };
        -: 9094:
        -: 9095:struct Parser;
        -: 9096:
        -: 9097:class ParserBase {
        -: 9098:public:
function _ZN5Catch5clara6detail10ParserBaseD2Ev called 1495 returned 100% blocks executed 100%
     1495: 9099:virtual ~ParserBase() = default;
function _ZNK5Catch5clara6detail10ParserBase8validateEv called 0 returned 0% blocks executed 0%
    #####: 9100:virtual auto validate() const -> Result { return Result::ok(); }
    %%%%%: 9100-block  0
call    0 never executed
        -: 9101:virtual auto parse( std::string const& exeName, TokenStream const &tokens) const -> InternalParseResult  = 0;
function _ZNK5Catch5clara6detail10ParserBase11cardinalityEv called 0 returned 0% blocks executed 0%
    #####: 9102:virtual auto cardinality() const -> size_t { return 1; }
    %%%%%: 9102-block  0
        -: 9103:
function _ZNK5Catch5clara6detail10ParserBase5parseERKNS1_4ArgsE called 1 returned 100% blocks executed 64%
        1: 9104:auto parse( Args const &args ) const -> InternalParseResult {
        1: 9105:return parse( args.exeName(), TokenStream( args ) );
        1: 9105-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9105-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9105-block  2
        1: 9105-block  3
call    7 returned 1
call    8 returned 1
        1: 9105-block  4
    $$$$$: 9105-block  5
call    9 never executed
    $$$$$: 9105-block  6
    $$$$$: 9105-block  7
call   10 never executed
        -: 9106:}
        -: 9107:};
        -: 9108:
        -: 9109:template<typename DerivedT>
        -: 9110:class ComposableParserImpl : public ParserBase {
        -: 9111:public:
        -: 9112:template<typename T>
        -: 9113:auto operator|( T const &other ) const -> Parser;
        -: 9114:
        -: 9115:template<typename T>
        -: 9116:auto operator+( T const &other ) const -> Parser;
        -: 9117:};
        -: 9118:
        -: 9119:// Common code and state for Args and Opts
        -: 9120:template<typename DerivedT>
        -: 9121:class ParserRefImpl : public ComposableParserImpl<DerivedT> {
        -: 9122:protected:
        -: 9123:Optionality m_optionality = Optionality::Optional;
        -: 9124:std::shared_ptr<BoundRef> m_ref;
        -: 9125:std::string m_hint;
        -: 9126:std::string m_description;
        -: 9127:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2ERKSt10shared_ptrINS1_8BoundRefEE called 13 returned 100% blocks executed 100%
       13: 9128:explicit ParserRefImpl( std::shared_ptr<BoundRef> const &ref ) : m_ref( ref ) {}
       13: 9128-block  0
call    0 returned 13
call    1 returned 13
call    2 returned 13
call    3 returned 13
        -: 9129:
        -: 9130:public:
        -: 9131:template<typename T>
        7: 9132:ParserRefImpl( T &ref, std::string const &hint )
        -: 9133::   m_ref( std::make_shared<BoundValueRef<T>>( ref ) ),
        7: 9134:m_hint( hint )
        7: 9135:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IdEERT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IdEERT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 73%
        1: 9132:ParserRefImpl( T &ref, std::string const &hint )
        -: 9133::   m_ref( std::make_shared<BoundValueRef<T>>( ref ) ),
        1: 9134:m_hint( hint )
        1: 9134-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9134-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 9134-block  2
call    9 returned 1
    $$$$$: 9134-block  3
call   10 never executed
    $$$$$: 9134-block  4
call   11 never executed
        1: 9135:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IjEERT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IjEERT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 73%
        2: 9132:ParserRefImpl( T &ref, std::string const &hint )
        -: 9133::   m_ref( std::make_shared<BoundValueRef<T>>( ref ) ),
        2: 9134:m_hint( hint )
        2: 9134-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 9134-block  1
call    4 returned 2
call    5 returned 2
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        2: 9134-block  2
call    9 returned 2
    $$$$$: 9134-block  3
call   10 never executed
    $$$$$: 9134-block  4
call   11 never executed
        2: 9135:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2ISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISC_EEEERT_RKSC_:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2ISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISC_EEEERT_RKSC_ called 1 returned 100% blocks executed 73%
        1: 9132:ParserRefImpl( T &ref, std::string const &hint )
        -: 9133::   m_ref( std::make_shared<BoundValueRef<T>>( ref ) ),
        1: 9134:m_hint( hint )
        1: 9134-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9134-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 9134-block  2
call    9 returned 1
    $$$$$: 9134-block  3
call   10 never executed
    $$$$$: 9134-block  4
call   11 never executed
        1: 9135:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERT_RKSB_:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERT_RKSB_ called 2 returned 100% blocks executed 73%
        2: 9132:ParserRefImpl( T &ref, std::string const &hint )
        -: 9133::   m_ref( std::make_shared<BoundValueRef<T>>( ref ) ),
        2: 9134:m_hint( hint )
        2: 9134-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 9134-block  1
call    4 returned 2
call    5 returned 2
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        2: 9134-block  2
call    9 returned 2
    $$$$$: 9134-block  3
call   10 never executed
    $$$$$: 9134-block  4
call   11 never executed
        2: 9135:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3ArgEEC2ISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISC_EEEERT_RKSC_:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3ArgEEC2ISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISC_EEEERT_RKSC_ called 1 returned 100% blocks executed 73%
        1: 9132:ParserRefImpl( T &ref, std::string const &hint )
        -: 9133::   m_ref( std::make_shared<BoundValueRef<T>>( ref ) ),
        1: 9134:m_hint( hint )
        1: 9134-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9134-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 9134-block  2
call    9 returned 1
    $$$$$: 9134-block  3
call   10 never executed
    $$$$$: 9134-block  4
call   11 never executed
        1: 9135:{}
------------------
        -: 9136:
        -: 9137:template<typename LambdaT>
       10: 9138:ParserRefImpl( LambdaT const &ref, std::string const &hint )
        -: 9139::   m_ref( std::make_shared<BoundLambda<LambdaT>>( ref ) ),
       10: 9140:m_hint(hint)
       10: 9141:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EERKT_SF_:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EERKT_SF_ called 1 returned 100% blocks executed 73%
        1: 9138:ParserRefImpl( LambdaT const &ref, std::string const &hint )
        -: 9139::   m_ref( std::make_shared<BoundLambda<LambdaT>>( ref ) ),
        1: 9140:m_hint(hint)
        1: 9140-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9140-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 9140-block  2
call    9 returned 1
    $$$$$: 9140-block  3
call   10 never executed
    $$$$$: 9140-block  4
call   11 never executed
        1: 9141:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EERKT_SF_:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EERKT_SF_ called 1 returned 100% blocks executed 73%
        1: 9138:ParserRefImpl( LambdaT const &ref, std::string const &hint )
        -: 9139::   m_ref( std::make_shared<BoundLambda<LambdaT>>( ref ) ),
        1: 9140:m_hint(hint)
        1: 9140-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9140-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 9140-block  2
call    9 returned 1
    $$$$$: 9140-block  3
call   10 never executed
    $$$$$: 9140-block  4
call   11 never executed
        1: 9141:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EERKT_SF_:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EERKT_SF_ called 1 returned 100% blocks executed 73%
        1: 9138:ParserRefImpl( LambdaT const &ref, std::string const &hint )
        -: 9139::   m_ref( std::make_shared<BoundLambda<LambdaT>>( ref ) ),
        1: 9140:m_hint(hint)
        1: 9140-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9140-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 9140-block  2
call    9 returned 1
    $$$$$: 9140-block  3
call   10 never executed
    $$$$$: 9140-block  4
call   11 never executed
        1: 9141:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EERKT_SF_:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EERKT_SF_ called 1 returned 100% blocks executed 73%
        1: 9138:ParserRefImpl( LambdaT const &ref, std::string const &hint )
        -: 9139::   m_ref( std::make_shared<BoundLambda<LambdaT>>( ref ) ),
        1: 9140:m_hint(hint)
        1: 9140-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9140-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 9140-block  2
call    9 returned 1
    $$$$$: 9140-block  3
call   10 never executed
    $$$$$: 9140-block  4
call   11 never executed
        1: 9141:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EERKT_SF_:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EERKT_SF_ called 1 returned 100% blocks executed 73%
        1: 9138:ParserRefImpl( LambdaT const &ref, std::string const &hint )
        -: 9139::   m_ref( std::make_shared<BoundLambda<LambdaT>>( ref ) ),
        1: 9140:m_hint(hint)
        1: 9140-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9140-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 9140-block  2
call    9 returned 1
    $$$$$: 9140-block  3
call   10 never executed
    $$$$$: 9140-block  4
call   11 never executed
        1: 9141:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EERKT_SF_:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EERKT_SF_ called 1 returned 100% blocks executed 73%
        1: 9138:ParserRefImpl( LambdaT const &ref, std::string const &hint )
        -: 9139::   m_ref( std::make_shared<BoundLambda<LambdaT>>( ref ) ),
        1: 9140:m_hint(hint)
        1: 9140-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9140-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 9140-block  2
call    9 returned 1
    $$$$$: 9140-block  3
call   10 never executed
    $$$$$: 9140-block  4
call   11 never executed
        1: 9141:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE9_EERKT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE9_EERKT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 73%
        1: 9138:ParserRefImpl( LambdaT const &ref, std::string const &hint )
        -: 9139::   m_ref( std::make_shared<BoundLambda<LambdaT>>( ref ) ),
        1: 9140:m_hint(hint)
        1: 9140-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9140-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 9140-block  2
call    9 returned 1
    $$$$$: 9140-block  3
call   10 never executed
    $$$$$: 9140-block  4
call   11 never executed
        1: 9141:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EERKT_SF_:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EERKT_SF_ called 1 returned 100% blocks executed 73%
        1: 9138:ParserRefImpl( LambdaT const &ref, std::string const &hint )
        -: 9139::   m_ref( std::make_shared<BoundLambda<LambdaT>>( ref ) ),
        1: 9140:m_hint(hint)
        1: 9140-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9140-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 9140-block  2
call    9 returned 1
    $$$$$: 9140-block  3
call   10 never executed
    $$$$$: 9140-block  4
call   11 never executed
        1: 9141:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUliE8_EERKT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUliE8_EERKT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 73%
        1: 9138:ParserRefImpl( LambdaT const &ref, std::string const &hint )
        -: 9139::   m_ref( std::make_shared<BoundLambda<LambdaT>>( ref ) ),
        1: 9140:m_hint(hint)
        1: 9140-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9140-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 9140-block  2
call    9 returned 1
    $$$$$: 9140-block  3
call   10 never executed
    $$$$$: 9140-block  4
call   11 never executed
        1: 9141:{}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EERKT_SF_:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EERKT_SF_ called 1 returned 100% blocks executed 73%
        1: 9138:ParserRefImpl( LambdaT const &ref, std::string const &hint )
        -: 9139::   m_ref( std::make_shared<BoundLambda<LambdaT>>( ref ) ),
        1: 9140:m_hint(hint)
        1: 9140-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9140-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 9140-block  2
call    9 returned 1
    $$$$$: 9140-block  3
call   10 never executed
    $$$$$: 9140-block  4
call   11 never executed
        1: 9141:{}
------------------
        -: 9142:
       30: 9143:auto operator()( std::string const &description ) -> DerivedT & {
       30: 9144:m_description = description;
       30: 9145:return static_cast<DerivedT &>( *this );
        -: 9146:}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3ArgEEclERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3ArgEEclERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1: 9143:auto operator()( std::string const &description ) -> DerivedT & {
        1: 9144:m_description = description;
        1: 9144-block  0
call    0 returned 1
        1: 9145:return static_cast<DerivedT &>( *this );
        -: 9146:}
------------------
_ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEclERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEEclERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 29 returned 100% blocks executed 100%
       29: 9143:auto operator()( std::string const &description ) -> DerivedT & {
       29: 9144:m_description = description;
       29: 9144-block  0
call    0 returned 29
       29: 9145:return static_cast<DerivedT &>( *this );
        -: 9146:}
------------------
        -: 9147:
function _ZN5Catch5clara6detail13ParserRefImplINS1_3OptEE8optionalEv called 1 returned 100% blocks executed 100%
        1: 9148:auto optional() -> DerivedT & {
        1: 9149:m_optionality = Optionality::Optional;
        1: 9150:return static_cast<DerivedT &>( *this );
        1: 9150-block  0
        -: 9151:};
        -: 9152:
        -: 9153:auto required() -> DerivedT & {
        -: 9154:m_optionality = Optionality::Required;
        -: 9155:return static_cast<DerivedT &>( *this );
        -: 9156:};
        -: 9157:
function _ZNK5Catch5clara6detail13ParserRefImplINS1_3ArgEE10isOptionalEv called 0 returned 0% blocks executed 0%
    #####: 9158:auto isOptional() const -> bool {
    #####: 9159:return m_optionality == Optionality::Optional;
    %%%%%: 9159-block  0
        -: 9160:}
        -: 9161:
    #####: 9162:auto cardinality() const -> size_t override {
    #####: 9163:if( m_ref->isContainer() )
    #####: 9164:return 0;
        -: 9165:else
    #####: 9166:return 1;
        -: 9167:}
------------------
_ZNK5Catch5clara6detail13ParserRefImplINS1_3OptEE11cardinalityEv:
function _ZNK5Catch5clara6detail13ParserRefImplINS1_3OptEE11cardinalityEv called 0 returned 0% blocks executed 0%
    #####: 9162:auto cardinality() const -> size_t override {
    #####: 9163:if( m_ref->isContainer() )
    %%%%%: 9163-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9164:return 0;
    %%%%%: 9164-block  0
        -: 9165:else
    #####: 9166:return 1;
    %%%%%: 9166-block  0
        -: 9167:}
------------------
_ZNK5Catch5clara6detail13ParserRefImplINS1_3ArgEE11cardinalityEv:
function _ZNK5Catch5clara6detail13ParserRefImplINS1_3ArgEE11cardinalityEv called 0 returned 0% blocks executed 0%
    #####: 9162:auto cardinality() const -> size_t override {
    #####: 9163:if( m_ref->isContainer() )
    %%%%%: 9163-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9164:return 0;
    %%%%%: 9164-block  0
        -: 9165:else
    #####: 9166:return 1;
    %%%%%: 9166-block  0
        -: 9167:}
------------------
        -: 9168:
function _ZNK5Catch5clara6detail13ParserRefImplINS1_3ArgEE4hintB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 9169:auto hint() const -> std::string { return m_hint; }
    %%%%%: 9169-block  0
call    0 never executed
        -: 9170:};
        -: 9171:
        -: 9172:class ExeName : public ComposableParserImpl<ExeName> {
        -: 9173:std::shared_ptr<std::string> m_name;
        -: 9174:std::shared_ptr<BoundValueRefBase> m_ref;
        -: 9175:
        -: 9176:template<typename LambdaT>
        -: 9177:static auto makeRef(LambdaT const &lambda) -> std::shared_ptr<BoundValueRefBase> {
        -: 9178:return std::make_shared<BoundLambda<LambdaT>>( lambda) ;
        -: 9179:}
        -: 9180:
        -: 9181:public:
function _ZN5Catch5clara6detail7ExeNameC1Ev called 3 returned 100% blocks executed 83%
        3: 9182:ExeName() : m_name( std::make_shared<std::string>( "<executable>" ) ) {}
        3: 9182-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3: 9182-block  1
call    4 returned 3
    $$$$$: 9182-block  2
call    5 never executed
        -: 9183:
function _ZN5Catch5clara6detail7ExeNameC1ERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 86%
        1: 9184:explicit ExeName( std::string &ref ) : ExeName() {
        1: 9184-block  0
call    0 returned 1
    $$$$$: 9184-block  1
call    1 never executed
        1: 9185:m_ref = std::make_shared<BoundValueRef<std::string>>( ref );
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9185-block  0
call    3 returned 1
call    4 returned 1
        1: 9186:}
        -: 9187:
        -: 9188:template<typename LambdaT>
        -: 9189:explicit ExeName( LambdaT const& lambda ) : ExeName() {
        -: 9190:m_ref = std::make_shared<BoundLambda<LambdaT>>( lambda );
        -: 9191:}
        -: 9192:
        -: 9193:// The exe name is not parsed out of the normal tokens, but is handled specially
function _ZNK5Catch5clara6detail7ExeName5parseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS1_11TokenStreamE called 0 returned 0% blocks executed 0%
    #####: 9194:auto parse( std::string const&, TokenStream const &tokens ) const -> InternalParseResult override {
    #####: 9195:return InternalParseResult::ok( ParseState( ParseResultType::NoMatch, tokens ) );
    %%%%%: 9195-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 9195-block  1
    %%%%%: 9195-block  2
call    4 never executed
    %%%%%: 9195-block  3
    $$$$$: 9195-block  4
call    5 never executed
        -: 9196:}
        -: 9197:
function _ZNK5Catch5clara6detail7ExeName4nameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 9198:auto name() const -> std::string { return *m_name; }
    %%%%%: 9198-block  0
call    0 never executed
call    1 never executed
function _ZN5Catch5clara6detail7ExeName3setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 64%
        1: 9199:auto set( std::string const& newName ) -> ParserResult {
        -: 9200:
        1: 9201:auto lastSlash = newName.find_last_of( "\\/" );
        1: 9201-block  0
call    0 returned 1
        -: 9202:auto filename = ( lastSlash == std::string::npos )
        -: 9203:? newName
       2*: 9204:: newName.substr( lastSlash+1 );
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 9204-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
        1: 9204-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 9204-block  2
call    8 returned 1
    $$$$$: 9204-block  3
call    9 never executed
        -: 9205:
        1: 9206:*m_name = filename;
        1: 9206-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9207:if( m_ref )
        1: 9207-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 9208:return m_ref->setValue( filename );
        1: 9208-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9208-block  1
        -: 9209:else
    #####: 9210:return ParserResult::ok( ParseResultType::Matched );
    %%%%%: 9210-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9210-block  1
    %%%%%: 9210-block  2
    $$$$$: 9210-block  3
        -: 9211:}
        -: 9212:};
        -: 9213:
        -: 9214:class Arg : public ParserRefImpl<Arg> {
        -: 9215:public:
        -: 9216:using ParserRefImpl::ParserRefImpl;
        -: 9217:
function _ZNK5Catch5clara6detail3Arg5parseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS1_11TokenStreamE called 0 returned 0% blocks executed 0%
    #####: 9218:auto parse( std::string const &, TokenStream const &tokens ) const -> InternalParseResult override {
    #####: 9219:auto validationResult = validate();
    %%%%%: 9219-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9219-block  1
call    3 never executed
    $$$$$: 9219-block  2
call    4 never executed
    #####: 9220:if( !validationResult )
    %%%%%: 9220-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9221:return InternalParseResult( validationResult );
    %%%%%: 9221-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9221-block  1
        -: 9222:
    #####: 9223:auto remainingTokens = tokens;
    %%%%%: 9223-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 9223-block  1
call    4 never executed
    #####: 9224:auto const &token = *remainingTokens;
    %%%%%: 9224-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9224-block  1
call    3 never executed
    $$$$$: 9224-block  2
call    4 never executed
    #####: 9225:if( token.type != TokenType::Argument )
    %%%%%: 9225-block  0
branch  0 never executed
branch  1 never executed
    #####: 9226:return InternalParseResult::ok( ParseState( ParseResultType::NoMatch, remainingTokens ) );
    %%%%%: 9226-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9226-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9226-block  2
    %%%%%: 9226-block  3
call    6 never executed
    $$$$$: 9226-block  4
call    7 never executed
    $$$$$: 9226-block  5
        -: 9227:
    #####: 9228:assert( !m_ref->isFlag() );
    %%%%%: 9228-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 9228-block  1
branch  4 never executed
branch  5 never executed
    %%%%%: 9228-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 9228-block  3
    %%%%%: 9228-block  4
    #####: 9229:auto valueRef = static_cast<detail::BoundValueRefBase*>( m_ref.get() );
    %%%%%: 9229-block  0
call    0 never executed
        -: 9230:
    #####: 9231:auto result = valueRef->setValue( remainingTokens->token );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9231-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9231-block  1
call    6 never executed
    $$$$$: 9231-block  2
call    7 never executed
    #####: 9232:if( !result )
    %%%%%: 9232-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9233:return InternalParseResult( result );
    %%%%%: 9233-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9233-block  1
        -: 9234:else
    #####: 9235:return InternalParseResult::ok( ParseState( ParseResultType::Matched, ++remainingTokens ) );
    %%%%%: 9235-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9235-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9235-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 9235-block  3
    %%%%%: 9235-block  4
call    9 never executed
    $$$$$: 9235-block  5
call   10 never executed
    $$$$$: 9235-block  6
        -: 9236:}
        -: 9237:};
        -: 9238:
function _ZN5Catch5clara6detail12normaliseOptERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 9239:inline auto normaliseOpt( std::string const &optName ) -> std::string {
        -: 9240:#ifdef CATCH_PLATFORM_WINDOWS
    #####: 9241:if( optName[0] == '/' )
    %%%%%: 9241-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9242:return "-" + optName.substr( 1 );
    %%%%%: 9242-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 9242-block  1
    %%%%%: 9242-block  2
call    4 never executed
    $$$$$: 9242-block  3
call    5 never executed
        -: 9243:else
        -: 9244:#endif
    #####: 9245:return optName;
    %%%%%: 9245-block  0
call    0 never executed
        -: 9246:}
        -: 9247:
        -: 9248:class Opt : public ParserRefImpl<Opt> {
        -: 9249:protected:
        -: 9250:std::vector<std::string> m_optNames;
        -: 9251:
        -: 9252:public:
        -: 9253:template<typename LambdaT>
        2: 9254:explicit Opt( LambdaT const &ref ) : ParserRefImpl( std::make_shared<BoundFlagLambda<LambdaT>>( ref ) ) {}
------------------
_ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE7_EERKT_:
function _ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE7_EERKT_ called 1 returned 100% blocks executed 100%
        1: 9254:explicit Opt( LambdaT const &ref ) : ParserRefImpl( std::make_shared<BoundFlagLambda<LambdaT>>( ref ) ) {}
        1: 9254-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
------------------
_ZN5Catch5clara6detail3OptC2IZNS1_4HelpC4ERbEUlbE_EERKT_:
function _ZN5Catch5clara6detail3OptC2IZNS1_4HelpC4ERbEUlbE_EERKT_ called 1 returned 100% blocks executed 100%
        1: 9254:explicit Opt( LambdaT const &ref ) : ParserRefImpl( std::make_shared<BoundFlagLambda<LambdaT>>( ref ) ) {}
        1: 9254-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
------------------
        -: 9255:
function _ZN5Catch5clara6detail3OptC1ERb called 11 returned 100% blocks executed 100%
       11: 9256:explicit Opt( bool &ref ) : ParserRefImpl( std::make_shared<BoundFlagRef>( ref ) ) {}
       11: 9256-block  0
call    0 returned 11
call    1 returned 11
call    2 returned 11
call    3 returned 11
call    4 returned 11
call    5 returned 11
        -: 9257:
        -: 9258:template<typename LambdaT>
       10: 9259:Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
------------------
_ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EERKT_SD_:
function _ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EERKT_SD_ called 1 returned 100% blocks executed 100%
        1: 9259:Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        1: 9259-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EERKT_SD_:
function _ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EERKT_SD_ called 1 returned 100% blocks executed 100%
        1: 9259:Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        1: 9259-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EERKT_SD_:
function _ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EERKT_SD_ called 1 returned 100% blocks executed 100%
        1: 9259:Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        1: 9259-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EERKT_SD_:
function _ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EERKT_SD_ called 1 returned 100% blocks executed 100%
        1: 9259:Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        1: 9259-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EERKT_SD_:
function _ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EERKT_SD_ called 1 returned 100% blocks executed 100%
        1: 9259:Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        1: 9259-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EERKT_SD_:
function _ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EERKT_SD_ called 1 returned 100% blocks executed 100%
        1: 9259:Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        1: 9259-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE9_EERKT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlbE9_EERKT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1: 9259:Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        1: 9259-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EERKT_SD_:
function _ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EERKT_SD_ called 1 returned 100% blocks executed 100%
        1: 9259:Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        1: 9259-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUliE8_EERKT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUliE8_EERKT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1: 9259:Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        1: 9259-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EERKT_SD_:
function _ZN5Catch5clara6detail3OptC2IZNS_21makeCommandLineParserERNS_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EERKT_SD_ called 1 returned 100% blocks executed 100%
        1: 9259:Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        1: 9259-block  0
call    0 returned 1
call    1 returned 1
------------------
        -: 9260:
        -: 9261:template<typename T>
        6: 9262:Opt( T &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
------------------
_ZN5Catch5clara6detail3OptC1IdEERT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail3OptC1IdEERT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1: 9262:Opt( T &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        1: 9262-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN5Catch5clara6detail3OptC1IjEERT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5Catch5clara6detail3OptC1IjEERT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 100%
        2: 9262:Opt( T &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        2: 9262-block  0
call    0 returned 2
call    1 returned 2
------------------
_ZN5Catch5clara6detail3OptC1ISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISA_EEEERT_RKSA_:
function _ZN5Catch5clara6detail3OptC1ISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISA_EEEERT_RKSA_ called 1 returned 100% blocks executed 100%
        1: 9262:Opt( T &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        1: 9262-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN5Catch5clara6detail3OptC1INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERT_RKS9_:
function _ZN5Catch5clara6detail3OptC1INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERT_RKS9_ called 2 returned 100% blocks executed 100%
        2: 9262:Opt( T &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        2: 9262-block  0
call    0 returned 2
call    1 returned 2
------------------
        -: 9263:
function _ZN5Catch5clara6detail3OptixERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 48 returned 100% blocks executed 100%
       48: 9264:auto operator[]( std::string const &optName ) -> Opt & {
       48: 9265:m_optNames.push_back( optName );
       48: 9265-block  0
call    0 returned 48
       48: 9266:return *this;
        -: 9267:}
        -: 9268:
function _ZNK5Catch5clara6detail3Opt14getHelpColumnsEv called 0 returned 0% blocks executed 0%
    #####: 9269:auto getHelpColumns() const -> std::vector<HelpColumns> {
    #####: 9270:std::ostringstream oss;
    %%%%%: 9270-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 9270-block  1
call    3 never executed
    #####: 9271:bool first = true;
    #####: 9272:for( auto const &opt : m_optNames ) {
    %%%%%: 9272-block  0
call    0 never executed
call    1 never executed
    %%%%%: 9272-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9272-block  2
call    5 never executed
    %%%%%: 9272-block  3
call    6 never executed
    #####: 9273:if (first)
branch  0 never executed
branch  1 never executed
    #####: 9274:first = false;
    %%%%%: 9274-block  0
        -: 9275:else
    #####: 9276:oss << ", ";
    %%%%%: 9276-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9277:oss << opt;
    %%%%%: 9277-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9278:}
    #####: 9279:if( !m_hint.empty() )
    %%%%%: 9279-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9280:oss << " <" << m_hint << ">";
    %%%%%: 9280-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9280-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9280-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 9281:return { { oss.str(), m_description } };
    %%%%%: 9281-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9281-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9281-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 9281-block  3
call   10 never executed
    %%%%%: 9281-block  4
branch 11 never executed
branch 12 never executed
    %%%%%: 9281-block  5
call   13 never executed
    %%%%%: 9281-block  6
call   14 never executed
    %%%%%: 9281-block  7
    $$$$$: 9281-block  8
call   15 never executed
    $$$$$: 9281-block  9
    $$$$$: 9281-block 10
    $$$$$: 9281-block 11
branch 16 never executed
branch 17 never executed
    $$$$$: 9281-block 12
call   18 never executed
    $$$$$: 9281-block 13
        -: 9282:}
        -: 9283:
function _ZNK5Catch5clara6detail3Opt7isMatchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 9284:auto isMatch( std::string const &optToken ) const -> bool {
    #####: 9285:auto normalisedToken = normaliseOpt( optToken );
    %%%%%: 9285-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9285-block  1
call    3 never executed
    $$$$$: 9285-block  2
call    4 never executed
    #####: 9286:for( auto const &name : m_optNames ) {
    %%%%%: 9286-block  0
call    0 never executed
call    1 never executed
    %%%%%: 9286-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9286-block  2
call    5 never executed
    %%%%%: 9286-block  3
call    6 never executed
    #####: 9287:if( normaliseOpt( name ) == normalisedToken )
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9287-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 9288:return true;
    %%%%%: 9288-block  0
        -: 9289:}
    #####: 9290:return false;
    %%%%%: 9290-block  0
        -: 9291:}
        -: 9292:
        -: 9293:using ParserBase::parse;
        -: 9294:
function _ZNK5Catch5clara6detail3Opt5parseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS1_11TokenStreamE called 0 returned 0% blocks executed 0%
    #####: 9295:auto parse( std::string const&, TokenStream const &tokens ) const -> InternalParseResult override {
    #####: 9296:auto validationResult = validate();
    %%%%%: 9296-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9296-block  1
call    3 never executed
    $$$$$: 9296-block  2
call    4 never executed
    #####: 9297:if( !validationResult )
    %%%%%: 9297-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9298:return InternalParseResult( validationResult );
    %%%%%: 9298-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9298-block  1
        -: 9299:
    #####: 9300:auto remainingTokens = tokens;
    %%%%%: 9300-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9300-block  1
call    3 never executed
    $$$$$: 9300-block  2
call    4 never executed
    #####: 9301:if( remainingTokens && remainingTokens->type == TokenType::Option ) {
    %%%%%: 9301-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9301-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9301-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 9301-block  3
    %%%%%: 9301-block  4
    %%%%%: 9301-block  5
branch  8 never executed
branch  9 never executed
    #####: 9302:auto const &token = *remainingTokens;
    %%%%%: 9302-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 9302-block  1
call    3 never executed
    #####: 9303:if( isMatch(token.token ) ) {
    %%%%%: 9303-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9303-block  1
branch  3 never executed
branch  4 never executed
    #####: 9304:if( m_ref->isFlag() ) {
    %%%%%: 9304-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 9304-block  1
branch  4 never executed
branch  5 never executed
    #####: 9305:auto flagRef = static_cast<detail::BoundFlagRefBase*>( m_ref.get() );
    %%%%%: 9305-block  0
call    0 never executed
    #####: 9306:auto result = flagRef->setFlag( true );
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 9306-block  0
call    3 never executed
    #####: 9307:if( !result )
    %%%%%: 9307-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9308:return InternalParseResult( result );
    %%%%%: 9308-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9308-block  1
    #####: 9309:if( result.value() == ParseResultType::ShortCircuitAll )
    %%%%%: 9309-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9309-block  1
branch  3 never executed
branch  4 never executed
    #####: 9310:return InternalParseResult::ok( ParseState( result.value(), remainingTokens ) );
    %%%%%: 9310-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9310-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9310-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 9310-block  3
    %%%%%: 9310-block  4
call    9 never executed
    $$$$$: 9310-block  5
call   10 never executed
    $$$$$: 9310-block  6
        -: 9311:} else {
    #####: 9312:auto valueRef = static_cast<detail::BoundValueRefBase*>( m_ref.get() );
    %%%%%: 9312-block  0
call    0 never executed
    #####: 9313:++remainingTokens;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9314:if( !remainingTokens )
    %%%%%: 9314-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9315:return InternalParseResult::runtimeError( "Expected argument following " + token.token );
    %%%%%: 9315-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9315-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9315-block  2
    %%%%%: 9315-block  3
call    6 never executed
    $$$$$: 9315-block  4
call    7 never executed
    $$$$$: 9315-block  5
    #####: 9316:auto const &argToken = *remainingTokens;
    %%%%%: 9316-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 9316-block  1
call    3 never executed
    #####: 9317:if( argToken.type != TokenType::Argument )
    %%%%%: 9317-block  0
branch  0 never executed
branch  1 never executed
    #####: 9318:return InternalParseResult::runtimeError( "Expected argument following " + token.token );
    %%%%%: 9318-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9318-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9318-block  2
    %%%%%: 9318-block  3
call    6 never executed
    $$$$$: 9318-block  4
call    7 never executed
    $$$$$: 9318-block  5
    #####: 9319:auto result = valueRef->setValue( argToken.token );
    %%%%%: 9319-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 9319-block  1
call    3 never executed
    #####: 9320:if( !result )
    %%%%%: 9320-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9321:return InternalParseResult( result );
    %%%%%: 9321-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9321-block  1
    #####: 9322:if( result.value() == ParseResultType::ShortCircuitAll )
    %%%%%: 9322-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9322-block  1
branch  3 never executed
branch  4 never executed
    #####: 9323:return InternalParseResult::ok( ParseState( result.value(), remainingTokens ) );
    %%%%%: 9323-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9323-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9323-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 9323-block  3
    %%%%%: 9323-block  4
call    9 never executed
    $$$$$: 9323-block  5
call   10 never executed
    $$$$$: 9323-block  6
        -: 9324:}
    #####: 9325:return InternalParseResult::ok( ParseState( ParseResultType::Matched, ++remainingTokens ) );
    %%%%%: 9325-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9325-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9325-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 9325-block  3
    %%%%%: 9325-block  4
call    9 never executed
    $$$$$: 9325-block  5
call   10 never executed
    $$$$$: 9325-block  6
        -: 9326:}
        -: 9327:}
    #####: 9328:return InternalParseResult::ok( ParseState( ParseResultType::NoMatch, remainingTokens ) );
    %%%%%: 9328-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9328-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9328-block  2
    %%%%%: 9328-block  3
call    6 never executed
    $$$$$: 9328-block  4
call    7 never executed
    $$$$$: 9328-block  5
        -: 9329:}
        -: 9330:
function _ZNK5Catch5clara6detail3Opt8validateEv called 0 returned 0% blocks executed 0%
    #####: 9331:auto validate() const -> Result override {
    #####: 9332:if( m_optNames.empty() )
    %%%%%: 9332-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9333:return Result::logicError( "No options supplied to Opt" );
    %%%%%: 9333-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 9333-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 9333-block  2
call    7 never executed
call    8 never executed
    $$$$$: 9333-block  3
call    9 never executed
    $$$$$: 9333-block  4
    $$$$$: 9333-block  5
call   10 never executed
    $$$$$: 9333-block  6
call   11 never executed
    #####: 9334:for( auto const &name : m_optNames ) {
    %%%%%: 9334-block  0
call    0 never executed
call    1 never executed
    %%%%%: 9334-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9334-block  2
call    5 never executed
    %%%%%: 9334-block  3
call    6 never executed
    #####: 9335:if( name.empty() )
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9336:return Result::logicError( "Option name cannot be empty" );
    %%%%%: 9336-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 9336-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 9336-block  2
call    7 never executed
call    8 never executed
    $$$$$: 9336-block  3
call    9 never executed
    $$$$$: 9336-block  4
    $$$$$: 9336-block  5
call   10 never executed
    $$$$$: 9336-block  6
        -: 9337:#ifdef CATCH_PLATFORM_WINDOWS
    #####: 9338:if( name[0] != '-' && name[0] != '/' )
    %%%%%: 9338-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9338-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9338-block  2
    %%%%%: 9338-block  3
    %%%%%: 9338-block  4
branch  6 never executed
branch  7 never executed
    #####: 9339:return Result::logicError( "Option name must begin with '-' or '/'" );
    %%%%%: 9339-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 9339-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 9339-block  2
call    7 never executed
call    8 never executed
    $$$$$: 9339-block  3
call    9 never executed
    $$$$$: 9339-block  4
    $$$$$: 9339-block  5
call   10 never executed
    $$$$$: 9339-block  6
        -: 9340:#else
        -: 9341:if( name[0] != '-' )
        -: 9342:return Result::logicError( "Option name must begin with '-'" );
        -: 9343:#endif
        -: 9344:}
    #####: 9345:return ParserRefImpl::validate();
    %%%%%: 9345-block  0
call    0 never executed
        -: 9346:}
        -: 9347:};
        -: 9348:
        -: 9349:struct Help : Opt {
function _ZN5Catch5clara6detail4HelpC1ERb called 1 returned 100% blocks executed 48%
        1: 9350:Help( bool &showHelpFlag )
        1: 9351::   Opt([&]( bool flag ) {
        -: 9352:showHelpFlag = flag;
        -: 9353:return ParserResult::ok( ParseResultType::ShortCircuitAll );
        1: 9354:})
        1: 9354-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 9354-block  1
call    3 never executed
    $$$$$: 9354-block  2
call    4 never executed
        -: 9355:{
        -: 9356:static_cast<Opt &>( *this )
        2: 9357:("display usage information")
        1: 9357-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9357-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
    $$$$$: 9357-block  2
call    8 never executed
    $$$$$: 9357-block  3
    $$$$$: 9357-block  4
call    9 never executed
    $$$$$: 9357-block  5
        2: 9358:["-?"]["-h"]["--help"]
        1: 9358-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9358-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9358-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9358-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1: 9358-block  4
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1: 9358-block  5
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0 (throw)
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
call   26 returned 1
call   27 returned 1
    $$$$$: 9358-block  6
call   28 never executed
    $$$$$: 9358-block  7
    $$$$$: 9358-block  8
call   29 never executed
    $$$$$: 9358-block  9
    $$$$$: 9358-block 10
call   30 never executed
    $$$$$: 9358-block 11
    $$$$$: 9358-block 12
call   31 never executed
    $$$$$: 9358-block 13
    $$$$$: 9358-block 14
call   32 never executed
    $$$$$: 9358-block 15
    $$$$$: 9358-block 16
call   33 never executed
    $$$$$: 9358-block 17
        1: 9359:.optional();
        1: 9359-block  0
call    0 returned 1
        1: 9360:}
        -: 9361:};
        -: 9362:
        -: 9363:struct Parser : ParserBase {
        -: 9364:
        -: 9365:mutable ExeName m_exeName;
        -: 9366:std::vector<Opt> m_options;
        -: 9367:std::vector<Arg> m_args;
        -: 9368:
function _ZN5Catch5clara6detail6ParseroRERKNS1_7ExeNameE called 1 returned 100% blocks executed 100%
        1: 9369:auto operator|=( ExeName const &exeName ) -> Parser & {
        1: 9370:m_exeName = exeName;
        1: 9370-block  0
call    0 returned 1
        1: 9371:return *this;
        -: 9372:}
        -: 9373:
function _ZN5Catch5clara6detail6ParseroRERKNS1_3ArgE called 1 returned 100% blocks executed 100%
        1: 9374:auto operator|=( Arg const &arg ) -> Parser & {
        1: 9375:m_args.push_back(arg);
        1: 9375-block  0
call    0 returned 1
        1: 9376:return *this;
        -: 9377:}
        -: 9378:
function _ZN5Catch5clara6detail6ParseroRERKNS1_3OptE called 29 returned 100% blocks executed 100%
       29: 9379:auto operator|=( Opt const &opt ) -> Parser & {
       29: 9380:m_options.push_back(opt);
       29: 9380-block  0
call    0 returned 29
       29: 9381:return *this;
        -: 9382:}
        -: 9383:
        -: 9384:auto operator|=( Parser const &other ) -> Parser & {
        -: 9385:m_options.insert(m_options.end(), other.m_options.begin(), other.m_options.end());
        -: 9386:m_args.insert(m_args.end(), other.m_args.begin(), other.m_args.end());
        -: 9387:return *this;
        -: 9388:}
        -: 9389:
        -: 9390:template<typename T>
       31: 9391:auto operator|( T const &other ) const -> Parser {
       31: 9392:return Parser( *this ) |= other;
        -: 9393:}
------------------
_ZNK5Catch5clara6detail6ParserorINS1_4HelpEEES2_RKT_:
function _ZNK5Catch5clara6detail6ParserorINS1_4HelpEEES2_RKT_ called 1 returned 100% blocks executed 80%
        1: 9391:auto operator|( T const &other ) const -> Parser {
        1: 9392:return Parser( *this ) |= other;
        1: 9392-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9392-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9392-block  2
        1: 9392-block  3
call    7 returned 1
        1: 9392-block  4
    $$$$$: 9392-block  5
call    8 never executed
        -: 9393:}
------------------
_ZNK5Catch5clara6detail6ParserorINS1_7ExeNameEEES2_RKT_:
function _ZNK5Catch5clara6detail6ParserorINS1_7ExeNameEEES2_RKT_ called 1 returned 100% blocks executed 80%
        1: 9391:auto operator|( T const &other ) const -> Parser {
        1: 9392:return Parser( *this ) |= other;
        1: 9392-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 9392-block  1
        1: 9392-block  2
call    5 returned 1
        1: 9392-block  3
    $$$$$: 9392-block  4
call    6 never executed
        -: 9393:}
------------------
_ZNK5Catch5clara6detail6ParserorINS1_3ArgEEES2_RKT_:
function _ZNK5Catch5clara6detail6ParserorINS1_3ArgEEES2_RKT_ called 1 returned 100% blocks executed 80%
        1: 9391:auto operator|( T const &other ) const -> Parser {
        1: 9392:return Parser( *this ) |= other;
        1: 9392-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9392-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9392-block  2
        1: 9392-block  3
call    7 returned 1
        1: 9392-block  4
    $$$$$: 9392-block  5
call    8 never executed
        -: 9393:}
------------------
_ZNK5Catch5clara6detail6ParserorINS1_3OptEEES2_RKT_:
function _ZNK5Catch5clara6detail6ParserorINS1_3OptEEES2_RKT_ called 28 returned 100% blocks executed 80%
       28: 9391:auto operator|( T const &other ) const -> Parser {
       28: 9392:return Parser( *this ) |= other;
       28: 9392-block  0
call    0 returned 28
call    1 returned 28
branch  2 taken 28 (fallthrough)
branch  3 taken 0 (throw)
       28: 9392-block  1
call    4 returned 28
branch  5 taken 28 (fallthrough)
branch  6 taken 0 (throw)
       28: 9392-block  2
       28: 9392-block  3
call    7 returned 28
       28: 9392-block  4
    $$$$$: 9392-block  5
call    8 never executed
        -: 9393:}
------------------
        -: 9394:
        -: 9395:// Forward deprecated interface with '+' instead of '|'
        -: 9396:template<typename T>
        -: 9397:auto operator+=( T const &other ) -> Parser & { return operator|=( other ); }
        -: 9398:template<typename T>
        -: 9399:auto operator+( T const &other ) const -> Parser { return operator|( other ); }
        -: 9400:
function _ZNK5Catch5clara6detail6Parser14getHelpColumnsEv called 0 returned 0% blocks executed 0%
    #####: 9401:auto getHelpColumns() const -> std::vector<HelpColumns> {
    #####: 9402:std::vector<HelpColumns> cols;
    %%%%%: 9402-block  0
call    0 never executed
    #####: 9403:for (auto const &o : m_options) {
call    0 never executed
call    1 never executed
    %%%%%: 9403-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9403-block  1
call    5 never executed
call    6 never executed
    #####: 9404:auto childCols = o.getHelpColumns();
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 9404-block  0
call    3 never executed
    #####: 9405:cols.insert( cols.end(), childCols.begin(), childCols.end() );
    %%%%%: 9405-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 9405-block  1
call    7 never executed
    $$$$$: 9405-block  2
    $$$$$: 9405-block  3
        -: 9406:}
    #####: 9407:return cols;
    %%%%%: 9407-block  0
    %%%%%: 9407-block  1
        -: 9408:}
        -: 9409:
function _ZNK5Catch5clara6detail6Parser13writeToStreamERSo called 0 returned 0% blocks executed 0%
    #####: 9410:void writeToStream( std::ostream &os ) const {
    #####: 9411:if (!m_exeName.name().empty()) {
    %%%%%: 9411-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9411-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 9412:os << "usage:\n" << "  " << m_exeName.name() << " ";
    %%%%%: 9412-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9412-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9412-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 9412-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 9412-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 9412-block  5
call   15 never executed
    $$$$$: 9412-block  6
call   16 never executed
    $$$$$: 9412-block  7
    #####: 9413:bool required = true, first = true;
    #####: 9414:for( auto const &arg : m_args ) {
call    0 never executed
call    1 never executed
    %%%%%: 9414-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9414-block  1
call    5 never executed
    %%%%%: 9414-block  2
call    6 never executed
    #####: 9415:if (first)
branch  0 never executed
branch  1 never executed
    #####: 9416:first = false;
    %%%%%: 9416-block  0
        -: 9417:else
    #####: 9418:os << " ";
    %%%%%: 9418-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9419:if( arg.isOptional() && required ) {
    %%%%%: 9419-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9419-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 9419-block  2
    %%%%%: 9419-block  3
    %%%%%: 9419-block  4
branch  5 never executed
branch  6 never executed
    #####: 9420:os << "[";
    %%%%%: 9420-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9421:required = false;
    %%%%%: 9421-block  0
        -: 9422:}
    #####: 9423:os << "<" << arg.hint() << ">";
    %%%%%: 9423-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9423-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9423-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 9423-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 9423-block  4
call   12 never executed
    $$$$$: 9423-block  5
call   13 never executed
    $$$$$: 9423-block  6
    #####: 9424:if( arg.cardinality() == 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9424-block  0
branch  3 never executed
branch  4 never executed
    #####: 9425:os << " ... ";
    %%%%%: 9425-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9426:}
    #####: 9427:if( !required )
    %%%%%: 9427-block  0
branch  0 never executed
branch  1 never executed
    #####: 9428:os << "]";
    %%%%%: 9428-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9429:if( !m_options.empty() )
    %%%%%: 9429-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9430:os << " options";
    %%%%%: 9430-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9431:os << "\n\nwhere options are:" << std::endl;
    %%%%%: 9431-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9431-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 9432:}
        -: 9433:
    #####: 9434:auto rows = getHelpColumns();
    %%%%%: 9434-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9434-block  1
call    3 never executed
    $$$$$: 9434-block  2
call    4 never executed
    #####: 9435:size_t consoleWidth = CATCH_CLARA_CONFIG_CONSOLE_WIDTH;
    #####: 9436:size_t optWidth = 0;
    #####: 9437:for( auto const &cols : rows )
    %%%%%: 9437-block  0
call    0 never executed
call    1 never executed
    %%%%%: 9437-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9437-block  2
call    5 never executed
    #####: 9438:optWidth = (std::max)(optWidth, cols.left.size() + 2);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 9439:
    #####: 9440:optWidth = (std::min)(optWidth, consoleWidth/2);
    %%%%%: 9440-block  0
call    0 never executed
        -: 9441:
    #####: 9442:for( auto const &cols : rows ) {
call    0 never executed
call    1 never executed
    %%%%%: 9442-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9442-block  1
call    5 never executed
call    6 never executed
        -: 9443:auto row =
    #####: 9444:TextFlow::Column( cols.left ).width( optWidth ).indent( 2 ) +
    %%%%%: 9444-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9444-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9444-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 9444-block  3
    $$$$$: 9444-block  4
    #####: 9445:TextFlow::Spacer(4) +
call    0 never executed
    $$$$$: 9445-block  0
    #####: 9446:TextFlow::Column( cols.right ).width( consoleWidth - 7 - optWidth );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9446-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9446-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 9446-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 9446-block  3
call   12 never executed
    $$$$$: 9446-block  4
    $$$$$: 9446-block  5
call   13 never executed
    #####: 9447:os << row << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9447-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 9448:}
    #####: 9449:}
        -: 9450:
function _ZN5Catch5clara6detaillsERSoRKNS1_6ParserE called 0 returned 0% blocks executed 0%
    #####: 9451:friend auto operator<<( std::ostream &os, Parser const &parser ) -> std::ostream& {
    #####: 9452:parser.writeToStream( os );
    %%%%%: 9452-block  0
call    0 never executed
    #####: 9453:return os;
        -: 9454:}
        -: 9455:
function _ZNK5Catch5clara6detail6Parser8validateEv called 0 returned 0% blocks executed 0%
    #####: 9456:auto validate() const -> Result override {
    #####: 9457:for( auto const &opt : m_options ) {
    %%%%%: 9457-block  0
call    0 never executed
call    1 never executed
    %%%%%: 9457-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9457-block  2
call    5 never executed
    %%%%%: 9457-block  3
call    6 never executed
    #####: 9458:auto result = opt.validate();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9459:if( !result )
    %%%%%: 9459-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9460:return result;
    %%%%%: 9460-block  0
call    0 never executed
        -: 9461:}
    #####: 9462:for( auto const &arg : m_args ) {
    %%%%%: 9462-block  0
call    0 never executed
call    1 never executed
    %%%%%: 9462-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9462-block  2
call    5 never executed
    %%%%%: 9462-block  3
call    6 never executed
    #####: 9463:auto result = arg.validate();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9464:if( !result )
    %%%%%: 9464-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9465:return result;
    %%%%%: 9465-block  0
call    0 never executed
        -: 9466:}
    #####: 9467:return Result::ok();
    %%%%%: 9467-block  0
call    0 never executed
        -: 9468:}
        -: 9469:
        -: 9470:using ParserBase::parse;
        -: 9471:
function _ZNK5Catch5clara6detail6Parser5parseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS1_11TokenStreamE called 1 returned 100% blocks executed 35%
        1: 9472:auto parse( std::string const& exeName, TokenStream const &tokens ) const -> InternalParseResult override {
        -: 9473:
        -: 9474:struct ParserInfo {
        -: 9475:ParserBase const* parser = nullptr;
        -: 9476:size_t count = 0;
        -: 9477:};
        1: 9478:const size_t totalParsers = m_options.size() + m_args.size();
        1: 9478-block  0
call    0 returned 1
call    1 returned 1
       1*: 9479:assert( totalParsers < 512 );
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 9479-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
        1: 9479-block  1
    %%%%%: 9479-block  2
        -: 9480:// ParserInfo parseInfos[totalParsers]; // <-- this is what we really want to do
        1: 9481:ParserInfo parseInfos[512];
        -: 9482:
        -: 9483:{
        1: 9484:size_t i = 0;
       30: 9485:for (auto const &opt : m_options) parseInfos[i++].parser = &opt;
        1: 9485-block  0
call    0 returned 1
call    1 returned 1
       30: 9485-block  1
call    2 returned 30
branch  3 taken 29 (fallthrough)
branch  4 taken 1
       29: 9485-block  2
call    5 returned 29
call    6 returned 29
        2: 9486:for (auto const &arg : m_args) parseInfos[i++].parser = &arg;
        1: 9486-block  0
call    0 returned 1
call    1 returned 1
        2: 9486-block  1
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 9486-block  2
call    5 returned 1
call    6 returned 1
        -: 9487:}
        -: 9488:
        1: 9489:m_exeName.set( exeName );
        1: 9489-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9489-block  1
call    3 returned 1
        -: 9490:
        3: 9491:auto result = InternalParseResult::ok( ParseState( ParseResultType::NoMatch, tokens ) );
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9491-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9491-block  1
call    6 returned 1
    $$$$$: 9491-block  2
    $$$$$: 9491-block  3
call    7 never executed
       1*: 9492:while( result.value().remainingTokens() ) {
        1: 9492-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9492-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9492-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%: 9492-block  3
    #####: 9493:bool tokenParsed = false;
        -: 9494:
    #####: 9495:for( size_t i = 0; i < totalParsers; ++i ) {
    %%%%%: 9495-block  0
    %%%%%: 9495-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 9495-block  2
    #####: 9496:auto&  parseInfo = parseInfos[i];
    #####: 9497:if( parseInfo.parser->cardinality() == 0 || parseInfo.count < parseInfo.parser->cardinality() ) {
    %%%%%: 9497-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9497-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 9497-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9497-block  3
branch  8 never executed
branch  9 never executed
    %%%%%: 9497-block  4
    %%%%%: 9497-block  5
    %%%%%: 9497-block  6
branch 10 never executed
branch 11 never executed
    #####: 9498:result = parseInfo.parser->parse(exeName, result.value().remainingTokens());
    %%%%%: 9498-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9498-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9498-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 9498-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 9498-block  4
call   12 never executed
call   13 never executed
    $$$$$: 9498-block  5
call   14 never executed
    $$$$$: 9498-block  6
    $$$$$: 9498-block  7
call   15 never executed
    $$$$$: 9498-block  8
    #####: 9499:if (!result)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9500:return result;
    %%%%%: 9500-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9500-block  1
    #####: 9501:if (result.value().type() != ParseResultType::NoMatch) {
    %%%%%: 9501-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9501-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9502:tokenParsed = true;
    #####: 9503:++parseInfo.count;
    #####: 9504:break;
    %%%%%: 9504-block  0
        -: 9505:}
        -: 9506:}
        -: 9507:}
        -: 9508:
    #####: 9509:if( result.value().type() == ParseResultType::ShortCircuitAll )
    %%%%%: 9509-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9509-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9510:return result;
    %%%%%: 9510-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9510-block  1
    #####: 9511:if( !tokenParsed )
    %%%%%: 9511-block  0
branch  0 never executed
branch  1 never executed
    #####: 9512:return InternalParseResult::runtimeError( "Unrecognised token: " + result.value().remainingTokens()->token );
    %%%%%: 9512-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9512-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9512-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 9512-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 9512-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 9512-block  5
    %%%%%: 9512-block  6
call   15 never executed
call   16 never executed
    $$$$$: 9512-block  7
call   17 never executed
    $$$$$: 9512-block  8
    $$$$$: 9512-block  9
call   18 never executed
    $$$$$: 9512-block 10
        -: 9513:}
        -: 9514:// !TBD Check missing required options
        1: 9515:return result;
        1: 9515-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9515-block  1
        -: 9516:}
        -: 9517:};
        -: 9518:
        -: 9519:template<typename DerivedT>
        -: 9520:template<typename T>
function _ZNK5Catch5clara6detail20ComposableParserImplINS1_7ExeNameEEorINS1_4HelpEEENS1_6ParserERKT_ called 1 returned 100% blocks executed 62%
        1: 9521:auto ComposableParserImpl<DerivedT>::operator|( T const &other ) const -> Parser {
        1: 9522:return Parser() | static_cast<DerivedT const &>( *this ) | other;
        1: 9522-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9522-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9522-block  2
call    7 returned 1
call    8 returned 1
        1: 9522-block  3
    $$$$$: 9522-block  4
call    9 never executed
    $$$$$: 9522-block  5
    $$$$$: 9522-block  6
call   10 never executed
        -: 9523:}
        -: 9524:} // namespace detail
        -: 9525:
        -: 9526:// A Combined parser
        -: 9527:using detail::Parser;
        -: 9528:
        -: 9529:// A parser for options
        -: 9530:using detail::Opt;
        -: 9531:
        -: 9532:// A parser for arguments
        -: 9533:using detail::Arg;
        -: 9534:
        -: 9535:// Wrapper for argc, argv from main()
        -: 9536:using detail::Args;
        -: 9537:
        -: 9538:// Specifies the name of the executable
        -: 9539:using detail::ExeName;
        -: 9540:
        -: 9541:// Convenience wrapper for option parser that specifies the help option
        -: 9542:using detail::Help;
        -: 9543:
        -: 9544:// enum of result types from a parse
        -: 9545:using detail::ParseResultType;
        -: 9546:
        -: 9547:// Result type for parser operation
        -: 9548:using detail::ParserResult;
        -: 9549:
        -: 9550:}} // namespace Catch::clara
        -: 9551:
        -: 9552:// end clara.hpp
        -: 9553:#ifdef __clang__
        -: 9554:#pragma clang diagnostic pop
        -: 9555:#endif
        -: 9556:
        -: 9557:// Restore Clara's value for console width, if present
        -: 9558:#ifdef CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH
        -: 9559:#define CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH
        -: 9560:#undef CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH
        -: 9561:#endif
        -: 9562:
        -: 9563:// end catch_clara.h
        -: 9564:namespace Catch {
        -: 9565:
        -: 9566:clara::Parser makeCommandLineParser( ConfigData& config );
        -: 9567:
        -: 9568:} // end namespace Catch
        -: 9569:
        -: 9570:// end catch_commandline.h
        -: 9571:#include <fstream>
        -: 9572:#include <ctime>
        -: 9573:
        -: 9574:namespace Catch {
        -: 9575:
function _ZN5Catch21makeCommandLineParserERNS_10ConfigDataE called 1 returned 100% blocks executed 43%
        1: 9576:clara::Parser makeCommandLineParser( ConfigData& config ) {
        -: 9577:
        -: 9578:using namespace clara;
        -: 9579:
        -: 9580:auto const setWarning = [&]( std::string const& warning ) {
        -: 9581:auto warningSet = [&]() {
        -: 9582:if( warning == "NoAssertions" )
        -: 9583:return WarnAbout::NoAssertions;
        -: 9584:
        -: 9585:if ( warning == "NoTests" )
        -: 9586:return WarnAbout::NoTests;
        -: 9587:
        -: 9588:return WarnAbout::Nothing;
        -: 9589:}();
        -: 9590:
        -: 9591:if (warningSet == WarnAbout::Nothing)
        -: 9592:return ParserResult::runtimeError( "Unrecognised warning: '" + warning + "'" );
        -: 9593:config.warnings = static_cast<WarnAbout::What>( config.warnings | warningSet );
        -: 9594:return ParserResult::ok( ParseResultType::Matched );
        1: 9595:};
        -: 9596:auto const loadTestNamesFromFile = [&]( std::string const& filename ) {
        -: 9597:std::ifstream f( filename.c_str() );
        -: 9598:if( !f.is_open() )
        -: 9599:return ParserResult::runtimeError( "Unable to load input file: '" + filename + "'" );
        -: 9600:
        -: 9601:std::string line;
        -: 9602:while( std::getline( f, line ) ) {
        -: 9603:line = trim(line);
        -: 9604:if( !line.empty() && !startsWith( line, '#' ) ) {
        -: 9605:if( !startsWith( line, '"' ) )
        -: 9606:line = '"' + line + '"';
        -: 9607:config.testsOrTags.push_back( line );
        -: 9608:config.testsOrTags.push_back( "," );
        -: 9609:
        -: 9610:}
        -: 9611:}
        -: 9612://Remove comma in the end
        -: 9613:if(!config.testsOrTags.empty())
        -: 9614:config.testsOrTags.erase( config.testsOrTags.end()-1 );
        -: 9615:
        -: 9616:return ParserResult::ok( ParseResultType::Matched );
        1: 9617:};
        -: 9618:auto const setTestOrder = [&]( std::string const& order ) {
        -: 9619:if( startsWith( "declared", order ) )
        -: 9620:config.runOrder = RunTests::InDeclarationOrder;
        -: 9621:else if( startsWith( "lexical", order ) )
        -: 9622:config.runOrder = RunTests::InLexicographicalOrder;
        -: 9623:else if( startsWith( "random", order ) )
        -: 9624:config.runOrder = RunTests::InRandomOrder;
        -: 9625:else
        -: 9626:return clara::ParserResult::runtimeError( "Unrecognised ordering: '" + order + "'" );
        -: 9627:return ParserResult::ok( ParseResultType::Matched );
        1: 9628:};
        -: 9629:auto const setRngSeed = [&]( std::string const& seed ) {
        -: 9630:if( seed != "time" )
        -: 9631:return clara::detail::convertInto( seed, config.rngSeed );
        -: 9632:config.rngSeed = static_cast<unsigned int>( std::time(nullptr) );
        -: 9633:return ParserResult::ok( ParseResultType::Matched );
        1: 9634:};
        -: 9635:auto const setColourUsage = [&]( std::string const& useColour ) {
        -: 9636:auto mode = toLower( useColour );
        -: 9637:
        -: 9638:if( mode == "yes" )
        -: 9639:config.useColour = UseColour::Yes;
        -: 9640:else if( mode == "no" )
        -: 9641:config.useColour = UseColour::No;
        -: 9642:else if( mode == "auto" )
        -: 9643:config.useColour = UseColour::Auto;
        -: 9644:else
        -: 9645:return ParserResult::runtimeError( "colour mode must be one of: auto, yes or no. '" + useColour + "' not recognised" );
        -: 9646:return ParserResult::ok( ParseResultType::Matched );
        1: 9647:};
        -: 9648:auto const setWaitForKeypress = [&]( std::string const& keypress ) {
        -: 9649:auto keypressLc = toLower( keypress );
        -: 9650:if( keypressLc == "start" )
        -: 9651:config.waitForKeypress = WaitForKeypress::BeforeStart;
        -: 9652:else if( keypressLc == "exit" )
        -: 9653:config.waitForKeypress = WaitForKeypress::BeforeExit;
        -: 9654:else if( keypressLc == "both" )
        -: 9655:config.waitForKeypress = WaitForKeypress::BeforeStartAndExit;
        -: 9656:else
        -: 9657:return ParserResult::runtimeError( "keypress argument must be one of: start, exit or both. '" + keypress + "' not recognised" );
        -: 9658:return ParserResult::ok( ParseResultType::Matched );
        1: 9659:};
        -: 9660:auto const setVerbosity = [&]( std::string const& verbosity ) {
        -: 9661:auto lcVerbosity = toLower( verbosity );
        -: 9662:if( lcVerbosity == "quiet" )
        -: 9663:config.verbosity = Verbosity::Quiet;
        -: 9664:else if( lcVerbosity == "normal" )
        -: 9665:config.verbosity = Verbosity::Normal;
        -: 9666:else if( lcVerbosity == "high" )
        -: 9667:config.verbosity = Verbosity::High;
        -: 9668:else
        -: 9669:return ParserResult::runtimeError( "Unrecognised verbosity, '" + verbosity + "'" );
        -: 9670:return ParserResult::ok( ParseResultType::Matched );
        1: 9671:};
        -: 9672:auto const setReporter = [&]( std::string const& reporter ) {
        -: 9673:IReporterRegistry::FactoryMap const& factories = getRegistryHub().getReporterRegistry().getFactories();
        -: 9674:
        -: 9675:auto lcReporter = toLower( reporter );
        -: 9676:auto result = factories.find( lcReporter );
        -: 9677:
        -: 9678:if( factories.end() != result )
        -: 9679:config.reporterName = lcReporter;
        -: 9680:else
        -: 9681:return ParserResult::runtimeError( "Unrecognized reporter, '" + reporter + "'. Check available with --list-reporters" );
        -: 9682:return ParserResult::ok( ParseResultType::Matched );
        1: 9683:};
        -: 9684:
        -: 9685:auto cli
        2: 9686:= ExeName( config.processName )
        1: 9686-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$: 9686-block  1
        3: 9687:| Help( config.showHelp )
        1: 9687-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
    $$$$$: 9687-block  1
    $$$$$: 9687-block  2
        3: 9688:| Opt( config.listTests )
        1: 9688-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
    $$$$$: 9688-block  1
    $$$$$: 9688-block  2
        2: 9689:["-l"]["--list-tests"]
        1: 9689-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9689-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9689-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9689-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9689-block  4
    $$$$$: 9689-block  5
    $$$$$: 9689-block  6
    $$$$$: 9689-block  7
        2: 9690:( "list all/matching test cases" )
        1: 9690-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9690-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9690-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$: 9690-block  3
    $$$$$: 9690-block  4
        3: 9691:| Opt( config.listTags )
        1: 9691-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
    $$$$$: 9691-block  1
    $$$$$: 9691-block  2
        2: 9692:["-t"]["--list-tags"]
        1: 9692-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9692-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9692-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9692-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9692-block  4
    $$$$$: 9692-block  5
    $$$$$: 9692-block  6
    $$$$$: 9692-block  7
        2: 9693:( "list all/matching tags" )
        1: 9693-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9693-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9693-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$: 9693-block  3
    $$$$$: 9693-block  4
        3: 9694:| Opt( config.showSuccessfulTests )
        1: 9694-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
    $$$$$: 9694-block  1
    $$$$$: 9694-block  2
        2: 9695:["-s"]["--success"]
        1: 9695-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9695-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9695-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9695-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9695-block  4
    $$$$$: 9695-block  5
    $$$$$: 9695-block  6
    $$$$$: 9695-block  7
        2: 9696:( "include successful tests in output" )
        1: 9696-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9696-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9696-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$: 9696-block  3
    $$$$$: 9696-block  4
        3: 9697:| Opt( config.shouldDebugBreak )
        1: 9697-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
    $$$$$: 9697-block  1
    $$$$$: 9697-block  2
        2: 9698:["-b"]["--break"]
        1: 9698-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9698-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9698-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9698-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9698-block  4
    $$$$$: 9698-block  5
    $$$$$: 9698-block  6
    $$$$$: 9698-block  7
        2: 9699:( "break into debugger on failure" )
        1: 9699-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9699-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9699-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$: 9699-block  3
    $$$$$: 9699-block  4
        3: 9700:| Opt( config.noThrow )
        1: 9700-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
    $$$$$: 9700-block  1
    $$$$$: 9700-block  2
        2: 9701:["-e"]["--nothrow"]
        1: 9701-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9701-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9701-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9701-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9701-block  4
    $$$$$: 9701-block  5
    $$$$$: 9701-block  6
    $$$$$: 9701-block  7
        2: 9702:( "skip exception tests" )
        1: 9702-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9702-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9702-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$: 9702-block  3
    $$$$$: 9702-block  4
        3: 9703:| Opt( config.showInvisibles )
        1: 9703-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
    $$$$$: 9703-block  1
    $$$$$: 9703-block  2
        2: 9704:["-i"]["--invisibles"]
        1: 9704-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9704-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9704-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9704-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9704-block  4
    $$$$$: 9704-block  5
    $$$$$: 9704-block  6
    $$$$$: 9704-block  7
        2: 9705:( "show invisibles (tabs, newlines)" )
        1: 9705-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9705-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9705-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$: 9705-block  3
    $$$$$: 9705-block  4
        4: 9706:| Opt( config.outputFilename, "filename" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9706-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9706-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9706-block  2
    $$$$$: 9706-block  3
    $$$$$: 9706-block  4
    $$$$$: 9706-block  5
        2: 9707:["-o"]["--out"]
        1: 9707-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9707-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9707-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9707-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9707-block  4
    $$$$$: 9707-block  5
    $$$$$: 9707-block  6
    $$$$$: 9707-block  7
        2: 9708:( "output filename" )
        1: 9708-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9708-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9708-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$: 9708-block  3
    $$$$$: 9708-block  4
        4: 9709:| Opt( setReporter, "name" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9709-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9709-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9709-block  2
    $$$$$: 9709-block  3
    $$$$$: 9709-block  4
    $$$$$: 9709-block  5
        2: 9710:["-r"]["--reporter"]
        1: 9710-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9710-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9710-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9710-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9710-block  4
    $$$$$: 9710-block  5
    $$$$$: 9710-block  6
    $$$$$: 9710-block  7
        2: 9711:( "reporter to use (defaults to console)" )
        1: 9711-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9711-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9711-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9711-block  3
    $$$$$: 9711-block  4
        4: 9712:| Opt( config.name, "name" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9712-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9712-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9712-block  2
    $$$$$: 9712-block  3
    $$$$$: 9712-block  4
    $$$$$: 9712-block  5
        2: 9713:["-n"]["--name"]
        1: 9713-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9713-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9713-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9713-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9713-block  4
    $$$$$: 9713-block  5
    $$$$$: 9713-block  6
    $$$$$: 9713-block  7
        2: 9714:( "suite name" )
        1: 9714-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9714-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9714-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9714-block  3
    $$$$$: 9714-block  4
        3: 9715:| Opt( [&]( bool ){ config.abortAfter = 1; } )
        1: 9715-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
    $$$$$: 9715-block  1
    $$$$$: 9715-block  2
    $$$$$: 9715-block  3
        2: 9716:["-a"]["--abort"]
        1: 9716-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9716-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9716-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9716-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9716-block  4
    $$$$$: 9716-block  5
    $$$$$: 9716-block  6
    $$$$$: 9716-block  7
        2: 9717:( "abort at first failure" )
        1: 9717-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9717-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9717-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9717-block  3
    $$$$$: 9717-block  4
        4: 9718:| Opt( [&]( int x ){ config.abortAfter = x; }, "no. failures" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9718-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9718-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9718-block  2
    $$$$$: 9718-block  3
    $$$$$: 9718-block  4
    $$$$$: 9718-block  5
    $$$$$: 9718-block  6
        2: 9719:["-x"]["--abortx"]
        1: 9719-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9719-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9719-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9719-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9719-block  4
    $$$$$: 9719-block  5
    $$$$$: 9719-block  6
    $$$$$: 9719-block  7
        2: 9720:( "abort after x failures" )
        1: 9720-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9720-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9720-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$: 9720-block  3
    $$$$$: 9720-block  4
        4: 9721:| Opt( setWarning, "warning name" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9721-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9721-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9721-block  2
    $$$$$: 9721-block  3
    $$$$$: 9721-block  4
    $$$$$: 9721-block  5
        2: 9722:["-w"]["--warn"]
        1: 9722-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9722-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9722-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9722-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9722-block  4
    $$$$$: 9722-block  5
    $$$$$: 9722-block  6
    $$$$$: 9722-block  7
        2: 9723:( "enable warnings" )
        1: 9723-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9723-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9723-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9723-block  3
    $$$$$: 9723-block  4
        4: 9724:| Opt( [&]( bool flag ) { config.showDurations = flag ? ShowDurations::Always : ShowDurations::Never; }, "yes|no" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9724-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9724-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9724-block  2
    $$$$$: 9724-block  3
    $$$$$: 9724-block  4
    $$$$$: 9724-block  5
    $$$$$: 9724-block  6
        2: 9725:["-d"]["--durations"]
        1: 9725-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9725-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9725-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9725-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9725-block  4
    $$$$$: 9725-block  5
    $$$$$: 9725-block  6
    $$$$$: 9725-block  7
        2: 9726:( "show test durations" )
        1: 9726-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9726-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9726-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9726-block  3
    $$$$$: 9726-block  4
        4: 9727:| Opt( loadTestNamesFromFile, "filename" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9727-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9727-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9727-block  2
    $$$$$: 9727-block  3
    $$$$$: 9727-block  4
    $$$$$: 9727-block  5
        2: 9728:["-f"]["--input-file"]
        1: 9728-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9728-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9728-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9728-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9728-block  4
    $$$$$: 9728-block  5
    $$$$$: 9728-block  6
    $$$$$: 9728-block  7
        2: 9729:( "load test names to run from a file" )
        1: 9729-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9729-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9729-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9729-block  3
    $$$$$: 9729-block  4
        3: 9730:| Opt( config.filenamesAsTags )
        1: 9730-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
    $$$$$: 9730-block  1
    $$$$$: 9730-block  2
        2: 9731:["-#"]["--filenames-as-tags"]
        1: 9731-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9731-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9731-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9731-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9731-block  4
    $$$$$: 9731-block  5
    $$$$$: 9731-block  6
    $$$$$: 9731-block  7
        2: 9732:( "adds a tag for the filename" )
        1: 9732-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9732-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9732-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9732-block  3
    $$$$$: 9732-block  4
        4: 9733:| Opt( config.sectionsToRun, "section name" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9733-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9733-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9733-block  2
    $$$$$: 9733-block  3
    $$$$$: 9733-block  4
    $$$$$: 9733-block  5
        2: 9734:["-c"]["--section"]
        1: 9734-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9734-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9734-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9734-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9734-block  4
    $$$$$: 9734-block  5
    $$$$$: 9734-block  6
    $$$$$: 9734-block  7
        2: 9735:( "specify section to run" )
        1: 9735-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9735-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9735-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$: 9735-block  3
    $$$$$: 9735-block  4
        4: 9736:| Opt( setVerbosity, "quiet|normal|high" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9736-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9736-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9736-block  2
    $$$$$: 9736-block  3
    $$$$$: 9736-block  4
    $$$$$: 9736-block  5
        2: 9737:["-v"]["--verbosity"]
        1: 9737-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9737-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9737-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 9737-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
    $$$$$: 9737-block  4
    $$$$$: 9737-block  5
    $$$$$: 9737-block  6
    $$$$$: 9737-block  7
        2: 9738:( "set output verbosity" )
        1: 9738-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9738-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9738-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9738-block  3
    $$$$$: 9738-block  4
        3: 9739:| Opt( config.listTestNamesOnly )
        1: 9739-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
    $$$$$: 9739-block  1
    $$$$$: 9739-block  2
        2: 9740:["--list-test-names-only"]
        1: 9740-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9740-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
    $$$$$: 9740-block  2
    $$$$$: 9740-block  3
        2: 9741:( "list all/matching test cases names only" )
        1: 9741-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9741-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9741-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9741-block  3
    $$$$$: 9741-block  4
        3: 9742:| Opt( config.listReporters )
        1: 9742-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
    $$$$$: 9742-block  1
    $$$$$: 9742-block  2
        2: 9743:["--list-reporters"]
        1: 9743-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9743-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
    $$$$$: 9743-block  2
    $$$$$: 9743-block  3
        2: 9744:( "list all reporters" )
        1: 9744-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9744-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9744-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$: 9744-block  3
    $$$$$: 9744-block  4
        4: 9745:| Opt( setTestOrder, "decl|lex|rand" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9745-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9745-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9745-block  2
    $$$$$: 9745-block  3
    $$$$$: 9745-block  4
    $$$$$: 9745-block  5
        2: 9746:["--order"]
        1: 9746-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9746-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
    $$$$$: 9746-block  2
    $$$$$: 9746-block  3
        2: 9747:( "test case order (defaults to decl)" )
        1: 9747-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9747-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9747-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$: 9747-block  3
    $$$$$: 9747-block  4
        4: 9748:| Opt( setRngSeed, "'time'|number" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9748-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9748-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9748-block  2
    $$$$$: 9748-block  3
    $$$$$: 9748-block  4
    $$$$$: 9748-block  5
        2: 9749:["--rng-seed"]
        1: 9749-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9749-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
    $$$$$: 9749-block  2
    $$$$$: 9749-block  3
        2: 9750:( "set a specific seed for random numbers" )
        1: 9750-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9750-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9750-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9750-block  3
    $$$$$: 9750-block  4
        4: 9751:| Opt( setColourUsage, "yes|no" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9751-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9751-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9751-block  2
    $$$$$: 9751-block  3
    $$$$$: 9751-block  4
    $$$$$: 9751-block  5
        2: 9752:["--use-colour"]
        1: 9752-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9752-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
    $$$$$: 9752-block  2
    $$$$$: 9752-block  3
        2: 9753:( "should output be colourised" )
        1: 9753-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9753-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9753-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9753-block  3
    $$$$$: 9753-block  4
        3: 9754:| Opt( config.libIdentify )
        1: 9754-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
    $$$$$: 9754-block  1
    $$$$$: 9754-block  2
        2: 9755:["--libidentify"]
        1: 9755-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9755-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
    $$$$$: 9755-block  2
    $$$$$: 9755-block  3
        2: 9756:( "report name and version according to libidentify standard" )
        1: 9756-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9756-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9756-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9756-block  3
    $$$$$: 9756-block  4
        4: 9757:| Opt( setWaitForKeypress, "start|exit|both" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9757-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9757-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9757-block  2
    $$$$$: 9757-block  3
    $$$$$: 9757-block  4
    $$$$$: 9757-block  5
        2: 9758:["--wait-for-keypress"]
        1: 9758-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9758-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
    $$$$$: 9758-block  2
    $$$$$: 9758-block  3
        2: 9759:( "waits for a keypress before exiting" )
        1: 9759-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9759-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9759-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
    $$$$$: 9759-block  3
    $$$$$: 9759-block  4
        4: 9760:| Opt( config.benchmarkSamples, "samples" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9760-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9760-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9760-block  2
    $$$$$: 9760-block  3
    $$$$$: 9760-block  4
    $$$$$: 9760-block  5
        2: 9761:["--benchmark-samples"]
        1: 9761-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9761-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
    $$$$$: 9761-block  2
    $$$$$: 9761-block  3
        2: 9762:( "number of samples to collect (default: 100)" )
        1: 9762-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9762-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9762-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9762-block  3
    $$$$$: 9762-block  4
        4: 9763:| Opt( config.benchmarkResamples, "resamples" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9763-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9763-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9763-block  2
    $$$$$: 9763-block  3
    $$$$$: 9763-block  4
    $$$$$: 9763-block  5
        2: 9764:["--benchmark-resamples"]
        1: 9764-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9764-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
    $$$$$: 9764-block  2
    $$$$$: 9764-block  3
        2: 9765:( "number of resamples for the bootstrap (default: 100000)" )
        1: 9765-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9765-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9765-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9765-block  3
    $$$$$: 9765-block  4
        4: 9766:| Opt( config.benchmarkConfidenceInterval, "confidence interval" )
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9766-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9766-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$: 9766-block  2
    $$$$$: 9766-block  3
    $$$$$: 9766-block  4
    $$$$$: 9766-block  5
        2: 9767:["--benchmark-confidence-interval"]
        1: 9767-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9767-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
    $$$$$: 9767-block  2
    $$$$$: 9767-block  3
        2: 9768:( "confidence interval for the bootstrap (between 0 and 1, default: 0.95)" )
        1: 9768-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9768-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9768-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9768-block  3
    $$$$$: 9768-block  4
        3: 9769:| Opt( config.benchmarkNoAnalysis )
        1: 9769-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
    $$$$$: 9769-block  1
    $$$$$: 9769-block  2
        2: 9770:["--benchmark-no-analysis"]
        1: 9770-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9770-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
    $$$$$: 9770-block  2
    $$$$$: 9770-block  3
        2: 9771:( "perform only measurements; do not perform any analysis" )
        1: 9771-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9771-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9771-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$: 9771-block  3
    $$$$$: 9771-block  4
        2: 9772:| Arg( config.testsOrTags, "test name|pattern|tags" )
        1: 9772-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9772-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 returned 1
    $$$$$: 9772-block  2
    $$$$$: 9772-block  3
    $$$$$: 9772-block  4
        3: 9773:( "which test or tests to use" );
        1: 9773-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9773-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9773-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 9773-block  3
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
call   13 returned 1
call   14 returned 1
    $$$$$: 9773-block  4
    $$$$$: 9773-block  5
        -: 9774:
        2: 9775:return cli;
        1: 9775-block  0
        -: 9776:}
        -: 9777:
        -: 9778:} // end namespace Catch
        -: 9779:// end catch_commandline.cpp
        -: 9780:// start catch_common.cpp
        -: 9781:
        -: 9782:#include <cstring>
        -: 9783:#include <ostream>
        -: 9784:
        -: 9785:namespace Catch {
        -: 9786:
function _ZNK5Catch14SourceLineInfoeqERKS0_ called 0 returned 0% blocks executed 0%
    #####: 9787:bool SourceLineInfo::operator == ( SourceLineInfo const& other ) const noexcept {
    #####: 9788:return line == other.line && (file == other.file || std::strcmp(file, other.file) == 0);
    %%%%%: 9788-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 9788-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 9788-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 9788-block  3
    %%%%%: 9788-block  4
    %%%%%: 9788-block  5
        -: 9789:}
function _ZNK5Catch14SourceLineInfoltERKS0_ called 0 returned 0% blocks executed 0%
    #####: 9790:bool SourceLineInfo::operator < ( SourceLineInfo const& other ) const noexcept {
        -: 9791:// We can assume that the same file will usually have the same pointer.
        -: 9792:// Thus, if the pointers are the same, there is no point in calling the strcmp
    #####: 9793:return line < other.line || ( line == other.line && file != other.file && (std::strcmp(file, other.file) < 0));
    %%%%%: 9793-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 9793-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 9793-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 9793-block  3
branch  6 never executed
branch  7 never executed
    %%%%%: 9793-block  4
    %%%%%: 9793-block  5
    %%%%%: 9793-block  6
        -: 9794:}
        -: 9795:
function _ZN5CatchlsERSoRKNS_14SourceLineInfoE called 0 returned 0% blocks executed 0%
    #####: 9796:std::ostream& operator << ( std::ostream& os, SourceLineInfo const& info ) {
        -: 9797:#ifndef __GNUG__
        -: 9798:os << info.file << '(' << info.line << ')';
        -: 9799:#else
    #####: 9800:os << info.file << ':' << info.line;
    %%%%%: 9800-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 9801:#endif
    #####: 9802:return os;
        -: 9803:}
        -: 9804:
function _ZNK5Catch13StreamEndStoppsB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 9805:std::string StreamEndStop::operator+() const {
    #####: 9806:return std::string();
    %%%%%: 9806-block  0
call    0 never executed
        -: 9807:}
        -: 9808:
        -: 9809:NonCopyable::NonCopyable() = default;
        -: 9810:NonCopyable::~NonCopyable() = default;
        -: 9811:
        -: 9812:}
        -: 9813:// end catch_common.cpp
        -: 9814:// start catch_config.cpp
        -: 9815:
        -: 9816:namespace Catch {
        -: 9817:
function _ZN5Catch6ConfigC2ERKNS_10ConfigDataE called 1 returned 100% blocks executed 43%
        1: 9818:Config::Config( ConfigData const& data )
        -: 9819::   m_data( data ),
        1: 9820:m_stream( openStream() )
        1: 9820-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9820-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 9820-block  2
call    7 returned 1
call    8 returned 1
    $$$$$: 9820-block  3
call    9 never executed
    $$$$$: 9820-block  4
call   10 never executed
    $$$$$: 9820-block  5
call   11 never executed
    $$$$$: 9820-block  6
call   12 never executed
        -: 9821:{
        -: 9822:// We need to trim filter specs to avoid trouble with superfluous
        -: 9823:// whitespace (esp. important for bdd macros, as those are manually
        -: 9824:// aligned with whitespace).
        -: 9825:
       1*: 9826:for (auto& elem : m_data.testsOrTags) {
call    0 returned 1
call    1 returned 1
        1: 9826-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 9826-block  1
call    5 never executed
    #####: 9827:elem = trim(elem);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9827-block  0
call    3 never executed
call    4 never executed
call    5 never executed
        -: 9828:}
       1*: 9829:for (auto& elem : m_data.sectionsToRun) {
        1: 9829-block  0
call    0 returned 1
call    1 returned 1
        1: 9829-block  1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 9829-block  2
call    5 never executed
    #####: 9830:elem = trim(elem);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9830-block  0
call    3 never executed
call    4 never executed
call    5 never executed
        -: 9831:}
        -: 9832:
        1: 9833:TestSpecParser parser(ITagAliasRegistry::get());
        1: 9833-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9833-block  1
call    3 returned 1
    $$$$$: 9833-block  2
call    4 never executed
        1: 9834:if (!m_data.testsOrTags.empty()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 9835:m_hasTestFilters = true;
    #####: 9836:for (auto const& testOrTags : m_data.testsOrTags) {
    %%%%%: 9836-block  0
call    0 never executed
call    1 never executed
    %%%%%: 9836-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9836-block  2
call    5 never executed
    %%%%%: 9836-block  3
call    6 never executed
    #####: 9837:parser.parse(testOrTags);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9838:}
        -: 9839:}
        1: 9840:m_testSpec = parser.testSpec();
        1: 9840-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9840-block  1
call    3 returned 1
call    4 returned 1
call    5 returned 1
        1: 9841:}
        -: 9842:
function _ZNK5Catch6Config11getFilenameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 9843:std::string const& Config::getFilename() const {
    #####: 9844:return m_data.outputFilename ;
    %%%%%: 9844-block  0
        -: 9845:}
        -: 9846:
function _ZNK5Catch6Config9listTestsEv called 1 returned 100% blocks executed 100%
        1: 9847:bool Config::listTests() const          { return m_data.listTests; }
        1: 9847-block  0
function _ZNK5Catch6Config17listTestNamesOnlyEv called 1 returned 100% blocks executed 100%
        1: 9848:bool Config::listTestNamesOnly() const  { return m_data.listTestNamesOnly; }
        1: 9848-block  0
function _ZNK5Catch6Config8listTagsEv called 1 returned 100% blocks executed 100%
        1: 9849:bool Config::listTags() const           { return m_data.listTags; }
        1: 9849-block  0
function _ZNK5Catch6Config13listReportersEv called 1 returned 100% blocks executed 100%
        1: 9850:bool Config::listReporters() const      { return m_data.listReporters; }
        1: 9850-block  0
        -: 9851:
function _ZNK5Catch6Config14getProcessNameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 9852:std::string Config::getProcessName() const { return m_data.processName; }
    %%%%%: 9852-block  0
call    0 never executed
function _ZNK5Catch6Config15getReporterNameB5cxx11Ev called 1 returned 100% blocks executed 100%
        1: 9853:std::string const& Config::getReporterName() const { return m_data.reporterName; }
        1: 9853-block  0
        -: 9854:
function _ZNK5Catch6Config14getTestsOrTagsB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 9855:std::vector<std::string> const& Config::getTestsOrTags() const { return m_data.testsOrTags; }
    %%%%%: 9855-block  0
function _ZNK5Catch6Config16getSectionsToRunB5cxx11Ev called 8 returned 100% blocks executed 100%
        8: 9856:std::vector<std::string> const& Config::getSectionsToRun() const { return m_data.sectionsToRun; }
        8: 9856-block  0
        -: 9857:
function _ZNK5Catch6Config8testSpecEv called 4 returned 100% blocks executed 100%
        4: 9858:TestSpec const& Config::testSpec() const { return m_testSpec; }
        4: 9858-block  0
function _ZNK5Catch6Config14hasTestFiltersEv called 0 returned 0% blocks executed 0%
    #####: 9859:bool Config::hasTestFilters() const { return m_hasTestFilters; }
    %%%%%: 9859-block  0
        -: 9860:
function _ZNK5Catch6Config8showHelpEv called 0 returned 0% blocks executed 0%
    #####: 9861:bool Config::showHelp() const { return m_data.showHelp; }
    %%%%%: 9861-block  0
        -: 9862:
        -: 9863:// IConfig interface
function _ZNK5Catch6Config11allowThrowsEv called 0 returned 0% blocks executed 0%
    #####: 9864:bool Config::allowThrows() const                   { return !m_data.noThrow; }
    %%%%%: 9864-block  0
function _ZNK5Catch6Config6streamEv called 1 returned 100% blocks executed 100%
        1: 9865:std::ostream& Config::stream() const               { return m_stream->stream(); }
        1: 9865-block  0
call    0 returned 1
call    1 returned 1
function _ZNK5Catch6Config4nameB5cxx11Ev called 3 returned 100% blocks executed 83%
       3*: 9866:std::string Config::name() const                   { return m_data.name.empty() ? m_data.processName : m_data.name; }
        3: 9866-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3: 9866-block  1
    %%%%%: 9866-block  2
        3: 9866-block  3
call    3 returned 3
function _ZNK5Catch6Config24includeSuccessfulResultsEv called 1 returned 100% blocks executed 100%
        1: 9867:bool Config::includeSuccessfulResults() const      { return m_data.showSuccessfulTests; }
        1: 9867-block  0
function _ZNK5Catch6Config26warnAboutMissingAssertionsEv called 0 returned 0% blocks executed 0%
    #####: 9868:bool Config::warnAboutMissingAssertions() const    { return !!(m_data.warnings & WarnAbout::NoAssertions); }
    %%%%%: 9868-block  0
function _ZNK5Catch6Config16warnAboutNoTestsEv called 1 returned 100% blocks executed 100%
        1: 9869:bool Config::warnAboutNoTests() const              { return !!(m_data.warnings & WarnAbout::NoTests); }
        1: 9869-block  0
function _ZNK5Catch6Config13showDurationsEv called 8 returned 100% blocks executed 100%
        8: 9870:ShowDurations::OrNot Config::showDurations() const { return m_data.showDurations; }
        8: 9870-block  0
function _ZNK5Catch6Config8runOrderEv called 3 returned 100% blocks executed 100%
        3: 9871:RunTests::InWhatOrder Config::runOrder() const     { return m_data.runOrder; }
        3: 9871-block  0
function _ZNK5Catch6Config7rngSeedEv called 9 returned 100% blocks executed 100%
        9: 9872:unsigned int Config::rngSeed() const               { return m_data.rngSeed; }
        9: 9872-block  0
function _ZNK5Catch6Config9useColourEv called 1 returned 100% blocks executed 100%
        1: 9873:UseColour::YesOrNo Config::useColour() const       { return m_data.useColour; }
        1: 9873-block  0
function _ZNK5Catch6Config16shouldDebugBreakEv called 0 returned 0% blocks executed 0%
    #####: 9874:bool Config::shouldDebugBreak() const              { return m_data.shouldDebugBreak; }
    %%%%%: 9874-block  0
function _ZNK5Catch6Config10abortAfterEv called 18 returned 100% blocks executed 100%
       18: 9875:int Config::abortAfter() const                     { return m_data.abortAfter; }
       18: 9875-block  0
function _ZNK5Catch6Config14showInvisiblesEv called 0 returned 0% blocks executed 0%
    #####: 9876:bool Config::showInvisibles() const                { return m_data.showInvisibles; }
    %%%%%: 9876-block  0
function _ZNK5Catch6Config9verbosityEv called 1 returned 100% blocks executed 100%
        1: 9877:Verbosity Config::verbosity() const                { return m_data.verbosity; }
        1: 9877-block  0
        -: 9878:
function _ZNK5Catch6Config19benchmarkNoAnalysisEv called 1 returned 100% blocks executed 100%
        1: 9879:bool Config::benchmarkNoAnalysis() const           { return m_data.benchmarkNoAnalysis; }
        1: 9879-block  0
function _ZNK5Catch6Config16benchmarkSamplesEv called 0 returned 0% blocks executed 0%
    #####: 9880:int Config::benchmarkSamples() const               { return m_data.benchmarkSamples; }
    %%%%%: 9880-block  0
function _ZNK5Catch6Config27benchmarkConfidenceIntervalEv called 0 returned 0% blocks executed 0%
    #####: 9881:double Config::benchmarkConfidenceInterval() const { return m_data.benchmarkConfidenceInterval; }
    %%%%%: 9881-block  0
function _ZNK5Catch6Config18benchmarkResamplesEv called 0 returned 0% blocks executed 0%
    #####: 9882:unsigned int Config::benchmarkResamples() const    { return m_data.benchmarkResamples; }
    %%%%%: 9882-block  0
        -: 9883:
function _ZN5Catch6Config10openStreamEv called 1 returned 100% blocks executed 78%
        1: 9884:IStream const* Config::openStream() {
        1: 9885:return Catch::makeStream(m_data.outputFilename);
        1: 9885-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 9885-block  1
        1: 9885-block  2
call    4 returned 1
        1: 9885-block  3
    $$$$$: 9885-block  4
call    5 never executed
        -: 9886:}
        -: 9887:
        -: 9888:} // end namespace Catch
        -: 9889:// end catch_config.cpp
        -: 9890:// start catch_console_colour.cpp
        -: 9891:
        -: 9892:#if defined(__clang__)
        -: 9893:#    pragma clang diagnostic push
        -: 9894:#    pragma clang diagnostic ignored "-Wexit-time-destructors"
        -: 9895:#endif
        -: 9896:
        -: 9897:// start catch_errno_guard.h
        -: 9898:
        -: 9899:namespace Catch {
        -: 9900:
        -: 9901:class ErrnoGuard {
        -: 9902:public:
        -: 9903:ErrnoGuard();
        -: 9904:~ErrnoGuard();
        -: 9905:private:
        -: 9906:int m_oldErrno;
        -: 9907:};
        -: 9908:
        -: 9909:}
        -: 9910:
        -: 9911:// end catch_errno_guard.h
        -: 9912:#include <sstream>
        -: 9913:
        -: 9914:namespace Catch {
        -: 9915:namespace {
        -: 9916:
        -: 9917:struct IColourImpl {
function _ZN5Catch12_GLOBAL__N_111IColourImplD2Ev called 1 returned 100% blocks executed 100%
        1: 9918:virtual ~IColourImpl() = default;
        -: 9919:virtual void use( Colour::Code _colourCode ) = 0;
        -: 9920:};
        -: 9921:
        -: 9922:struct NoColourImpl : IColourImpl {
function _ZN5Catch12_GLOBAL__N_112NoColourImpl3useENS_6Colour4CodeE called 0 returned 0% blocks executed 0%
    #####: 9923:void use( Colour::Code ) {}
        -: 9924:
function _ZN5Catch12_GLOBAL__N_112NoColourImpl8instanceEv called 0 returned 0% blocks executed 0%
    #####: 9925:static IColourImpl* instance() {
    #####: 9926:static NoColourImpl s_instance;
    %%%%%: 9926-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 9926-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9926-block  2
call    5 never executed
call    6 never executed
    #####: 9927:return &s_instance;
    %%%%%: 9927-block  0
        -: 9928:}
        -: 9929:};
        -: 9930:
        -: 9931:} // anon namespace
        -: 9932:} // namespace Catch
        -: 9933:
        -: 9934:#if !defined( CATCH_CONFIG_COLOUR_NONE ) && !defined( CATCH_CONFIG_COLOUR_WINDOWS ) && !defined( CATCH_CONFIG_COLOUR_ANSI )
        -: 9935:#   ifdef CATCH_PLATFORM_WINDOWS
        -: 9936:#       define CATCH_CONFIG_COLOUR_WINDOWS
        -: 9937:#   else
        -: 9938:#       define CATCH_CONFIG_COLOUR_ANSI
        -: 9939:#   endif
        -: 9940:#endif
        -: 9941:
        -: 9942:#if defined ( CATCH_CONFIG_COLOUR_WINDOWS ) /////////////////////////////////////////
        -: 9943:
        -: 9944:namespace Catch {
        -: 9945:namespace {
        -: 9946:
        -: 9947:class Win32ColourImpl : public IColourImpl {
        -: 9948:public:
function _ZN5Catch12_GLOBAL__N_115Win32ColourImplC2Ev called 1 returned 100% blocks executed 71%
        1: 9949:Win32ColourImpl() : stdoutHandle( GetStdHandle(STD_OUTPUT_HANDLE) )
        1: 9949-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 9949-block  1
call    4 never executed
        -: 9950:{
        -: 9951:CONSOLE_SCREEN_BUFFER_INFO csbiInfo;
        1: 9952:GetConsoleScreenBufferInfo( stdoutHandle, &csbiInfo );
        1: 9952-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9953:originalForegroundAttributes = csbiInfo.wAttributes & ~( BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE | BACKGROUND_INTENSITY );
        1: 9954:originalBackgroundAttributes = csbiInfo.wAttributes & ~( FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY );
        1: 9955:}
        1: 9955-block  0
        -: 9956:
function _ZN5Catch12_GLOBAL__N_115Win32ColourImpl3useENS_6Colour4CodeE called 8 returned 100% blocks executed 18%
        8: 9957:void use( Colour::Code _colourCode ) override {
        8: 9958:switch( _colourCode ) {
        8: 9958-block  0
branch  0 taken 4
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 1
branch 10 taken 2
branch 11 taken 0
branch 12 taken 1
branch 13 taken 0
branch 14 taken 0
        4: 9959:case Colour::None:      return setTextAttribute( originalForegroundAttributes );
        4: 9959-block  0
call    0 returned 4
    #####: 9960:case Colour::White:     return setTextAttribute( FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE );
    %%%%%: 9960-block  0
call    0 never executed
    #####: 9961:case Colour::Red:       return setTextAttribute( FOREGROUND_RED );
    %%%%%: 9961-block  0
call    0 never executed
    #####: 9962:case Colour::Green:     return setTextAttribute( FOREGROUND_GREEN );
    %%%%%: 9962-block  0
call    0 never executed
    #####: 9963:case Colour::Blue:      return setTextAttribute( FOREGROUND_BLUE );
    %%%%%: 9963-block  0
call    0 never executed
    #####: 9964:case Colour::Cyan:      return setTextAttribute( FOREGROUND_BLUE | FOREGROUND_GREEN );
    %%%%%: 9964-block  0
call    0 never executed
    #####: 9965:case Colour::Yellow:    return setTextAttribute( FOREGROUND_RED | FOREGROUND_GREEN );
    %%%%%: 9965-block  0
call    0 never executed
    #####: 9966:case Colour::Grey:      return setTextAttribute( 0 );
    %%%%%: 9966-block  0
call    0 never executed
        -: 9967:
    #####: 9968:case Colour::LightGrey:     return setTextAttribute( FOREGROUND_INTENSITY );
    %%%%%: 9968-block  0
call    0 never executed
        1: 9969:case Colour::BrightRed:     return setTextAttribute( FOREGROUND_INTENSITY | FOREGROUND_RED );
        1: 9969-block  0
call    0 returned 1
        2: 9970:case Colour::BrightGreen:   return setTextAttribute( FOREGROUND_INTENSITY | FOREGROUND_GREEN );
        2: 9970-block  0
call    0 returned 2
    #####: 9971:case Colour::BrightWhite:   return setTextAttribute( FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE );
    %%%%%: 9971-block  0
call    0 never executed
        1: 9972:case Colour::BrightYellow:  return setTextAttribute( FOREGROUND_INTENSITY | FOREGROUND_RED | FOREGROUND_GREEN );
        1: 9972-block  0
call    0 returned 1
        -: 9973:
    #####: 9974:case Colour::Bright: CATCH_INTERNAL_ERROR( "not a colour" );
    %%%%%: 9974-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9974-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9974-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 9974-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 9974-block  4
call   14 never executed
    $$$$$: 9974-block  5
call   15 never executed
    $$$$$: 9974-block  6
    $$$$$: 9974-block  7
    $$$$$: 9974-block  8
call   16 never executed
    $$$$$: 9974-block  9
call   17 never executed
        -: 9975:
    #####: 9976:default:
    #####: 9977:CATCH_ERROR( "Unknown colour requested" );
    %%%%%: 9977-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 9977-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 9977-block  2
call    7 never executed
    $$$$$: 9977-block  3
call    8 never executed
    $$$$$: 9977-block  4
    $$$$$: 9977-block  5
call    9 never executed
        -: 9978:}
        -: 9979:}
        -: 9980:
        -: 9981:private:
function _ZN5Catch12_GLOBAL__N_115Win32ColourImpl16setTextAttributeEt called 8 returned 100% blocks executed 100%
        8: 9982:void setTextAttribute( WORD _textAttribute ) {
        8: 9983:SetConsoleTextAttribute( stdoutHandle, _textAttribute | originalBackgroundAttributes );
        8: 9983-block  0
call    0 returned 8
        8: 9984:}
        -: 9985:HANDLE stdoutHandle;
        -: 9986:WORD originalForegroundAttributes;
        -: 9987:WORD originalBackgroundAttributes;
        -: 9988:};
        -: 9989:
function _ZN5Catch12_GLOBAL__N_122platformColourInstanceEv called 1 returned 100% blocks executed 76%
        1: 9990:IColourImpl* platformColourInstance() {
        1: 9991:static Win32ColourImpl s_instance;
        1: 9991-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 9991-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 9991-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 9991-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 9991-block  4
branch 10 never executed
branch 11 never executed
    $$$$$: 9991-block  5
call   12 never executed
        -: 9992:
        1: 9993:IConfigPtr config = getCurrentContext().getConfig();
        1: 9993-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 9993-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9993-block  2
call    6 returned 1
    $$$$$: 9993-block  3
call    7 never executed
        -: 9994:UseColour::YesOrNo colourMode = config
       1*: 9995:? config->useColour()
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 9995-block  0
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9995-block  1
    %%%%%: 9995-block  2
        1: 9996:: UseColour::Auto;
call    0 returned 1
        1: 9997:if( colourMode == UseColour::Auto )
        1: 9997-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 9998:colourMode = UseColour::Yes;
        1: 9998-block  0
        -: 9999:return colourMode == UseColour::Yes
        1:10000:? &s_instance
        1:10000-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:10000-block  1
       2*:10001:: NoColourImpl::instance();
    %%%%%:10001-block  0
call    0 never executed
        1:10001-block  1
call    1 returned 1
        1:10001-block  2
        -:10002:}
        -:10003:
        -:10004:} // end anon namespace
        -:10005:} // end namespace Catch
        -:10006:
        -:10007:#elif defined( CATCH_CONFIG_COLOUR_ANSI ) //////////////////////////////////////
        -:10008:
        -:10009:#include <unistd.h>
        -:10010:
        -:10011:namespace Catch {
        -:10012:namespace {
        -:10013:
        -:10014:// use POSIX/ ANSI console terminal codes
        -:10015:// Thanks to Adam Strzelecki for original contribution
        -:10016:// (http://github.com/nanoant)
        -:10017:// https://github.com/philsquared/Catch/pull/131
        -:10018:class PosixColourImpl : public IColourImpl {
        -:10019:public:
        -:10020:void use( Colour::Code _colourCode ) override {
        -:10021:switch( _colourCode ) {
        -:10022:case Colour::None:
        -:10023:case Colour::White:     return setColour( "[0m" );
        -:10024:case Colour::Red:       return setColour( "[0;31m" );
        -:10025:case Colour::Green:     return setColour( "[0;32m" );
        -:10026:case Colour::Blue:      return setColour( "[0;34m" );
        -:10027:case Colour::Cyan:      return setColour( "[0;36m" );
        -:10028:case Colour::Yellow:    return setColour( "[0;33m" );
        -:10029:case Colour::Grey:      return setColour( "[1;30m" );
        -:10030:
        -:10031:case Colour::LightGrey:     return setColour( "[0;37m" );
        -:10032:case Colour::BrightRed:     return setColour( "[1;31m" );
        -:10033:case Colour::BrightGreen:   return setColour( "[1;32m" );
        -:10034:case Colour::BrightWhite:   return setColour( "[1;37m" );
        -:10035:case Colour::BrightYellow:  return setColour( "[1;33m" );
        -:10036:
        -:10037:case Colour::Bright: CATCH_INTERNAL_ERROR( "not a colour" );
        -:10038:default: CATCH_INTERNAL_ERROR( "Unknown colour requested" );
        -:10039:}
        -:10040:}
        -:10041:static IColourImpl* instance() {
        -:10042:static PosixColourImpl s_instance;
        -:10043:return &s_instance;
        -:10044:}
        -:10045:
        -:10046:private:
        -:10047:void setColour( const char* _escapeCode ) {
        -:10048:getCurrentContext().getConfig()->stream()
        -:10049:<< '\033' << _escapeCode;
        -:10050:}
        -:10051:};
        -:10052:
        -:10053:bool useColourOnPlatform() {
        -:10054:return
        -:10055:#ifdef CATCH_PLATFORM_MAC
        -:10056:!isDebuggerActive() &&
        -:10057:#endif
        -:10058:#if !(defined(__DJGPP__) && defined(__STRICT_ANSI__))
        -:10059:isatty(STDOUT_FILENO)
        -:10060:#else
        -:10061:false
        -:10062:#endif
        -:10063:;
        -:10064:}
        -:10065:IColourImpl* platformColourInstance() {
        -:10066:ErrnoGuard guard;
        -:10067:IConfigPtr config = getCurrentContext().getConfig();
        -:10068:UseColour::YesOrNo colourMode = config
        -:10069:? config->useColour()
        -:10070:: UseColour::Auto;
        -:10071:if( colourMode == UseColour::Auto )
        -:10072:colourMode = useColourOnPlatform()
        -:10073:? UseColour::Yes
        -:10074:: UseColour::No;
        -:10075:return colourMode == UseColour::Yes
        -:10076:? PosixColourImpl::instance()
        -:10077:: NoColourImpl::instance();
        -:10078:}
        -:10079:
        -:10080:} // end anon namespace
        -:10081:} // end namespace Catch
        -:10082:
        -:10083:#else  // not Windows or ANSI ///////////////////////////////////////////////
        -:10084:
        -:10085:namespace Catch {
        -:10086:
        -:10087:static IColourImpl* platformColourInstance() { return NoColourImpl::instance(); }
        -:10088:
        -:10089:} // end namespace Catch
        -:10090:
        -:10091:#endif // Windows/ ANSI/ None
        -:10092:
        -:10093:namespace Catch {
        -:10094:
function _ZN5Catch6ColourC2ENS0_4CodeE called 4 returned 100% blocks executed 100%
        4:10095:Colour::Colour( Code _colourCode ) { use( _colourCode ); }
        4:10095-block  0
call    0 returned 4
function _ZN5Catch6ColourC2EOS0_ called 0 returned 0% blocks executed 0%
    #####:10096:Colour::Colour( Colour&& rhs ) noexcept {
    #####:10097:m_moved = rhs.m_moved;
    #####:10098:rhs.m_moved = true;
    #####:10099:}
function _ZN5Catch6ColouraSEOS0_ called 0 returned 0% blocks executed 0%
    #####:10100:Colour& Colour::operator=( Colour&& rhs ) noexcept {
    #####:10101:m_moved = rhs.m_moved;
    #####:10102:rhs.m_moved  = true;
    #####:10103:return *this;
    %%%%%:10103-block  0
        -:10104:}
        -:10105:
function _ZN5Catch6ColourD2Ev called 4 returned 100% blocks executed 100%
        4:10106:Colour::~Colour(){ if( !m_moved ) use( None ); }
        4:10106-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:10106-block  1
call    2 returned 4
        -:10107:
function _ZN5Catch6Colour3useENS0_4CodeE called 8 returned 100% blocks executed 82%
        8:10108:void Colour::use( Code _colourCode ) {
        8:10109:static IColourImpl* impl = platformColourInstance();
        8:10109-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        1:10109-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1:10109-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:10109-block  3
call    8 returned 1
    $$$$$:10109-block  4
branch  9 never executed
branch 10 never executed
    $$$$$:10109-block  5
call   11 never executed
        -:10110:// Strictly speaking, this cannot possibly happen.
        -:10111:// However, under some conditions it does happen (see #1626),
        -:10112:// and this change is small enough that we can let practicality
        -:10113:// triumph over purity in this case.
        8:10114:if (impl != NULL) {
        8:10114-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8:10115:impl->use( _colourCode );
        8:10115-block  0
call    0 returned 8
        -:10116:}
        8:10117:}
        8:10117-block  0
        -:10118:
function _ZN5CatchlsERSoRKNS_6ColourE called 4 returned 100% blocks executed 100%
        4:10119:std::ostream& operator << ( std::ostream& os, Colour const& ) {
        4:10120:return os;
        4:10120-block  0
        -:10121:}
        -:10122:
        -:10123:} // end namespace Catch
        -:10124:
        -:10125:#if defined(__clang__)
        -:10126:#    pragma clang diagnostic pop
        -:10127:#endif
        -:10128:
        -:10129:// end catch_console_colour.cpp
        -:10130:// start catch_context.cpp
        -:10131:
        -:10132:namespace Catch {
        -:10133:
        2:10134:class Context : public IMutableContext, NonCopyable {
------------------
_ZN5Catch7ContextD0Ev:
function _ZN5Catch7ContextD0Ev called 1 returned 100% blocks executed 100%
        1:10134:class Context : public IMutableContext, NonCopyable {
        1:10134-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN5Catch7ContextD2Ev:
function _ZN5Catch7ContextD2Ev called 1 returned 100% blocks executed 100%
        1:10134:class Context : public IMutableContext, NonCopyable {
        1:10134-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
------------------
        -:10135:
        -:10136:public: // IContext
function _ZN5Catch7Context16getResultCaptureEv called 51 returned 100% blocks executed 100%
       51:10137:IResultCapture* getResultCapture() override {
       51:10138:return m_resultCapture;
       51:10138-block  0
        -:10139:}
function _ZN5Catch7Context9getRunnerEv called 0 returned 0% blocks executed 0%
    #####:10140:IRunner* getRunner() override {
    #####:10141:return m_runner;
    %%%%%:10141-block  0
        -:10142:}
        -:10143:
function _ZNK5Catch7Context9getConfigEv called 1 returned 100% blocks executed 100%
        1:10144:IConfigPtr const& getConfig() const override {
        1:10145:return m_config;
        1:10145-block  0
        -:10146:}
        -:10147:
        -:10148:~Context() override;
        -:10149:
        -:10150:public: // IMutableContext
function _ZN5Catch7Context16setResultCaptureEPNS_14IResultCaptureE called 1 returned 100% blocks executed 100%
        1:10151:void setResultCapture( IResultCapture* resultCapture ) override {
        1:10152:m_resultCapture = resultCapture;
        1:10153:}
function _ZN5Catch7Context9setRunnerEPNS_7IRunnerE called 1 returned 100% blocks executed 100%
        1:10154:void setRunner( IRunner* runner ) override {
        1:10155:m_runner = runner;
        1:10156:}
function _ZN5Catch7Context9setConfigERKSt10shared_ptrIKNS_7IConfigEE called 2 returned 100% blocks executed 100%
        2:10157:void setConfig( IConfigPtr const& config ) override {
        2:10158:m_config = config;
        2:10158-block  0
call    0 returned 2
        2:10159:}
        -:10160:
        -:10161:friend IMutableContext& getCurrentMutableContext();
        -:10162:
        -:10163:private:
        -:10164:IConfigPtr m_config;
        -:10165:IRunner* m_runner = nullptr;
        -:10166:IResultCapture* m_resultCapture = nullptr;
        -:10167:};
        -:10168:
        -:10169:IMutableContext *IMutableContext::currentContext = nullptr;
        -:10170:
function _ZN5Catch15IMutableContext13createContextEv called 1 returned 100% blocks executed 100%
        1:10171:void IMutableContext::createContext()
        -:10172:{
        1:10173:currentContext = new Context();
        1:10173-block  0
call    0 returned 1
call    1 returned 1
        1:10174:}
        -:10175:
function _ZN5Catch14cleanUpContextEv called 1 returned 100% blocks executed 100%
        1:10176:void cleanUpContext() {
        1:10177:delete IMutableContext::currentContext;
        1:10177-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:10177-block  1
call    2 returned 1
        1:10178:IMutableContext::currentContext = nullptr;
        1:10179:}
        -:10180:IContext::~IContext() = default;
        -:10181:IMutableContext::~IMutableContext() = default;
        -:10182:Context::~Context() = default;
        -:10183:
function _ZN5Catch3rngEv called 0 returned 0% blocks executed 0%
    #####:10184:SimplePcg32& rng() {
    #####:10185:static SimplePcg32 s_rng;
    %%%%%:10185-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:10185-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:10185-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:10185-block  3
call    8 never executed
    $$$$$:10185-block  4
branch  9 never executed
branch 10 never executed
    $$$$$:10185-block  5
call   11 never executed
    #####:10186:return s_rng;
    %%%%%:10186-block  0
    %%%%%:10186-block  1
        -:10187:}
        -:10188:
        -:10189:}
        -:10190:// end catch_context.cpp
        -:10191:// start catch_debug_console.cpp
        -:10192:
        -:10193:// start catch_debug_console.h
        -:10194:
        -:10195:#include <string>
        -:10196:
        -:10197:namespace Catch {
        -:10198:void writeToDebugConsole( std::string const& text );
        -:10199:}
        -:10200:
        -:10201:// end catch_debug_console.h
        -:10202:#if defined(CATCH_CONFIG_ANDROID_LOGWRITE)
        -:10203:#include <android/log.h>
        -:10204:
        -:10205:namespace Catch {
        -:10206:void writeToDebugConsole( std::string const& text ) {
        -:10207:__android_log_write( ANDROID_LOG_DEBUG, "Catch", text.c_str() );
        -:10208:}
        -:10209:}
        -:10210:
        -:10211:#elif defined(CATCH_PLATFORM_WINDOWS)
        -:10212:
        -:10213:namespace Catch {
function _ZN5Catch19writeToDebugConsoleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:10214:void writeToDebugConsole( std::string const& text ) {
    #####:10215:::OutputDebugStringA( text.c_str() );
    %%%%%:10215-block  0
call    0 never executed
call    1 never executed
    #####:10216:}
        -:10217:}
        -:10218:
        -:10219:#else
        -:10220:
        -:10221:namespace Catch {
        -:10222:void writeToDebugConsole( std::string const& text ) {
        -:10223:// !TBD: Need a version for Mac/ XCode and other IDEs
        -:10224:Catch::cout() << text;
        -:10225:}
        -:10226:}
        -:10227:
        -:10228:#endif // Platform
        -:10229:// end catch_debug_console.cpp
        -:10230:// start catch_debugger.cpp
        -:10231:
        -:10232:#ifdef CATCH_PLATFORM_MAC
        -:10233:
        -:10234:#  include <assert.h>
        -:10235:#  include <stdbool.h>
        -:10236:#  include <sys/types.h>
        -:10237:#  include <unistd.h>
        -:10238:#  include <cstddef>
        -:10239:#  include <ostream>
        -:10240:
        -:10241:#ifdef __apple_build_version__
        -:10242:// These headers will only compile with AppleClang (XCode)
        -:10243:// For other compilers (Clang, GCC, ... ) we need to exclude them
        -:10244:#  include <sys/sysctl.h>
        -:10245:#endif
        -:10246:
        -:10247:namespace Catch {
        -:10248:#ifdef __apple_build_version__
        -:10249:// The following function is taken directly from the following technical note:
        -:10250:// https://developer.apple.com/library/archive/qa/qa1361/_index.html
        -:10251:
        -:10252:// Returns true if the current process is being debugged (either
        -:10253:// running under the debugger or has a debugger attached post facto).
        -:10254:bool isDebuggerActive(){
        -:10255:int                 mib[4];
        -:10256:struct kinfo_proc   info;
        -:10257:std::size_t         size;
        -:10258:
        -:10259:// Initialize the flags so that, if sysctl fails for some bizarre
        -:10260:// reason, we get a predictable result.
        -:10261:
        -:10262:info.kp_proc.p_flag = 0;
        -:10263:
        -:10264:// Initialize mib, which tells sysctl the info we want, in this case
        -:10265:// we're looking for information about a specific process ID.
        -:10266:
        -:10267:mib[0] = CTL_KERN;
        -:10268:mib[1] = KERN_PROC;
        -:10269:mib[2] = KERN_PROC_PID;
        -:10270:mib[3] = getpid();
        -:10271:
        -:10272:// Call sysctl.
        -:10273:
        -:10274:size = sizeof(info);
        -:10275:if( sysctl(mib, sizeof(mib) / sizeof(*mib), &info, &size, nullptr, 0) != 0 ) {
        -:10276:Catch::cerr() << "\n** Call to sysctl failed - unable to determine if debugger is active **\n" << std::endl;
        -:10277:return false;
        -:10278:}
        -:10279:
        -:10280:// We're being debugged if the P_TRACED flag is set.
        -:10281:
        -:10282:return ( (info.kp_proc.p_flag & P_TRACED) != 0 );
        -:10283:}
        -:10284:#else
        -:10285:bool isDebuggerActive() {
        -:10286:// We need to find another way to determine this for non-appleclang compilers on macOS
        -:10287:return false;
        -:10288:}
        -:10289:#endif
        -:10290:} // namespace Catch
        -:10291:
        -:10292:#elif defined(CATCH_PLATFORM_LINUX)
        -:10293:#include <fstream>
        -:10294:#include <string>
        -:10295:
        -:10296:namespace Catch{
        -:10297:// The standard POSIX way of detecting a debugger is to attempt to
        -:10298:// ptrace() the process, but this needs to be done from a child and not
        -:10299:// this process itself to still allow attaching to this process later
        -:10300:// if wanted, so is rather heavy. Under Linux we have the PID of the
        -:10301:// "debugger" (which doesn't need to be gdb, of course, it could also
        -:10302:// be strace, for example) in /proc/$PID/status, so just get it from
        -:10303:// there instead.
        -:10304:bool isDebuggerActive(){
        -:10305:// Libstdc++ has a bug, where std::ifstream sets errno to 0
        -:10306:// This way our users can properly assert over errno values
        -:10307:ErrnoGuard guard;
        -:10308:std::ifstream in("/proc/self/status");
        -:10309:for( std::string line; std::getline(in, line); ) {
        -:10310:static const int PREFIX_LEN = 11;
        -:10311:if( line.compare(0, PREFIX_LEN, "TracerPid:\t") == 0 ) {
        -:10312:// We're traced if the PID is not 0 and no other PID starts
        -:10313:// with 0 digit, so it's enough to check for just a single
        -:10314:// character.
        -:10315:return line.length() > PREFIX_LEN && line[PREFIX_LEN] != '0';
        -:10316:}
        -:10317:}
        -:10318:
        -:10319:return false;
        -:10320:}
        -:10321:} // namespace Catch
        -:10322:#elif defined(_MSC_VER)
        -:10323:extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
        -:10324:namespace Catch {
        -:10325:bool isDebuggerActive() {
        -:10326:return IsDebuggerPresent() != 0;
        -:10327:}
        -:10328:}
        -:10329:#elif defined(__MINGW32__)
        -:10330:extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
        -:10331:namespace Catch {
function _ZN5Catch16isDebuggerActiveEv called 0 returned 0% blocks executed 0%
    #####:10332:bool isDebuggerActive() {
    #####:10333:return IsDebuggerPresent() != 0;
    %%%%%:10333-block  0
call    0 never executed
        -:10334:}
        -:10335:}
        -:10336:#else
        -:10337:namespace Catch {
        -:10338:bool isDebuggerActive() { return false; }
        -:10339:}
        -:10340:#endif // Platform
        -:10341:// end catch_debugger.cpp
        -:10342:// start catch_decomposer.cpp
        -:10343:
        -:10344:namespace Catch {
        -:10345:
        -:10346:ITransientExpression::~ITransientExpression() = default;
        -:10347:
function _ZN5Catch29formatReconstructedExpressionERSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:10348:void formatReconstructedExpression( std::ostream &os, std::string const& lhs, StringRef op, std::string const& rhs ) {
    #####:10349:if( lhs.size() + rhs.size() < 40 &&
    %%%%%:10349-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10350:lhs.find('\n') == std::string::npos &&
branch  0 never executed
branch  1 never executed
    %%%%%:10350-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:10350-block  1
    %%%%%:10350-block  2
    %%%%%:10350-block  3
branch  5 never executed
branch  6 never executed
    #####:10351:rhs.find('\n') == std::string::npos )
    %%%%%:10351-block  0
call    0 never executed
    #####:10352:os << lhs << " " << op << " " << rhs;
    %%%%%:10352-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:10353:else
    #####:10354:os << lhs << "\n" << op << "\n" << rhs;
    %%%%%:10354-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:10355:}
        -:10356:}
        -:10357:// end catch_decomposer.cpp
        -:10358:// start catch_enforce.cpp
        -:10359:
        -:10360:#include <stdexcept>
        -:10361:
        -:10362:namespace Catch {
        -:10363:#if defined(CATCH_CONFIG_DISABLE_EXCEPTIONS) && !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS_CUSTOM_HANDLER)
        -:10364:[[noreturn]]
        -:10365:void throw_exception(std::exception const& e) {
        -:10366:Catch::cerr() << "Catch will terminate because it needed to throw an exception.\n"
        -:10367:<< "The message was: " << e.what() << '\n';
        -:10368:std::terminate();
        -:10369:}
        -:10370:#endif
        -:10371:
        -:10372:[[noreturn]]
function _ZN5Catch17throw_logic_errorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:10373:void throw_logic_error(std::string const& msg) {
    #####:10374:throw_exception(std::logic_error(msg));
    %%%%%:10374-block  0
call    0 never executed
call    1 never executed
    $$$$$:10374-block  1
call    2 never executed
        -:10375:}
        -:10376:
        -:10377:[[noreturn]]
function _ZN5Catch18throw_domain_errorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:10378:void throw_domain_error(std::string const& msg) {
    #####:10379:throw_exception(std::domain_error(msg));
    %%%%%:10379-block  0
call    0 never executed
call    1 never executed
    $$$$$:10379-block  1
call    2 never executed
        -:10380:}
        -:10381:
        -:10382:[[noreturn]]
function _ZN5Catch19throw_runtime_errorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:10383:void throw_runtime_error(std::string const& msg) {
    #####:10384:throw_exception(std::runtime_error(msg));
    %%%%%:10384-block  0
call    0 never executed
call    1 never executed
    $$$$$:10384-block  1
call    2 never executed
        -:10385:}
        -:10386:
        -:10387:} // namespace Catch;
        -:10388:// end catch_enforce.cpp
        -:10389:// start catch_enum_values_registry.cpp
        -:10390:// start catch_enum_values_registry.h
        -:10391:
        -:10392:#include <vector>
        -:10393:#include <memory>
        -:10394:
        -:10395:namespace Catch {
        -:10396:
        -:10397:namespace Detail {
        -:10398:
        -:10399:std::unique_ptr<EnumInfo> makeEnumInfo( StringRef enumName, StringRef allValueNames, std::vector<int> const& values );
        -:10400:
        -:10401:class EnumValuesRegistry : public IMutableEnumValuesRegistry {
        -:10402:
        -:10403:std::vector<std::unique_ptr<EnumInfo>> m_enumInfos;
        -:10404:
        -:10405:EnumInfo const& registerEnum( StringRef enumName, StringRef allEnums, std::vector<int> const& values) override;
        -:10406:};
        -:10407:
        -:10408:std::vector<StringRef> parseEnums( StringRef enums );
        -:10409:
        -:10410:} // Detail
        -:10411:
        -:10412:} // Catch
        -:10413:
        -:10414:// end catch_enum_values_registry.h
        -:10415:
        -:10416:#include <map>
        -:10417:#include <cassert>
        -:10418:
        -:10419:namespace Catch {
        -:10420:
       1*:10421:IMutableEnumValuesRegistry::~IMutableEnumValuesRegistry() {}
------------------
_ZN5Catch26IMutableEnumValuesRegistryD0Ev:
function _ZN5Catch26IMutableEnumValuesRegistryD0Ev called 0 returned 0% blocks executed 0%
    #####:10421:IMutableEnumValuesRegistry::~IMutableEnumValuesRegistry() {}
    %%%%%:10421-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch26IMutableEnumValuesRegistryD2Ev:
function _ZN5Catch26IMutableEnumValuesRegistryD2Ev called 1 returned 100% blocks executed 100%
        1:10421:IMutableEnumValuesRegistry::~IMutableEnumValuesRegistry() {}
------------------
        -:10422:
        -:10423:namespace Detail {
        -:10424:
        -:10425:namespace {
        -:10426:// Extracts the actual name part of an enum instance
        -:10427:// In other words, it returns the Blue part of Bikeshed::Colour::Blue
function _ZN5Catch6Detail12_GLOBAL__N_119extractInstanceNameENS_9StringRefE called 0 returned 0% blocks executed 0%
    #####:10428:StringRef extractInstanceName(StringRef enumInstance) {
        -:10429:// Find last occurence of ":"
    #####:10430:size_t name_start = enumInstance.size();
    %%%%%:10430-block  0
call    0 never executed
    #####:10431:while (name_start > 0 && enumInstance[name_start - 1] != ':') {
    %%%%%:10431-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:10431-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:10431-block  2
    %%%%%:10431-block  3
    %%%%%:10431-block  4
branch  5 never executed
branch  6 never executed
    #####:10432:--name_start;
    %%%%%:10432-block  0
        -:10433:}
    #####:10434:return enumInstance.substr(name_start, enumInstance.size() - name_start);
    %%%%%:10434-block  0
call    0 never executed
call    1 never executed
        -:10435:}
        -:10436:}
        -:10437:
function _ZN5Catch6Detail10parseEnumsENS_9StringRefE called 0 returned 0% blocks executed 0%
    #####:10438:std::vector<StringRef> parseEnums( StringRef enums ) {
    #####:10439:auto enumValues = splitStringRef( enums, ',' );
    %%%%%:10439-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:10439-block  1
call    4 never executed
    $$$$$:10439-block  2
    $$$$$:10439-block  3
call    5 never executed
    #####:10440:std::vector<StringRef> parsed;
call    0 never executed
    #####:10441:parsed.reserve( enumValues.size() );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10442:for( auto const& enumValue : enumValues ) {
    %%%%%:10442-block  0
call    0 never executed
call    1 never executed
    %%%%%:10442-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:10442-block  2
call    5 never executed
    #####:10443:parsed.push_back(trim(extractInstanceName(enumValue)));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:10443-block  0
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:10443-block  1
call   10 never executed
    $$$$$:10443-block  2
    $$$$$:10443-block  3
call   11 never executed
    $$$$$:10443-block  4
    $$$$$:10443-block  5
call   12 never executed
    $$$$$:10443-block  6
        -:10444:}
    #####:10445:return parsed;
    %%%%%:10445-block  0
    %%%%%:10445-block  1
        -:10446:}
        -:10447:
function _ZN5Catch6Detail8EnumInfoD2Ev called 0 returned 0% blocks executed 0%
    #####:10448:EnumInfo::~EnumInfo() {}
    %%%%%:10448-block  0
call    0 never executed
call    1 never executed
        -:10449:
function _ZNK5Catch6Detail8EnumInfo6lookupEi called 0 returned 0% blocks executed 0%
    #####:10450:StringRef EnumInfo::lookup( int value ) const {
    #####:10451:for( auto const& valueToName : m_values ) {
    %%%%%:10451-block  0
call    0 never executed
call    1 never executed
    %%%%%:10451-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:10451-block  2
call    5 never executed
    %%%%%:10451-block  3
call    6 never executed
    #####:10452:if( valueToName.first == value )
branch  0 never executed
branch  1 never executed
    #####:10453:return valueToName.second;
    %%%%%:10453-block  0
call    0 never executed
        -:10454:}
    #####:10455:return "{** unexpected enum value **}"_sr;
    %%%%%:10455-block  0
call    0 never executed
        -:10456:}
        -:10457:
function _ZN5Catch6Detail12makeEnumInfoENS_9StringRefES1_RKSt6vectorIiSaIiEE called 0 returned 0% blocks executed 0%
    #####:10458:std::unique_ptr<EnumInfo> makeEnumInfo( StringRef enumName, StringRef allValueNames, std::vector<int> const& values ) {
    #####:10459:std::unique_ptr<EnumInfo> enumInfo( new EnumInfo );
    %%%%%:10459-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10459-block  1
call    3 never executed
call    4 never executed
    #####:10460:enumInfo->m_name = enumName;
call    0 never executed
call    1 never executed
    #####:10461:enumInfo->m_values.reserve( values.size() );
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:10462:
    #####:10463:const auto valueNames = Catch::Detail::parseEnums( allValueNames );
    %%%%%:10463-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:10463-block  1
call    4 never executed
    $$$$$:10463-block  2
    $$$$$:10463-block  3
call    5 never executed
    #####:10464:assert( valueNames.size() == values.size() );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:10464-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:10464-block  1
    %%%%%:10464-block  2
    #####:10465:std::size_t i = 0;
    #####:10466:for( auto value : values )
    %%%%%:10466-block  0
call    0 never executed
call    1 never executed
    %%%%%:10466-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:10466-block  2
call    5 never executed
    #####:10467:enumInfo->m_values.push_back({ value, valueNames[i++] });
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:10467-block  0
call    6 never executed
call    7 never executed
    $$$$$:10467-block  1
call    8 never executed
    $$$$$:10467-block  2
        -:10468:
    #####:10469:return enumInfo;
    %%%%%:10469-block  0
    %%%%%:10469-block  1
        -:10470:}
        -:10471:
function _ZN5Catch6Detail18EnumValuesRegistry12registerEnumENS_9StringRefES2_RKSt6vectorIiSaIiEE called 0 returned 0% blocks executed 0%
    #####:10472:EnumInfo const& EnumValuesRegistry::registerEnum( StringRef enumName, StringRef allValueNames, std::vector<int> const& values ) {
    #####:10473:m_enumInfos.push_back(makeEnumInfo(enumName, allValueNames, values));
    %%%%%:10473-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:10473-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:10473-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:10473-block  3
call   11 never executed
    $$$$$:10473-block  4
    $$$$$:10473-block  5
call   12 never executed
    $$$$$:10473-block  6
    $$$$$:10473-block  7
call   13 never executed
    #####:10474:return *m_enumInfos.back();
call    0 never executed
call    1 never executed
        -:10475:}
        -:10476:
        -:10477:} // Detail
        -:10478:} // Catch
        -:10479:
        -:10480:// end catch_enum_values_registry.cpp
        -:10481:// start catch_errno_guard.cpp
        -:10482:
        -:10483:#include <cerrno>
        -:10484:
        -:10485:namespace Catch {
function _ZN5Catch10ErrnoGuardC2Ev called 0 returned 0% blocks executed 0%
    #####:10486:ErrnoGuard::ErrnoGuard():m_oldErrno(errno){}
    %%%%%:10486-block  0
call    0 never executed
function _ZN5Catch10ErrnoGuardD2Ev called 0 returned 0% blocks executed 0%
    #####:10487:ErrnoGuard::~ErrnoGuard() { errno = m_oldErrno; }
    %%%%%:10487-block  0
call    0 never executed
        -:10488:}
        -:10489:// end catch_errno_guard.cpp
        -:10490:// start catch_exception_translator_registry.cpp
        -:10491:
        -:10492:// start catch_exception_translator_registry.h
        -:10493:
        -:10494:#include <vector>
        -:10495:#include <string>
        -:10496:#include <memory>
        -:10497:
        -:10498:namespace Catch {
        -:10499:
        -:10500:class ExceptionTranslatorRegistry : public IExceptionTranslatorRegistry {
        -:10501:public:
        -:10502:~ExceptionTranslatorRegistry();
        -:10503:virtual void registerTranslator( const IExceptionTranslator* translator );
        -:10504:std::string translateActiveException() const override;
        -:10505:std::string tryTranslators() const;
        -:10506:
        -:10507:private:
        -:10508:std::vector<std::unique_ptr<IExceptionTranslator const>> m_translators;
        -:10509:};
        -:10510:}
        -:10511:
        -:10512:// end catch_exception_translator_registry.h
        -:10513:#ifdef __OBJC__
        -:10514:#import "Foundation/Foundation.h"
        -:10515:#endif
        -:10516:
        -:10517:namespace Catch {
        -:10518:
       1*:10519:ExceptionTranslatorRegistry::~ExceptionTranslatorRegistry() {
       1*:10520:}
------------------
_ZN5Catch27ExceptionTranslatorRegistryD0Ev:
function _ZN5Catch27ExceptionTranslatorRegistryD0Ev called 0 returned 0% blocks executed 0%
    #####:10519:ExceptionTranslatorRegistry::~ExceptionTranslatorRegistry() {
    #####:10520:}
    %%%%%:10520-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch27ExceptionTranslatorRegistryD2Ev:
function _ZN5Catch27ExceptionTranslatorRegistryD2Ev called 1 returned 100% blocks executed 100%
        1:10519:ExceptionTranslatorRegistry::~ExceptionTranslatorRegistry() {
        1:10519-block  0
call    0 returned 1
call    1 returned 1
        1:10520:}
------------------
        -:10521:
function _ZN5Catch27ExceptionTranslatorRegistry18registerTranslatorEPKNS_20IExceptionTranslatorE called 0 returned 0% blocks executed 0%
    #####:10522:void ExceptionTranslatorRegistry::registerTranslator( const IExceptionTranslator* translator ) {
    #####:10523:m_translators.push_back( std::unique_ptr<const IExceptionTranslator>( translator ) );
    %%%%%:10523-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:10523-block  1
call    4 never executed
    $$$$$:10523-block  2
call    5 never executed
    #####:10524:}
        -:10525:
        -:10526:#if !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)
function _ZNK5Catch27ExceptionTranslatorRegistry24translateActiveExceptionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:10527:std::string ExceptionTranslatorRegistry::translateActiveException() const {
        -:10528:try {
        -:10529:#ifdef __OBJC__
        -:10530:// In Objective-C try objective-c exceptions first
        -:10531:@try {
        -:10532:return tryTranslators();
        -:10533:}
        -:10534:@catch (NSException *exception) {
        -:10535:return Catch::Detail::stringify( [exception description] );
        -:10536:}
        -:10537:#else
        -:10538:// Compiling a mixed mode project with MSVC means that CLR
        -:10539:// exceptions will be caught in (...) as well. However, these
        -:10540:// do not fill-in std::current_exception and thus lead to crash
        -:10541:// when attempting rethrow.
        -:10542:// /EHa switch also causes structured exceptions to be caught
        -:10543:// here, but they fill-in current_exception properly, so
        -:10544:// at worst the output should be a little weird, instead of
        -:10545:// causing a crash.
    #####:10546:if (std::current_exception() == nullptr) {
    %%%%%:10546-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:10547:return "Non C++ exception. Possibly a CLR exception.";
    %%%%%:10547-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:10547-block  1
call    4 never executed
    $$$$$:10547-block  2
call    5 never executed
    $$$$$:10547-block  3
        -:10548:}
    #####:10549:return tryTranslators();
    %%%%%:10549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10549-block  1
        -:10550:#endif
        -:10551:}
    =====:10552:catch( TestFailureException& ) {
    $$$$$:10552-block  0
call    0 never executed
    $$$$$:10552-block  1
call    1 never executed
    =====:10553:std::rethrow_exception(std::current_exception());
call    0 never executed
call    1 never executed
    $$$$$:10553-block  0
call    2 never executed
    $$$$$:10553-block  1
        -:10554:}
    =====:10555:catch( std::exception& ex ) {
    $$$$$:10555-block  0
call    0 never executed
    $$$$$:10555-block  1
call    1 never executed
    =====:10556:return ex.what();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:10556-block  0
call    5 never executed
call    6 never executed
    $$$$$:10556-block  1
call    7 never executed
    $$$$$:10556-block  2
        -:10557:}
    =====:10558:catch( std::string& msg ) {
    $$$$$:10558-block  0
call    0 never executed
    $$$$$:10558-block  1
call    1 never executed
    $$$$$:10558-block  2
call    2 never executed
    =====:10559:return msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:10559-block  0
        -:10560:}
    =====:10561:catch( const char* msg ) {
    $$$$$:10561-block  0
call    0 never executed
    $$$$$:10561-block  1
call    1 never executed
    =====:10562:return msg;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:10562-block  0
call    4 never executed
call    5 never executed
    $$$$$:10562-block  1
call    6 never executed
    $$$$$:10562-block  2
        -:10563:}
    =====:10564:catch(...) {
    $$$$$:10564-block  0
call    0 never executed
    $$$$$:10564-block  1
call    1 never executed
    =====:10565:return "Unknown exception";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:10565-block  0
call    4 never executed
call    5 never executed
    $$$$$:10565-block  1
call    6 never executed
    $$$$$:10565-block  2
        -:10566:}
        -:10567:}
        -:10568:
function _ZNK5Catch27ExceptionTranslatorRegistry14tryTranslatorsB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:10569:std::string ExceptionTranslatorRegistry::tryTranslators() const {
    #####:10570:if (m_translators.empty()) {
    %%%%%:10570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10571:std::rethrow_exception(std::current_exception());
    %%%%%:10571-block  0
call    0 never executed
call    1 never executed
    $$$$$:10571-block  1
call    2 never executed
    $$$$$:10571-block  2
call    3 never executed
        -:10572:} else {
    #####:10573:return m_translators[0]->translate(m_translators.begin() + 1, m_translators.end());
    %%%%%:10573-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:10573-block  1
    %%%%%:10573-block  2
    %%%%%:10573-block  3
        -:10574:}
        -:10575:}
        -:10576:
        -:10577:#else // ^^ Exceptions are enabled // Exceptions are disabled vv
        -:10578:std::string ExceptionTranslatorRegistry::translateActiveException() const {
        -:10579:CATCH_INTERNAL_ERROR("Attempted to translate active exception under CATCH_CONFIG_DISABLE_EXCEPTIONS!");
        -:10580:}
        -:10581:
        -:10582:std::string ExceptionTranslatorRegistry::tryTranslators() const {
        -:10583:CATCH_INTERNAL_ERROR("Attempted to use exception translators under CATCH_CONFIG_DISABLE_EXCEPTIONS!");
        -:10584:}
        -:10585:#endif
        -:10586:
        -:10587:}
        -:10588:// end catch_exception_translator_registry.cpp
        -:10589:// start catch_fatal_condition.cpp
        -:10590:
        -:10591:#if defined(__GNUC__)
        -:10592:#    pragma GCC diagnostic push
        -:10593:#    pragma GCC diagnostic ignored "-Wmissing-field-initializers"
        -:10594:#endif
        -:10595:
        -:10596:#if defined( CATCH_CONFIG_WINDOWS_SEH ) || defined( CATCH_CONFIG_POSIX_SIGNALS )
        -:10597:
        -:10598:namespace {
        -:10599:// Report the error condition
        -:10600:void reportFatal( char const * const message ) {
        -:10601:Catch::getCurrentContext().getResultCapture()->handleFatalErrorCondition( message );
        -:10602:}
        -:10603:}
        -:10604:
        -:10605:#endif // signals/SEH handling
        -:10606:
        -:10607:#if defined( CATCH_CONFIG_WINDOWS_SEH )
        -:10608:
        -:10609:namespace Catch {
        -:10610:struct SignalDefs { DWORD id; const char* name; };
        -:10611:
        -:10612:// There is no 1-1 mapping between signals and windows exceptions.
        -:10613:// Windows can easily distinguish between SO and SigSegV,
        -:10614:// but SigInt, SigTerm, etc are handled differently.
        -:10615:static SignalDefs signalDefs[] = {
        -:10616:{ static_cast<DWORD>(EXCEPTION_ILLEGAL_INSTRUCTION),  "SIGILL - Illegal instruction signal" },
        -:10617:{ static_cast<DWORD>(EXCEPTION_STACK_OVERFLOW), "SIGSEGV - Stack overflow" },
        -:10618:{ static_cast<DWORD>(EXCEPTION_ACCESS_VIOLATION), "SIGSEGV - Segmentation violation signal" },
        -:10619:{ static_cast<DWORD>(EXCEPTION_INT_DIVIDE_BY_ZERO), "Divide by zero error" },
        -:10620:};
        -:10621:
        -:10622:LONG CALLBACK FatalConditionHandler::handleVectoredException(PEXCEPTION_POINTERS ExceptionInfo) {
        -:10623:for (auto const& def : signalDefs) {
        -:10624:if (ExceptionInfo->ExceptionRecord->ExceptionCode == def.id) {
        -:10625:reportFatal(def.name);
        -:10626:}
        -:10627:}
        -:10628:// If its not an exception we care about, pass it along.
        -:10629:// This stops us from eating debugger breaks etc.
        -:10630:return EXCEPTION_CONTINUE_SEARCH;
        -:10631:}
        -:10632:
        -:10633:FatalConditionHandler::FatalConditionHandler() {
        -:10634:isSet = true;
        -:10635:// 32k seems enough for Catch to handle stack overflow,
        -:10636:// but the value was found experimentally, so there is no strong guarantee
        -:10637:guaranteeSize = 32 * 1024;
        -:10638:exceptionHandlerHandle = nullptr;
        -:10639:// Register as first handler in current chain
        -:10640:exceptionHandlerHandle = AddVectoredExceptionHandler(1, handleVectoredException);
        -:10641:// Pass in guarantee size to be filled
        -:10642:SetThreadStackGuarantee(&guaranteeSize);
        -:10643:}
        -:10644:
        -:10645:void FatalConditionHandler::reset() {
        -:10646:if (isSet) {
        -:10647:RemoveVectoredExceptionHandler(exceptionHandlerHandle);
        -:10648:SetThreadStackGuarantee(&guaranteeSize);
        -:10649:exceptionHandlerHandle = nullptr;
        -:10650:isSet = false;
        -:10651:}
        -:10652:}
        -:10653:
        -:10654:FatalConditionHandler::~FatalConditionHandler() {
        -:10655:reset();
        -:10656:}
        -:10657:
        -:10658:bool FatalConditionHandler::isSet = false;
        -:10659:ULONG FatalConditionHandler::guaranteeSize = 0;
        -:10660:PVOID FatalConditionHandler::exceptionHandlerHandle = nullptr;
        -:10661:
        -:10662:} // namespace Catch
        -:10663:
        -:10664:#elif defined( CATCH_CONFIG_POSIX_SIGNALS )
        -:10665:
        -:10666:namespace Catch {
        -:10667:
        -:10668:struct SignalDefs {
        -:10669:int id;
        -:10670:const char* name;
        -:10671:};
        -:10672:
        -:10673:// 32kb for the alternate stack seems to be sufficient. However, this value
        -:10674:// is experimentally determined, so that's not guaranteed.
        -:10675:static constexpr std::size_t sigStackSize = 32768 >= MINSIGSTKSZ ? 32768 : MINSIGSTKSZ;
        -:10676:
        -:10677:static SignalDefs signalDefs[] = {
        -:10678:{ SIGINT,  "SIGINT - Terminal interrupt signal" },
        -:10679:{ SIGILL,  "SIGILL - Illegal instruction signal" },
        -:10680:{ SIGFPE,  "SIGFPE - Floating point error signal" },
        -:10681:{ SIGSEGV, "SIGSEGV - Segmentation violation signal" },
        -:10682:{ SIGTERM, "SIGTERM - Termination request signal" },
        -:10683:{ SIGABRT, "SIGABRT - Abort (abnormal termination) signal" }
        -:10684:};
        -:10685:
        -:10686:void FatalConditionHandler::handleSignal( int sig ) {
        -:10687:char const * name = "<unknown signal>";
        -:10688:for (auto const& def : signalDefs) {
        -:10689:if (sig == def.id) {
        -:10690:name = def.name;
        -:10691:break;
        -:10692:}
        -:10693:}
        -:10694:reset();
        -:10695:reportFatal(name);
        -:10696:raise( sig );
        -:10697:}
        -:10698:
        -:10699:FatalConditionHandler::FatalConditionHandler() {
        -:10700:isSet = true;
        -:10701:stack_t sigStack;
        -:10702:sigStack.ss_sp = altStackMem;
        -:10703:sigStack.ss_size = sigStackSize;
        -:10704:sigStack.ss_flags = 0;
        -:10705:sigaltstack(&sigStack, &oldSigStack);
        -:10706:struct sigaction sa = { };
        -:10707:
        -:10708:sa.sa_handler = handleSignal;
        -:10709:sa.sa_flags = SA_ONSTACK;
        -:10710:for (std::size_t i = 0; i < sizeof(signalDefs)/sizeof(SignalDefs); ++i) {
        -:10711:sigaction(signalDefs[i].id, &sa, &oldSigActions[i]);
        -:10712:}
        -:10713:}
        -:10714:
        -:10715:FatalConditionHandler::~FatalConditionHandler() {
        -:10716:reset();
        -:10717:}
        -:10718:
        -:10719:void FatalConditionHandler::reset() {
        -:10720:if( isSet ) {
        -:10721:// Set signals back to previous values -- hopefully nobody overwrote them in the meantime
        -:10722:for( std::size_t i = 0; i < sizeof(signalDefs)/sizeof(SignalDefs); ++i ) {
        -:10723:sigaction(signalDefs[i].id, &oldSigActions[i], nullptr);
        -:10724:}
        -:10725:// Return the old stack
        -:10726:sigaltstack(&oldSigStack, nullptr);
        -:10727:isSet = false;
        -:10728:}
        -:10729:}
        -:10730:
        -:10731:bool FatalConditionHandler::isSet = false;
        -:10732:struct sigaction FatalConditionHandler::oldSigActions[sizeof(signalDefs)/sizeof(SignalDefs)] = {};
        -:10733:stack_t FatalConditionHandler::oldSigStack = {};
        -:10734:char FatalConditionHandler::altStackMem[sigStackSize] = {};
        -:10735:
        -:10736:} // namespace Catch
        -:10737:
        -:10738:#else
        -:10739:
        -:10740:namespace Catch {
function _ZN5Catch21FatalConditionHandler5resetEv called 8 returned 100% blocks executed 100%
        8:10741:void FatalConditionHandler::reset() {}
        -:10742:}
        -:10743:
        -:10744:#endif // signals/SEH handling
        -:10745:
        -:10746:#if defined(__GNUC__)
        -:10747:#    pragma GCC diagnostic pop
        -:10748:#endif
        -:10749:// end catch_fatal_condition.cpp
        -:10750:// start catch_generators.cpp
        -:10751:
        -:10752:#include <limits>
        -:10753:#include <set>
        -:10754:
        -:10755:namespace Catch {
        -:10756:
    #####:10757:IGeneratorTracker::~IGeneratorTracker() {}
------------------
_ZN5Catch17IGeneratorTrackerD0Ev:
function _ZN5Catch17IGeneratorTrackerD0Ev called 0 returned 0% blocks executed 0%
    #####:10757:IGeneratorTracker::~IGeneratorTracker() {}
    %%%%%:10757-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch17IGeneratorTrackerD2Ev:
function _ZN5Catch17IGeneratorTrackerD2Ev called 0 returned 0% blocks executed 0%
    #####:10757:IGeneratorTracker::~IGeneratorTracker() {}
------------------
        -:10758:
function _ZNK5Catch18GeneratorException4whatEv called 0 returned 0% blocks executed 0%
    #####:10759:const char* GeneratorException::what() const noexcept {
    #####:10760:return m_msg;
    %%%%%:10760-block  0
        -:10761:}
        -:10762:
        -:10763:namespace Generators {
        -:10764:
    #####:10765:GeneratorUntypedBase::~GeneratorUntypedBase() {}
------------------
_ZN5Catch10Generators20GeneratorUntypedBaseD0Ev:
function _ZN5Catch10Generators20GeneratorUntypedBaseD0Ev called 0 returned 0% blocks executed 0%
    #####:10765:GeneratorUntypedBase::~GeneratorUntypedBase() {}
    %%%%%:10765-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch10Generators20GeneratorUntypedBaseD2Ev:
function _ZN5Catch10Generators20GeneratorUntypedBaseD2Ev called 0 returned 0% blocks executed 0%
    #####:10765:GeneratorUntypedBase::~GeneratorUntypedBase() {}
------------------
        -:10766:
function _ZN5Catch10Generators23acquireGeneratorTrackerERKNS_14SourceLineInfoE called 0 returned 0% blocks executed 0%
    #####:10767:auto acquireGeneratorTracker( SourceLineInfo const& lineInfo ) -> IGeneratorTracker& {
    #####:10768:return getResultCapture().acquireGeneratorTracker( lineInfo );
    %%%%%:10768-block  0
call    0 never executed
call    1 never executed
        -:10769:}
        -:10770:
        -:10771:} // namespace Generators
        -:10772:} // namespace Catch
        -:10773:// end catch_generators.cpp
        -:10774:// start catch_interfaces_capture.cpp
        -:10775:
        -:10776:namespace Catch {
        -:10777:IResultCapture::~IResultCapture() = default;
        -:10778:}
        -:10779:// end catch_interfaces_capture.cpp
        -:10780:// start catch_interfaces_config.cpp
        -:10781:
        -:10782:namespace Catch {
        -:10783:IConfig::~IConfig() = default;
        -:10784:}
        -:10785:// end catch_interfaces_config.cpp
        -:10786:// start catch_interfaces_exception.cpp
        -:10787:
        -:10788:namespace Catch {
        -:10789:IExceptionTranslator::~IExceptionTranslator() = default;
        -:10790:IExceptionTranslatorRegistry::~IExceptionTranslatorRegistry() = default;
        -:10791:}
        -:10792:// end catch_interfaces_exception.cpp
        -:10793:// start catch_interfaces_registry_hub.cpp
        -:10794:
        -:10795:namespace Catch {
        -:10796:IRegistryHub::~IRegistryHub() = default;
        -:10797:IMutableRegistryHub::~IMutableRegistryHub() = default;
        -:10798:}
        -:10799:// end catch_interfaces_registry_hub.cpp
        -:10800:// start catch_interfaces_reporter.cpp
        -:10801:
        -:10802:// start catch_reporter_listening.h
        -:10803:
        -:10804:namespace Catch {
        -:10805:
        -:10806:class ListeningReporter : public IStreamingReporter {
        -:10807:using Reporters = std::vector<IStreamingReporterPtr>;
        -:10808:Reporters m_listeners;
        -:10809:IStreamingReporterPtr m_reporter = nullptr;
        -:10810:ReporterPreferences m_preferences;
        -:10811:
        -:10812:public:
        -:10813:ListeningReporter();
        -:10814:
        -:10815:void addListener( IStreamingReporterPtr&& listener );
        -:10816:void addReporter( IStreamingReporterPtr&& reporter );
        -:10817:
        -:10818:public: // IStreamingReporter
        -:10819:
        -:10820:ReporterPreferences getPreferences() const override;
        -:10821:
        -:10822:void noMatchingTestCases( std::string const& spec ) override;
        -:10823:
        -:10824:void reportInvalidArguments(std::string const&arg) override;
        -:10825:
        -:10826:static std::set<Verbosity> getSupportedVerbosities();
        -:10827:
        -:10828:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -:10829:void benchmarkPreparing(std::string const& name) override;
        -:10830:void benchmarkStarting( BenchmarkInfo const& benchmarkInfo ) override;
        -:10831:void benchmarkEnded( BenchmarkStats<> const& benchmarkStats ) override;
        -:10832:void benchmarkFailed(std::string const&) override;
        -:10833:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -:10834:
        -:10835:void testRunStarting( TestRunInfo const& testRunInfo ) override;
        -:10836:void testGroupStarting( GroupInfo const& groupInfo ) override;
        -:10837:void testCaseStarting( TestCaseInfo const& testInfo ) override;
        -:10838:void sectionStarting( SectionInfo const& sectionInfo ) override;
        -:10839:void assertionStarting( AssertionInfo const& assertionInfo ) override;
        -:10840:
        -:10841:// The return value indicates if the messages buffer should be cleared:
        -:10842:bool assertionEnded( AssertionStats const& assertionStats ) override;
        -:10843:void sectionEnded( SectionStats const& sectionStats ) override;
        -:10844:void testCaseEnded( TestCaseStats const& testCaseStats ) override;
        -:10845:void testGroupEnded( TestGroupStats const& testGroupStats ) override;
        -:10846:void testRunEnded( TestRunStats const& testRunStats ) override;
        -:10847:
        -:10848:void skipTest( TestCaseInfo const& testInfo ) override;
        -:10849:bool isMulti() const override;
        -:10850:
        -:10851:};
        -:10852:
        -:10853:} // end namespace Catch
        -:10854:
        -:10855:// end catch_reporter_listening.h
        -:10856:namespace Catch {
        -:10857:
function _ZN5Catch14ReporterConfigC2ERKSt10shared_ptrIKNS_7IConfigEE called 1 returned 100% blocks executed 100%
        1:10858:ReporterConfig::ReporterConfig( IConfigPtr const& _fullConfig )
        1:10859::   m_stream( &_fullConfig->stream() ), m_fullConfig( _fullConfig ) {}
        1:10859-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:10860:
function _ZN5Catch14ReporterConfigC2ERKSt10shared_ptrIKNS_7IConfigEERSo called 0 returned 0% blocks executed 0%
    #####:10861:ReporterConfig::ReporterConfig( IConfigPtr const& _fullConfig, std::ostream& _stream )
    #####:10862::   m_stream( &_stream ), m_fullConfig( _fullConfig ) {}
    %%%%%:10862-block  0
call    0 never executed
        -:10863:
function _ZNK5Catch14ReporterConfig6streamEv called 2 returned 100% blocks executed 100%
        2:10864:std::ostream& ReporterConfig::stream() const { return *m_stream; }
        2:10864-block  0
function _ZNK5Catch14ReporterConfig10fullConfigEv called 2 returned 100% blocks executed 100%
        2:10865:IConfigPtr ReporterConfig::fullConfig() const { return m_fullConfig; }
        2:10865-block  0
call    0 returned 2
        -:10866:
function _ZN5Catch11TestRunInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:10867:TestRunInfo::TestRunInfo( std::string const& _name ) : name( _name ) {}
        1:10867-block  0
call    0 returned 1
        -:10868:
function _ZN5Catch9GroupInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjj called 2 returned 100% blocks executed 100%
        2:10869:GroupInfo::GroupInfo(  std::string const& _name,
        -:10870:std::size_t _groupIndex,
        2:10871:std::size_t _groupsCount )
        -:10872::   name( _name ),
        -:10873:groupIndex( _groupIndex ),
        2:10874:groupsCounts( _groupsCount )
        2:10874-block  0
call    0 returned 2
        2:10875:{}
        -:10876:
function _ZN5Catch14AssertionStatsC2ERKNS_15AssertionResultERKSt6vectorINS_11MessageInfoESaIS5_EERKNS_6TotalsE called 0 returned 0% blocks executed 0%
    #####:10877:AssertionStats::AssertionStats( AssertionResult const& _assertionResult,
        -:10878:std::vector<MessageInfo> const& _infoMessages,
    #####:10879:Totals const& _totals )
        -:10880::   assertionResult( _assertionResult ),
        -:10881:infoMessages( _infoMessages ),
    #####:10882:totals( _totals )
    %%%%%:10882-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:10882-block  1
call    4 never executed
    $$$$$:10882-block  2
call    5 never executed
        -:10883:{
    #####:10884:assertionResult.m_resultData.lazyExpression.m_transientExpression = _assertionResult.m_resultData.lazyExpression.m_transientExpression;
        -:10885:
    #####:10886:if( assertionResult.hasMessage() ) {
    %%%%%:10886-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10887:// Copy message into messages list.
        -:10888:// !TBD This should have been done earlier, somewhere
    #####:10889:MessageBuilder builder( assertionResult.getTestMacroName(), assertionResult.getSourceInfo(), assertionResult.getResultType() );
    %%%%%:10889-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:10889-block  1
call    6 never executed
    $$$$$:10889-block  2
    $$$$$:10889-block  3
    $$$$$:10889-block  4
call    7 never executed
    #####:10890:builder << assertionResult.getMessage();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10890-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:10890-block  1
call    6 never executed
    $$$$$:10890-block  2
call    7 never executed
    $$$$$:10890-block  3
    #####:10891:builder.m_info.message = builder.m_stream.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10891-block  0
call    3 never executed
call    4 never executed
        -:10892:
    #####:10893:infoMessages.push_back( builder.m_info );
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10894:}
    #####:10895:}
    %%%%%:10895-block  0
        -:10896:
        -:10897:AssertionStats::~AssertionStats() = default;
        -:10898:
function _ZN5Catch12SectionStatsC2ERKNS_11SectionInfoERKNS_6CountsEdb called 8 returned 100% blocks executed 100%
        8:10899:SectionStats::SectionStats(  SectionInfo const& _sectionInfo,
        -:10900:Counts const& _assertions,
        -:10901:double _durationInSeconds,
        8:10902:bool _missingAssertions )
        -:10903::   sectionInfo( _sectionInfo ),
        -:10904:assertions( _assertions ),
        -:10905:durationInSeconds( _durationInSeconds ),
        8:10906:missingAssertions( _missingAssertions )
        8:10906-block  0
call    0 returned 8
        8:10907:{}
        -:10908:
        -:10909:SectionStats::~SectionStats() = default;
        -:10910:
function _ZN5Catch13TestCaseStatsC2ERKNS_12TestCaseInfoERKNS_6TotalsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESE_b called 8 returned 100% blocks executed 63%
        8:10911:TestCaseStats::TestCaseStats(  TestCaseInfo const& _testInfo,
        -:10912:Totals const& _totals,
        -:10913:std::string const& _stdOut,
        -:10914:std::string const& _stdErr,
        8:10915:bool _aborting )
        -:10916:: testInfo( _testInfo ),
        -:10917:totals( _totals ),
        -:10918:stdOut( _stdOut ),
        -:10919:stdErr( _stdErr ),
        8:10920:aborting( _aborting )
        8:10920-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8:10920-block  1
call    4 returned 8
branch  5 taken 8 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$:10920-block  2
call    7 never executed
    $$$$$:10920-block  3
call    8 never executed
        8:10921:{}
        8:10921-block  0
        -:10922:
        -:10923:TestCaseStats::~TestCaseStats() = default;
        -:10924:
function _ZN5Catch14TestGroupStatsC2ERKNS_9GroupInfoERKNS_6TotalsEb called 1 returned 100% blocks executed 100%
        1:10925:TestGroupStats::TestGroupStats( GroupInfo const& _groupInfo,
        -:10926:Totals const& _totals,
        1:10927:bool _aborting )
        -:10928::   groupInfo( _groupInfo ),
        -:10929:totals( _totals ),
        1:10930:aborting( _aborting )
        1:10930-block  0
call    0 returned 1
        1:10931:{}
        -:10932:
function _ZN5Catch14TestGroupStatsC2ERKNS_9GroupInfoE called 0 returned 0% blocks executed 0%
    #####:10933:TestGroupStats::TestGroupStats( GroupInfo const& _groupInfo )
        -:10934::   groupInfo( _groupInfo ),
    #####:10935:aborting( false )
    %%%%%:10935-block  0
call    0 never executed
call    1 never executed
    #####:10936:{}
        -:10937:
        -:10938:TestGroupStats::~TestGroupStats() = default;
        -:10939:
function _ZN5Catch12TestRunStatsC2ERKNS_11TestRunInfoERKNS_6TotalsEb called 1 returned 100% blocks executed 100%
        1:10940:TestRunStats::TestRunStats(   TestRunInfo const& _runInfo,
        -:10941:Totals const& _totals,
        1:10942:bool _aborting )
        -:10943::   runInfo( _runInfo ),
        -:10944:totals( _totals ),
        1:10945:aborting( _aborting )
        1:10945-block  0
call    0 returned 1
        1:10946:{}
        -:10947:
        -:10948:TestRunStats::~TestRunStats() = default;
        -:10949:
function _ZN5Catch18IStreamingReporter21fatalErrorEncounteredENS_9StringRefE called 0 returned 0% blocks executed 0%
    #####:10950:void IStreamingReporter::fatalErrorEncountered( StringRef ) {}
function _ZNK5Catch18IStreamingReporter7isMultiEv called 0 returned 0% blocks executed 0%
    #####:10951:bool IStreamingReporter::isMulti() const { return false; }
    %%%%%:10951-block  0
        -:10952:
        -:10953:IReporterFactory::~IReporterFactory() = default;
        -:10954:IReporterRegistry::~IReporterRegistry() = default;
        -:10955:
        -:10956:} // end namespace Catch
        -:10957:// end catch_interfaces_reporter.cpp
        -:10958:// start catch_interfaces_runner.cpp
        -:10959:
        -:10960:namespace Catch {
        -:10961:IRunner::~IRunner() = default;
        -:10962:}
        -:10963:// end catch_interfaces_runner.cpp
        -:10964:// start catch_interfaces_testcase.cpp
        -:10965:
        -:10966:namespace Catch {
        -:10967:ITestInvoker::~ITestInvoker() = default;
        -:10968:ITestCaseRegistry::~ITestCaseRegistry() = default;
        -:10969:}
        -:10970:// end catch_interfaces_testcase.cpp
        -:10971:// start catch_leak_detector.cpp
        -:10972:
        -:10973:#ifdef CATCH_CONFIG_WINDOWS_CRTDBG
        -:10974:#include <crtdbg.h>
        -:10975:
        -:10976:namespace Catch {
        -:10977:
        -:10978:LeakDetector::LeakDetector() {
        -:10979:int flag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);
        -:10980:flag |= _CRTDBG_LEAK_CHECK_DF;
        -:10981:flag |= _CRTDBG_ALLOC_MEM_DF;
        -:10982:_CrtSetDbgFlag(flag);
        -:10983:_CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -:10984:_CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDERR);
        -:10985:// Change this to leaking allocation's number to break there
        -:10986:_CrtSetBreakAlloc(-1);
        -:10987:}
        -:10988:}
        -:10989:
        -:10990:#else
        -:10991:
function _ZN5Catch12LeakDetectorC2Ev called 1 returned 100% blocks executed 100%
        1:10992:Catch::LeakDetector::LeakDetector() {}
        -:10993:
        -:10994:#endif
        -:10995:
function _ZN5Catch12LeakDetectorD2Ev called 0 returned 0% blocks executed 0%
    #####:10996:Catch::LeakDetector::~LeakDetector() {
    #####:10997:Catch::cleanUp();
    %%%%%:10997-block  0
call    0 never executed
    #####:10998:}
        -:10999:// end catch_leak_detector.cpp
        -:11000:// start catch_list.cpp
        -:11001:
        -:11002:// start catch_list.h
        -:11003:
        -:11004:#include <set>
        -:11005:
        -:11006:namespace Catch {
        -:11007:
        -:11008:std::size_t listTests( Config const& config );
        -:11009:
        -:11010:std::size_t listTestsNamesOnly( Config const& config );
        -:11011:
        -:11012:struct TagInfo {
        -:11013:void add( std::string const& spelling );
        -:11014:std::string all() const;
        -:11015:
        -:11016:std::set<std::string> spellings;
        -:11017:std::size_t count = 0;
        -:11018:};
        -:11019:
        -:11020:std::size_t listTags( Config const& config );
        -:11021:
        -:11022:std::size_t listReporters();
        -:11023:
        -:11024:Option<std::size_t> list( std::shared_ptr<Config> const& config );
        -:11025:
        -:11026:} // end namespace Catch
        -:11027:
        -:11028:// end catch_list.h
        -:11029:// start catch_text.h
        -:11030:
        -:11031:namespace Catch {
        -:11032:using namespace clara::TextFlow;
        -:11033:}
        -:11034:
        -:11035:// end catch_text.h
        -:11036:#include <limits>
        -:11037:#include <algorithm>
        -:11038:#include <iomanip>
        -:11039:
        -:11040:namespace Catch {
        -:11041:
function _ZN5Catch9listTestsERKNS_6ConfigE called 0 returned 0% blocks executed 0%
    #####:11042:std::size_t listTests( Config const& config ) {
    #####:11043:TestSpec testSpec = config.testSpec();
    %%%%%:11043-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11043-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:11043-block  2
call    7 never executed
    #####:11044:if( config.hasTestFilters() )
    %%%%%:11044-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11044-block  1
branch  3 never executed
branch  4 never executed
    #####:11045:Catch::cout() << "Matching test cases:\n";
    %%%%%:11045-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:11046:else {
    #####:11047:Catch::cout() << "All available test cases:\n";
    %%%%%:11047-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:11048:}
        -:11049:
    #####:11050:auto matchedTestCases = filterTests( getAllTestCasesSorted( config ), testSpec, config );
    %%%%%:11050-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11050-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:11050-block  2
call    7 never executed
    #####:11051:for( auto const& testCaseInfo : matchedTestCases ) {
    %%%%%:11051-block  0
call    0 never executed
call    1 never executed
    %%%%%:11051-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11051-block  2
call    5 never executed
call    6 never executed
    #####:11052:Colour::Code colour = testCaseInfo.isHidden()
call    0 never executed
    #####:11053:? Colour::SecondaryText
branch  0 never executed
branch  1 never executed
    %%%%%:11053-block  0
    %%%%%:11053-block  1
    #####:11054:: Colour::None;
    #####:11055:Colour colourGuard( colour );
    %%%%%:11055-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11055-block  1
call    3 never executed
    $$$$$:11055-block  2
call    4 never executed
        -:11056:
    #####:11057:Catch::cout() << Column( testCaseInfo.name ).initialIndent( 2 ).indent( 4 ) << "\n";
    %%%%%:11057-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11057-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:11057-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:11057-block  3
call   12 never executed
    $$$$$:11057-block  4
call   13 never executed
    $$$$$:11057-block  5
    #####:11058:if( config.verbosity() >= Verbosity::High ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11058-block  0
branch  3 never executed
branch  4 never executed
    #####:11059:Catch::cout() << Column( Catch::Detail::stringify( testCaseInfo.lineInfo ) ).indent(4) << std::endl;
    %%%%%:11059-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11059-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11059-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:11059-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:11059-block  4
call   14 never executed
call   15 never executed
    $$$$$:11059-block  5
call   16 never executed
    $$$$$:11059-block  6
    $$$$$:11059-block  7
call   17 never executed
    $$$$$:11059-block  8
    #####:11060:std::string description = testCaseInfo.description;
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:11060-block  0
call    3 never executed
    #####:11061:if( description.empty() )
    %%%%%:11061-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11062:description = "(NO DESCRIPTION)";
    %%%%%:11062-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11063:Catch::cout() << Column( description ).indent(4) << std::endl;
    %%%%%:11063-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11063-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:11063-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:11063-block  3
call   11 never executed
call   12 never executed
    $$$$$:11063-block  4
call   13 never executed
    $$$$$:11063-block  5
        -:11064:}
    #####:11065:if( !testCaseInfo.tags.empty() )
    %%%%%:11065-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11066:Catch::cout() << Column( testCaseInfo.tagsAsString() ).indent( 6 ) << "\n";
    %%%%%:11066-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11066-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11066-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:11066-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:11066-block  4
call   14 never executed
call   15 never executed
    $$$$$:11066-block  5
call   16 never executed
    $$$$$:11066-block  6
    $$$$$:11066-block  7
call   17 never executed
    $$$$$:11066-block  8
        -:11067:}
        -:11068:
    #####:11069:if( !config.hasTestFilters() )
    %%%%%:11069-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11069-block  1
branch  3 never executed
branch  4 never executed
    #####:11070:Catch::cout() << pluralise( matchedTestCases.size(), "test case" ) << '\n' << std::endl;
    %%%%%:11070-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11070-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:11070-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:11070-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:11070-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:11070-block  5
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$:11070-block  6
call   21 never executed
    $$$$$:11070-block  7
    $$$$$:11070-block  8
call   22 never executed
    $$$$$:11070-block  9
    $$$$$:11070-block 10
call   23 never executed
    $$$$$:11070-block 11
        -:11071:else
    #####:11072:Catch::cout() << pluralise( matchedTestCases.size(), "matching test case" ) << '\n' << std::endl;
    %%%%%:11072-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11072-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:11072-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:11072-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:11072-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:11072-block  5
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$:11072-block  6
call   21 never executed
    $$$$$:11072-block  7
    $$$$$:11072-block  8
call   22 never executed
    $$$$$:11072-block  9
    $$$$$:11072-block 10
call   23 never executed
    $$$$$:11072-block 11
    #####:11073:return matchedTestCases.size();
    %%%%%:11073-block  0
call    0 never executed
    %%%%%:11073-block  1
        -:11074:}
        -:11075:
function _ZN5Catch18listTestsNamesOnlyERKNS_6ConfigE called 0 returned 0% blocks executed 0%
    #####:11076:std::size_t listTestsNamesOnly( Config const& config ) {
    #####:11077:TestSpec testSpec = config.testSpec();
    %%%%%:11077-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11077-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:11077-block  2
call    7 never executed
    #####:11078:std::size_t matchedTests = 0;
    #####:11079:std::vector<TestCase> matchedTestCases = filterTests( getAllTestCasesSorted( config ), testSpec, config );
    %%%%%:11079-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11079-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:11079-block  2
call    6 never executed
    #####:11080:for( auto const& testCaseInfo : matchedTestCases ) {
    %%%%%:11080-block  0
call    0 never executed
call    1 never executed
    %%%%%:11080-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11080-block  2
call    5 never executed
    %%%%%:11080-block  3
call    6 never executed
    #####:11081:matchedTests++;
    #####:11082:if( startsWith( testCaseInfo.name, '#' ) )
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11083:Catch::cout() << '"' << testCaseInfo.name << '"';
    %%%%%:11083-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11083-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11083-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
        -:11084:else
    #####:11085:Catch::cout() << testCaseInfo.name;
    %%%%%:11085-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11086:if ( config.verbosity() >= Verbosity::High )
    %%%%%:11086-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11086-block  1
branch  3 never executed
branch  4 never executed
    #####:11087:Catch::cout() << "\t@" << testCaseInfo.lineInfo;
    %%%%%:11087-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11087-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:11088:Catch::cout() << std::endl;
    %%%%%:11088-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:11089:}
    #####:11090:return matchedTests;
    %%%%%:11090-block  0
call    0 never executed
    %%%%%:11090-block  1
        -:11091:}
        -:11092:
function _ZN5Catch7TagInfo3addERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:11093:void TagInfo::add( std::string const& spelling ) {
    #####:11094:++count;
    #####:11095:spellings.insert( spelling );
    %%%%%:11095-block  0
call    0 never executed
    #####:11096:}
        -:11097:
function _ZNK5Catch7TagInfo3allB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:11098:std::string TagInfo::all() const {
    #####:11099:size_t size = 0;
    #####:11100:for (auto const& spelling : spellings) {
    %%%%%:11100-block  0
call    0 never executed
call    1 never executed
    %%%%%:11100-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11100-block  2
call    5 never executed
        -:11101:// Add 2 for the brackes
    #####:11102:size += spelling.size() + 2;
call    0 never executed
call    1 never executed
        -:11103:}
        -:11104:
    #####:11105:std::string out; out.reserve(size);
    %%%%%:11105-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11106:for (auto const& spelling : spellings) {
    %%%%%:11106-block  0
call    0 never executed
call    1 never executed
    %%%%%:11106-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11106-block  2
call    5 never executed
    %%%%%:11106-block  3
call    6 never executed
    #####:11107:out += '[';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11108:out += spelling;
    %%%%%:11108-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11109:out += ']';
    %%%%%:11109-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11110:}
    #####:11111:return out;
    %%%%%:11111-block  0
    %%%%%:11111-block  1
        -:11112:}
        -:11113:
function _ZN5Catch8listTagsERKNS_6ConfigE called 0 returned 0% blocks executed 0%
    #####:11114:std::size_t listTags( Config const& config ) {
    #####:11115:TestSpec testSpec = config.testSpec();
    %%%%%:11115-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11115-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:11115-block  2
call    7 never executed
    #####:11116:if( config.hasTestFilters() )
    %%%%%:11116-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11116-block  1
branch  3 never executed
branch  4 never executed
    #####:11117:Catch::cout() << "Tags for matching test cases:\n";
    %%%%%:11117-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:11118:else {
    #####:11119:Catch::cout() << "All available tags:\n";
    %%%%%:11119-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:11120:}
        -:11121:
    #####:11122:std::map<std::string, TagInfo> tagCounts;
    %%%%%:11122-block  0
call    0 never executed
call    1 never executed
    $$$$$:11122-block  1
call    2 never executed
        -:11123:
    #####:11124:std::vector<TestCase> matchedTestCases = filterTests( getAllTestCasesSorted( config ), testSpec, config );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11124-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:11124-block  1
call    7 never executed
    #####:11125:for( auto const& testCase : matchedTestCases ) {
    %%%%%:11125-block  0
call    0 never executed
call    1 never executed
    %%%%%:11125-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11125-block  2
call    5 never executed
    %%%%%:11125-block  3
call    6 never executed
    #####:11126:for( auto const& tagName : testCase.getTestCaseInfo().tags ) {
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%:11126-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11126-block  1
call    6 never executed
call    7 never executed
    #####:11127:std::string lcaseTagName = toLower( tagName );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11127-block  0
call    3 never executed
    $$$$$:11127-block  1
call    4 never executed
    #####:11128:auto countIt = tagCounts.find( lcaseTagName );
    %%%%%:11128-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11129:if( countIt == tagCounts.end() )
    %%%%%:11129-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11130:countIt = tagCounts.insert( std::make_pair( lcaseTagName, TagInfo() ) ).first;
    %%%%%:11130-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11130-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11130-block  2
call    7 never executed
call    8 never executed
    $$$$$:11130-block  3
call    9 never executed
    $$$$$:11130-block  4
    $$$$$:11130-block  5
call   10 never executed
    $$$$$:11130-block  6
    #####:11131:countIt->second.add( tagName );
    %%%%%:11131-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:11132:}
        -:11133:}
        -:11134:
    #####:11135:for( auto const& tagCount : tagCounts ) {
    %%%%%:11135-block  0
call    0 never executed
call    1 never executed
    %%%%%:11135-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11135-block  2
call    5 never executed
call    6 never executed
    #####:11136:ReusableStringStream rss;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:11136-block  0
call    4 never executed
    #####:11137:rss << "  " << std::setw(2) << tagCount.second.count << "  ";
    %%%%%:11137-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11137-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11137-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:11137-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$:11137-block  4
    #####:11138:auto str = rss.str();
    %%%%%:11138-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:11138-block  1
call    4 never executed
    #####:11139:auto wrapper = Column( tagCount.second.all() )
    %%%%%:11139-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11139-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:11139-block  2
    $$$$$:11139-block  3
    #####:11140:.initialIndent( 0 )
    %%%%%:11140-block  0
call    0 never executed
    #####:11141:.indent( str.size() )
call    0 never executed
call    1 never executed
    #####:11142:.width( CATCH_CONFIG_CONSOLE_WIDTH-10 );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11142-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11142-block  1
call    6 never executed
    $$$$$:11142-block  2
call    7 never executed
    #####:11143:Catch::cout() << str << wrapper << '\n';
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11143-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11143-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
        -:11144:}
    #####:11145:Catch::cout() << pluralise( tagCounts.size(), "tag" ) << '\n' << std::endl;
    %%%%%:11145-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11145-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:11145-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:11145-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:11145-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:11145-block  5
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$:11145-block  6
call   21 never executed
    $$$$$:11145-block  7
    $$$$$:11145-block  8
call   22 never executed
    $$$$$:11145-block  9
    $$$$$:11145-block 10
call   23 never executed
    $$$$$:11145-block 11
    #####:11146:return tagCounts.size();
call    0 never executed
    %%%%%:11146-block  0
        -:11147:}
        -:11148:
function _ZN5Catch13listReportersEv called 0 returned 0% blocks executed 0%
    #####:11149:std::size_t listReporters() {
    #####:11150:Catch::cout() << "Available reporters:\n";
    %%%%%:11150-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11151:IReporterRegistry::FactoryMap const& factories = getRegistryHub().getReporterRegistry().getFactories();
    %%%%%:11151-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11151-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11151-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:11152:std::size_t maxNameLen = 0;
    #####:11153:for( auto const& factoryKvp : factories )
    %%%%%:11153-block  0
call    0 never executed
call    1 never executed
    %%%%%:11153-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11153-block  2
call    5 never executed
    #####:11154:maxNameLen = (std::max)( maxNameLen, factoryKvp.first.size() );
call    0 never executed
call    1 never executed
call    2 never executed
        -:11155:
    #####:11156:for( auto const& factoryKvp : factories ) {
    %%%%%:11156-block  0
call    0 never executed
call    1 never executed
    %%%%%:11156-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11156-block  2
call    5 never executed
        -:11157:Catch::cout()
    #####:11158:<< Column( factoryKvp.first + ":" )
    %%%%%:11158-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:11158-block  1
call    4 never executed
    $$$$$:11158-block  2
    $$$$$:11158-block  3
call    5 never executed
    $$$$$:11158-block  4
    #####:11159:.indent(2)
    %%%%%:11159-block  0
call    0 never executed
    #####:11160:.width( 5+maxNameLen )
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11161:+  Column( factoryKvp.second->getDescription() )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11161-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11161-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:11161-block  2
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$:11161-block  3
call   15 never executed
    $$$$$:11161-block  4
    $$$$$:11161-block  5
call   16 never executed
    $$$$$:11161-block  6
    $$$$$:11161-block  7
call   17 never executed
    $$$$$:11161-block  8
    #####:11162:.initialIndent(0)
    %%%%%:11162-block  0
call    0 never executed
    #####:11163:.indent(2)
call    0 never executed
    #####:11164:.width( CATCH_CONFIG_CONSOLE_WIDTH - maxNameLen-8 )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11164-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11164-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:11165:<< "\n";
    %%%%%:11165-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11166:}
    #####:11167:Catch::cout() << std::endl;
    %%%%%:11167-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11168:return factories.size();
    %%%%%:11168-block  0
call    0 never executed
    %%%%%:11168-block  1
        -:11169:}
        -:11170:
function _ZN5Catch4listERKSt10shared_ptrINS_6ConfigEE called 1 returned 100% blocks executed 39%
        1:11171:Option<std::size_t> list( std::shared_ptr<Config> const& config ) {
        1:11172:Option<std::size_t> listedCount;
        1:11172-block  0
call    0 returned 1
        1:11173:getCurrentMutableContext().setConfig( config );
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:11173-block  0
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:11173-block  1
call    7 returned 1
    $$$$$:11173-block  2
call    8 never executed
    $$$$$:11173-block  3
        1:11174:if( config->listTests() )
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:11175:listedCount = listedCount.valueOr(0) + listTests( *config );
    %%%%%:11175-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11175-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:11175-block  2
    $$$$$:11175-block  3
    $$$$$:11175-block  4
        1:11176:if( config->listTestNamesOnly() )
        1:11176-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:11177:listedCount = listedCount.valueOr(0) + listTestsNamesOnly( *config );
    %%%%%:11177-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11177-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:11177-block  2
    $$$$$:11177-block  3
    $$$$$:11177-block  4
        1:11178:if( config->listTags() )
        1:11178-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:11179:listedCount = listedCount.valueOr(0) + listTags( *config );
    %%%%%:11179-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11179-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:11179-block  2
    $$$$$:11179-block  3
    $$$$$:11179-block  4
        1:11180:if( config->listReporters() )
        1:11180-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:11181:listedCount = listedCount.valueOr(0) + listReporters();
    %%%%%:11181-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11181-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11181-block  2
    $$$$$:11181-block  3
    $$$$$:11181-block  4
        1:11182:return listedCount;
        1:11182-block  0
        1:11182-block  1
        -:11183:}
        -:11184:
        -:11185:} // end namespace Catch
        -:11186:// end catch_list.cpp
        -:11187:// start catch_matchers.cpp
        -:11188:
        -:11189:namespace Catch {
        -:11190:namespace Matchers {
        -:11191:namespace Impl {
        -:11192:
function _ZNK5Catch8Matchers4Impl18MatcherUntypedBase8toStringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:11193:std::string MatcherUntypedBase::toString() const {
    #####:11194:if( m_cachedToString.empty() )
    %%%%%:11194-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11195:m_cachedToString = describe();
    %%%%%:11195-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:11196:return m_cachedToString;
    %%%%%:11196-block  0
call    0 never executed
        -:11197:}
        -:11198:
        -:11199:MatcherUntypedBase::~MatcherUntypedBase() = default;
        -:11200:
        -:11201:} // namespace Impl
        -:11202:} // namespace Matchers
        -:11203:
        -:11204:using namespace Matchers;
        -:11205:using Matchers::Impl::MatcherBase;
        -:11206:
        -:11207:} // namespace Catch
        -:11208:// end catch_matchers.cpp
        -:11209:// start catch_matchers_exception.cpp
        -:11210:
        -:11211:namespace Catch {
        -:11212:namespace Matchers {
        -:11213:namespace Exception {
        -:11214:
function _ZNK5Catch8Matchers9Exception23ExceptionMessageMatcher5matchERKSt9exception called 0 returned 0% blocks executed 0%
    #####:11215:bool ExceptionMessageMatcher::match(std::exception const& ex) const {
    #####:11216:return ex.what() == m_message;
    %%%%%:11216-block  0
call    0 never executed
call    1 never executed
        -:11217:}
        -:11218:
function _ZNK5Catch8Matchers9Exception23ExceptionMessageMatcher8describeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:11219:std::string ExceptionMessageMatcher::describe() const {
    #####:11220:return "exception message matches \"" + m_message + "\"";
    %%%%%:11220-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11220-block  1
    %%%%%:11220-block  2
call    4 never executed
    %%%%%:11220-block  3
    $$$$$:11220-block  4
call    5 never executed
        -:11221:}
        -:11222:
        -:11223:}
function _ZN5Catch8Matchers7MessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:11224:Exception::ExceptionMessageMatcher Message(std::string const& message) {
    #####:11225:return Exception::ExceptionMessageMatcher(message);
    %%%%%:11225-block  0
call    0 never executed
        -:11226:}
        -:11227:
        -:11228:// namespace Exception
        -:11229:} // namespace Matchers
        -:11230:} // namespace Catch
        -:11231:// end catch_matchers_exception.cpp
        -:11232:// start catch_matchers_floating.cpp
        -:11233:
        -:11234:// start catch_polyfills.hpp
        -:11235:
        -:11236:namespace Catch {
        -:11237:bool isnan(float f);
        -:11238:bool isnan(double d);
        -:11239:}
        -:11240:
        -:11241:// end catch_polyfills.hpp
        -:11242:// start catch_to_string.hpp
        -:11243:
        -:11244:#include <string>
        -:11245:
        -:11246:namespace Catch {
        -:11247:template <typename T>
        -:11248:std::string to_string(T const& t) {
        -:11249:#if defined(CATCH_CONFIG_CPP11_TO_STRING)
        -:11250:return std::to_string(t);
        -:11251:#else
        -:11252:ReusableStringStream rss;
        -:11253:rss << t;
        -:11254:return rss.str();
        -:11255:#endif
        -:11256:}
        -:11257:} // end namespace Catch
        -:11258:
        -:11259:// end catch_to_string.hpp
        -:11260:#include <algorithm>
        -:11261:#include <cmath>
        -:11262:#include <cstdlib>
        -:11263:#include <cstdint>
        -:11264:#include <cstring>
        -:11265:#include <sstream>
        -:11266:#include <type_traits>
        -:11267:#include <iomanip>
        -:11268:#include <limits>
        -:11269:
        -:11270:namespace Catch {
        -:11271:namespace {
        -:11272:
function _ZN5Catch12_GLOBAL__N_17convertEf called 0 returned 0% blocks executed 0%
    #####:11273:int32_t convert(float f) {
        -:11274:static_assert(sizeof(float) == sizeof(int32_t), "Important ULP matcher assumption violated");
        -:11275:int32_t i;
    #####:11276:std::memcpy(&i, &f, sizeof(f));
    #####:11277:return i;
    %%%%%:11277-block  0
        -:11278:}
        -:11279:
function _ZN5Catch12_GLOBAL__N_17convertEd called 0 returned 0% blocks executed 0%
    #####:11280:int64_t convert(double d) {
        -:11281:static_assert(sizeof(double) == sizeof(int64_t), "Important ULP matcher assumption violated");
        -:11282:int64_t i;
    #####:11283:std::memcpy(&i, &d, sizeof(d));
    #####:11284:return i;
    %%%%%:11284-block  0
        -:11285:}
        -:11286:
        -:11287:template <typename FP>
    #####:11288:bool almostEqualUlps(FP lhs, FP rhs, uint64_t maxUlpDiff) {
        -:11289:// Comparison with NaN should always be false.
        -:11290:// This way we can rule it out before getting into the ugly details
    #####:11291:if (Catch::isnan(lhs) || Catch::isnan(rhs)) {
    #####:11292:return false;
        -:11293:}
        -:11294:
    #####:11295:auto lc = convert(lhs);
    #####:11296:auto rc = convert(rhs);
        -:11297:
    #####:11298:if ((lc < 0) != (rc < 0)) {
        -:11299:// Potentially we can have +0 and -0
    #####:11300:return lhs == rhs;
        -:11301:}
        -:11302:
    #####:11303:auto ulpDiff = std::abs(lc - rc);
    #####:11304:return static_cast<uint64_t>(ulpDiff) <= maxUlpDiff;
        -:11305:}
------------------
_ZN5Catch12_GLOBAL__N_115almostEqualUlpsIdEEbT_S2_y:
function _ZN5Catch12_GLOBAL__N_115almostEqualUlpsIdEEbT_S2_y called 0 returned 0% blocks executed 0%
    #####:11288:bool almostEqualUlps(FP lhs, FP rhs, uint64_t maxUlpDiff) {
        -:11289:// Comparison with NaN should always be false.
        -:11290:// This way we can rule it out before getting into the ugly details
    #####:11291:if (Catch::isnan(lhs) || Catch::isnan(rhs)) {
    %%%%%:11291-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11291-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11291-block  2
    %%%%%:11291-block  3
    %%%%%:11291-block  4
branch  6 never executed
branch  7 never executed
    #####:11292:return false;
    %%%%%:11292-block  0
        -:11293:}
        -:11294:
    #####:11295:auto lc = convert(lhs);
    %%%%%:11295-block  0
call    0 never executed
    #####:11296:auto rc = convert(rhs);
call    0 never executed
        -:11297:
    #####:11298:if ((lc < 0) != (rc < 0)) {
branch  0 never executed
branch  1 never executed
        -:11299:// Potentially we can have +0 and -0
    #####:11300:return lhs == rhs;
    %%%%%:11300-block  0
        -:11301:}
        -:11302:
    #####:11303:auto ulpDiff = std::abs(lc - rc);
    %%%%%:11303-block  0
call    0 never executed
    #####:11304:return static_cast<uint64_t>(ulpDiff) <= maxUlpDiff;
        -:11305:}
------------------
_ZN5Catch12_GLOBAL__N_115almostEqualUlpsIfEEbT_S2_y:
function _ZN5Catch12_GLOBAL__N_115almostEqualUlpsIfEEbT_S2_y called 0 returned 0% blocks executed 0%
    #####:11288:bool almostEqualUlps(FP lhs, FP rhs, uint64_t maxUlpDiff) {
        -:11289:// Comparison with NaN should always be false.
        -:11290:// This way we can rule it out before getting into the ugly details
    #####:11291:if (Catch::isnan(lhs) || Catch::isnan(rhs)) {
    %%%%%:11291-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11291-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11291-block  2
    %%%%%:11291-block  3
    %%%%%:11291-block  4
branch  6 never executed
branch  7 never executed
    #####:11292:return false;
    %%%%%:11292-block  0
        -:11293:}
        -:11294:
    #####:11295:auto lc = convert(lhs);
    %%%%%:11295-block  0
call    0 never executed
    #####:11296:auto rc = convert(rhs);
call    0 never executed
        -:11297:
    #####:11298:if ((lc < 0) != (rc < 0)) {
branch  0 never executed
branch  1 never executed
        -:11299:// Potentially we can have +0 and -0
    #####:11300:return lhs == rhs;
    %%%%%:11300-block  0
        -:11301:}
        -:11302:
    #####:11303:auto ulpDiff = std::abs(lc - rc);
    #####:11304:return static_cast<uint64_t>(ulpDiff) <= maxUlpDiff;
    %%%%%:11304-block  0
        -:11305:}
------------------
        -:11306:
        -:11307:} //end anonymous namespace
        -:11308:
        -:11309:#if defined(CATCH_CONFIG_GLOBAL_NEXTAFTER)
        -:11310:
        -:11311:#if defined(__clang__)
        -:11312:#pragma clang diagnostic push
        -:11313:// The long double overload is currently unused
        -:11314:#pragma clang diagnostic ignored "-Wunused-function"
        -:11315:#endif
        -:11316:
        -:11317:float nextafter(float x, float y) {
        -:11318:return ::nextafterf(x, y);
        -:11319:}
        -:11320:
        -:11321:double nextafter(double x, double y) {
        -:11322:return ::nextafter(x, y);
        -:11323:}
        -:11324:
        -:11325:long double nextafter(long double x, long double y) {
        -:11326:return ::nextafterl(x, y);
        -:11327:}
        -:11328:
        -:11329:#if defined(__clang__)
        -:11330:#pragma clang diagnostic pop
        -:11331:#endif
        -:11332:
        -:11333:#endif // ^^^ CATCH_CONFIG_GLOBAL_NEXTAFTER ^^^
        -:11334:
        -:11335:namespace {
        -:11336:
        -:11337:template <typename FP>
    #####:11338:FP step(FP start, FP direction, uint64_t steps) {
    #####:11339:for (uint64_t i = 0; i < steps; ++i) {
        -:11340:#if defined(CATCH_CONFIG_GLOBAL_NEXTAFTER)
        -:11341:start = Catch::nextafter(start, direction);
        -:11342:#else
    #####:11343:start = std::nextafter(start, direction);
        -:11344:#endif
        -:11345:}
    #####:11346:return start;
        -:11347:}
------------------
_ZN5Catch12_GLOBAL__N_14stepIfEET_S2_S2_y:
function _ZN5Catch12_GLOBAL__N_14stepIfEET_S2_S2_y called 0 returned 0% blocks executed 0%
    #####:11338:FP step(FP start, FP direction, uint64_t steps) {
    #####:11339:for (uint64_t i = 0; i < steps; ++i) {
    %%%%%:11339-block  0
    %%%%%:11339-block  1
branch  0 never executed
branch  1 never executed
        -:11340:#if defined(CATCH_CONFIG_GLOBAL_NEXTAFTER)
        -:11341:start = Catch::nextafter(start, direction);
        -:11342:#else
    #####:11343:start = std::nextafter(start, direction);
    %%%%%:11343-block  0
call    0 never executed
        -:11344:#endif
        -:11345:}
    #####:11346:return start;
    %%%%%:11346-block  0
        -:11347:}
------------------
_ZN5Catch12_GLOBAL__N_14stepIdEET_S2_S2_y:
function _ZN5Catch12_GLOBAL__N_14stepIdEET_S2_S2_y called 0 returned 0% blocks executed 0%
    #####:11338:FP step(FP start, FP direction, uint64_t steps) {
    #####:11339:for (uint64_t i = 0; i < steps; ++i) {
    %%%%%:11339-block  0
    %%%%%:11339-block  1
branch  0 never executed
branch  1 never executed
        -:11340:#if defined(CATCH_CONFIG_GLOBAL_NEXTAFTER)
        -:11341:start = Catch::nextafter(start, direction);
        -:11342:#else
    #####:11343:start = std::nextafter(start, direction);
    %%%%%:11343-block  0
        -:11344:#endif
        -:11345:}
    #####:11346:return start;
    %%%%%:11346-block  0
        -:11347:}
------------------
        -:11348:
        -:11349:// Performs equivalent check of std::fabs(lhs - rhs) <= margin
        -:11350:// But without the subtraction to allow for INFINITY in comparison
function _ZN5Catch12_GLOBAL__N_116marginComparisonEddd called 0 returned 0% blocks executed 0%
    #####:11351:bool marginComparison(double lhs, double rhs, double margin) {
    #####:11352:return (lhs + margin >= rhs) && (rhs + margin >= lhs);
    %%%%%:11352-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11352-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:11352-block  2
    %%%%%:11352-block  3
    %%%%%:11352-block  4
        -:11353:}
        -:11354:
        -:11355:template <typename FloatingPoint>
    #####:11356:void write(std::ostream& out, FloatingPoint num) {
    #####:11357:out << std::scientific
    #####:11358:<< std::setprecision(std::numeric_limits<FloatingPoint>::max_digits10 - 1)
    #####:11359:<< num;
    #####:11360:}
------------------
_ZN5Catch12_GLOBAL__N_15writeIdEEvRSoT_:
function _ZN5Catch12_GLOBAL__N_15writeIdEEvRSoT_ called 0 returned 0% blocks executed 0%
    #####:11356:void write(std::ostream& out, FloatingPoint num) {
    #####:11357:out << std::scientific
    %%%%%:11357-block  0
call    0 never executed
    #####:11358:<< std::setprecision(std::numeric_limits<FloatingPoint>::max_digits10 - 1)
call    0 never executed
call    1 never executed
    #####:11359:<< num;
call    0 never executed
    #####:11360:}
------------------
_ZN5Catch12_GLOBAL__N_15writeIfEEvRSoT_:
function _ZN5Catch12_GLOBAL__N_15writeIfEEvRSoT_ called 0 returned 0% blocks executed 0%
    #####:11356:void write(std::ostream& out, FloatingPoint num) {
    #####:11357:out << std::scientific
    %%%%%:11357-block  0
call    0 never executed
    #####:11358:<< std::setprecision(std::numeric_limits<FloatingPoint>::max_digits10 - 1)
call    0 never executed
call    1 never executed
    #####:11359:<< num;
call    0 never executed
    #####:11360:}
------------------
        -:11361:
        -:11362:} // end anonymous namespace
        -:11363:
        -:11364:namespace Matchers {
        -:11365:namespace Floating {
        -:11366:
        -:11367:enum class FloatingPointKind : uint8_t {
        -:11368:Float,
        -:11369:Double
        -:11370:};
        -:11371:
function _ZN5Catch8Matchers8Floating16WithinAbsMatcherC2Edd called 0 returned 0% blocks executed 0%
    #####:11372:WithinAbsMatcher::WithinAbsMatcher(double target, double margin)
    #####:11373::m_target{ target }, m_margin{ margin } {
    %%%%%:11373-block  0
call    0 never executed
    $$$$$:11373-block  1
call    1 never executed
    #####:11374:CATCH_ENFORCE(margin >= 0, "Invalid margin: " << margin << '.'
branch  0 never executed
branch  1 never executed
    %%%%%:11374-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11374-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:11374-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:11374-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:11374-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:11374-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:11374-block  6
call   20 never executed
    $$$$$:11374-block  7
call   21 never executed
    $$$$$:11374-block  8
    $$$$$:11374-block  9
    $$$$$:11374-block 10
call   22 never executed
    $$$$$:11374-block 11
        -:11375:<< " Margin has to be non-negative.");
    #####:11376:}
    %%%%%:11376-block  0
        -:11377:
        -:11378:// Performs equivalent check of std::fabs(lhs - rhs) <= margin
        -:11379:// But without the subtraction to allow for INFINITY in comparison
function _ZNK5Catch8Matchers8Floating16WithinAbsMatcher5matchERKd called 0 returned 0% blocks executed 0%
    #####:11380:bool WithinAbsMatcher::match(double const& matchee) const {
    #####:11381:return (matchee + m_margin >= m_target) && (m_target + m_margin >= matchee);
    %%%%%:11381-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11381-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:11381-block  2
    %%%%%:11381-block  3
    %%%%%:11381-block  4
        -:11382:}
        -:11383:
function _ZNK5Catch8Matchers8Floating16WithinAbsMatcher8describeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:11384:std::string WithinAbsMatcher::describe() const {
    #####:11385:return "is within " + ::Catch::Detail::stringify(m_margin) + " of " + ::Catch::Detail::stringify(m_target);
    %%%%%:11385-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11385-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11385-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:11385-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:11385-block  4
    %%%%%:11385-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    %%%%%:11385-block  6
    $$$$$:11385-block  7
call   17 never executed
    $$$$$:11385-block  8
    $$$$$:11385-block  9
call   18 never executed
    $$$$$:11385-block 10
    $$$$$:11385-block 11
call   19 never executed
    $$$$$:11385-block 12
    $$$$$:11385-block 13
call   20 never executed
        -:11386:}
        -:11387:
function _ZN5Catch8Matchers8Floating17WithinUlpsMatcherC2EdyNS1_17FloatingPointKindE called 0 returned 0% blocks executed 0%
    #####:11388:WithinUlpsMatcher::WithinUlpsMatcher(double target, uint64_t ulps, FloatingPointKind baseType)
    #####:11389::m_target{ target }, m_ulps{ ulps }, m_type{ baseType } {
    %%%%%:11389-block  0
call    0 never executed
    $$$$$:11389-block  1
call    1 never executed
    #####:11390:CATCH_ENFORCE(m_type == FloatingPointKind::Double
branch  0 never executed
branch  1 never executed
    %%%%%:11390-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11390-block  1
    %%%%%:11390-block  2
    %%%%%:11390-block  3
branch  5 never executed
branch  6 never executed
    %%%%%:11390-block  4
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:11390-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:11390-block  6
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:11390-block  7
call   16 never executed
    $$$$$:11390-block  8
call   17 never executed
    $$$$$:11390-block  9
    $$$$$:11390-block 10
call   18 never executed
    $$$$$:11390-block 11
        -:11391:|| m_ulps < (std::numeric_limits<uint32_t>::max)(),
        -:11392:"Provided ULP is impossibly large for a float comparison.");
    #####:11393:}
    %%%%%:11393-block  0
        -:11394:
        -:11395:#if defined(__clang__)
        -:11396:#pragma clang diagnostic push
        -:11397:// Clang <3.5 reports on the default branch in the switch below
        -:11398:#pragma clang diagnostic ignored "-Wunreachable-code"
        -:11399:#endif
        -:11400:
function _ZNK5Catch8Matchers8Floating17WithinUlpsMatcher5matchERKd called 0 returned 0% blocks executed 0%
    #####:11401:bool WithinUlpsMatcher::match(double const& matchee) const {
    #####:11402:switch (m_type) {
    %%%%%:11402-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
    #####:11403:case FloatingPointKind::Float:
    #####:11404:return almostEqualUlps<float>(static_cast<float>(matchee), static_cast<float>(m_target), m_ulps);
    %%%%%:11404-block  0
call    0 never executed
    #####:11405:case FloatingPointKind::Double:
    #####:11406:return almostEqualUlps<double>(matchee, m_target, m_ulps);
    %%%%%:11406-block  0
call    0 never executed
    #####:11407:default:
    #####:11408:CATCH_INTERNAL_ERROR( "Unknown FloatingPointKind value" );
    %%%%%:11408-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11408-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:11408-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:11408-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:11408-block  4
call   14 never executed
    $$$$$:11408-block  5
call   15 never executed
    $$$$$:11408-block  6
    $$$$$:11408-block  7
    $$$$$:11408-block  8
call   16 never executed
        -:11409:}
        -:11410:}
        -:11411:
        -:11412:#if defined(__clang__)
        -:11413:#pragma clang diagnostic pop
        -:11414:#endif
        -:11415:
function _ZNK5Catch8Matchers8Floating17WithinUlpsMatcher8describeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:11416:std::string WithinUlpsMatcher::describe() const {
    #####:11417:std::stringstream ret;
    %%%%%:11417-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11417-block  1
call    4 never executed
    $$$$$:11417-block  2
call    5 never executed
        -:11418:
    #####:11419:ret << "is within " << m_ulps << " ULPs of ";
    %%%%%:11419-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11419-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11419-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:11420:
    #####:11421:if (m_type == FloatingPointKind::Float) {
    %%%%%:11421-block  0
branch  0 never executed
branch  1 never executed
    #####:11422:write(ret, static_cast<float>(m_target));
    %%%%%:11422-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11423:ret << 'f';
    %%%%%:11423-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11424:} else {
    #####:11425:write(ret, m_target);
    %%%%%:11425-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11426:}
        -:11427:
    #####:11428:ret << " ([";
    %%%%%:11428-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11429:if (m_type == FloatingPointKind::Double) {
    %%%%%:11429-block  0
branch  0 never executed
branch  1 never executed
    #####:11430:write(ret, step(m_target, static_cast<double>(-INFINITY), m_ulps));
    %%%%%:11430-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11431:ret << ", ";
    %%%%%:11431-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11432:write(ret, step(m_target, static_cast<double>( INFINITY), m_ulps));
    %%%%%:11432-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:11433:} else {
    #####:11434:write(ret, step(static_cast<float>(m_target), -INFINITY, m_ulps));
    %%%%%:11434-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11435:ret << ", ";
    %%%%%:11435-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11436:write(ret, step(static_cast<float>(m_target),  INFINITY, m_ulps));
    %%%%%:11436-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:11437:}
    #####:11438:ret << "])";
    %%%%%:11438-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11439:
    #####:11440:return ret.str();
    %%%%%:11440-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11440-block  1
    %%%%%:11440-block  2
        -:11441:}
        -:11442:
function _ZN5Catch8Matchers8Floating16WithinRelMatcherC2Edd called 0 returned 0% blocks executed 0%
    #####:11443:WithinRelMatcher::WithinRelMatcher(double target, double epsilon):
        -:11444:m_target(target),
    #####:11445:m_epsilon(epsilon){
    %%%%%:11445-block  0
call    0 never executed
    $$$$$:11445-block  1
call    1 never executed
    #####:11446:CATCH_ENFORCE(m_epsilon >= 0., "Relative comparison with epsilon <  0 does not make sense.");
branch  0 never executed
branch  1 never executed
    %%%%%:11446-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11446-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:11446-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:11446-block  3
call   11 never executed
    $$$$$:11446-block  4
call   12 never executed
    $$$$$:11446-block  5
    $$$$$:11446-block  6
call   13 never executed
    $$$$$:11446-block  7
    #####:11447:CATCH_ENFORCE(m_epsilon  < 1., "Relative comparison with epsilon >= 1 does not make sense.");
    %%%%%:11447-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11447-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11447-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:11447-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:11447-block  4
call   11 never executed
    $$$$$:11447-block  5
call   12 never executed
    $$$$$:11447-block  6
    $$$$$:11447-block  7
call   13 never executed
    $$$$$:11447-block  8
    #####:11448:}
    %%%%%:11448-block  0
        -:11449:
function _ZNK5Catch8Matchers8Floating16WithinRelMatcher5matchERKd called 0 returned 0% blocks executed 0%
    #####:11450:bool WithinRelMatcher::match(double const& matchee) const {
    #####:11451:const auto relMargin = m_epsilon * (std::max)(std::fabs(matchee), std::fabs(m_target));
    %%%%%:11451-block  0
call    0 never executed
    #####:11452:return marginComparison(matchee, m_target,
branch  0 never executed
branch  1 never executed
    %%%%%:11452-block  0
    %%%%%:11452-block  1
    %%%%%:11452-block  2
call    2 never executed
    #####:11453:std::isinf(relMargin)? 0 : relMargin);
call    0 never executed
        -:11454:}
        -:11455:
function _ZNK5Catch8Matchers8Floating16WithinRelMatcher8describeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:11456:std::string WithinRelMatcher::describe() const {
    #####:11457:Catch::ReusableStringStream sstr;
    %%%%%:11457-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11457-block  1
call    3 never executed
    $$$$$:11457-block  2
call    4 never executed
    #####:11458:sstr << "and " << m_target << " are within " << m_epsilon * 100. << "% of each other";
    %%%%%:11458-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11458-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11458-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:11458-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:11458-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$:11458-block  5
    #####:11459:return sstr.str();
    %%%%%:11459-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11459-block  1
    %%%%%:11459-block  2
        -:11460:}
        -:11461:
        -:11462:}// namespace Floating
        -:11463:
function _ZN5Catch8Matchers9WithinULPEdy called 0 returned 0% blocks executed 0%
    #####:11464:Floating::WithinUlpsMatcher WithinULP(double target, uint64_t maxUlpDiff) {
    #####:11465:return Floating::WithinUlpsMatcher(target, maxUlpDiff, Floating::FloatingPointKind::Double);
    %%%%%:11465-block  0
call    0 never executed
        -:11466:}
        -:11467:
function _ZN5Catch8Matchers9WithinULPEfy called 0 returned 0% blocks executed 0%
    #####:11468:Floating::WithinUlpsMatcher WithinULP(float target, uint64_t maxUlpDiff) {
    #####:11469:return Floating::WithinUlpsMatcher(target, maxUlpDiff, Floating::FloatingPointKind::Float);
    %%%%%:11469-block  0
call    0 never executed
        -:11470:}
        -:11471:
function _ZN5Catch8Matchers9WithinAbsEdd called 0 returned 0% blocks executed 0%
    #####:11472:Floating::WithinAbsMatcher WithinAbs(double target, double margin) {
    #####:11473:return Floating::WithinAbsMatcher(target, margin);
    %%%%%:11473-block  0
call    0 never executed
        -:11474:}
        -:11475:
function _ZN5Catch8Matchers9WithinRelEdd called 0 returned 0% blocks executed 0%
    #####:11476:Floating::WithinRelMatcher WithinRel(double target, double eps) {
    #####:11477:return Floating::WithinRelMatcher(target, eps);
    %%%%%:11477-block  0
call    0 never executed
        -:11478:}
        -:11479:
function _ZN5Catch8Matchers9WithinRelEd called 0 returned 0% blocks executed 0%
    #####:11480:Floating::WithinRelMatcher WithinRel(double target) {
    #####:11481:return Floating::WithinRelMatcher(target, std::numeric_limits<double>::epsilon() * 100);
    %%%%%:11481-block  0
call    0 never executed
call    1 never executed
        -:11482:}
        -:11483:
function _ZN5Catch8Matchers9WithinRelEff called 0 returned 0% blocks executed 0%
    #####:11484:Floating::WithinRelMatcher WithinRel(float target, float eps) {
    #####:11485:return Floating::WithinRelMatcher(target, eps);
    %%%%%:11485-block  0
call    0 never executed
        -:11486:}
        -:11487:
function _ZN5Catch8Matchers9WithinRelEf called 0 returned 0% blocks executed 0%
    #####:11488:Floating::WithinRelMatcher WithinRel(float target) {
    #####:11489:return Floating::WithinRelMatcher(target, std::numeric_limits<float>::epsilon() * 100);
    %%%%%:11489-block  0
call    0 never executed
call    1 never executed
        -:11490:}
        -:11491:
        -:11492:} // namespace Matchers
        -:11493:} // namespace Catch
        -:11494:
        -:11495:// end catch_matchers_floating.cpp
        -:11496:// start catch_matchers_generic.cpp
        -:11497:
function _ZN5Catch8Matchers7Generic6Detail19finalizeDescriptionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:11498:std::string Catch::Matchers::Generic::Detail::finalizeDescription(const std::string& desc) {
    #####:11499:if (desc.empty()) {
    %%%%%:11499-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11500:return "matches undescribed predicate";
    %%%%%:11500-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11500-block  1
call    4 never executed
    $$$$$:11500-block  2
call    5 never executed
    $$$$$:11500-block  3
call    6 never executed
        -:11501:} else {
    #####:11502:return "matches predicate: \"" + desc + '"';
    %%%%%:11502-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11502-block  1
    %%%%%:11502-block  2
call    4 never executed
    $$$$$:11502-block  3
call    5 never executed
        -:11503:}
        -:11504:}
        -:11505:// end catch_matchers_generic.cpp
        -:11506:// start catch_matchers_string.cpp
        -:11507:
        -:11508:#include <regex>
        -:11509:
        -:11510:namespace Catch {
        -:11511:namespace Matchers {
        -:11512:
        -:11513:namespace StdString {
        -:11514:
function _ZN5Catch8Matchers9StdString11CasedStringC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_13CaseSensitive6ChoiceE called 0 returned 0% blocks executed 0%
    #####:11515:CasedString::CasedString( std::string const& str, CaseSensitive::Choice caseSensitivity )
        -:11516::   m_caseSensitivity( caseSensitivity ),
    #####:11517:m_str( adjustString( str ) )
    %%%%%:11517-block  0
call    0 never executed
    #####:11518:{}
function _ZNK5Catch8Matchers9StdString11CasedString12adjustStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:11519:std::string CasedString::adjustString( std::string const& str ) const {
    #####:11520:return m_caseSensitivity == CaseSensitive::No
        -:11521:? toLower( str )
    #####:11522:: str;
    %%%%%:11522-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11522-block  1
call    2 never executed
    %%%%%:11522-block  2
call    3 never executed
    %%%%%:11522-block  3
        -:11523:}
function _ZNK5Catch8Matchers9StdString11CasedString21caseSensitivitySuffixB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:11524:std::string CasedString::caseSensitivitySuffix() const {
    #####:11525:return m_caseSensitivity == CaseSensitive::No
        -:11526:? " (case insensitive)"
    #####:11527:: std::string();
    %%%%%:11527-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11527-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11527-block  2
call    6 never executed
    %%%%%:11527-block  3
branch  7 never executed
branch  8 never executed
    %%%%%:11527-block  4
call    9 never executed
    %%%%%:11527-block  5
    %%%%%:11527-block  6
    $$$$$:11527-block  7
branch 10 never executed
branch 11 never executed
    $$$$$:11527-block  8
call   12 never executed
        -:11528:}
        -:11529:
function _ZN5Catch8Matchers9StdString17StringMatcherBaseC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS1_11CasedStringE called 0 returned 0% blocks executed 0%
    #####:11530:StringMatcherBase::StringMatcherBase( std::string const& operation, CasedString const& comparator )
        -:11531:: m_comparator( comparator ),
    #####:11532:m_operation( operation ) {
    %%%%%:11532-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11532-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:11532-block  2
call    7 never executed
    $$$$$:11532-block  3
call    8 never executed
    #####:11533:}
    %%%%%:11533-block  0
        -:11534:
function _ZNK5Catch8Matchers9StdString17StringMatcherBase8describeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:11535:std::string StringMatcherBase::describe() const {
    #####:11536:std::string description;
    %%%%%:11536-block  0
call    0 never executed
    #####:11537:description.reserve(5 + m_operation.size() + m_comparator.m_str.size() +
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:11538:m_comparator.caseSensitivitySuffix().size());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11538-block  0
call    3 never executed
    %%%%%:11538-block  1
call    4 never executed
    $$$$$:11538-block  2
call    5 never executed
    $$$$$:11538-block  3
    #####:11539:description += m_operation;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11540:description += ": \"";
    %%%%%:11540-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11541:description += m_comparator.m_str;
    %%%%%:11541-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11542:description += "\"";
    %%%%%:11542-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11543:description += m_comparator.caseSensitivitySuffix();
    %%%%%:11543-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11543-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11543-block  2
call    6 never executed
    $$$$$:11543-block  3
call    7 never executed
    $$$$$:11543-block  4
    #####:11544:return description;
    %%%%%:11544-block  0
        -:11545:}
        -:11546:
function _ZN5Catch8Matchers9StdString13EqualsMatcherC2ERKNS1_11CasedStringE called 0 returned 0% blocks executed 0%
    #####:11547:EqualsMatcher::EqualsMatcher( CasedString const& comparator ) : StringMatcherBase( "equals", comparator ) {}
    %%%%%:11547-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11547-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11547-block  2
call    7 never executed
call    8 never executed
    $$$$$:11547-block  3
call    9 never executed
    $$$$$:11547-block  4
    $$$$$:11547-block  5
call   10 never executed
        -:11548:
function _ZNK5Catch8Matchers9StdString13EqualsMatcher5matchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:11549:bool EqualsMatcher::match( std::string const& source ) const {
    #####:11550:return m_comparator.adjustString( source ) == m_comparator.m_str;
    %%%%%:11550-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:11551:}
        -:11552:
function _ZN5Catch8Matchers9StdString15ContainsMatcherC2ERKNS1_11CasedStringE called 0 returned 0% blocks executed 0%
    #####:11553:ContainsMatcher::ContainsMatcher( CasedString const& comparator ) : StringMatcherBase( "contains", comparator ) {}
    %%%%%:11553-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11553-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11553-block  2
call    7 never executed
call    8 never executed
    $$$$$:11553-block  3
call    9 never executed
    $$$$$:11553-block  4
    $$$$$:11553-block  5
call   10 never executed
        -:11554:
function _ZNK5Catch8Matchers9StdString15ContainsMatcher5matchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:11555:bool ContainsMatcher::match( std::string const& source ) const {
    #####:11556:return contains( m_comparator.adjustString( source ), m_comparator.m_str );
    %%%%%:11556-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:11557:}
        -:11558:
function _ZN5Catch8Matchers9StdString17StartsWithMatcherC2ERKNS1_11CasedStringE called 0 returned 0% blocks executed 0%
    #####:11559:StartsWithMatcher::StartsWithMatcher( CasedString const& comparator ) : StringMatcherBase( "starts with", comparator ) {}
    %%%%%:11559-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11559-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11559-block  2
call    7 never executed
call    8 never executed
    $$$$$:11559-block  3
call    9 never executed
    $$$$$:11559-block  4
    $$$$$:11559-block  5
call   10 never executed
        -:11560:
function _ZNK5Catch8Matchers9StdString17StartsWithMatcher5matchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:11561:bool StartsWithMatcher::match( std::string const& source ) const {
    #####:11562:return startsWith( m_comparator.adjustString( source ), m_comparator.m_str );
    %%%%%:11562-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11562-block  1
    %%%%%:11562-block  2
call    4 never executed
    %%%%%:11562-block  3
    $$$$$:11562-block  4
call    5 never executed
        -:11563:}
        -:11564:
function _ZN5Catch8Matchers9StdString15EndsWithMatcherC2ERKNS1_11CasedStringE called 0 returned 0% blocks executed 0%
    #####:11565:EndsWithMatcher::EndsWithMatcher( CasedString const& comparator ) : StringMatcherBase( "ends with", comparator ) {}
    %%%%%:11565-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11565-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11565-block  2
call    7 never executed
call    8 never executed
    $$$$$:11565-block  3
call    9 never executed
    $$$$$:11565-block  4
    $$$$$:11565-block  5
call   10 never executed
        -:11566:
function _ZNK5Catch8Matchers9StdString15EndsWithMatcher5matchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:11567:bool EndsWithMatcher::match( std::string const& source ) const {
    #####:11568:return endsWith( m_comparator.adjustString( source ), m_comparator.m_str );
    %%%%%:11568-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11568-block  1
    %%%%%:11568-block  2
call    4 never executed
    %%%%%:11568-block  3
    $$$$$:11568-block  4
call    5 never executed
        -:11569:}
        -:11570:
function _ZN5Catch8Matchers9StdString12RegexMatcherC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_13CaseSensitive6ChoiceE called 0 returned 0% blocks executed 0%
    #####:11571:RegexMatcher::RegexMatcher(std::string regex, CaseSensitive::Choice caseSensitivity): m_regex(std::move(regex)), m_caseSensitivity(caseSensitivity) {}
    %%%%%:11571-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:11572:
function _ZNK5Catch8Matchers9StdString12RegexMatcher5matchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:11573:bool RegexMatcher::match(std::string const& matchee) const {
    #####:11574:auto flags = std::regex::ECMAScript; // ECMAScript is the default syntax option anyway
    #####:11575:if (m_caseSensitivity == CaseSensitive::Choice::No) {
    %%%%%:11575-block  0
branch  0 never executed
branch  1 never executed
    #####:11576:flags |= std::regex::icase;
    %%%%%:11576-block  0
call    0 never executed
        -:11577:}
    #####:11578:auto reg = std::regex(m_regex, flags);
    %%%%%:11578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11578-block  1
call    3 never executed
    $$$$$:11578-block  2
call    4 never executed
    #####:11579:return std::regex_match(matchee, reg);
    %%%%%:11579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11579-block  1
    %%%%%:11579-block  2
        -:11580:}
        -:11581:
function _ZNK5Catch8Matchers9StdString12RegexMatcher8describeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:11582:std::string RegexMatcher::describe() const {
    #####:11583:return "matches " + ::Catch::Detail::stringify(m_regex) + ((m_caseSensitivity == CaseSensitive::Choice::Yes)? " case sensitively" : " case insensitively");
    %%%%%:11583-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11583-block  1
    %%%%%:11583-block  2
    %%%%%:11583-block  3
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11583-block  4
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:11583-block  5
    %%%%%:11583-block  6
call    9 never executed
call   10 never executed
    %%%%%:11583-block  7
    $$$$$:11583-block  8
call   11 never executed
    $$$$$:11583-block  9
    $$$$$:11583-block 10
call   12 never executed
        -:11584:}
        -:11585:
        -:11586:} // namespace StdString
        -:11587:
function _ZN5Catch8Matchers6EqualsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_13CaseSensitive6ChoiceE called 0 returned 0% blocks executed 0%
    #####:11588:StdString::EqualsMatcher Equals( std::string const& str, CaseSensitive::Choice caseSensitivity ) {
    #####:11589:return StdString::EqualsMatcher( StdString::CasedString( str, caseSensitivity) );
    %%%%%:11589-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11589-block  1
    %%%%%:11589-block  2
call    4 never executed
    %%%%%:11589-block  3
    $$$$$:11589-block  4
call    5 never executed
        -:11590:}
function _ZN5Catch8Matchers8ContainsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_13CaseSensitive6ChoiceE called 0 returned 0% blocks executed 0%
    #####:11591:StdString::ContainsMatcher Contains( std::string const& str, CaseSensitive::Choice caseSensitivity ) {
    #####:11592:return StdString::ContainsMatcher( StdString::CasedString( str, caseSensitivity) );
    %%%%%:11592-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11592-block  1
    %%%%%:11592-block  2
call    4 never executed
    %%%%%:11592-block  3
    $$$$$:11592-block  4
call    5 never executed
        -:11593:}
function _ZN5Catch8Matchers8EndsWithERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_13CaseSensitive6ChoiceE called 0 returned 0% blocks executed 0%
    #####:11594:StdString::EndsWithMatcher EndsWith( std::string const& str, CaseSensitive::Choice caseSensitivity ) {
    #####:11595:return StdString::EndsWithMatcher( StdString::CasedString( str, caseSensitivity) );
    %%%%%:11595-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11595-block  1
    %%%%%:11595-block  2
call    4 never executed
    %%%%%:11595-block  3
    $$$$$:11595-block  4
call    5 never executed
        -:11596:}
function _ZN5Catch8Matchers10StartsWithERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_13CaseSensitive6ChoiceE called 0 returned 0% blocks executed 0%
    #####:11597:StdString::StartsWithMatcher StartsWith( std::string const& str, CaseSensitive::Choice caseSensitivity ) {
    #####:11598:return StdString::StartsWithMatcher( StdString::CasedString( str, caseSensitivity) );
    %%%%%:11598-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11598-block  1
    %%%%%:11598-block  2
call    4 never executed
    %%%%%:11598-block  3
    $$$$$:11598-block  4
call    5 never executed
        -:11599:}
        -:11600:
function _ZN5Catch8Matchers7MatchesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_13CaseSensitive6ChoiceE called 0 returned 0% blocks executed 0%
    #####:11601:StdString::RegexMatcher Matches(std::string const& regex, CaseSensitive::Choice caseSensitivity) {
    #####:11602:return StdString::RegexMatcher(regex, caseSensitivity);
    %%%%%:11602-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:11603:}
        -:11604:
        -:11605:} // namespace Matchers
        -:11606:} // namespace Catch
        -:11607:// end catch_matchers_string.cpp
        -:11608:// start catch_message.cpp
        -:11609:
        -:11610:// start catch_uncaught_exceptions.h
        -:11611:
        -:11612:namespace Catch {
        -:11613:bool uncaught_exceptions();
        -:11614:} // end namespace Catch
        -:11615:
        -:11616:// end catch_uncaught_exceptions.h
        -:11617:#include <cassert>
        -:11618:#include <stack>
        -:11619:
        -:11620:namespace Catch {
        -:11621:
function _ZN5Catch11MessageInfoC2ERKNS_9StringRefERKNS_14SourceLineInfoENS_9ResultWas6OfTypeE called 0 returned 0% blocks executed 0%
    #####:11622:MessageInfo::MessageInfo(   StringRef const& _macroName,
        -:11623:SourceLineInfo const& _lineInfo,
    #####:11624:ResultWas::OfType _type )
        -:11625::   macroName( _macroName ),
        -:11626:lineInfo( _lineInfo ),
        -:11627:type( _type ),
    #####:11628:sequence( ++globalCount )
    %%%%%:11628-block  0
call    0 never executed
call    1 never executed
    #####:11629:{}
        -:11630:
function _ZNK5Catch11MessageInfoeqERKS0_ called 0 returned 0% blocks executed 0%
    #####:11631:bool MessageInfo::operator==( MessageInfo const& other ) const {
    #####:11632:return sequence == other.sequence;
    %%%%%:11632-block  0
        -:11633:}
        -:11634:
function _ZNK5Catch11MessageInfoltERKS0_ called 0 returned 0% blocks executed 0%
    #####:11635:bool MessageInfo::operator<( MessageInfo const& other ) const {
    #####:11636:return sequence < other.sequence;
    %%%%%:11636-block  0
        -:11637:}
        -:11638:
        -:11639:// This may need protecting if threading support is added
        -:11640:unsigned int MessageInfo::globalCount = 0;
        -:11641:
        -:11642:////////////////////////////////////////////////////////////////////////////
        -:11643:
function _ZN5Catch14MessageBuilderC2ERKNS_9StringRefERKNS_14SourceLineInfoENS_9ResultWas6OfTypeE called 0 returned 0% blocks executed 0%
    #####:11644:Catch::MessageBuilder::MessageBuilder( StringRef const& macroName,
        -:11645:SourceLineInfo const& lineInfo,
    #####:11646:ResultWas::OfType type )
    #####:11647::m_info(macroName, lineInfo, type) {}
    %%%%%:11647-block  0
call    0 never executed
call    1 never executed
        -:11648:
        -:11649:////////////////////////////////////////////////////////////////////////////
        -:11650:
function _ZN5Catch13ScopedMessageC2ERKNS_14MessageBuilderE called 0 returned 0% blocks executed 0%
    #####:11651:ScopedMessage::ScopedMessage( MessageBuilder const& builder )
    #####:11652:: m_info( builder.m_info ), m_moved()
    %%%%%:11652-block  0
call    0 never executed
    $$$$$:11652-block  1
call    1 never executed
        -:11653:{
    #####:11654:m_info.message = builder.m_stream.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11654-block  0
call    3 never executed
call    4 never executed
    #####:11655:getResultCapture().pushScopedMessage( m_info );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11655-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:11656:}
    %%%%%:11656-block  0
        -:11657:
function _ZN5Catch13ScopedMessageC2EOS0_ called 0 returned 0% blocks executed 0%
    #####:11658:ScopedMessage::ScopedMessage( ScopedMessage&& old )
    #####:11659:: m_info( old.m_info ), m_moved()
    %%%%%:11659-block  0
call    0 never executed
        -:11660:{
    #####:11661:old.m_moved = true;
    #####:11662:}
        -:11663:
function _ZN5Catch13ScopedMessageD2Ev called 0 returned 0% blocks executed 0%
    #####:11664:ScopedMessage::~ScopedMessage() {
    %%%%%:11664-block  0
call    0 never executed
    #####:11665:if ( !uncaught_exceptions() && !m_moved ){
    %%%%%:11665-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11665-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:11665-block  2
    %%%%%:11665-block  3
    %%%%%:11665-block  4
branch  5 never executed
branch  6 never executed
    #####:11666:getResultCapture().popScopedMessage(m_info);
    %%%%%:11666-block  0
call    0 never executed
call    1 never executed
        -:11667:}
    #####:11668:}
        -:11669:
function _ZN5Catch8CapturerC2ENS_9StringRefERKNS_14SourceLineInfoENS_9ResultWas6OfTypeES1_ called 0 returned 0% blocks executed 0%
    #####:11670:Capturer::Capturer( StringRef macroName, SourceLineInfo const& lineInfo, ResultWas::OfType resultType, StringRef names ) {
    %%%%%:11670-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:11670-block  1
call    4 never executed
        -:11671:auto trimmed = [&] (size_t start, size_t end) {
        -:11672:while (names[start] == ',' || isspace(names[start])) {
        -:11673:++start;
        -:11674:}
        -:11675:while (names[end] == ',' || isspace(names[end])) {
        -:11676:--end;
        -:11677:}
        -:11678:return names.substr(start, end - start + 1);
    #####:11679:};
        -:11680:auto skipq = [&] (size_t start, char quote) {
        -:11681:for (auto i = start + 1; i < names.size() ; ++i) {
        -:11682:if (names[i] == quote)
        -:11683:return i;
        -:11684:if (names[i] == '\\')
        -:11685:++i;
        -:11686:}
        -:11687:CATCH_INTERNAL_ERROR("CAPTURE parsing encountered unmatched quote");
    #####:11688:};
        -:11689:
    #####:11690:size_t start = 0;
    #####:11691:std::stack<char> openings;
    %%%%%:11691-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11691-block  1
call    3 never executed
    $$$$$:11691-block  2
call    4 never executed
    #####:11692:for (size_t pos = 0; pos < names.size(); ++pos) {
    %%%%%:11692-block  0
    %%%%%:11692-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11692-block  2
    #####:11693:char c = names[pos];
    %%%%%:11693-block  0
call    0 never executed
    #####:11694:switch (c) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:11695:case '[':
        -:11696:case '{':
        -:11697:case '(':
        -:11698:// It is basically impossible to disambiguate between
        -:11699:// comparison and start of template args in this context
        -:11700://            case '<':
    #####:11701:openings.push(c);
    %%%%%:11701-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11702:break;
    %%%%%:11702-block  0
    #####:11703:case ']':
        -:11704:case '}':
        -:11705:case ')':
        -:11706://           case '>':
    #####:11707:openings.pop();
    %%%%%:11707-block  0
call    0 never executed
    #####:11708:break;
    #####:11709:case '"':
        -:11710:case '\'':
    #####:11711:pos = skipq(pos, c);
    %%%%%:11711-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11712:break;
    %%%%%:11712-block  0
    #####:11713:case ',':
    #####:11714:if (start != pos && openings.size() == 0) {
    %%%%%:11714-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11714-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11714-block  2
    %%%%%:11714-block  3
    %%%%%:11714-block  4
branch  5 never executed
branch  6 never executed
    #####:11715:m_messages.emplace_back(macroName, lineInfo, resultType);
    %%%%%:11715-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11716:m_messages.back().message = static_cast<std::string>(trimmed(start, pos));
    %%%%%:11716-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11716-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    $$$$$:11716-block  2
call    8 never executed
    $$$$$:11716-block  3
    #####:11717:m_messages.back().message += " := ";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11718:start = pos;
    %%%%%:11718-block  0
        -:11719:}
        -:11720:}
        -:11721:}
    #####:11722:assert(openings.size() == 0 && "Mismatched openings");
    %%%%%:11722-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11722-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11722-block  2
    %%%%%:11722-block  3
    #####:11723:m_messages.emplace_back(macroName, lineInfo, resultType);
    %%%%%:11723-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11724:m_messages.back().message = static_cast<std::string>(trimmed(start, names.size() - 1));
    %%%%%:11724-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11724-block  1
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$:11724-block  2
call    9 never executed
    $$$$$:11724-block  3
    #####:11725:m_messages.back().message += " := ";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11726:}
function _ZN5Catch8CapturerD2Ev called 0 returned 0% blocks executed 0%
    #####:11727:Capturer::~Capturer() {
    %%%%%:11727-block  0
call    0 never executed
    #####:11728:if ( !uncaught_exceptions() ){
    %%%%%:11728-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11729:assert( m_captured == m_messages.size() );
    %%%%%:11729-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11729-block  1
call    3 never executed
    %%%%%:11729-block  2
    #####:11730:for( size_t i = 0; i < m_captured; ++i  )
    %%%%%:11730-block  0
    %%%%%:11730-block  1
branch  0 never executed
branch  1 never executed
    #####:11731:m_resultCapture.popScopedMessage( m_messages[i] );
    %%%%%:11731-block  0
call    0 never executed
call    1 never executed
        -:11732:}
    #####:11733:}
        -:11734:
function _ZN5Catch8Capturer12captureValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:11735:void Capturer::captureValue( size_t index, std::string const& value ) {
    #####:11736:assert( index < m_messages.size() );
    %%%%%:11736-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11736-block  1
call    3 never executed
    %%%%%:11736-block  2
    #####:11737:m_messages[index].message += value;
    %%%%%:11737-block  0
call    0 never executed
call    1 never executed
    #####:11738:m_resultCapture.pushScopedMessage( m_messages[index] );
call    0 never executed
call    1 never executed
    #####:11739:m_captured++;
    #####:11740:}
        -:11741:
        -:11742:} // end namespace Catch
        -:11743:// end catch_message.cpp
        -:11744:// start catch_output_redirect.cpp
        -:11745:
        -:11746:// start catch_output_redirect.h
        -:11747:#ifndef TWOBLUECUBES_CATCH_OUTPUT_REDIRECT_H
        -:11748:#define TWOBLUECUBES_CATCH_OUTPUT_REDIRECT_H
        -:11749:
        -:11750:#include <cstdio>
        -:11751:#include <iosfwd>
        -:11752:#include <string>
        -:11753:
        -:11754:namespace Catch {
        -:11755:
        -:11756:class RedirectedStream {
        -:11757:std::ostream& m_originalStream;
        -:11758:std::ostream& m_redirectionStream;
        -:11759:std::streambuf* m_prevBuf;
        -:11760:
        -:11761:public:
        -:11762:RedirectedStream( std::ostream& originalStream, std::ostream& redirectionStream );
        -:11763:~RedirectedStream();
        -:11764:};
        -:11765:
        -:11766:class RedirectedStdOut {
        -:11767:ReusableStringStream m_rss;
        -:11768:RedirectedStream m_cout;
        -:11769:public:
        -:11770:RedirectedStdOut();
        -:11771:auto str() const -> std::string;
        -:11772:};
        -:11773:
        -:11774:// StdErr has two constituent streams in C++, std::cerr and std::clog
        -:11775:// This means that we need to redirect 2 streams into 1 to keep proper
        -:11776:// order of writes
        -:11777:class RedirectedStdErr {
        -:11778:ReusableStringStream m_rss;
        -:11779:RedirectedStream m_cerr;
        -:11780:RedirectedStream m_clog;
        -:11781:public:
        -:11782:RedirectedStdErr();
        -:11783:auto str() const -> std::string;
        -:11784:};
        -:11785:
        -:11786:class RedirectedStreams {
        -:11787:public:
        -:11788:RedirectedStreams(RedirectedStreams const&) = delete;
        -:11789:RedirectedStreams& operator=(RedirectedStreams const&) = delete;
        -:11790:RedirectedStreams(RedirectedStreams&&) = delete;
        -:11791:RedirectedStreams& operator=(RedirectedStreams&&) = delete;
        -:11792:
        -:11793:RedirectedStreams(std::string& redirectedCout, std::string& redirectedCerr);
        -:11794:~RedirectedStreams();
        -:11795:private:
        -:11796:std::string& m_redirectedCout;
        -:11797:std::string& m_redirectedCerr;
        -:11798:RedirectedStdOut m_redirectedStdOut;
        -:11799:RedirectedStdErr m_redirectedStdErr;
        -:11800:};
        -:11801:
        -:11802:#if defined(CATCH_CONFIG_NEW_CAPTURE)
        -:11803:
        -:11804:// Windows's implementation of std::tmpfile is terrible (it tries
        -:11805:// to create a file inside system folder, thus requiring elevated
        -:11806:// privileges for the binary), so we have to use tmpnam(_s) and
        -:11807:// create the file ourselves there.
        -:11808:class TempFile {
        -:11809:public:
        -:11810:TempFile(TempFile const&) = delete;
        -:11811:TempFile& operator=(TempFile const&) = delete;
        -:11812:TempFile(TempFile&&) = delete;
        -:11813:TempFile& operator=(TempFile&&) = delete;
        -:11814:
        -:11815:TempFile();
        -:11816:~TempFile();
        -:11817:
        -:11818:std::FILE* getFile();
        -:11819:std::string getContents();
        -:11820:
        -:11821:private:
        -:11822:std::FILE* m_file = nullptr;
        -:11823:#if defined(_MSC_VER)
        -:11824:char m_buffer[L_tmpnam] = { 0 };
        -:11825:#endif
        -:11826:};
        -:11827:
        -:11828:class OutputRedirect {
        -:11829:public:
        -:11830:OutputRedirect(OutputRedirect const&) = delete;
        -:11831:OutputRedirect& operator=(OutputRedirect const&) = delete;
        -:11832:OutputRedirect(OutputRedirect&&) = delete;
        -:11833:OutputRedirect& operator=(OutputRedirect&&) = delete;
        -:11834:
        -:11835:OutputRedirect(std::string& stdout_dest, std::string& stderr_dest);
        -:11836:~OutputRedirect();
        -:11837:
        -:11838:private:
        -:11839:int m_originalStdout = -1;
        -:11840:int m_originalStderr = -1;
        -:11841:TempFile m_stdoutFile;
        -:11842:TempFile m_stderrFile;
        -:11843:std::string& m_stdoutDest;
        -:11844:std::string& m_stderrDest;
        -:11845:};
        -:11846:
        -:11847:#endif
        -:11848:
        -:11849:} // end namespace Catch
        -:11850:
        -:11851:#endif // TWOBLUECUBES_CATCH_OUTPUT_REDIRECT_H
        -:11852:// end catch_output_redirect.h
        -:11853:#include <cstdio>
        -:11854:#include <cstring>
        -:11855:#include <fstream>
        -:11856:#include <sstream>
        -:11857:#include <stdexcept>
        -:11858:
        -:11859:#if defined(CATCH_CONFIG_NEW_CAPTURE)
        -:11860:#if defined(_MSC_VER)
        -:11861:#include <io.h>      //_dup and _dup2
        -:11862:#define dup _dup
        -:11863:#define dup2 _dup2
        -:11864:#define fileno _fileno
        -:11865:#else
        -:11866:#include <unistd.h>  // dup and dup2
        -:11867:#endif
        -:11868:#endif
        -:11869:
        -:11870:namespace Catch {
        -:11871:
function _ZN5Catch16RedirectedStreamC2ERSoS1_ called 0 returned 0% blocks executed 0%
    #####:11872:RedirectedStream::RedirectedStream( std::ostream& originalStream, std::ostream& redirectionStream )
        -:11873::   m_originalStream( originalStream ),
        -:11874:m_redirectionStream( redirectionStream ),
    #####:11875:m_prevBuf( m_originalStream.rdbuf() )
    %%%%%:11875-block  0
call    0 never executed
        -:11876:{
    #####:11877:m_originalStream.rdbuf( m_redirectionStream.rdbuf() );
call    0 never executed
call    1 never executed
    #####:11878:}
        -:11879:
function _ZN5Catch16RedirectedStreamD2Ev called 0 returned 0% blocks executed 0%
    #####:11880:RedirectedStream::~RedirectedStream() {
    #####:11881:m_originalStream.rdbuf( m_prevBuf );
    %%%%%:11881-block  0
call    0 never executed
    #####:11882:}
        -:11883:
function _ZN5Catch16RedirectedStdOutC2Ev called 0 returned 0% blocks executed 0%
    #####:11884:RedirectedStdOut::RedirectedStdOut() : m_cout( Catch::cout(), m_rss.get() ) {}
    %%%%%:11884-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11884-block  1
    $$$$$:11884-block  2
call    6 never executed
function _ZNK5Catch16RedirectedStdOut3strB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:11885:auto RedirectedStdOut::str() const -> std::string { return m_rss.str(); }
    %%%%%:11885-block  0
call    0 never executed
        -:11886:
function _ZN5Catch16RedirectedStdErrC2Ev called 0 returned 0% blocks executed 0%
    #####:11887:RedirectedStdErr::RedirectedStdErr()
        -:11888::   m_cerr( Catch::cerr(), m_rss.get() ),
    #####:11889:m_clog( Catch::clog(), m_rss.get() )
    %%%%%:11889-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11889-block  1
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$:11889-block  2
call   11 never executed
    $$$$$:11889-block  3
call   12 never executed
    #####:11890:{}
    %%%%%:11890-block  0
function _ZNK5Catch16RedirectedStdErr3strB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:11891:auto RedirectedStdErr::str() const -> std::string { return m_rss.str(); }
    %%%%%:11891-block  0
call    0 never executed
        -:11892:
function _ZN5Catch17RedirectedStreamsC2ERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 0 returned 0% blocks executed 0%
    #####:11893:RedirectedStreams::RedirectedStreams(std::string& redirectedCout, std::string& redirectedCerr)
        -:11894::   m_redirectedCout(redirectedCout),
    #####:11895:m_redirectedCerr(redirectedCerr)
    %%%%%:11895-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:11895-block  1
call    4 never executed
    #####:11896:{}
    %%%%%:11896-block  0
        -:11897:
function _ZN5Catch17RedirectedStreamsD2Ev called 0 returned 0% blocks executed 0%
    #####:11898:RedirectedStreams::~RedirectedStreams() {
call    0 never executed
    #####:11899:m_redirectedCout += m_redirectedStdOut.str();
    %%%%%:11899-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:11900:m_redirectedCerr += m_redirectedStdErr.str();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:11901:}
        -:11902:
        -:11903:#if defined(CATCH_CONFIG_NEW_CAPTURE)
        -:11904:
        -:11905:#if defined(_MSC_VER)
        -:11906:TempFile::TempFile() {
        -:11907:if (tmpnam_s(m_buffer)) {
        -:11908:CATCH_RUNTIME_ERROR("Could not get a temp filename");
        -:11909:}
        -:11910:if (fopen_s(&m_file, m_buffer, "w")) {
        -:11911:char buffer[100];
        -:11912:if (strerror_s(buffer, errno)) {
        -:11913:CATCH_RUNTIME_ERROR("Could not translate errno to a string");
        -:11914:}
        -:11915:CATCH_RUNTIME_ERROR("Could not open the temp file: '" << m_buffer << "' because: " << buffer);
        -:11916:}
        -:11917:}
        -:11918:#else
        -:11919:TempFile::TempFile() {
        -:11920:m_file = std::tmpfile();
        -:11921:if (!m_file) {
        -:11922:CATCH_RUNTIME_ERROR("Could not create a temp file.");
        -:11923:}
        -:11924:}
        -:11925:
        -:11926:#endif
        -:11927:
        -:11928:TempFile::~TempFile() {
        -:11929:// TBD: What to do about errors here?
        -:11930:std::fclose(m_file);
        -:11931:// We manually create the file on Windows only, on Linux
        -:11932:// it will be autodeleted
        -:11933:#if defined(_MSC_VER)
        -:11934:std::remove(m_buffer);
        -:11935:#endif
        -:11936:}
        -:11937:
        -:11938:FILE* TempFile::getFile() {
        -:11939:return m_file;
        -:11940:}
        -:11941:
        -:11942:std::string TempFile::getContents() {
        -:11943:std::stringstream sstr;
        -:11944:char buffer[100] = {};
        -:11945:std::rewind(m_file);
        -:11946:while (std::fgets(buffer, sizeof(buffer), m_file)) {
        -:11947:sstr << buffer;
        -:11948:}
        -:11949:return sstr.str();
        -:11950:}
        -:11951:
        -:11952:OutputRedirect::OutputRedirect(std::string& stdout_dest, std::string& stderr_dest) :
        -:11953:m_originalStdout(dup(1)),
        -:11954:m_originalStderr(dup(2)),
        -:11955:m_stdoutDest(stdout_dest),
        -:11956:m_stderrDest(stderr_dest) {
        -:11957:dup2(fileno(m_stdoutFile.getFile()), 1);
        -:11958:dup2(fileno(m_stderrFile.getFile()), 2);
        -:11959:}
        -:11960:
        -:11961:OutputRedirect::~OutputRedirect() {
        -:11962:Catch::cout() << std::flush;
        -:11963:fflush(stdout);
        -:11964:// Since we support overriding these streams, we flush cerr
        -:11965:// even though std::cerr is unbuffered
        -:11966:Catch::cerr() << std::flush;
        -:11967:Catch::clog() << std::flush;
        -:11968:fflush(stderr);
        -:11969:
        -:11970:dup2(m_originalStdout, 1);
        -:11971:dup2(m_originalStderr, 2);
        -:11972:
        -:11973:m_stdoutDest += m_stdoutFile.getContents();
        -:11974:m_stderrDest += m_stderrFile.getContents();
        -:11975:}
        -:11976:
        -:11977:#endif // CATCH_CONFIG_NEW_CAPTURE
        -:11978:
        -:11979:} // namespace Catch
        -:11980:
        -:11981:#if defined(CATCH_CONFIG_NEW_CAPTURE)
        -:11982:#if defined(_MSC_VER)
        -:11983:#undef dup
        -:11984:#undef dup2
        -:11985:#undef fileno
        -:11986:#endif
        -:11987:#endif
        -:11988:// end catch_output_redirect.cpp
        -:11989:// start catch_polyfills.cpp
        -:11990:
        -:11991:#include <cmath>
        -:11992:
        -:11993:namespace Catch {
        -:11994:
        -:11995:#if !defined(CATCH_CONFIG_POLYFILL_ISNAN)
function _ZN5Catch5isnanEf called 0 returned 0% blocks executed 0%
    #####:11996:bool isnan(float f) {
    #####:11997:return std::isnan(f);
    %%%%%:11997-block  0
call    0 never executed
        -:11998:}
function _ZN5Catch5isnanEd called 0 returned 0% blocks executed 0%
    #####:11999:bool isnan(double d) {
    #####:12000:return std::isnan(d);
    %%%%%:12000-block  0
call    0 never executed
        -:12001:}
        -:12002:#else
        -:12003:// For now we only use this for embarcadero
        -:12004:bool isnan(float f) {
        -:12005:return std::_isnan(f);
        -:12006:}
        -:12007:bool isnan(double d) {
        -:12008:return std::_isnan(d);
        -:12009:}
        -:12010:#endif
        -:12011:
        -:12012:} // end namespace Catch
        -:12013:// end catch_polyfills.cpp
        -:12014:// start catch_random_number_generator.cpp
        -:12015:
        -:12016:namespace Catch {
        -:12017:
        -:12018:namespace {
        -:12019:
        -:12020:#if defined(_MSC_VER)
        -:12021:#pragma warning(push)
        -:12022:#pragma warning(disable:4146) // we negate uint32 during the rotate
        -:12023:#endif
        -:12024:// Safe rotr implementation thanks to John Regehr
function _ZN5Catch12_GLOBAL__N_112rotate_rightEjj called 0 returned 0% blocks executed 0%
    #####:12025:uint32_t rotate_right(uint32_t val, uint32_t count) {
    #####:12026:const uint32_t mask = 31;
    #####:12027:count &= mask;
    #####:12028:return (val >> count) | (val << (-count & mask));
    %%%%%:12028-block  0
        -:12029:}
        -:12030:
        -:12031:#if defined(_MSC_VER)
        -:12032:#pragma warning(pop)
        -:12033:#endif
        -:12034:
        -:12035:}
        -:12036:
function _ZN5Catch11SimplePcg32C2Ej called 0 returned 0% blocks executed 0%
    #####:12037:SimplePcg32::SimplePcg32(result_type seed_) {
    #####:12038:seed(seed_);
    %%%%%:12038-block  0
call    0 never executed
    #####:12039:}
        -:12040:
function _ZN5Catch11SimplePcg324seedEj called 0 returned 0% blocks executed 0%
    #####:12041:void SimplePcg32::seed(result_type seed_) {
    #####:12042:m_state = 0;
    #####:12043:(*this)();
    %%%%%:12043-block  0
call    0 never executed
    #####:12044:m_state += seed_;
    #####:12045:(*this)();
call    0 never executed
    #####:12046:}
        -:12047:
function _ZN5Catch11SimplePcg327discardEy called 0 returned 0% blocks executed 0%
    #####:12048:void SimplePcg32::discard(uint64_t skip) {
        -:12049:// We could implement this to run in O(log n) steps, but this
        -:12050:// should suffice for our use case.
    #####:12051:for (uint64_t s = 0; s < skip; ++s) {
    %%%%%:12051-block  0
    %%%%%:12051-block  1
branch  0 never executed
branch  1 never executed
    #####:12052:static_cast<void>((*this)());
    %%%%%:12052-block  0
call    0 never executed
        -:12053:}
    #####:12054:}
        -:12055:
function _ZN5Catch11SimplePcg32clEv called 0 returned 0% blocks executed 0%
    #####:12056:SimplePcg32::result_type SimplePcg32::operator()() {
        -:12057:// prepare the output value
    #####:12058:const uint32_t xorshifted = static_cast<uint32_t>(((m_state >> 18u) ^ m_state) >> 27u);
    #####:12059:const auto output = rotate_right(xorshifted, m_state >> 59u);
    %%%%%:12059-block  0
call    0 never executed
        -:12060:
        -:12061:// advance state
    #####:12062:m_state = m_state * 6364136223846793005ULL + s_inc;
        -:12063:
    #####:12064:return output;
        -:12065:}
        -:12066:
function _ZN5CatcheqERKNS_11SimplePcg32ES2_ called 0 returned 0% blocks executed 0%
    #####:12067:bool operator==(SimplePcg32 const& lhs, SimplePcg32 const& rhs) {
    #####:12068:return lhs.m_state == rhs.m_state;
    %%%%%:12068-block  0
        -:12069:}
        -:12070:
function _ZN5CatchneERKNS_11SimplePcg32ES2_ called 0 returned 0% blocks executed 0%
    #####:12071:bool operator!=(SimplePcg32 const& lhs, SimplePcg32 const& rhs) {
    #####:12072:return lhs.m_state != rhs.m_state;
    %%%%%:12072-block  0
        -:12073:}
        -:12074:}
        -:12075:// end catch_random_number_generator.cpp
        -:12076:// start catch_registry_hub.cpp
        -:12077:
        -:12078:// start catch_test_case_registry_impl.h
        -:12079:
        -:12080:#include <vector>
        -:12081:#include <set>
        -:12082:#include <algorithm>
        -:12083:#include <ios>
        -:12084:
        -:12085:namespace Catch {
        -:12086:
        -:12087:class TestCase;
        -:12088:struct IConfig;
        -:12089:
        -:12090:std::vector<TestCase> sortTests( IConfig const& config, std::vector<TestCase> const& unsortedTestCases );
        -:12091:
        -:12092:bool isThrowSafe( TestCase const& testCase, IConfig const& config );
        -:12093:bool matchTest( TestCase const& testCase, TestSpec const& testSpec, IConfig const& config );
        -:12094:
        -:12095:void enforceNoDuplicateTestCases( std::vector<TestCase> const& functions );
        -:12096:
        -:12097:std::vector<TestCase> filterTests( std::vector<TestCase> const& testCases, TestSpec const& testSpec, IConfig const& config );
        -:12098:std::vector<TestCase> const& getAllTestCasesSorted( IConfig const& config );
        -:12099:
        -:12100:class TestRegistry : public ITestCaseRegistry {
        -:12101:public:
       1*:12102:virtual ~TestRegistry() = default;
------------------
_ZN5Catch12TestRegistryD0Ev:
function _ZN5Catch12TestRegistryD0Ev called 0 returned 0% blocks executed 0%
    #####:12102:virtual ~TestRegistry() = default;
    %%%%%:12102-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch12TestRegistryD1Ev:
function _ZN5Catch12TestRegistryD1Ev called 1 returned 100% blocks executed 100%
        1:12102:virtual ~TestRegistry() = default;
        1:12102-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
------------------
        -:12103:
        -:12104:virtual void registerTest( TestCase const& testCase );
        -:12105:
        -:12106:std::vector<TestCase> const& getAllTests() const override;
        -:12107:std::vector<TestCase> const& getAllTestsSorted( IConfig const& config ) const override;
        -:12108:
        -:12109:private:
        -:12110:std::vector<TestCase> m_functions;
        -:12111:mutable RunTests::InWhatOrder m_currentSortOrder = RunTests::InDeclarationOrder;
        -:12112:mutable std::vector<TestCase> m_sortedFunctions;
        -:12113:std::size_t m_unnamedCount = 0;
        -:12114:std::ios_base::Init m_ostreamInit; // Forces cout/ cerr to be initialised
        -:12115:};
        -:12116:
        -:12117:///////////////////////////////////////////////////////////////////////////
        -:12118:
        -:12119:class TestInvokerAsFunction : public ITestInvoker {
        -:12120:void(*m_testAsFunction)();
        -:12121:public:
        -:12122:TestInvokerAsFunction( void(*testAsFunction)() ) noexcept;
        -:12123:
        -:12124:void invoke() const override;
        -:12125:};
        -:12126:
        -:12127:std::string extractClassName( StringRef const& classOrQualifiedMethodName );
        -:12128:
        -:12129:///////////////////////////////////////////////////////////////////////////
        -:12130:
        -:12131:} // end namespace Catch
        -:12132:
        -:12133:// end catch_test_case_registry_impl.h
        -:12134:// start catch_reporter_registry.h
        -:12135:
        -:12136:#include <map>
        -:12137:
        -:12138:namespace Catch {
        -:12139:
       1*:12140:class ReporterRegistry : public IReporterRegistry {
------------------
_ZN5Catch16ReporterRegistryD0Ev:
function _ZN5Catch16ReporterRegistryD0Ev called 0 returned 0% blocks executed 0%
    #####:12140:class ReporterRegistry : public IReporterRegistry {
    %%%%%:12140-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch16ReporterRegistryD2Ev:
function _ZN5Catch16ReporterRegistryD2Ev called 1 returned 100% blocks executed 100%
        1:12140:class ReporterRegistry : public IReporterRegistry {
        1:12140-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
------------------
        -:12141:
        -:12142:public:
        -:12143:
        -:12144:~ReporterRegistry() override;
        -:12145:
        -:12146:IStreamingReporterPtr create( std::string const& name, IConfigPtr const& config ) const override;
        -:12147:
        -:12148:void registerReporter( std::string const& name, IReporterFactoryPtr const& factory );
        -:12149:void registerListener( IReporterFactoryPtr const& factory );
        -:12150:
        -:12151:FactoryMap const& getFactories() const override;
        -:12152:Listeners const& getListeners() const override;
        -:12153:
        -:12154:private:
        -:12155:FactoryMap m_factories;
        -:12156:Listeners m_listeners;
        -:12157:};
        -:12158:}
        -:12159:
        -:12160:// end catch_reporter_registry.h
        -:12161:// start catch_tag_alias_registry.h
        -:12162:
        -:12163:// start catch_tag_alias.h
        -:12164:
        -:12165:#include <string>
        -:12166:
        -:12167:namespace Catch {
        -:12168:
        -:12169:struct TagAlias {
        -:12170:TagAlias(std::string const& _tag, SourceLineInfo _lineInfo);
        -:12171:
        -:12172:std::string tag;
        -:12173:SourceLineInfo lineInfo;
        -:12174:};
        -:12175:
        -:12176:} // end namespace Catch
        -:12177:
        -:12178:// end catch_tag_alias.h
        -:12179:#include <map>
        -:12180:
        -:12181:namespace Catch {
        -:12182:
        -:12183:class TagAliasRegistry : public ITagAliasRegistry {
        -:12184:public:
        -:12185:~TagAliasRegistry() override;
        -:12186:TagAlias const* find( std::string const& alias ) const override;
        -:12187:std::string expandAliases( std::string const& unexpandedTestSpec ) const override;
        -:12188:void add( std::string const& alias, std::string const& tag, SourceLineInfo const& lineInfo );
        -:12189:
        -:12190:private:
        -:12191:std::map<std::string, TagAlias> m_registry;
        -:12192:};
        -:12193:
        -:12194:} // end namespace Catch
        -:12195:
        -:12196:// end catch_tag_alias_registry.h
        -:12197:// start catch_startup_exception_registry.h
        -:12198:
        -:12199:#include <vector>
        -:12200:#include <exception>
        -:12201:
        -:12202:namespace Catch {
        -:12203:
        -:12204:class StartupExceptionRegistry {
        -:12205:public:
        -:12206:void add(std::exception_ptr const& exception) noexcept;
        -:12207:std::vector<std::exception_ptr> const& getExceptions() const noexcept;
        -:12208:private:
        -:12209:std::vector<std::exception_ptr> m_exceptions;
        -:12210:};
        -:12211:
        -:12212:} // end namespace Catch
        -:12213:
        -:12214:// end catch_startup_exception_registry.h
        -:12215:// start catch_singletons.hpp
        -:12216:
        -:12217:namespace Catch {
        -:12218:
        -:12219:struct ISingleton {
        -:12220:virtual ~ISingleton();
        -:12221:};
        -:12222:
        -:12223:void addSingleton( ISingleton* singleton );
        -:12224:void cleanupSingletons();
        -:12225:
        -:12226:template<typename SingletonImplT, typename InterfaceT = SingletonImplT, typename MutableInterfaceT = InterfaceT>
        -:12227:class Singleton : SingletonImplT, public ISingleton {
        -:12228:
      17*:12229:static auto getInternal() -> Singleton* {
        -:12230:static Singleton* s_instance = nullptr;
      17*:12231:if( !s_instance ) {
       1*:12232:s_instance = new Singleton;
       1*:12233:addSingleton( s_instance );
        -:12234:}
      17*:12235:return s_instance;
        -:12236:}
------------------
_ZN5Catch9SingletonINS_13StringStreamsES1_S1_E11getInternalEv:
function _ZN5Catch9SingletonINS_13StringStreamsES1_S1_E11getInternalEv called 0 returned 0% blocks executed 0%
    #####:12229:static auto getInternal() -> Singleton* {
        -:12230:static Singleton* s_instance = nullptr;
    #####:12231:if( !s_instance ) {
    %%%%%:12231-block  0
branch  0 never executed
branch  1 never executed
    #####:12232:s_instance = new Singleton;
    %%%%%:12232-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:12232-block  1
call    4 never executed
    #####:12233:addSingleton( s_instance );
    %%%%%:12233-block  0
call    0 never executed
        -:12234:}
    #####:12235:return s_instance;
    %%%%%:12235-block  0
    %%%%%:12235-block  1
        -:12236:}
------------------
_ZN5Catch9SingletonINS_12_GLOBAL__N_111RegistryHubENS_12IRegistryHubENS_19IMutableRegistryHubEE11getInternalEv:
function _ZN5Catch9SingletonINS_12_GLOBAL__N_111RegistryHubENS_12IRegistryHubENS_19IMutableRegistryHubEE11getInternalEv called 17 returned 100% blocks executed 82%
       17:12229:static auto getInternal() -> Singleton* {
        -:12230:static Singleton* s_instance = nullptr;
       17:12231:if( !s_instance ) {
       17:12231-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 16
        1:12232:s_instance = new Singleton;
        1:12232-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:12232-block  1
call    4 never executed
       1*:12233:addSingleton( s_instance );
        1:12233-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:12233-block  1
    %%%%%:12233-block  2
        1:12233-block  3
call    2 returned 1
        -:12234:}
       17:12235:return s_instance;
       17:12235-block  0
       17:12235-block  1
        -:12236:}
------------------
        -:12237:
        -:12238:public:
function _ZN5Catch9SingletonINS_12_GLOBAL__N_111RegistryHubENS_12IRegistryHubENS_19IMutableRegistryHubEE3getEv called 5 returned 100% blocks executed 100%
        5:12239:static auto get() -> InterfaceT const& {
        5:12240:return *getInternal();
        5:12240-block  0
call    0 returned 5
        -:12241:}
      12*:12242:static auto getMutable() -> MutableInterfaceT& {
      12*:12243:return *getInternal();
        -:12244:}
------------------
_ZN5Catch9SingletonINS_13StringStreamsES1_S1_E10getMutableEv:
function _ZN5Catch9SingletonINS_13StringStreamsES1_S1_E10getMutableEv called 0 returned 0% blocks executed 0%
    #####:12242:static auto getMutable() -> MutableInterfaceT& {
    #####:12243:return *getInternal();
    %%%%%:12243-block  0
call    0 never executed
        -:12244:}
------------------
_ZN5Catch9SingletonINS_12_GLOBAL__N_111RegistryHubENS_12IRegistryHubENS_19IMutableRegistryHubEE10getMutableEv:
function _ZN5Catch9SingletonINS_12_GLOBAL__N_111RegistryHubENS_12IRegistryHubENS_19IMutableRegistryHubEE10getMutableEv called 12 returned 100% blocks executed 100%
       12:12242:static auto getMutable() -> MutableInterfaceT& {
       12:12243:return *getInternal();
       12:12243-block  0
call    0 returned 12
        -:12244:}
------------------
        -:12245:};
        -:12246:
        -:12247:} // namespace Catch
        -:12248:
        -:12249:// end catch_singletons.hpp
        -:12250:namespace Catch {
        -:12251:
        -:12252:namespace {
        -:12253:
        -:12254:class RegistryHub : public IRegistryHub, public IMutableRegistryHub,
        -:12255:private NonCopyable {
        -:12256:
        -:12257:public: // IRegistryHub
function _ZN5Catch12_GLOBAL__N_111RegistryHubC2Ev called 1 returned 100% blocks executed 69%
        1:12258:RegistryHub() = default;
        1:12258-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:12258-block  1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
    $$$$$:12258-block  2
call   11 never executed
    $$$$$:12258-block  3
call   12 never executed
    $$$$$:12258-block  4
call   13 never executed
function _ZNK5Catch12_GLOBAL__N_111RegistryHub19getReporterRegistryEv called 2 returned 100% blocks executed 100%
        2:12259:IReporterRegistry const& getReporterRegistry() const override {
        2:12260:return m_reporterRegistry;
        2:12260-block  0
        -:12261:}
function _ZNK5Catch12_GLOBAL__N_111RegistryHub19getTestCaseRegistryEv called 1 returned 100% blocks executed 100%
        1:12262:ITestCaseRegistry const& getTestCaseRegistry() const override {
        1:12263:return m_testCaseRegistry;
        1:12263-block  0
        -:12264:}
function _ZNK5Catch12_GLOBAL__N_111RegistryHub30getExceptionTranslatorRegistryEv called 0 returned 0% blocks executed 0%
    #####:12265:IExceptionTranslatorRegistry const& getExceptionTranslatorRegistry() const override {
    #####:12266:return m_exceptionTranslatorRegistry;
    %%%%%:12266-block  0
        -:12267:}
function _ZNK5Catch12_GLOBAL__N_111RegistryHub19getTagAliasRegistryEv called 1 returned 100% blocks executed 100%
        1:12268:ITagAliasRegistry const& getTagAliasRegistry() const override {
        1:12269:return m_tagAliasRegistry;
        1:12269-block  0
        -:12270:}
function _ZNK5Catch12_GLOBAL__N_111RegistryHub27getStartupExceptionRegistryEv called 1 returned 100% blocks executed 100%
        1:12271:StartupExceptionRegistry const& getStartupExceptionRegistry() const override {
        1:12272:return m_exceptionRegistry;
        1:12272-block  0
        -:12273:}
        -:12274:
        -:12275:public: // IMutableRegistryHub
function _ZN5Catch12_GLOBAL__N_111RegistryHub16registerReporterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt10shared_ptrINS_16IReporterFactoryEE called 4 returned 100% blocks executed 100%
        4:12276:void registerReporter( std::string const& name, IReporterFactoryPtr const& factory ) override {
        4:12277:m_reporterRegistry.registerReporter( name, factory );
        4:12277-block  0
call    0 returned 4
        4:12278:}
function _ZN5Catch12_GLOBAL__N_111RegistryHub16registerListenerERKSt10shared_ptrINS_16IReporterFactoryEE called 0 returned 0% blocks executed 0%
    #####:12279:void registerListener( IReporterFactoryPtr const& factory ) override {
    #####:12280:m_reporterRegistry.registerListener( factory );
    %%%%%:12280-block  0
call    0 never executed
    #####:12281:}
function _ZN5Catch12_GLOBAL__N_111RegistryHub12registerTestERKNS_8TestCaseE called 8 returned 100% blocks executed 100%
        8:12282:void registerTest( TestCase const& testInfo ) override {
        8:12283:m_testCaseRegistry.registerTest( testInfo );
        8:12283-block  0
call    0 returned 8
        8:12284:}
function _ZN5Catch12_GLOBAL__N_111RegistryHub18registerTranslatorEPKNS_20IExceptionTranslatorE called 0 returned 0% blocks executed 0%
    #####:12285:void registerTranslator( const IExceptionTranslator* translator ) override {
    #####:12286:m_exceptionTranslatorRegistry.registerTranslator( translator );
    %%%%%:12286-block  0
call    0 never executed
    #####:12287:}
function _ZN5Catch12_GLOBAL__N_111RegistryHub16registerTagAliasERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_RKNS_14SourceLineInfoE called 0 returned 0% blocks executed 0%
    #####:12288:void registerTagAlias( std::string const& alias, std::string const& tag, SourceLineInfo const& lineInfo ) override {
    #####:12289:m_tagAliasRegistry.add( alias, tag, lineInfo );
    %%%%%:12289-block  0
call    0 never executed
    #####:12290:}
function _ZN5Catch12_GLOBAL__N_111RegistryHub24registerStartupExceptionEv called 0 returned 0% blocks executed 0%
    #####:12291:void registerStartupException() noexcept override {
    #####:12292:m_exceptionRegistry.add(std::current_exception());
    %%%%%:12292-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:12293:}
function _ZN5Catch12_GLOBAL__N_111RegistryHub28getMutableEnumValuesRegistryEv called 0 returned 0% blocks executed 0%
    #####:12294:IMutableEnumValuesRegistry& getMutableEnumValuesRegistry() override {
    #####:12295:return m_enumValuesRegistry;
    %%%%%:12295-block  0
        -:12296:}
        -:12297:
        -:12298:private:
        -:12299:TestRegistry m_testCaseRegistry;
        -:12300:ReporterRegistry m_reporterRegistry;
        -:12301:ExceptionTranslatorRegistry m_exceptionTranslatorRegistry;
        -:12302:TagAliasRegistry m_tagAliasRegistry;
        -:12303:StartupExceptionRegistry m_exceptionRegistry;
        -:12304:Detail::EnumValuesRegistry m_enumValuesRegistry;
        -:12305:};
        -:12306:}
        -:12307:
        -:12308:using RegistryHubSingleton = Singleton<RegistryHub, IRegistryHub, IMutableRegistryHub>;
        -:12309:
function _ZN5Catch14getRegistryHubEv called 5 returned 100% blocks executed 100%
        5:12310:IRegistryHub const& getRegistryHub() {
        5:12311:return RegistryHubSingleton::get();
        5:12311-block  0
call    0 returned 5
        -:12312:}
function _ZN5Catch21getMutableRegistryHubEv called 12 returned 100% blocks executed 100%
       12:12313:IMutableRegistryHub& getMutableRegistryHub() {
       12:12314:return RegistryHubSingleton::getMutable();
       12:12314-block  0
call    0 returned 12
        -:12315:}
function _ZN5Catch7cleanUpEv called 1 returned 100% blocks executed 100%
        1:12316:void cleanUp() {
        1:12317:cleanupSingletons();
        1:12317-block  0
call    0 returned 1
        1:12318:cleanUpContext();
call    0 returned 1
        1:12319:}
function _ZN5Catch24translateActiveExceptionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:12320:std::string translateActiveException() {
    #####:12321:return getRegistryHub().getExceptionTranslatorRegistry().translateActiveException();
    %%%%%:12321-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:12322:}
        -:12323:
        -:12324:} // end namespace Catch
        -:12325:// end catch_registry_hub.cpp
        -:12326:// start catch_reporter_registry.cpp
        -:12327:
        -:12328:namespace Catch {
        -:12329:
        -:12330:ReporterRegistry::~ReporterRegistry() = default;
        -:12331:
function _ZNK5Catch16ReporterRegistry6createERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt10shared_ptrIKNS_7IConfigEE called 1 returned 100% blocks executed 78%
        1:12332:IStreamingReporterPtr ReporterRegistry::create( std::string const& name, IConfigPtr const& config ) const {
        1:12333:auto it =  m_factories.find( name );
        1:12333-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:12334:if( it == m_factories.end() )
        1:12334-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:12335:return nullptr;
    %%%%%:12335-block  0
call    0 never executed
        1:12336:return it->second->create( ReporterConfig( config ) );
        1:12336-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:12336-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:12336-block  2
        1:12336-block  3
call    8 returned 1
    $$$$$:12336-block  4
call    9 never executed
    $$$$$:12336-block  5
        -:12337:}
        -:12338:
function _ZN5Catch16ReporterRegistry16registerReporterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt10shared_ptrINS_16IReporterFactoryEE called 4 returned 100% blocks executed 100%
        4:12339:void ReporterRegistry::registerReporter( std::string const& name, IReporterFactoryPtr const& factory ) {
        4:12340:m_factories.emplace(name, factory);
        4:12340-block  0
call    0 returned 4
        4:12341:}
function _ZN5Catch16ReporterRegistry16registerListenerERKSt10shared_ptrINS_16IReporterFactoryEE called 0 returned 0% blocks executed 0%
    #####:12342:void ReporterRegistry::registerListener( IReporterFactoryPtr const& factory ) {
    #####:12343:m_listeners.push_back( factory );
    %%%%%:12343-block  0
call    0 never executed
    #####:12344:}
        -:12345:
function _ZNK5Catch16ReporterRegistry12getFactoriesB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:12346:IReporterRegistry::FactoryMap const& ReporterRegistry::getFactories() const {
    #####:12347:return m_factories;
    %%%%%:12347-block  0
        -:12348:}
function _ZNK5Catch16ReporterRegistry12getListenersEv called 1 returned 100% blocks executed 100%
        1:12349:IReporterRegistry::Listeners const& ReporterRegistry::getListeners() const {
        1:12350:return m_listeners;
        1:12350-block  0
        -:12351:}
        -:12352:
        -:12353:}
        -:12354:// end catch_reporter_registry.cpp
        -:12355:// start catch_result_type.cpp
        -:12356:
        -:12357:namespace Catch {
        -:12358:
function _ZN5Catch4isOkENS_9ResultWas6OfTypeE called 0 returned 0% blocks executed 0%
    #####:12359:bool isOk( ResultWas::OfType resultType ) {
    #####:12360:return ( resultType & ResultWas::FailureBit ) == 0;
    %%%%%:12360-block  0
        -:12361:}
function _ZN5Catch10isJustInfoEi called 0 returned 0% blocks executed 0%
    #####:12362:bool isJustInfo( int flags ) {
    #####:12363:return flags == ResultWas::Info;
    %%%%%:12363-block  0
        -:12364:}
        -:12365:
function _ZN5CatchorENS_17ResultDisposition5FlagsES1_ called 0 returned 0% blocks executed 0%
    #####:12366:ResultDisposition::Flags operator | ( ResultDisposition::Flags lhs, ResultDisposition::Flags rhs ) {
    #####:12367:return static_cast<ResultDisposition::Flags>( static_cast<int>( lhs ) | static_cast<int>( rhs ) );
    %%%%%:12367-block  0
        -:12368:}
        -:12369:
function _ZN5Catch23shouldContinueOnFailureEi called 0 returned 0% blocks executed 0%
    #####:12370:bool shouldContinueOnFailure( int flags )    { return ( flags & ResultDisposition::ContinueOnFailure ) != 0; }
    %%%%%:12370-block  0
function _ZN5Catch21shouldSuppressFailureEi called 0 returned 0% blocks executed 0%
    #####:12371:bool shouldSuppressFailure( int flags )      { return ( flags & ResultDisposition::SuppressFail ) != 0; }
    %%%%%:12371-block  0
        -:12372:
        -:12373:} // end namespace Catch
        -:12374:// end catch_result_type.cpp
        -:12375:// start catch_run_context.cpp
        -:12376:
        -:12377:#include <cassert>
        -:12378:#include <algorithm>
        -:12379:#include <sstream>
        -:12380:
        -:12381:namespace Catch {
        -:12382:
        -:12383:namespace Generators {
        -:12384:struct GeneratorTracker : TestCaseTracking::TrackerBase, IGeneratorTracker {
        -:12385:GeneratorBasePtr m_generator;
        -:12386:
function _ZN5Catch10Generators16GeneratorTrackerC1ERKNS_16TestCaseTracking15NameAndLocationERNS2_14TrackerContextEPNS2_8ITrackerE called 0 returned 0% blocks executed 0%
    #####:12387:GeneratorTracker( TestCaseTracking::NameAndLocation const& nameAndLocation, TrackerContext& ctx, ITracker* parent )
    #####:12388::   TrackerBase( nameAndLocation, ctx, parent )
    %%%%%:12388-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:12389:{}
        -:12390:~GeneratorTracker();
        -:12391:
function _ZN5Catch10Generators16GeneratorTracker7acquireERNS_16TestCaseTracking14TrackerContextERKNS2_15NameAndLocationE called 0 returned 0% blocks executed 0%
    #####:12392:static GeneratorTracker& acquire( TrackerContext& ctx, TestCaseTracking::NameAndLocation const& nameAndLocation ) {
    #####:12393:std::shared_ptr<GeneratorTracker> tracker;
call    0 never executed
    $$$$$:12393-block  0
call    1 never executed
        -:12394:
    #####:12395:ITracker& currentTracker = ctx.currentTracker();
    %%%%%:12395-block  0
call    0 never executed
    #####:12396:if( TestCaseTracking::ITrackerPtr childTracker = currentTracker.findChild( nameAndLocation ) ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12396-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:12396-block  1
call    6 never executed
    $$$$$:12396-block  2
call    7 never executed
    #####:12397:assert( childTracker );
    %%%%%:12397-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12397-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:12397-block  2
    %%%%%:12397-block  3
    #####:12398:assert( childTracker->isGeneratorTracker() );
    %%%%%:12398-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:12398-block  1
branch  4 never executed
branch  5 never executed
    %%%%%:12398-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:12398-block  3
    %%%%%:12398-block  4
    #####:12399:tracker = std::static_pointer_cast<GeneratorTracker>( childTracker );
    %%%%%:12399-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:12400:}
        -:12401:else {
    #####:12402:tracker = std::make_shared<GeneratorTracker>( nameAndLocation, ctx, &currentTracker );
    %%%%%:12402-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12402-block  1
call    3 never executed
call    4 never executed
    $$$$$:12402-block  2
    #####:12403:currentTracker.addChild( tracker );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:12403-block  0
call    4 never executed
    $$$$$:12403-block  1
call    5 never executed
    $$$$$:12403-block  2
        -:12404:}
        -:12405:
    #####:12406:if( !ctx.completedCycle() && !tracker->isComplete() ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12406-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:12406-block  1
branch  7 never executed
branch  8 never executed
    %%%%%:12406-block  2
    %%%%%:12406-block  3
    %%%%%:12406-block  4
branch  9 never executed
branch 10 never executed
    #####:12407:tracker->open();
    %%%%%:12407-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:12408:}
        -:12409:
    #####:12410:return *tracker;
    %%%%%:12410-block  0
call    0 never executed
    %%%%%:12410-block  1
        -:12411:}
        -:12412:
        -:12413:// TrackerBase interface
function _ZNK5Catch10Generators16GeneratorTracker18isGeneratorTrackerEv called 0 returned 0% blocks executed 0%
    #####:12414:bool isGeneratorTracker() const override { return true; }
    %%%%%:12414-block  0
function _ZNK5Catch10Generators16GeneratorTracker12hasGeneratorEv called 0 returned 0% blocks executed 0%
    #####:12415:auto hasGenerator() const -> bool override {
    #####:12416:return !!m_generator;
    %%%%%:12416-block  0
call    0 never executed
        -:12417:}
function _ZN5Catch10Generators16GeneratorTracker5closeEv called 0 returned 0% blocks executed 0%
    #####:12418:void close() override {
    #####:12419:TrackerBase::close();
    %%%%%:12419-block  0
call    0 never executed
        -:12420:// Generator interface only finds out if it has another item on atual move
    #####:12421:if (m_runState == CompletedSuccessfully && m_generator->next()) {
branch  0 never executed
branch  1 never executed
    %%%%%:12421-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:12421-block  1
    %%%%%:12421-block  2
    %%%%%:12421-block  3
branch  6 never executed
branch  7 never executed
    #####:12422:m_children.clear();
    %%%%%:12422-block  0
call    0 never executed
    #####:12423:m_runState = Executing;
        -:12424:}
    #####:12425:}
        -:12426:
        -:12427:// IGeneratorTracker interface
function _ZNK5Catch10Generators16GeneratorTracker12getGeneratorEv called 0 returned 0% blocks executed 0%
    #####:12428:auto getGenerator() const -> GeneratorBasePtr const& override {
    #####:12429:return m_generator;
    %%%%%:12429-block  0
        -:12430:}
function _ZN5Catch10Generators16GeneratorTracker12setGeneratorEOSt10unique_ptrINS0_20GeneratorUntypedBaseESt14default_deleteIS3_EE called 0 returned 0% blocks executed 0%
    #####:12431:void setGenerator( GeneratorBasePtr&& generator ) override {
    #####:12432:m_generator = std::move( generator );
    %%%%%:12432-block  0
call    0 never executed
call    1 never executed
    #####:12433:}
        -:12434:};
    #####:12435:GeneratorTracker::~GeneratorTracker() {}
------------------
_ZN5Catch10Generators16GeneratorTrackerD0Ev:
function _ZN5Catch10Generators16GeneratorTrackerD0Ev called 0 returned 0% blocks executed 0%
    #####:12435:GeneratorTracker::~GeneratorTracker() {}
    %%%%%:12435-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch10Generators16GeneratorTrackerD2Ev:
function _ZN5Catch10Generators16GeneratorTrackerD2Ev called 0 returned 0% blocks executed 0%
    #####:12435:GeneratorTracker::~GeneratorTracker() {}
    %%%%%:12435-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
        -:12436:}
        -:12437:
function _ZN5Catch10RunContextC2ERKSt10shared_ptrIKNS_7IConfigEEOSt10unique_ptrINS_18IStreamingReporterESt14default_deleteIS8_EE called 1 returned 100% blocks executed 56%
        1:12438:RunContext::RunContext(IConfigPtr const& _config, IStreamingReporterPtr&& reporter)
        2:12439::   m_runInfo(_config->name()),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:12439-block  0
call    3 returned 1
    $$$$$:12439-block  1
call    4 never executed
    $$$$$:12439-block  2
        1:12440:m_context(getCurrentMutableContext()),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:12441:m_config(_config),
        1:12442:m_reporter(std::move(reporter)),
        -:12443:m_lastAssertionInfo{ StringRef(), SourceLineInfo("",0), StringRef(), ResultDisposition::Normal },
       3*:12444:m_includeSuccessfulResults( m_config->includeSuccessfulResults() || m_reporter->getPreferences().shouldReportAllAssertions )
        1:12444-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:12444-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:12444-block  2
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
branch 21 taken 1 (fallthrough)
branch 22 taken 0 (throw)
        1:12444-block  3
branch 23 taken 1 (fallthrough)
branch 24 taken 0
        1:12444-block  4
call   25 returned 1
call   26 returned 1
branch 27 taken 1 (fallthrough)
branch 28 taken 0 (throw)
        1:12444-block  5
branch 29 taken 0 (fallthrough)
branch 30 taken 1
    %%%%%:12444-block  6
        1:12444-block  7
    $$$$$:12444-block  8
call   31 never executed
    $$$$$:12444-block  9
call   32 never executed
    $$$$$:12444-block 10
call   33 never executed
    $$$$$:12444-block 11
call   34 never executed
    $$$$$:12444-block 12
call   35 never executed
    $$$$$:12444-block 13
call   36 never executed
    $$$$$:12444-block 14
call   37 never executed
    $$$$$:12444-block 15
call   38 never executed
    $$$$$:12444-block 16
call   39 never executed
    $$$$$:12444-block 17
call   40 never executed
    $$$$$:12444-block 18
call   41 never executed
    $$$$$:12444-block 19
call   42 never executed
        -:12445:{
        1:12446:m_context.setRunner(this);
        1:12446-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:12447:m_context.setConfig(m_config);
        1:12447-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:12448:m_context.setResultCapture(this);
        1:12448-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:12449:m_reporter->testRunStarting(m_runInfo);
        1:12449-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:12450:}
        1:12450-block  0
        -:12451:
       1*:12452:RunContext::~RunContext() {
        1:12453:m_reporter->testRunEnded(TestRunStats(m_runInfo, m_totals, aborting()));
       1*:12454:}
------------------
_ZN5Catch10RunContextD0Ev:
function _ZN5Catch10RunContextD0Ev called 0 returned 0% blocks executed 0%
    #####:12452:RunContext::~RunContext() {
        -:12453:m_reporter->testRunEnded(TestRunStats(m_runInfo, m_totals, aborting()));
    #####:12454:}
    %%%%%:12454-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch10RunContextD2Ev:
function _ZN5Catch10RunContextD2Ev called 1 returned 100% blocks executed 100%
        1:12452:RunContext::~RunContext() {
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
        1:12453:m_reporter->testRunEnded(TestRunStats(m_runInfo, m_totals, aborting()));
        1:12453-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
        1:12454:}
------------------
        -:12455:
function _ZN5Catch10RunContext17testGroupStartingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjj called 1 returned 100% blocks executed 75%
        1:12456:void RunContext::testGroupStarting(std::string const& testSpec, std::size_t groupIndex, std::size_t groupsCount) {
        1:12457:m_reporter->testGroupStarting(GroupInfo(testSpec, groupIndex, groupsCount));
        1:12457-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:12457-block  1
call    5 returned 1
    $$$$$:12457-block  2
call    6 never executed
        1:12458:}
        -:12459:
function _ZN5Catch10RunContext14testGroupEndedERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6TotalsEjj called 1 returned 100% blocks executed 64%
        1:12460:void RunContext::testGroupEnded(std::string const& testSpec, Totals const& totals, std::size_t groupIndex, std::size_t groupsCount) {
        1:12461:m_reporter->testGroupEnded(TestGroupStats(GroupInfo(testSpec, groupIndex, groupsCount), totals, aborting()));
        1:12461-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:12461-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:12461-block  2
call    9 returned 1
call   10 returned 1
    $$$$$:12461-block  3
call   11 never executed
    $$$$$:12461-block  4
    $$$$$:12461-block  5
call   12 never executed
        1:12462:}
        -:12463:
function _ZN5Catch10RunContext7runTestERKNS_8TestCaseE called 8 returned 100% blocks executed 66%
        8:12464:Totals RunContext::runTest(TestCase const& testCase) {
        8:12465:Totals prevTotals = m_totals;
        -:12466:
       16:12467:std::string redirectedCout;
        8:12467-block  0
call    0 returned 8
call    1 returned 8
    $$$$$:12467-block  1
call    2 never executed
       16:12468:std::string redirectedCerr;
call    0 returned 8
        8:12468-block  0
call    1 returned 8
    $$$$$:12468-block  1
call    2 never executed
        -:12469:
        8:12470:auto const& testInfo = testCase.getTestCaseInfo();
call    0 returned 8
        -:12471:
        8:12472:m_reporter->testCaseStarting(testInfo);
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        -:12473:
        8:12474:m_activeTestCase = &testCase;
        -:12475:
        8:12476:ITracker& rootTracker = m_trackerContext.startRun();
        8:12476-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
       8*:12477:assert(rootTracker.isSectionTracker());
        8:12477-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:12477-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 8
    %%%%%:12477-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        8:12477-block  3
    %%%%%:12477-block  4
        8:12478:static_cast<SectionTracker&>(rootTracker).addInitialFilters(m_config->getSectionsToRun());
        8:12478-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8:12478-block  1
call    4 returned 8
branch  5 taken 8 (fallthrough)
branch  6 taken 0 (throw)
    #####:12479:do {
    %%%%%:12479-block  0
        8:12480:m_trackerContext.startCycle();
        8:12480-block  0
call    0 returned 8
        8:12481:m_testCaseTracker = &SectionTracker::acquire(m_trackerContext, TestCaseTracking::NameAndLocation(testInfo.name, testInfo.lineInfo));
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:12481-block  0
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        8:12481-block  1
call    6 returned 8
    $$$$$:12481-block  2
call    7 never executed
    $$$$$:12481-block  3
        8:12482:runCurrentTest(redirectedCout, redirectedCerr);
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
       8*:12483:} while (!m_testCaseTracker->isSuccessfullyCompleted() && !aborting());
        8:12483-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:12483-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 8
    %%%%%:12483-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:12483-block  3
branch  8 never executed
branch  9 never executed
    %%%%%:12483-block  4
        8:12483-block  5
        8:12483-block  6
branch 10 taken 0 (fallthrough)
branch 11 taken 8
        -:12484:
        8:12485:Totals deltaTotals = m_totals.delta(prevTotals);
        8:12485-block  0
call    0 returned 8
       8*:12486:if (testInfo.expectedToFail() && deltaTotals.testCases.passed > 0) {
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
    %%%%%:12486-block  0
branch  3 never executed
branch  4 never executed
    %%%%%:12486-block  1
        8:12486-block  2
        8:12486-block  3
branch  5 taken 0 (fallthrough)
branch  6 taken 8
    #####:12487:deltaTotals.assertions.failed++;
    #####:12488:deltaTotals.testCases.passed--;
    #####:12489:deltaTotals.testCases.failed++;
    %%%%%:12489-block  0
        -:12490:}
        8:12491:m_totals.testCases += deltaTotals.testCases;
        8:12491-block  0
call    0 returned 8
       16:12492:m_reporter->testCaseEnded(TestCaseStats(testInfo,
call    0 returned 8
        8:12492-block  0
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8:12492-block  1
call    4 returned 8
    $$$$$:12492-block  2
call    5 never executed
    $$$$$:12492-block  3
        -:12493:deltaTotals,
        -:12494:redirectedCout,
        -:12495:redirectedCerr,
        8:12496:aborting()));
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:12496-block  0
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        -:12497:
        8:12498:m_activeTestCase = nullptr;
        8:12499:m_testCaseTracker = nullptr;
        -:12500:
       16:12501:return deltaTotals;
        8:12501-block  0
        -:12502:}
        -:12503:
function _ZNK5Catch10RunContext6configEv called 0 returned 0% blocks executed 0%
    #####:12504:IConfigPtr RunContext::config() const {
    #####:12505:return m_config;
    %%%%%:12505-block  0
call    0 never executed
        -:12506:}
        -:12507:
function _ZNK5Catch10RunContext8reporterEv called 0 returned 0% blocks executed 0%
    #####:12508:IStreamingReporter& RunContext::reporter() const {
    #####:12509:return *m_reporter;
    %%%%%:12509-block  0
call    0 never executed
        -:12510:}
        -:12511:
function _ZN5Catch10RunContext14assertionEndedERKNS_15AssertionResultE called 0 returned 0% blocks executed 0%
    #####:12512:void RunContext::assertionEnded(AssertionResult const & result) {
    #####:12513:if (result.getResultType() == ResultWas::Ok) {
    %%%%%:12513-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12514:m_totals.assertions.passed++;
    #####:12515:m_lastAssertionPassed = true;
    %%%%%:12515-block  0
    #####:12516:} else if (!result.isOk()) {
    %%%%%:12516-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12517:m_lastAssertionPassed = false;
    #####:12518:if( m_activeTestCase->getTestCaseInfo().okToFail() )
    %%%%%:12518-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:12519:m_totals.assertions.failedButOk++;
    %%%%%:12519-block  0
        -:12520:else
    #####:12521:m_totals.assertions.failed++;
    %%%%%:12521-block  0
        -:12522:}
        -:12523:else {
    #####:12524:m_lastAssertionPassed = true;
    %%%%%:12524-block  0
        -:12525:}
        -:12526:
        -:12527:// We have no use for the return value (whether messages should be cleared), because messages were made scoped
        -:12528:// and should be let to clear themselves out.
    #####:12529:static_cast<void>(m_reporter->assertionEnded(AssertionStats(result, m_messages, m_totals)));
    %%%%%:12529-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:12529-block  1
call    5 never executed
    $$$$$:12529-block  2
call    6 never executed
        -:12530:
    #####:12531:if (result.getResultType() != ResultWas::Warning)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12532:m_messageScopes.clear();
    %%%%%:12532-block  0
call    0 never executed
        -:12533:
        -:12534:// Reset working state
    #####:12535:resetAssertionInfo();
    %%%%%:12535-block  0
call    0 never executed
    #####:12536:m_lastResult = result;
call    0 never executed
    #####:12537:}
function _ZN5Catch10RunContext18resetAssertionInfoEv called 51 returned 100% blocks executed 100%
       51:12538:void RunContext::resetAssertionInfo() {
       51:12539:m_lastAssertionInfo.macroName = StringRef();
       51:12539-block  0
call    0 returned 51
call    1 returned 51
call    2 returned 51
       51:12540:m_lastAssertionInfo.capturedExpression = "{Unknown expression after the reported line}"_sr;
call    0 returned 51
call    1 returned 51
call    2 returned 51
       51:12541:}
        -:12542:
function _ZN5Catch10RunContext14sectionStartedERKNS_11SectionInfoERNS_6CountsE called 0 returned 0% blocks executed 0%
    #####:12543:bool RunContext::sectionStarted(SectionInfo const & sectionInfo, Counts & assertions) {
    #####:12544:ITracker& sectionTracker = SectionTracker::acquire(m_trackerContext, TestCaseTracking::NameAndLocation(sectionInfo.name, sectionInfo.lineInfo));
    %%%%%:12544-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:12544-block  1
call    4 never executed
    $$$$$:12544-block  2
call    5 never executed
    $$$$$:12544-block  3
call    6 never executed
    #####:12545:if (!sectionTracker.isOpen())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12546:return false;
    %%%%%:12546-block  0
    #####:12547:m_activeSections.push_back(&sectionTracker);
    %%%%%:12547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:12548:
    #####:12549:m_lastAssertionInfo.lineInfo = sectionInfo.lineInfo;
        -:12550:
    #####:12551:m_reporter->sectionStarting(sectionInfo);
    %%%%%:12551-block  0
call    0 never executed
call    1 never executed
        -:12552:
    #####:12553:assertions = m_totals.assertions;
        -:12554:
    #####:12555:return true;
        -:12556:}
function _ZN5Catch10RunContext23acquireGeneratorTrackerERKNS_14SourceLineInfoE called 0 returned 0% blocks executed 0%
    #####:12557:auto RunContext::acquireGeneratorTracker( SourceLineInfo const& lineInfo ) -> IGeneratorTracker& {
        -:12558:using namespace Generators;
    #####:12559:GeneratorTracker& tracker = GeneratorTracker::acquire( m_trackerContext, TestCaseTracking::NameAndLocation( "generator", lineInfo ) );
    %%%%%:12559-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:12559-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:12559-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:12559-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:12559-block  4
call   13 never executed
    $$$$$:12559-block  5
    $$$$$:12559-block  6
call   14 never executed
    $$$$$:12559-block  7
    $$$$$:12559-block  8
call   15 never executed
    #####:12560:assert( tracker.isOpen() );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12560-block  0
call    3 never executed
    %%%%%:12560-block  1
    #####:12561:m_lastAssertionInfo.lineInfo = lineInfo;
    #####:12562:return tracker;
    %%%%%:12562-block  0
    %%%%%:12562-block  1
        -:12563:}
        -:12564:
function _ZN5Catch10RunContext24testForMissingAssertionsERNS_6CountsE called 8 returned 100% blocks executed 31%
        8:12565:bool RunContext::testForMissingAssertions(Counts& assertions) {
        8:12566:if (assertions.total() != 0)
        8:12566-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0
        8:12567:return false;
        8:12567-block  0
    #####:12568:if (!m_config->warnAboutMissingAssertions())
    %%%%%:12568-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:12569:return false;
    %%%%%:12569-block  0
    #####:12570:if (m_trackerContext.currentTracker().hasChildren())
    %%%%%:12570-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:12571:return false;
    %%%%%:12571-block  0
    #####:12572:m_totals.assertions.failed++;
    #####:12573:assertions.failed++;
    #####:12574:return true;
    %%%%%:12574-block  0
        -:12575:}
        -:12576:
function _ZN5Catch10RunContext12sectionEndedERKNS_14SectionEndInfoE called 0 returned 0% blocks executed 0%
    #####:12577:void RunContext::sectionEnded(SectionEndInfo const & endInfo) {
    #####:12578:Counts assertions = m_totals.assertions - endInfo.prevAssertions;
    %%%%%:12578-block  0
call    0 never executed
    #####:12579:bool missingAssertions = testForMissingAssertions(assertions);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:12580:
    #####:12581:if (!m_activeSections.empty()) {
    %%%%%:12581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12582:m_activeSections.back()->close();
    %%%%%:12582-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:12583:m_activeSections.pop_back();
    %%%%%:12583-block  0
call    0 never executed
        -:12584:}
        -:12585:
    #####:12586:m_reporter->sectionEnded(SectionStats(endInfo.sectionInfo, assertions, endInfo.durationInSeconds, missingAssertions));
    %%%%%:12586-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:12586-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:12586-block  2
call    7 never executed
    $$$$$:12586-block  3
call    8 never executed
    $$$$$:12586-block  4
    #####:12587:m_messages.clear();
call    0 never executed
    #####:12588:m_messageScopes.clear();
call    0 never executed
    #####:12589:}
        -:12590:
function _ZN5Catch10RunContext17sectionEndedEarlyERKNS_14SectionEndInfoE called 0 returned 0% blocks executed 0%
    #####:12591:void RunContext::sectionEndedEarly(SectionEndInfo const & endInfo) {
    #####:12592:if (m_unfinishedSections.empty())
    %%%%%:12592-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12593:m_activeSections.back()->fail();
    %%%%%:12593-block  0
call    0 never executed
call    1 never executed
        -:12594:else
    #####:12595:m_activeSections.back()->close();
    %%%%%:12595-block  0
call    0 never executed
call    1 never executed
    #####:12596:m_activeSections.pop_back();
    %%%%%:12596-block  0
call    0 never executed
        -:12597:
    #####:12598:m_unfinishedSections.push_back(endInfo);
call    0 never executed
    #####:12599:}
        -:12600:
        -:12601:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -:12602:void RunContext::benchmarkPreparing(std::string const& name) {
        -:12603:m_reporter->benchmarkPreparing(name);
        -:12604:}
        -:12605:void RunContext::benchmarkStarting( BenchmarkInfo const& info ) {
        -:12606:m_reporter->benchmarkStarting( info );
        -:12607:}
        -:12608:void RunContext::benchmarkEnded( BenchmarkStats<> const& stats ) {
        -:12609:m_reporter->benchmarkEnded( stats );
        -:12610:}
        -:12611:void RunContext::benchmarkFailed(std::string const & error) {
        -:12612:m_reporter->benchmarkFailed(error);
        -:12613:}
        -:12614:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -:12615:
function _ZN5Catch10RunContext17pushScopedMessageERKNS_11MessageInfoE called 0 returned 0% blocks executed 0%
    #####:12616:void RunContext::pushScopedMessage(MessageInfo const & message) {
    #####:12617:m_messages.push_back(message);
    %%%%%:12617-block  0
call    0 never executed
    #####:12618:}
        -:12619:
function _ZN5Catch10RunContext16popScopedMessageERKNS_11MessageInfoE called 0 returned 0% blocks executed 0%
    #####:12620:void RunContext::popScopedMessage(MessageInfo const & message) {
    #####:12621:m_messages.erase(std::remove(m_messages.begin(), m_messages.end(), message), m_messages.end());
    %%%%%:12621-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:12621-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$:12621-block  2
    $$$$$:12621-block  3
    $$$$$:12621-block  4
    #####:12622:}
    %%%%%:12622-block  0
        -:12623:
function _ZN5Catch10RunContext22emplaceUnscopedMessageERKNS_14MessageBuilderE called 0 returned 0% blocks executed 0%
    #####:12624:void RunContext::emplaceUnscopedMessage( MessageBuilder const& builder ) {
    #####:12625:m_messageScopes.emplace_back( builder );
    %%%%%:12625-block  0
call    0 never executed
    #####:12626:}
        -:12627:
function _ZNK5Catch10RunContext18getCurrentTestNameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:12628:std::string RunContext::getCurrentTestName() const {
    #####:12629:return m_activeTestCase
    #####:12630:? m_activeTestCase->getTestCaseInfo().name
    %%%%%:12630-block  0
call    0 never executed
    #####:12631:: std::string();
    %%%%%:12631-block  0
branch  0 never executed
branch  1 never executed
call    2 never executed
    %%%%%:12631-block  1
call    3 never executed
    %%%%%:12631-block  2
        -:12632:}
        -:12633:
function _ZNK5Catch10RunContext13getLastResultEv called 0 returned 0% blocks executed 0%
    #####:12634:const AssertionResult * RunContext::getLastResult() const {
    #####:12635:return &(*m_lastResult);
    %%%%%:12635-block  0
call    0 never executed
        -:12636:}
        -:12637:
function _ZN5Catch10RunContext22exceptionEarlyReportedEv called 0 returned 0% blocks executed 0%
    #####:12638:void RunContext::exceptionEarlyReported() {
    #####:12639:m_shouldReportUnexpected = false;
    #####:12640:}
        -:12641:
function _ZN5Catch10RunContext25handleFatalErrorConditionENS_9StringRefE called 0 returned 0% blocks executed 0%
    #####:12642:void RunContext::handleFatalErrorCondition( StringRef message ) {
        -:12643:// First notify reporter that bad things happened
    #####:12644:m_reporter->fatalErrorEncountered(message);
    %%%%%:12644-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:12644-block  1
call    5 never executed
    $$$$$:12644-block  2
call    6 never executed
    $$$$$:12644-block  3
        -:12645:
        -:12646:// Don't rebuild the result -- the stringification itself can cause more fatal errors
        -:12647:// Instead, fake a result data.
    #####:12648:AssertionResultData tempResult( ResultWas::FatalErrorCondition, { false } );
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$:12648-block  0
call    3 never executed
    #####:12649:tempResult.message = static_cast<std::string>(message);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12649-block  0
call    3 never executed
call    4 never executed
    #####:12650:AssertionResult result(m_lastAssertionInfo, tempResult);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:12650-block  0
call    4 never executed
        -:12651:
    #####:12652:assertionEnded(result);
    %%%%%:12652-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:12653:
    #####:12654:handleUnfinishedSections();
    %%%%%:12654-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:12655:
        -:12656:// Recreate section for test case (as we will lose the one that was in scope)
    #####:12657:auto const& testCaseInfo = m_activeTestCase->getTestCaseInfo();
    %%%%%:12657-block  0
call    0 never executed
    #####:12658:SectionInfo testCaseSection(testCaseInfo.lineInfo, testCaseInfo.name);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:12658-block  0
call    4 never executed
        -:12659:
    #####:12660:Counts assertions;
    #####:12661:assertions.failed = 1;
    #####:12662:SectionStats testCaseSectionStats(testCaseSection, assertions, 0, false);
    %%%%%:12662-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:12662-block  1
call    3 never executed
    #####:12663:m_reporter->sectionEnded(testCaseSectionStats);
    %%%%%:12663-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:12664:
    #####:12665:auto const& testInfo = m_activeTestCase->getTestCaseInfo();
    %%%%%:12665-block  0
call    0 never executed
        -:12666:
    #####:12667:Totals deltaTotals;
    #####:12668:deltaTotals.testCases.failed = 1;
    #####:12669:deltaTotals.assertions.failed = 1;
    #####:12670:m_reporter->testCaseEnded(TestCaseStats(testInfo,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:12670-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:12670-block  1
call    7 never executed
    $$$$$:12670-block  2
call    8 never executed
    $$$$$:12670-block  3
        -:12671:deltaTotals,
    #####:12672:std::string(),
call    0 never executed
call    1 never executed
    $$$$$:12672-block  0
call    2 never executed
    $$$$$:12672-block  1
    #####:12673:std::string(),
call    0 never executed
    $$$$$:12673-block  0
call    1 never executed
    $$$$$:12673-block  1
    #####:12674:false));
call    0 never executed
    #####:12675:m_totals.testCases.failed++;
    #####:12676:testGroupEnded(std::string(), m_totals, 1, 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:12676-block  0
call    4 never executed
    $$$$$:12676-block  1
call    5 never executed
    $$$$$:12676-block  2
    #####:12677:m_reporter->testRunEnded(TestRunStats(m_runInfo, m_totals, false));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:12677-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:12677-block  1
call    7 never executed
call    8 never executed
    $$$$$:12677-block  2
call    9 never executed
    $$$$$:12677-block  3
    #####:12678:}
        -:12679:
function _ZN5Catch10RunContext19lastAssertionPassedEv called 0 returned 0% blocks executed 0%
    #####:12680:bool RunContext::lastAssertionPassed() {
    #####:12681:return m_lastAssertionPassed;
    %%%%%:12681-block  0
        -:12682:}
        -:12683:
function _ZN5Catch10RunContext15assertionPassedEv called 51 returned 100% blocks executed 100%
       51:12684:void RunContext::assertionPassed() {
       51:12685:m_lastAssertionPassed = true;
       51:12686:++m_totals.assertions.passed;
       51:12687:resetAssertionInfo();
       51:12687-block  0
call    0 returned 51
       51:12688:m_messageScopes.clear();
call    0 returned 51
       51:12689:}
        -:12690:
function _ZNK5Catch10RunContext8abortingEv called 18 returned 100% blocks executed 100%
       18:12691:bool RunContext::aborting() const {
       18:12692:return m_totals.assertions.failed >= static_cast<std::size_t>(m_config->abortAfter());
       18:12692-block  0
call    0 returned 18
call    1 returned 18
        -:12693:}
        -:12694:
function _ZN5Catch10RunContext14runCurrentTestERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 8 returned 100% blocks executed 52%
        8:12695:void RunContext::runCurrentTest(std::string & redirectedCout, std::string & redirectedCerr) {
        8:12696:auto const& testCaseInfo = m_activeTestCase->getTestCaseInfo();
        8:12696-block  0
call    0 returned 8
       16:12697:SectionInfo testCaseSection(testCaseInfo.lineInfo, testCaseInfo.name);
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 8
    $$$$$:12697-block  0
call    4 never executed
        8:12698:m_reporter->sectionStarting(testCaseSection);
        8:12698-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8:12699:Counts prevAssertions = m_totals.assertions;
        8:12700:double duration = 0;
        8:12701:m_shouldReportUnexpected = true;
        8:12702:m_lastAssertionInfo = { "TEST_CASE"_sr, testCaseInfo.lineInfo, StringRef(), ResultDisposition::Normal };
        8:12702-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
call    3 returned 8
        -:12703:
        8:12704:seedRng(*m_config);
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        -:12705:
        8:12706:Timer timer;
        -:12707:CATCH_TRY {
        8:12708:if (m_reporter->getPreferences().shouldRedirectStdOut) {
        8:12708-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8:12708-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 8
        -:12709:#if !defined(CATCH_CONFIG_EXPERIMENTAL_REDIRECT)
    #####:12710:RedirectedStreams redirectedStreams(redirectedCout, redirectedCerr);
    %%%%%:12710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12710-block  1
call    3 never executed
    $$$$$:12710-block  2
call    4 never executed
        -:12711:
    #####:12712:timer.start();
    %%%%%:12712-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12713:invokeActiveTestCase();
    %%%%%:12713-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:12714:#else
        -:12715:OutputRedirect r(redirectedCout, redirectedCerr);
        -:12716:timer.start();
        -:12717:invokeActiveTestCase();
        -:12718:#endif
        -:12719:} else {
        8:12720:timer.start();
        8:12720-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:12721:invokeActiveTestCase();
        8:12721-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        -:12722:}
        8:12723:duration = timer.getElapsedSeconds();
        8:12723-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:12723-block  1
    =====:12724:} CATCH_CATCH_ANON (TestFailureException&) {
    $$$$$:12724-block  0
call    0 never executed
call    1 never executed
        -:12725:// This just means the test was aborted due to failure
    =====:12726:} CATCH_CATCH_ALL {
    $$$$$:12726-block  0
call    0 never executed
    $$$$$:12726-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:12726-block  2
call    4 never executed
        -:12727:// Under CATCH_CONFIG_FAST_COMPILE, unexpected exceptions under REQUIRE assertions
        -:12728:// are reported without translation at the point of origin.
    =====:12729:if( m_shouldReportUnexpected ) {
branch  0 never executed
branch  1 never executed
    =====:12730:AssertionReaction dummyReaction;
    =====:12731:handleUnexpectedInflightException( m_lastAssertionInfo, translateActiveException(), dummyReaction );
    $$$$$:12731-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:12731-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:12731-block  2
call    6 never executed
    $$$$$:12731-block  3
call    7 never executed
    $$$$$:12731-block  4
        -:12732:}
        -:12733:}
        8:12734:Counts assertions = m_totals.assertions - prevAssertions;
        8:12734-block  0
call    0 returned 8
        8:12735:bool missingAssertions = testForMissingAssertions(assertions);
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        -:12736:
        8:12737:m_testCaseTracker->close();
        8:12737-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:12738:handleUnfinishedSections();
        8:12738-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:12739:m_messages.clear();
        8:12739-block  0
call    0 returned 8
        8:12740:m_messageScopes.clear();
call    0 returned 8
        -:12741:
       16:12742:SectionStats testCaseSectionStats(testCaseSection, assertions, duration, missingAssertions);
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:12742-block  0
call    3 returned 8
    $$$$$:12742-block  1
call    4 never executed
        8:12743:m_reporter->sectionEnded(testCaseSectionStats);
        8:12743-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8:12744:}
        -:12745:
function _ZN5Catch10RunContext20invokeActiveTestCaseEv called 8 returned 100% blocks executed 100%
        8:12746:void RunContext::invokeActiveTestCase() {
        -:12747:FatalConditionHandler fatalConditionHandler; // Handle signals
        8:12748:m_activeTestCase->invoke();
        8:12748-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:12749:fatalConditionHandler.reset();
        8:12749-block  0
call    0 returned 8
        8:12750:}
        -:12751:
function _ZN5Catch10RunContext24handleUnfinishedSectionsEv called 8 returned 100% blocks executed 64%
        8:12752:void RunContext::handleUnfinishedSections() {
        -:12753:// If sections ended prematurely due to an exception we stored their
        -:12754:// infos here so we can tear them down outside the unwind process.
       8*:12755:for (auto it = m_unfinishedSections.rbegin(),
        8:12755-block  0
call    0 returned 8
        8:12756:itEnd = m_unfinishedSections.rend();
call    0 returned 8
        8:12757:it != itEnd;
        8:12757-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:12757-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 8
    #####:12758:++it)
    %%%%%:12758-block  0
call    0 never executed
    #####:12759:sectionEnded(*it);
    %%%%%:12759-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        8:12760:m_unfinishedSections.clear();
        8:12760-block  0
call    0 returned 8
        8:12761:}
        -:12762:
function _ZN5Catch10RunContext10handleExprERKNS_13AssertionInfoERKNS_20ITransientExpressionERNS_17AssertionReactionE called 51 returned 100% blocks executed 75%
       51:12763:void RunContext::handleExpr(
        -:12764:AssertionInfo const& info,
        -:12765:ITransientExpression const& expr,
        -:12766:AssertionReaction& reaction
        -:12767:) {
       51:12768:m_reporter->assertionStarting( info );
       51:12768-block  0
call    0 returned 51
call    1 returned 51
        -:12769:
       51:12770:bool negated = isFalseTest( info.resultDisposition );
call    0 returned 51
       51:12771:bool result = expr.getResult() != negated;
call    0 returned 51
        -:12772:
       51:12773:if( result ) {
branch  0 taken 51 (fallthrough)
branch  1 taken 0
       51:12774:if (!m_includeSuccessfulResults) {
       51:12774-block  0
branch  0 taken 51 (fallthrough)
branch  1 taken 0
       51:12775:assertionPassed();
       51:12775-block  0
call    0 returned 51
        -:12776:}
        -:12777:else {
    #####:12778:reportExpr(info, ResultWas::Ok, &expr, negated);
    %%%%%:12778-block  0
call    0 never executed
        -:12779:}
        -:12780:}
        -:12781:else {
    #####:12782:reportExpr(info, ResultWas::ExpressionFailed, &expr, negated );
    %%%%%:12782-block  0
call    0 never executed
    #####:12783:populateReaction( reaction );
call    0 never executed
        -:12784:}
       51:12785:}
function _ZN5Catch10RunContext10reportExprERKNS_13AssertionInfoENS_9ResultWas6OfTypeEPKNS_20ITransientExpressionEb called 0 returned 0% blocks executed 0%
    #####:12786:void RunContext::reportExpr(
        -:12787:AssertionInfo const &info,
        -:12788:ResultWas::OfType resultType,
        -:12789:ITransientExpression const *expr,
        -:12790:bool negated ) {
        -:12791:
    #####:12792:m_lastAssertionInfo = info;
    %%%%%:12792-block  0
call    0 never executed
    #####:12793:AssertionResultData data( resultType, LazyExpression( negated ) );
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$:12793-block  0
call    3 never executed
        -:12794:
    #####:12795:AssertionResult assertionResult{ info, data };
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12795-block  0
call    3 never executed
    $$$$$:12795-block  1
call    4 never executed
    #####:12796:assertionResult.m_resultData.lazyExpression.m_transientExpression = expr;
        -:12797:
    #####:12798:assertionEnded( assertionResult );
    %%%%%:12798-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12799:}
        -:12800:
function _ZN5Catch10RunContext13handleMessageERKNS_13AssertionInfoENS_9ResultWas6OfTypeERKNS_9StringRefERNS_17AssertionReactionE called 0 returned 0% blocks executed 0%
    #####:12801:void RunContext::handleMessage(
        -:12802:AssertionInfo const& info,
        -:12803:ResultWas::OfType resultType,
        -:12804:StringRef const& message,
        -:12805:AssertionReaction& reaction
        -:12806:) {
    #####:12807:m_reporter->assertionStarting( info );
    %%%%%:12807-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:12808:
    #####:12809:m_lastAssertionInfo = info;
    %%%%%:12809-block  0
call    0 never executed
        -:12810:
    #####:12811:AssertionResultData data( resultType, LazyExpression( false ) );
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$:12811-block  0
call    3 never executed
    #####:12812:data.message = static_cast<std::string>(message);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12812-block  0
call    3 never executed
call    4 never executed
    #####:12813:AssertionResult assertionResult{ m_lastAssertionInfo, data };
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12813-block  0
call    3 never executed
    $$$$$:12813-block  1
call    4 never executed
    #####:12814:assertionEnded( assertionResult );
    %%%%%:12814-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12815:if( !assertionResult.isOk() )
    %%%%%:12815-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12815-block  1
branch  3 never executed
branch  4 never executed
    #####:12816:populateReaction( reaction );
    %%%%%:12816-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12817:}
function _ZN5Catch10RunContext34handleUnexpectedExceptionNotThrownERKNS_13AssertionInfoERNS_17AssertionReactionE called 0 returned 0% blocks executed 0%
    #####:12818:void RunContext::handleUnexpectedExceptionNotThrown(
        -:12819:AssertionInfo const& info,
        -:12820:AssertionReaction& reaction
        -:12821:) {
    #####:12822:handleNonExpr(info, Catch::ResultWas::DidntThrowException, reaction);
    %%%%%:12822-block  0
call    0 never executed
    #####:12823:}
        -:12824:
function _ZN5Catch10RunContext33handleUnexpectedInflightExceptionERKNS_13AssertionInfoERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_17AssertionReactionE called 0 returned 0% blocks executed 0%
    #####:12825:void RunContext::handleUnexpectedInflightException(
        -:12826:AssertionInfo const& info,
        -:12827:std::string const& message,
        -:12828:AssertionReaction& reaction
        -:12829:) {
    #####:12830:m_lastAssertionInfo = info;
    %%%%%:12830-block  0
call    0 never executed
        -:12831:
    #####:12832:AssertionResultData data( ResultWas::ThrewException, LazyExpression( false ) );
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$:12832-block  0
call    3 never executed
    #####:12833:data.message = message;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12834:AssertionResult assertionResult{ info, data };
    %%%%%:12834-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12834-block  1
call    3 never executed
    $$$$$:12834-block  2
call    4 never executed
    #####:12835:assertionEnded( assertionResult );
    %%%%%:12835-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12836:populateReaction( reaction );
    %%%%%:12836-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12837:}
        -:12838:
function _ZN5Catch10RunContext16populateReactionERNS_17AssertionReactionE called 0 returned 0% blocks executed 0%
    #####:12839:void RunContext::populateReaction( AssertionReaction& reaction ) {
    #####:12840:reaction.shouldDebugBreak = m_config->shouldDebugBreak();
    %%%%%:12840-block  0
call    0 never executed
call    1 never executed
    #####:12841:reaction.shouldThrow = aborting() || (m_lastAssertionInfo.resultDisposition & ResultDisposition::Normal);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12841-block  0
branch  3 never executed
branch  4 never executed
    %%%%%:12841-block  1
    %%%%%:12841-block  2
    #####:12842:}
        -:12843:
function _ZN5Catch10RunContext16handleIncompleteERKNS_13AssertionInfoE called 0 returned 0% blocks executed 0%
    #####:12844:void RunContext::handleIncomplete(
        -:12845:AssertionInfo const& info
        -:12846:) {
    #####:12847:m_lastAssertionInfo = info;
    %%%%%:12847-block  0
call    0 never executed
        -:12848:
    #####:12849:AssertionResultData data( ResultWas::ThrewException, LazyExpression( false ) );
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$:12849-block  0
call    3 never executed
    #####:12850:data.message = "Exception translation was disabled by CATCH_CONFIG_FAST_COMPILE";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12851:AssertionResult assertionResult{ info, data };
    %%%%%:12851-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12851-block  1
call    3 never executed
    $$$$$:12851-block  2
call    4 never executed
    #####:12852:assertionEnded( assertionResult );
    %%%%%:12852-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12853:}
function _ZN5Catch10RunContext13handleNonExprERKNS_13AssertionInfoENS_9ResultWas6OfTypeERNS_17AssertionReactionE called 0 returned 0% blocks executed 0%
    #####:12854:void RunContext::handleNonExpr(
        -:12855:AssertionInfo const &info,
        -:12856:ResultWas::OfType resultType,
        -:12857:AssertionReaction &reaction
        -:12858:) {
    #####:12859:m_lastAssertionInfo = info;
    %%%%%:12859-block  0
call    0 never executed
        -:12860:
    #####:12861:AssertionResultData data( resultType, LazyExpression( false ) );
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$:12861-block  0
call    3 never executed
    #####:12862:AssertionResult assertionResult{ info, data };
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12862-block  0
call    3 never executed
    $$$$$:12862-block  1
call    4 never executed
    #####:12863:assertionEnded( assertionResult );
    %%%%%:12863-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:12864:
    #####:12865:if( !assertionResult.isOk() )
    %%%%%:12865-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:12865-block  1
branch  3 never executed
branch  4 never executed
    #####:12866:populateReaction( reaction );
    %%%%%:12866-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12867:}
        -:12868:
function _ZN5Catch16getResultCaptureEv called 51 returned 100% blocks executed 32%
       51:12869:IResultCapture& getResultCapture() {
       51:12870:if (auto* capture = getCurrentContext().getResultCapture())
       51:12870-block  0
call    0 returned 51
call    1 returned 51
branch  2 taken 51 (fallthrough)
branch  3 taken 0
       51:12871:return *capture;
       51:12871-block  0
       51:12871-block  1
        -:12872:else
    #####:12873:CATCH_INTERNAL_ERROR("No result capture instance");
    %%%%%:12873-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:12873-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:12873-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:12873-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:12873-block  4
call   14 never executed
    $$$$$:12873-block  5
call   15 never executed
    $$$$$:12873-block  6
    $$$$$:12873-block  7
    $$$$$:12873-block  8
call   16 never executed
        -:12874:}
        -:12875:
function _ZN5Catch7seedRngERKNS_7IConfigE called 9 returned 100% blocks executed 38%
        9:12876:void seedRng(IConfig const& config) {
        9:12877:if (config.rngSeed() != 0) {
        9:12877-block  0
call    0 returned 9
branch  1 taken 0 (fallthrough)
branch  2 taken 9
    #####:12878:std::srand(config.rngSeed());
    %%%%%:12878-block  0
call    0 never executed
call    1 never executed
    #####:12879:rng().seed(config.rngSeed());
call    0 never executed
call    1 never executed
call    2 never executed
        -:12880:}
        9:12881:}
        -:12882:
function _ZN5Catch7rngSeedEv called 0 returned 0% blocks executed 0%
    #####:12883:unsigned int rngSeed() {
    #####:12884:return getCurrentContext().getConfig()->rngSeed();
    %%%%%:12884-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:12885:}
        -:12886:
        -:12887:}
        -:12888:// end catch_run_context.cpp
        -:12889:// start catch_section.cpp
        -:12890:
        -:12891:namespace Catch {
        -:12892:
function _ZN5Catch7SectionC2ERKNS_11SectionInfoE called 0 returned 0% blocks executed 0%
    #####:12893:Section::Section( SectionInfo const& info )
        -:12894::   m_info( info ),
    #####:12895:m_sectionIncluded( getResultCapture().sectionStarted( m_info, m_assertions ) )
    %%%%%:12895-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:12895-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:12895-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:12895-block  3
call   12 never executed
    $$$$$:12895-block  4
call   13 never executed
    $$$$$:12895-block  5
call   14 never executed
    $$$$$:12895-block  6
call   15 never executed
        -:12896:{
    #####:12897:m_timer.start();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12898:}
    %%%%%:12898-block  0
        -:12899:
    #####:12900:Section::~Section() {
    #####:12901:if( m_sectionIncluded ) {
    #####:12902:SectionEndInfo endInfo{ m_info, m_assertions, m_timer.getElapsedSeconds() };
    #####:12903:if( uncaught_exceptions() )
    #####:12904:getResultCapture().sectionEndedEarly( endInfo );
        -:12905:else
    #####:12906:getResultCapture().sectionEnded( endInfo );
        -:12907:}
    #####:12908:}
------------------
_ZN5Catch7SectionD0Ev:
function _ZN5Catch7SectionD0Ev called 0 returned 0% blocks executed 0%
    #####:12900:Section::~Section() {
        -:12901:if( m_sectionIncluded ) {
        -:12902:SectionEndInfo endInfo{ m_info, m_assertions, m_timer.getElapsedSeconds() };
        -:12903:if( uncaught_exceptions() )
        -:12904:getResultCapture().sectionEndedEarly( endInfo );
        -:12905:else
        -:12906:getResultCapture().sectionEnded( endInfo );
        -:12907:}
    #####:12908:}
    %%%%%:12908-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch7SectionD2Ev:
function _ZN5Catch7SectionD2Ev called 0 returned 0% blocks executed 0%
    #####:12900:Section::~Section() {
    %%%%%:12900-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:12901:if( m_sectionIncluded ) {
    %%%%%:12901-block  0
branch  0 never executed
branch  1 never executed
    #####:12902:SectionEndInfo endInfo{ m_info, m_assertions, m_timer.getElapsedSeconds() };
    %%%%%:12902-block  0
call    0 never executed
call    1 never executed
    %%%%%:12902-block  1
call    2 never executed
    #####:12903:if( uncaught_exceptions() )
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12904:getResultCapture().sectionEndedEarly( endInfo );
    %%%%%:12904-block  0
call    0 never executed
call    1 never executed
        -:12905:else
    #####:12906:getResultCapture().sectionEnded( endInfo );
    %%%%%:12906-block  0
call    0 never executed
call    1 never executed
        -:12907:}
    #####:12908:}
------------------
        -:12909:
        -:12910:// This indicates whether the section should be executed or not
function _ZNK5Catch7SectioncvbEv called 0 returned 0% blocks executed 0%
    #####:12911:Section::operator bool() const {
    #####:12912:return m_sectionIncluded;
    %%%%%:12912-block  0
        -:12913:}
        -:12914:
        -:12915:} // end namespace Catch
        -:12916:// end catch_section.cpp
        -:12917:// start catch_section_info.cpp
        -:12918:
        -:12919:namespace Catch {
        -:12920:
function _ZN5Catch11SectionInfoC2ERKNS_14SourceLineInfoERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 8 returned 100% blocks executed 100%
        8:12921:SectionInfo::SectionInfo
        -:12922:(   SourceLineInfo const& _lineInfo,
        8:12923:std::string const& _name )
        -:12924::   name( _name ),
        8:12925:lineInfo( _lineInfo )
        8:12925-block  0
call    0 returned 8
call    1 returned 8
        8:12926:{}
        -:12927:
        -:12928:} // end namespace Catch
        -:12929:// end catch_section_info.cpp
        -:12930:// start catch_session.cpp
        -:12931:
        -:12932:// start catch_session.h
        -:12933:
        -:12934:#include <memory>
        -:12935:
        -:12936:namespace Catch {
        -:12937:
        -:12938:class Session : NonCopyable {
        -:12939:public:
        -:12940:
        -:12941:Session();
        -:12942:~Session() override;
        -:12943:
        -:12944:void showHelp() const;
        -:12945:void libIdentify();
        -:12946:
        -:12947:int applyCommandLine( int argc, char const * const * argv );
        -:12948:#if defined(CATCH_CONFIG_WCHAR) && defined(_WIN32) && defined(UNICODE)
        -:12949:int applyCommandLine( int argc, wchar_t const * const * argv );
        -:12950:#endif
        -:12951:
        -:12952:void useConfigData( ConfigData const& configData );
        -:12953:
        -:12954:template<typename CharT>
function _ZN5Catch7Session3runIcEEiiPKPKT_ called 1 returned 100% blocks executed 88%
        1:12955:int run(int argc, CharT const * const argv[]) {
        1:12956:if (m_startupExceptions)
        1:12956-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:12957:return 1;
    %%%%%:12957-block  0
        1:12958:int returnCode = applyCommandLine(argc, argv);
        1:12958-block  0
call    0 returned 1
        1:12959:if (returnCode == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:12960:returnCode = run();
        1:12960-block  0
call    0 returned 1
        1:12961:return returnCode;
        1:12961-block  0
        -:12962:}
        -:12963:
        -:12964:int run();
        -:12965:
        -:12966:clara::Parser const& cli() const;
        -:12967:void cli( clara::Parser const& newParser );
        -:12968:ConfigData& configData();
        -:12969:Config& config();
        -:12970:private:
        -:12971:int runInternal();
        -:12972:
        -:12973:clara::Parser m_cli;
        -:12974:ConfigData m_configData;
        -:12975:std::shared_ptr<Config> m_config;
        -:12976:bool m_startupExceptions = false;
        -:12977:};
        -:12978:
        -:12979:} // end namespace Catch
        -:12980:
        -:12981:// end catch_session.h
        -:12982:// start catch_version.h
        -:12983:
        -:12984:#include <iosfwd>
        -:12985:
        -:12986:namespace Catch {
        -:12987:
        -:12988:// Versioning information
        -:12989:struct Version {
        -:12990:Version( Version const& ) = delete;
        -:12991:Version& operator=( Version const& ) = delete;
        -:12992:Version(    unsigned int _majorVersion,
        -:12993:unsigned int _minorVersion,
        -:12994:unsigned int _patchNumber,
        -:12995:char const * const _branchName,
        -:12996:unsigned int _buildNumber );
        -:12997:
        -:12998:unsigned int const majorVersion;
        -:12999:unsigned int const minorVersion;
        -:13000:unsigned int const patchNumber;
        -:13001:
        -:13002:// buildNumber is only used if branchName is not null
        -:13003:char const * const branchName;
        -:13004:unsigned int const buildNumber;
        -:13005:
        -:13006:friend std::ostream& operator << ( std::ostream& os, Version const& version );
        -:13007:};
        -:13008:
        -:13009:Version const& libraryVersion();
        -:13010:}
        -:13011:
        -:13012:// end catch_version.h
        -:13013:#include <cstdlib>
        -:13014:#include <iomanip>
        -:13015:#include <set>
        -:13016:#include <iterator>
        -:13017:
        -:13018:namespace Catch {
        -:13019:
        -:13020:namespace {
        -:13021:const int MaxExitCode = 255;
        -:13022:
function _ZN5Catch12_GLOBAL__N_114createReporterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt10shared_ptrIKNS_7IConfigEE called 1 returned 100% blocks executed 38%
        1:13023:IStreamingReporterPtr createReporter(std::string const& reporterName, IConfigPtr const& config) {
        1:13024:auto reporter = Catch::getRegistryHub().getReporterRegistry().create(reporterName, config);
        1:13024-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
       1*:13025:CATCH_ENFORCE(reporter, "No reporter registered with name: '" << reporterName << "'");
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:13025-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:13025-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:13025-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:13025-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:13025-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:13025-block  5
call   18 never executed
    $$$$$:13025-block  6
call   19 never executed
    $$$$$:13025-block  7
    $$$$$:13025-block  8
call   20 never executed
    $$$$$:13025-block  9
        -:13026:
        1:13027:return reporter;
        1:13027-block  0
        1:13027-block  1
        -:13028:}
        -:13029:
function _ZN5Catch12_GLOBAL__N_112makeReporterERKSt10shared_ptrINS_6ConfigEE called 1 returned 100% blocks executed 22%
        1:13030:IStreamingReporterPtr makeReporter(std::shared_ptr<Config> const& config) {
        1:13031:if (Catch::getRegistryHub().getReporterRegistry().getListeners().empty()) {
        1:13031-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:13031-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:13031-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:13031-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        1:13032:return createReporter(config->getReporterName(), config);
        1:13032-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:13032-block  1
call    6 returned 1
    $$$$$:13032-block  2
call    7 never executed
    $$$$$:13032-block  3
        -:13033:}
        -:13034:
        -:13035:// On older platforms, returning std::unique_ptr<ListeningReporter>
        -:13036:// when the return type is std::unique_ptr<IStreamingReporter>
        -:13037:// doesn't compile without a std::move call. However, this causes
        -:13038:// a warning on newer platforms. Thus, we have to work around
        -:13039:// it a bit and downcast the pointer manually.
    #####:13040:auto ret = std::unique_ptr<IStreamingReporter>(new ListeningReporter);
    %%%%%:13040-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13040-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$:13040-block  2
call    6 never executed
    #####:13041:auto& multi = static_cast<ListeningReporter&>(*ret);
call    0 never executed
    #####:13042:auto const& listeners = Catch::getRegistryHub().getReporterRegistry().getListeners();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13042-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:13042-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:13043:for (auto const& listener : listeners) {
    %%%%%:13043-block  0
call    0 never executed
call    1 never executed
    %%%%%:13043-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13043-block  2
call    5 never executed
    #####:13044:multi.addListener(listener->create(Catch::ReporterConfig(config)));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13044-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:13044-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:13044-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$:13044-block  3
call   15 never executed
    $$$$$:13044-block  4
    $$$$$:13044-block  5
call   16 never executed
    $$$$$:13044-block  6
    $$$$$:13044-block  7
call   17 never executed
    $$$$$:13044-block  8
        -:13045:}
    #####:13046:multi.addReporter(createReporter(config->getReporterName(), config));
    %%%%%:13046-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:13046-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:13046-block  2
call    9 never executed
call   10 never executed
    $$$$$:13046-block  3
call   11 never executed
    $$$$$:13046-block  4
    $$$$$:13046-block  5
call   12 never executed
    $$$$$:13046-block  6
    #####:13047:return ret;
call    0 never executed
        -:13048:}
        -:13049:
        -:13050:class TestGroup {
        -:13051:public:
function _ZN5Catch12_GLOBAL__N_19TestGroupC2ERKSt10shared_ptrINS_6ConfigEE called 1 returned 100% blocks executed 58%
        1:13052:explicit TestGroup(std::shared_ptr<Config> const& config)
        1:13053:: m_config{config}
        1:13054:, m_context{config, makeReporter(config)}
        1:13054-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:13054-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:13054-block  2
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
    $$$$$:13054-block  3
call   12 never executed
    $$$$$:13054-block  4
    $$$$$:13054-block  5
call   13 never executed
    $$$$$:13054-block  6
    $$$$$:13054-block  7
call   14 never executed
    $$$$$:13054-block  8
call   15 never executed
    $$$$$:13054-block  9
call   16 never executed
    $$$$$:13054-block 10
call   17 never executed
        -:13055:{
        1:13056:auto const& allTestCases = getAllTestCasesSorted(*m_config);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:13057:m_matches = m_config->testSpec().matchesByFilter(allTestCases, *m_config);
        1:13057-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:13057-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:13057-block  2
call    8 returned 1
call    9 returned 1
        1:13058:auto const& invalidArgs = m_config->testSpec().getInvalidArgs();
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:13058-block  0
call    4 returned 1
        -:13059:
       1*:13060:if (m_matches.empty() && invalidArgs.empty()) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:13060-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:13060-block  1
    %%%%%:13060-block  2
        1:13060-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        9:13061:for (auto const& test : allTestCases)
        1:13061-block  0
call    0 returned 1
call    1 returned 1
        9:13061-block  1
call    2 returned 9
branch  3 taken 8 (fallthrough)
branch  4 taken 1
        8:13061-block  2
call    5 returned 8
        8:13061-block  3
call    6 returned 8
        8:13062:if (!test.isHidden())
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0
        8:13063:m_tests.emplace(&test);
        8:13063-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:13063-block  1
    $$$$$:13063-block  2
        -:13064:} else {
    #####:13065:for (auto const& match : m_matches)
    %%%%%:13065-block  0
call    0 never executed
call    1 never executed
    %%%%%:13065-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13065-block  2
call    5 never executed
    %%%%%:13065-block  3
call    6 never executed
    #####:13066:m_tests.insert(match.tests.begin(), match.tests.end());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:13067:}
        1:13068:}
        1:13068-block  0
        -:13069:
function _ZN5Catch12_GLOBAL__N_19TestGroup7executeEv called 1 returned 100% blocks executed 54%
        1:13070:Totals execute() {
        1:13071:auto const& invalidArgs = m_config->testSpec().getInvalidArgs();
        1:13071-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:13072:Totals totals;
        1:13073:m_context.testGroupStarting(m_config->name(), 1, 1);
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:13073-block  0
call    5 returned 1
    $$$$$:13073-block  1
call    6 never executed
    $$$$$:13073-block  2
call    7 never executed
        9:13074:for (auto const& testCase : m_tests) {
call    0 returned 1
call    1 returned 1
        9:13074-block  0
call    2 returned 9
branch  3 taken 8 (fallthrough)
branch  4 taken 1
        8:13074-block  1
call    5 returned 8
        8:13074-block  2
call    6 returned 8
        8:13075:if (!m_context.aborting())
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:13075-block  0
branch  3 taken 8 (fallthrough)
branch  4 taken 0
        8:13076:totals += m_context.runTest(*testCase);
        8:13076-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:13076-block  1
call    3 returned 8
        -:13077:else
    #####:13078:m_context.reporter().skipTest(*testCase);
    %%%%%:13078-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13078-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:13079:}
        -:13080:
       1*:13081:for (auto const& match : m_matches) {
        1:13081-block  0
call    0 returned 1
call    1 returned 1
        1:13081-block  1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:13081-block  2
call    5 never executed
    %%%%%:13081-block  3
call    6 never executed
    #####:13082:if (match.tests.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13083:m_context.reporter().noMatchingTestCases(match.name);
    %%%%%:13083-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13083-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:13084:totals.error = -1;
    %%%%%:13084-block  0
        -:13085:}
        -:13086:}
        -:13087:
        1:13088:if (!invalidArgs.empty()) {
        1:13088-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:13089:for (auto const& invalidArg: invalidArgs)
    %%%%%:13089-block  0
call    0 never executed
call    1 never executed
    %%%%%:13089-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13089-block  2
call    5 never executed
    %%%%%:13089-block  3
call    6 never executed
    #####:13090:m_context.reporter().reportInvalidArguments(invalidArg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13090-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:13091:}
        -:13092:
        1:13093:m_context.testGroupEnded(m_config->name(), totals, 1, 1);
        1:13093-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:13093-block  1
call    5 returned 1
    $$$$$:13093-block  2
call    6 never executed
        1:13094:return totals;
        1:13094-block  0
        -:13095:}
        -:13096:
        -:13097:private:
        -:13098:using Tests = std::set<TestCase const*>;
        -:13099:
        -:13100:std::shared_ptr<Config> m_config;
        -:13101:RunContext m_context;
        -:13102:Tests m_tests;
        -:13103:TestSpec::Matches m_matches;
        -:13104:};
        -:13105:
function _ZN5Catch12_GLOBAL__N_120applyFilenamesAsTagsERKNS_7IConfigE called 0 returned 0% blocks executed 0%
    #####:13106:void applyFilenamesAsTags(Catch::IConfig const& config) {
    #####:13107:auto& tests = const_cast<std::vector<TestCase>&>(getAllTestCasesSorted(config));
    %%%%%:13107-block  0
call    0 never executed
    #####:13108:for (auto& testCase : tests) {
call    0 never executed
call    1 never executed
    %%%%%:13108-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13108-block  1
call    5 never executed
call    6 never executed
    #####:13109:auto tags = testCase.tags;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:13109-block  0
call    4 never executed
        -:13110:
    #####:13111:std::string filename = testCase.lineInfo.file;
    %%%%%:13111-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:13111-block  1
    $$$$$:13111-block  2
call    4 never executed
    #####:13112:auto lastSlash = filename.find_last_of("\\/");
call    0 never executed
    #####:13113:if (lastSlash != std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####:13114:filename.erase(0, lastSlash);
    %%%%%:13114-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13115:filename[0] = '#';
    %%%%%:13115-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13115-block  1
        -:13116:}
        -:13117:
    #####:13118:auto lastDot = filename.find_last_of('.');
    %%%%%:13118-block  0
call    0 never executed
    #####:13119:if (lastDot != std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####:13120:filename.erase(lastDot);
    %%%%%:13120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:13121:}
        -:13122:
    #####:13123:tags.push_back(std::move(filename));
    %%%%%:13123-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:13124:setTags(testCase, tags);
    %%%%%:13124-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13124-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:13124-block  2
call    6 never executed
call    7 never executed
    $$$$$:13124-block  3
call    8 never executed
    $$$$$:13124-block  4
        -:13125:}
    #####:13126:}
    %%%%%:13126-block  0
        -:13127:
        -:13128:} // anon namespace
        -:13129:
function _ZN5Catch7SessionC2Ev called 1 returned 100% blocks executed 15%
        1:13130:Session::Session() {
        1:13130-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:13130-block  1
call    4 returned 1
call    5 returned 1
    $$$$$:13130-block  2
call    6 never executed
    $$$$$:13130-block  3
call    7 never executed
    $$$$$:13130-block  4
call    8 never executed
    $$$$$:13130-block  5
call    9 never executed
        -:13131:static bool alreadyInstantiated = false;
        1:13132:if( alreadyInstantiated ) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:13133:CATCH_TRY { CATCH_INTERNAL_ERROR( "Only one instance of Catch::Session can ever be used" ); }
    %%%%%:13133-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13133-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:13133-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:13133-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:13133-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:13133-block  5
call   16 never executed
    $$$$$:13133-block  6
call   17 never executed
    $$$$$:13133-block  7
    $$$$$:13133-block  8
    $$$$$:13133-block  9
call   18 never executed
    $$$$$:13133-block 10
    =====:13134:CATCH_CATCH_ALL { getMutableRegistryHub().registerStartupException(); }
    $$$$$:13134-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:13134-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$:13134-block  2
call    8 never executed
        -:13135:}
        -:13136:
        -:13137:// There cannot be exceptions at startup in no-exception mode.
        -:13138:#if !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)
        1:13139:const auto& exceptions = getRegistryHub().getStartupExceptionRegistry().getExceptions();
        1:13139-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:13139-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:13139-block  2
call    6 returned 1
        1:13140:if ( !exceptions.empty() ) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:13141:config();
    %%%%%:13141-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13142:getCurrentMutableContext().setConfig(m_config);
    %%%%%:13142-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13142-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:13142-block  2
call    7 never executed
    $$$$$:13142-block  3
call    8 never executed
    $$$$$:13142-block  4
        -:13143:
    #####:13144:m_startupExceptions = true;
    #####:13145:Colour colourGuard( Colour::Red );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13145-block  0
call    3 never executed
    $$$$$:13145-block  1
call    4 never executed
    #####:13146:Catch::cerr() << "Errors occurred during startup!" << '\n';
    %%%%%:13146-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13146-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:13147:// iterate over all exceptions and notify user
    #####:13148:for ( const auto& ex_ptr : exceptions ) {
    %%%%%:13148-block  0
call    0 never executed
call    1 never executed
    %%%%%:13148-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13148-block  2
call    5 never executed
call    6 never executed
        -:13149:try {
    #####:13150:std::rethrow_exception(ex_ptr);
call    0 never executed
call    1 never executed
    $$$$$:13150-block  0
call    2 never executed
    $$$$$:13150-block  1
    =====:13151:} catch ( std::exception const& ex ) {
    $$$$$:13151-block  0
call    0 never executed
    $$$$$:13151-block  1
call    1 never executed
    =====:13152:Catch::cerr() << Column( ex.what() ).indent(2) << '\n';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:13152-block  0
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:13152-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$:13152-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$:13152-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$:13152-block  4
call   20 never executed
    $$$$$:13152-block  5
    $$$$$:13152-block  6
call   21 never executed
    $$$$$:13152-block  7
    $$$$$:13152-block  8
call   22 never executed
    $$$$$:13152-block  9
        -:13153:}
        -:13154:}
        -:13155:}
        -:13156:#endif
        -:13157:
        1:13158:alreadyInstantiated = true;
        1:13159:m_cli = makeCommandLineParser( m_configData );
        1:13159-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:13159-block  1
call    3 returned 1
call    4 returned 1
        1:13160:}
       1*:13161:Session::~Session() {
        1:13162:Catch::cleanUp();
       1*:13163:}
------------------
_ZN5Catch7SessionD0Ev:
function _ZN5Catch7SessionD0Ev called 0 returned 0% blocks executed 0%
    #####:13161:Session::~Session() {
        -:13162:Catch::cleanUp();
    #####:13163:}
    %%%%%:13163-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch7SessionD2Ev:
function _ZN5Catch7SessionD2Ev called 1 returned 100% blocks executed 100%
        1:13161:Session::~Session() {
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        1:13162:Catch::cleanUp();
        1:13162-block  0
call    0 returned 1
        1:13163:}
------------------
        -:13164:
function _ZNK5Catch7Session8showHelpEv called 0 returned 0% blocks executed 0%
    #####:13165:void Session::showHelp() const {
    #####:13166:Catch::cout()
    %%%%%:13166-block  0
call    0 never executed
    #####:13167:<< "\nCatch v" << libraryVersion() << "\n"
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:13168:<< m_cli << std::endl
call    0 never executed
call    1 never executed
    #####:13169:<< "For more detailed usage please see the project docs\n" << std::endl;
call    0 never executed
call    1 never executed
    #####:13170:}
function _ZN5Catch7Session11libIdentifyEv called 0 returned 0% blocks executed 0%
    #####:13171:void Session::libIdentify() {
    #####:13172:Catch::cout()
    %%%%%:13172-block  0
call    0 never executed
    #####:13173:<< std::left << std::setw(16) << "description: " << "A Catch2 test executable\n"
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:13174:<< std::left << std::setw(16) << "category: " << "testframework\n"
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:13175:<< std::left << std::setw(16) << "framework: " << "Catch Test\n"
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:13176:<< std::left << std::setw(16) << "version: " << libraryVersion() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:13177:}
        -:13178:
function _ZN5Catch7Session16applyCommandLineEiPKPKc called 1 returned 100% blocks executed 25%
        1:13179:int Session::applyCommandLine( int argc, char const * const * argv ) {
        1:13180:if( m_startupExceptions )
        1:13180-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:13181:return 1;
    %%%%%:13181-block  0
        -:13182:
        2:13183:auto result = m_cli.parse( clara::Args( argc, argv ) );
        1:13183-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:13183-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:13183-block  2
call    6 returned 1
    $$$$$:13183-block  3
    $$$$$:13183-block  4
call    7 never executed
        1:13184:if( !result ) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:13185:config();
    %%%%%:13185-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13186:getCurrentMutableContext().setConfig(m_config);
    %%%%%:13186-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13186-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:13186-block  2
call    7 never executed
    $$$$$:13186-block  3
call    8 never executed
    $$$$$:13186-block  4
        -:13187:Catch::cerr()
    #####:13188:<< Colour( Colour::Red )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13188-block  0
call    4 never executed
    $$$$$:13188-block  1
call    5 never executed
    $$$$$:13188-block  2
    #####:13189:<< "\nError(s) in input:\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13190:<< Column( result.errorMessage() ).indent( 2 )
    %%%%%:13190-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13190-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:13190-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:13190-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:13190-block  4
call   13 never executed
    $$$$$:13190-block  5
    $$$$$:13190-block  6
call   14 never executed
    $$$$$:13190-block  7
    #####:13191:<< "\n\n";
    %%%%%:13191-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13192:Catch::cerr() << "Run with -? for usage\n" << std::endl;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13192-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:13193:return MaxExitCode;
    %%%%%:13193-block  0
        -:13194:}
        -:13195:
        1:13196:if( m_configData.showHelp )
        1:13196-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:13197:showHelp();
    %%%%%:13197-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        1:13198:if( m_configData.libIdentify )
        1:13198-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:13199:libIdentify();
    %%%%%:13199-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        1:13200:m_config.reset();
        1:13200-block  0
call    0 returned 1
        1:13201:return 0;
        -:13202:}
        -:13203:
        -:13204:#if defined(CATCH_CONFIG_WCHAR) && defined(_WIN32) && defined(UNICODE)
        -:13205:int Session::applyCommandLine( int argc, wchar_t const * const * argv ) {
        -:13206:
        -:13207:char **utf8Argv = new char *[ argc ];
        -:13208:
        -:13209:for ( int i = 0; i < argc; ++i ) {
        -:13210:int bufSize = WideCharToMultiByte( CP_UTF8, 0, argv[i], -1, NULL, 0, NULL, NULL );
        -:13211:
        -:13212:utf8Argv[ i ] = new char[ bufSize ];
        -:13213:
        -:13214:WideCharToMultiByte( CP_UTF8, 0, argv[i], -1, utf8Argv[i], bufSize, NULL, NULL );
        -:13215:}
        -:13216:
        -:13217:int returnCode = applyCommandLine( argc, utf8Argv );
        -:13218:
        -:13219:for ( int i = 0; i < argc; ++i )
        -:13220:delete [] utf8Argv[ i ];
        -:13221:
        -:13222:delete [] utf8Argv;
        -:13223:
        -:13224:return returnCode;
        -:13225:}
        -:13226:#endif
        -:13227:
function _ZN5Catch7Session13useConfigDataERKNS_10ConfigDataE called 0 returned 0% blocks executed 0%
    #####:13228:void Session::useConfigData( ConfigData const& configData ) {
    #####:13229:m_configData = configData;
    %%%%%:13229-block  0
call    0 never executed
    #####:13230:m_config.reset();
call    0 never executed
    #####:13231:}
        -:13232:
function _ZN5Catch7Session3runEv called 1 returned 100% blocks executed 36%
        1:13233:int Session::run() {
        1:13234:if( ( m_configData.waitForKeypress & WaitForKeypress::BeforeStart ) != 0 ) {
        1:13234-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:13235:Catch::cout() << "...waiting for enter/ return before starting" << std::endl;
    %%%%%:13235-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:13236:static_cast<void>(std::getchar());
call    0 never executed
        -:13237:}
        1:13238:int exitCode = runInternal();
        1:13238-block  0
call    0 returned 1
        1:13239:if( ( m_configData.waitForKeypress & WaitForKeypress::BeforeExit ) != 0 ) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:13240:Catch::cout() << "...waiting for enter/ return before exiting, with code: " << exitCode << std::endl;
    %%%%%:13240-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:13241:static_cast<void>(std::getchar());
call    0 never executed
        -:13242:}
        1:13243:return exitCode;
        1:13243-block  0
        -:13244:}
        -:13245:
function _ZNK5Catch7Session3cliEv called 0 returned 0% blocks executed 0%
    #####:13246:clara::Parser const& Session::cli() const {
    #####:13247:return m_cli;
    %%%%%:13247-block  0
        -:13248:}
function _ZN5Catch7Session3cliERKNS_5clara6detail6ParserE called 0 returned 0% blocks executed 0%
    #####:13249:void Session::cli( clara::Parser const& newParser ) {
    #####:13250:m_cli = newParser;
    %%%%%:13250-block  0
call    0 never executed
    #####:13251:}
function _ZN5Catch7Session10configDataEv called 0 returned 0% blocks executed 0%
    #####:13252:ConfigData& Session::configData() {
    #####:13253:return m_configData;
    %%%%%:13253-block  0
        -:13254:}
function _ZN5Catch7Session6configEv called 1 returned 100% blocks executed 100%
        1:13255:Config& Session::config() {
        1:13256:if( !m_config )
        1:13256-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:13257:m_config = std::make_shared<Config>( m_configData );
        1:13257-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:13258:return *m_config;
        1:13258-block  0
call    0 returned 1
        -:13259:}
        -:13260:
function _ZN5Catch7Session11runInternalEv called 1 returned 100% blocks executed 51%
        1:13261:int Session::runInternal() {
        1:13262:if( m_startupExceptions )
        1:13262-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:13263:return 1;
    %%%%%:13263-block  0
        -:13264:
        1:13265:if (m_configData.showHelp || m_configData.libIdentify) {
        1:13265-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:13265-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:13266:return 0;
    %%%%%:13266-block  0
        -:13267:}
        -:13268:
        -:13269:CATCH_TRY {
        1:13270:config(); // Force config to be constructed
        1:13270-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:13271:
        1:13272:seedRng( *m_config );
        1:13272-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:13273:
        1:13274:if( m_configData.filenamesAsTags )
        1:13274-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:13275:applyFilenamesAsTags( *m_config );
    %%%%%:13275-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:13276:
        -:13277:// Handle list request
        1:13278:if( Option<std::size_t> listed = list( m_config ) )
        1:13278-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:13278-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:13278-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    $$$$$:13278-block  3
call    8 never executed
    #####:13279:return static_cast<int>( *listed );
    %%%%%:13279-block  0
call    0 never executed
        -:13280:
        2:13281:TestGroup tests { m_config };
        1:13281-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:13281-block  1
call    3 returned 1
    $$$$$:13281-block  2
call    4 never executed
        1:13282:auto const totals = tests.execute();
        1:13282-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:13283:
       1*:13284:if( m_config->warnAboutNoTests() && totals.error == -1 )
        1:13284-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:13284-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:13284-block  2
branch  6 never executed
branch  7 never executed
    %%%%%:13284-block  3
        1:13284-block  4
        1:13284-block  5
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    #####:13285:return 2;
    %%%%%:13285-block  0
        -:13286:
        -:13287:// Note that on unices only the lower 8 bits are usually used, clamping
        -:13288:// the return value to 255 prevents false negative when some multiple
        -:13289:// of 256 tests has failed
        1:13290:return (std::min) (MaxExitCode, (std::max) (totals.error, static_cast<int>(totals.assertions.failed)));
        1:13290-block  0
call    0 returned 1
call    1 returned 1
        -:13291:}
        -:13292:#if !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)
    =====:13293:catch( std::exception& ex ) {
    $$$$$:13293-block  0
call    0 never executed
    $$$$$:13293-block  1
call    1 never executed
    =====:13294:Catch::cerr() << ex.what() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:13294-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    =====:13295:return MaxExitCode;
    $$$$$:13295-block  0
call    0 never executed
        -:13296:}
        -:13297:#endif
        -:13298:}
        -:13299:
        -:13300:} // end namespace Catch
        -:13301:// end catch_session.cpp
        -:13302:// start catch_singletons.cpp
        -:13303:
        -:13304:#include <vector>
        -:13305:
        -:13306:namespace Catch {
        -:13307:
        -:13308:namespace {
function _ZN5Catch12_GLOBAL__N_1L13getSingletonsEv called 2 returned 100% blocks executed 100%
        2:13309:static auto getSingletons() -> std::vector<ISingleton*>*& {
        -:13310:static std::vector<ISingleton*>* g_singletons = nullptr;
        2:13311:if( !g_singletons )
        2:13311-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:13312:g_singletons = new std::vector<ISingleton*>();
        1:13312-block  0
call    0 returned 1
call    1 returned 1
        2:13313:return g_singletons;
        2:13313-block  0
        -:13314:}
        -:13315:}
        -:13316:
       1*:13317:ISingleton::~ISingleton() {}
------------------
_ZN5Catch10ISingletonD0Ev:
function _ZN5Catch10ISingletonD0Ev called 0 returned 0% blocks executed 0%
    #####:13317:ISingleton::~ISingleton() {}
    %%%%%:13317-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch10ISingletonD2Ev:
function _ZN5Catch10ISingletonD2Ev called 1 returned 100% blocks executed 100%
        1:13317:ISingleton::~ISingleton() {}
------------------
        -:13318:
function _ZN5Catch12addSingletonEPNS_10ISingletonE called 1 returned 100% blocks executed 100%
        1:13319:void addSingleton(ISingleton* singleton ) {
        1:13320:getSingletons()->push_back( singleton );
        1:13320-block  0
call    0 returned 1
call    1 returned 1
        1:13321:}
function _ZN5Catch17cleanupSingletonsEv called 1 returned 100% blocks executed 100%
        1:13322:void cleanupSingletons() {
        1:13323:auto& singletons = getSingletons();
        1:13323-block  0
call    0 returned 1
        2:13324:for( auto singleton : *singletons )
call    0 returned 1
call    1 returned 1
        2:13324-block  0
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1:13324-block  1
call    5 returned 1
        1:13324-block  2
call    6 returned 1
        1:13325:delete singleton;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:13325-block  0
call    2 returned 1
        1:13326:delete singletons;
        1:13326-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:13326-block  1
call    2 returned 1
call    3 returned 1
        1:13327:singletons = nullptr;
        1:13328:}
        -:13329:
        -:13330:} // namespace Catch
        -:13331:// end catch_singletons.cpp
        -:13332:// start catch_startup_exception_registry.cpp
        -:13333:
        -:13334:namespace Catch {
function _ZN5Catch24StartupExceptionRegistry3addERKNSt15__exception_ptr13exception_ptrE called 0 returned 0% blocks executed 0%
    #####:13335:void StartupExceptionRegistry::add( std::exception_ptr const& exception ) noexcept {
        -:13336:CATCH_TRY {
    #####:13337:m_exceptions.push_back(exception);
    %%%%%:13337-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:13338:} CATCH_CATCH_ALL {
    $$$$$:13338-block  0
call    0 never executed
        -:13339:// If we run out of memory during start-up there's really not a lot more we can do about it
    =====:13340:std::terminate();
        -:13341:}
    #####:13342:}
    %%%%%:13342-block  0
        -:13343:
function _ZNK5Catch24StartupExceptionRegistry13getExceptionsEv called 1 returned 100% blocks executed 100%
        1:13344:std::vector<std::exception_ptr> const& StartupExceptionRegistry::getExceptions() const noexcept {
        1:13345:return m_exceptions;
        1:13345-block  0
        -:13346:}
        -:13347:
        -:13348:} // end namespace Catch
        -:13349:// end catch_startup_exception_registry.cpp
        -:13350:// start catch_stream.cpp
        -:13351:
        -:13352:#include <cstdio>
        -:13353:#include <iostream>
        -:13354:#include <fstream>
        -:13355:#include <sstream>
        -:13356:#include <vector>
        -:13357:#include <memory>
        -:13358:
        -:13359:namespace Catch {
        -:13360:
        -:13361:Catch::IStream::~IStream() = default;
        -:13362:
        -:13363:namespace Detail { namespace {
        -:13364:template<typename WriterF, std::size_t bufferSize=256>
        -:13365:class StreamBufImpl : public std::streambuf {
        -:13366:char data[bufferSize];
        -:13367:WriterF m_writer;
        -:13368:
        -:13369:public:
function _ZN5Catch6Detail12_GLOBAL__N_113StreamBufImplINS1_17OutputDebugWriterELj256EEC2Ev called 0 returned 0% blocks executed 0%
    #####:13370:StreamBufImpl() {
    %%%%%:13370-block  0
call    0 never executed
    $$$$$:13370-block  1
call    1 never executed
    #####:13371:setp( data, data + sizeof(data) );
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13372:}
    %%%%%:13372-block  0
        -:13373:
    #####:13374:~StreamBufImpl() noexcept {
    #####:13375:StreamBufImpl::sync();
    #####:13376:}
------------------
_ZN5Catch6Detail12_GLOBAL__N_113StreamBufImplINS1_17OutputDebugWriterELj256EED0Ev:
function _ZN5Catch6Detail12_GLOBAL__N_113StreamBufImplINS1_17OutputDebugWriterELj256EED0Ev called 0 returned 0% blocks executed 0%
    #####:13374:~StreamBufImpl() noexcept {
        -:13375:StreamBufImpl::sync();
    #####:13376:}
    %%%%%:13376-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch6Detail12_GLOBAL__N_113StreamBufImplINS1_17OutputDebugWriterELj256EED2Ev:
function _ZN5Catch6Detail12_GLOBAL__N_113StreamBufImplINS1_17OutputDebugWriterELj256EED2Ev called 0 returned 0% blocks executed 0%
    #####:13374:~StreamBufImpl() noexcept {
    #####:13375:StreamBufImpl::sync();
    #####:13376:}
    %%%%%:13376-block  0
call    0 never executed
call    1 never executed
------------------
        -:13377:
        -:13378:private:
function _ZN5Catch6Detail12_GLOBAL__N_113StreamBufImplINS1_17OutputDebugWriterELj256EE8overflowEi called 0 returned 0% blocks executed 0%
    #####:13379:int overflow( int c ) override {
    #####:13380:sync();
    %%%%%:13380-block  0
call    0 never executed
        -:13381:
    #####:13382:if( c != EOF ) {
branch  0 never executed
branch  1 never executed
    #####:13383:if( pbase() == epptr() )
    %%%%%:13383-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:13384:m_writer( std::string( 1, static_cast<char>( c ) ) );
    %%%%%:13384-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13384-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:13384-block  2
call    7 never executed
call    8 never executed
    $$$$$:13384-block  3
call    9 never executed
    $$$$$:13384-block  4
    $$$$$:13384-block  5
call   10 never executed
        -:13385:else
    #####:13386:sputc( static_cast<char>( c ) );
    %%%%%:13386-block  0
call    0 never executed
        -:13387:}
    #####:13388:return 0;
    %%%%%:13388-block  0
    %%%%%:13388-block  1
        -:13389:}
        -:13390:
function _ZN5Catch6Detail12_GLOBAL__N_113StreamBufImplINS1_17OutputDebugWriterELj256EE4syncEv called 0 returned 0% blocks executed 0%
    #####:13391:int sync() override {
    #####:13392:if( pbase() != pptr() ) {
    %%%%%:13392-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:13393:m_writer( std::string( pbase(), static_cast<std::string::size_type>( pptr() - pbase() ) ) );
    %%%%%:13393-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13393-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:13393-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:13393-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:13393-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:13393-block  5
call   16 never executed
call   17 never executed
    $$$$$:13393-block  6
call   18 never executed
    $$$$$:13393-block  7
    $$$$$:13393-block  8
call   19 never executed
    #####:13394:setp( pbase(), epptr() );
call    0 never executed
call    1 never executed
call    2 never executed
        -:13395:}
    #####:13396:return 0;
    %%%%%:13396-block  0
    %%%%%:13396-block  1
        -:13397:}
        -:13398:};
        -:13399:
        -:13400:///////////////////////////////////////////////////////////////////////////
        -:13401:
        -:13402:struct OutputDebugWriter {
        -:13403:
function _ZN5Catch6Detail12_GLOBAL__N_117OutputDebugWriterclERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:13404:void operator()( std::string const&str ) {
    #####:13405:writeToDebugConsole( str );
    %%%%%:13405-block  0
call    0 never executed
    #####:13406:}
        -:13407:};
        -:13408:
        -:13409:///////////////////////////////////////////////////////////////////////////
        -:13410:
        -:13411:class FileStream : public IStream {
        -:13412:mutable std::ofstream m_ofs;
        -:13413:public:
function _ZN5Catch6Detail12_GLOBAL__N_110FileStreamC2ENS_9StringRefE called 0 returned 0% blocks executed 0%
    #####:13414:FileStream( StringRef filename ) {
    %%%%%:13414-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:13414-block  1
call    4 never executed
    $$$$$:13414-block  2
call    5 never executed
    #####:13415:m_ofs.open( filename.c_str() );
    %%%%%:13415-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13415-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:13416:CATCH_ENFORCE( !m_ofs.fail(), "Unable to open file: '" << filename << "'" );
    %%%%%:13416-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13416-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:13416-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:13416-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:13416-block  4
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:13416-block  5
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:13416-block  6
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:13416-block  7
call   20 never executed
    $$$$$:13416-block  8
call   21 never executed
    $$$$$:13416-block  9
    $$$$$:13416-block 10
call   22 never executed
    $$$$$:13416-block 11
    #####:13417:}
    %%%%%:13417-block  0
    #####:13418:~FileStream() override = default;
------------------
_ZN5Catch6Detail12_GLOBAL__N_110FileStreamD0Ev:
function _ZN5Catch6Detail12_GLOBAL__N_110FileStreamD0Ev called 0 returned 0% blocks executed 0%
    #####:13418:~FileStream() override = default;
    %%%%%:13418-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch6Detail12_GLOBAL__N_110FileStreamD2Ev:
function _ZN5Catch6Detail12_GLOBAL__N_110FileStreamD2Ev called 0 returned 0% blocks executed 0%
    #####:13418:~FileStream() override = default;
    %%%%%:13418-block  0
call    0 never executed
call    1 never executed
------------------
        -:13419:public: // IStream
function _ZNK5Catch6Detail12_GLOBAL__N_110FileStream6streamEv called 0 returned 0% blocks executed 0%
    #####:13420:std::ostream& stream() const override {
    #####:13421:return m_ofs;
    %%%%%:13421-block  0
        -:13422:}
        -:13423:};
        -:13424:
        -:13425:///////////////////////////////////////////////////////////////////////////
        -:13426:
        -:13427:class CoutStream : public IStream {
        -:13428:mutable std::ostream m_os;
        -:13429:public:
        -:13430:// Store the streambuf from cout up-front because
        -:13431:// cout may get redirected when running tests
function _ZN5Catch6Detail12_GLOBAL__N_110CoutStreamC2Ev called 1 returned 100% blocks executed 86%
        1:13432:CoutStream() : m_os( Catch::cout().rdbuf() ) {}
        1:13432-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:13432-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:13432-block  2
    $$$$$:13432-block  3
call    8 never executed
        2:13433:~CoutStream() override = default;
------------------
_ZN5Catch6Detail12_GLOBAL__N_110CoutStreamD0Ev:
function _ZN5Catch6Detail12_GLOBAL__N_110CoutStreamD0Ev called 1 returned 100% blocks executed 100%
        1:13433:~CoutStream() override = default;
        1:13433-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN5Catch6Detail12_GLOBAL__N_110CoutStreamD2Ev:
function _ZN5Catch6Detail12_GLOBAL__N_110CoutStreamD2Ev called 1 returned 100% blocks executed 100%
        1:13433:~CoutStream() override = default;
        1:13433-block  0
call    0 returned 1
call    1 returned 1
------------------
        -:13434:
        -:13435:public: // IStream
function _ZNK5Catch6Detail12_GLOBAL__N_110CoutStream6streamEv called 1 returned 100% blocks executed 100%
        1:13436:std::ostream& stream() const override { return m_os; }
        1:13436-block  0
        -:13437:};
        -:13438:
        -:13439:///////////////////////////////////////////////////////////////////////////
        -:13440:
        -:13441:class DebugOutStream : public IStream {
        -:13442:std::unique_ptr<StreamBufImpl<OutputDebugWriter>> m_streamBuf;
        -:13443:mutable std::ostream m_os;
        -:13444:public:
function _ZN5Catch6Detail12_GLOBAL__N_114DebugOutStreamC2Ev called 0 returned 0% blocks executed 0%
    #####:13445:DebugOutStream()
    #####:13446::   m_streamBuf( new StreamBufImpl<OutputDebugWriter>() ),
    %%%%%:13446-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:13446-block  1
call    3 never executed
    #####:13447:m_os( m_streamBuf.get() )
    %%%%%:13447-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13447-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:13447-block  2
call    9 never executed
    $$$$$:13447-block  3
call   10 never executed
    #####:13448:{}
    %%%%%:13448-block  0
        -:13449:
    #####:13450:~DebugOutStream() override = default;
------------------
_ZN5Catch6Detail12_GLOBAL__N_114DebugOutStreamD0Ev:
function _ZN5Catch6Detail12_GLOBAL__N_114DebugOutStreamD0Ev called 0 returned 0% blocks executed 0%
    #####:13450:~DebugOutStream() override = default;
    %%%%%:13450-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch6Detail12_GLOBAL__N_114DebugOutStreamD2Ev:
function _ZN5Catch6Detail12_GLOBAL__N_114DebugOutStreamD2Ev called 0 returned 0% blocks executed 0%
    #####:13450:~DebugOutStream() override = default;
    %%%%%:13450-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
        -:13451:
        -:13452:public: // IStream
function _ZNK5Catch6Detail12_GLOBAL__N_114DebugOutStream6streamEv called 0 returned 0% blocks executed 0%
    #####:13453:std::ostream& stream() const override { return m_os; }
    %%%%%:13453-block  0
        -:13454:};
        -:13455:
        -:13456:}} // namespace anon::detail
        -:13457:
        -:13458:///////////////////////////////////////////////////////////////////////////
        -:13459:
function _ZN5Catch10makeStreamERKNS_9StringRefE called 1 returned 100% blocks executed 17%
        1:13460:auto makeStream( StringRef const &filename ) -> IStream const* {
        1:13461:if( filename.empty() )
        1:13461-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:13462:return new Detail::CoutStream();
        1:13462-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:13462-block  1
    $$$$$:13462-block  2
call    4 never executed
    #####:13463:else if( filename[0] == '%' ) {
    %%%%%:13463-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13464:if( filename == "%debug" )
    %%%%%:13464-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:13465:return new Detail::DebugOutStream();
    %%%%%:13465-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13465-block  1
    $$$$$:13465-block  2
call    4 never executed
        -:13466:else
    #####:13467:CATCH_ERROR( "Unrecognised stream: '" << filename << "'" );
    %%%%%:13467-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13467-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:13467-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:13467-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:13467-block  4
call   13 never executed
    $$$$$:13467-block  5
call   14 never executed
    $$$$$:13467-block  6
    $$$$$:13467-block  7
call   15 never executed
    $$$$$:13467-block  8
call   16 never executed
        -:13468:}
        -:13469:else
    #####:13470:return new Detail::FileStream( filename );
    %%%%%:13470-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13470-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:13470-block  2
call    7 never executed
    $$$$$:13470-block  3
call    8 never executed
    $$$$$:13470-block  4
call    9 never executed
        -:13471:}
        -:13472:
        -:13473:// This class encapsulates the idea of a pool of ostringstreams that can be reused.
        -:13474:struct StringStreams {
        -:13475:std::vector<std::unique_ptr<std::ostringstream>> m_streams;
        -:13476:std::vector<std::size_t> m_unused;
        -:13477:std::ostringstream m_referenceStream; // Used for copy state/ flags from
        -:13478:
function _ZN5Catch13StringStreams3addEv called 0 returned 0% blocks executed 0%
    #####:13479:auto add() -> std::size_t {
    #####:13480:if( m_unused.empty() ) {
    %%%%%:13480-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13481:m_streams.push_back( std::unique_ptr<std::ostringstream>( new std::ostringstream ) );
    %%%%%:13481-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13481-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:13481-block  2
call    8 never executed
    $$$$$:13481-block  3
call    9 never executed
    $$$$$:13481-block  4
call   10 never executed
    #####:13482:return m_streams.size()-1;
call    0 never executed
        -:13483:}
        -:13484:else {
    #####:13485:auto index = m_unused.back();
    %%%%%:13485-block  0
call    0 never executed
    #####:13486:m_unused.pop_back();
call    0 never executed
    #####:13487:return index;
        -:13488:}
        -:13489:}
        -:13490:
function _ZN5Catch13StringStreams7releaseEj called 0 returned 0% blocks executed 0%
    #####:13491:void release( std::size_t index ) {
    #####:13492:m_streams[index]->copyfmt( m_referenceStream ); // Restore initial flags and other state
    %%%%%:13492-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:13493:m_unused.push_back(index);
call    0 never executed
    #####:13494:}
        -:13495:};
        -:13496:
function _ZN5Catch20ReusableStringStreamC2Ev called 0 returned 0% blocks executed 0%
    #####:13497:ReusableStringStream::ReusableStringStream()
    #####:13498::   m_index( Singleton<StringStreams>::getMutable().add() ),
    %%%%%:13498-block  0
call    0 never executed
call    1 never executed
    #####:13499:m_oss( Singleton<StringStreams>::getMutable().m_streams[m_index].get() )
call    0 never executed
call    1 never executed
call    2 never executed
    #####:13500:{}
        -:13501:
function _ZN5Catch20ReusableStringStreamD2Ev called 0 returned 0% blocks executed 0%
    #####:13502:ReusableStringStream::~ReusableStringStream() {
    #####:13503:static_cast<std::ostringstream*>( m_oss )->str("");
    %%%%%:13503-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:13504:m_oss->clear();
call    0 never executed
    #####:13505:Singleton<StringStreams>::getMutable().release( m_index );
call    0 never executed
call    1 never executed
    #####:13506:}
        -:13507:
function _ZNK5Catch20ReusableStringStream3strB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:13508:auto ReusableStringStream::str() const -> std::string {
    #####:13509:return static_cast<std::ostringstream*>( m_oss )->str();
    %%%%%:13509-block  0
call    0 never executed
        -:13510:}
        -:13511:
        -:13512:///////////////////////////////////////////////////////////////////////////
        -:13513:
        -:13514:#ifndef CATCH_CONFIG_NOSTDOUT // If you #define this you must implement these functions
function _ZN5Catch4coutEv called 1 returned 100% blocks executed 100%
        1:13515:std::ostream& cout() { return std::cout; }
        1:13515-block  0
function _ZN5Catch4cerrEv called 0 returned 0% blocks executed 0%
    #####:13516:std::ostream& cerr() { return std::cerr; }
    %%%%%:13516-block  0
function _ZN5Catch4clogEv called 0 returned 0% blocks executed 0%
    #####:13517:std::ostream& clog() { return std::clog; }
    %%%%%:13517-block  0
        -:13518:#endif
        -:13519:}
        -:13520:// end catch_stream.cpp
        -:13521:// start catch_string_manip.cpp
        -:13522:
        -:13523:#include <algorithm>
        -:13524:#include <ostream>
        -:13525:#include <cstring>
        -:13526:#include <cctype>
        -:13527:#include <vector>
        -:13528:
        -:13529:namespace Catch {
        -:13530:
        -:13531:namespace {
function _ZN5Catch12_GLOBAL__N_19toLowerChEc called 0 returned 0% blocks executed 0%
    #####:13532:char toLowerCh(char c) {
    #####:13533:return static_cast<char>( std::tolower( c ) );
    %%%%%:13533-block  0
        -:13534:}
        -:13535:}
        -:13536:
function _ZN5Catch10startsWithERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 0 returned 0% blocks executed 0%
    #####:13537:bool startsWith( std::string const& s, std::string const& prefix ) {
    #####:13538:return s.size() >= prefix.size() && std::equal(prefix.begin(), prefix.end(), s.begin());
    %%%%%:13538-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13538-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:13538-block  2
    %%%%%:13538-block  3
    %%%%%:13538-block  4
        -:13539:}
function _ZN5Catch10startsWithERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEc called 8 returned 100% blocks executed 63%
        8:13540:bool startsWith( std::string const& s, char prefix ) {
       8*:13541:return !s.empty() && s[0] == prefix;
        8:13541-block  0
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
    %%%%%:13541-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:13541-block  2
        8:13541-block  3
        8:13541-block  4
        -:13542:}
function _ZN5Catch8endsWithERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 0 returned 0% blocks executed 0%
    #####:13543:bool endsWith( std::string const& s, std::string const& suffix ) {
    #####:13544:return s.size() >= suffix.size() && std::equal(suffix.rbegin(), suffix.rend(), s.rbegin());
    %%%%%:13544-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13544-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:13544-block  2
branch 10 never executed
branch 11 never executed
    %%%%%:13544-block  3
    %%%%%:13544-block  4
    %%%%%:13544-block  5
    %%%%%:13544-block  6
    $$$$$:13544-block  7
    $$$$$:13544-block  8
        -:13545:}
function _ZN5Catch8endsWithERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEc called 0 returned 0% blocks executed 0%
    #####:13546:bool endsWith( std::string const& s, char suffix ) {
    #####:13547:return !s.empty() && s[s.size()-1] == suffix;
    %%%%%:13547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13547-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:13547-block  2
    %%%%%:13547-block  3
    %%%%%:13547-block  4
        -:13548:}
function _ZN5Catch8containsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 0 returned 0% blocks executed 0%
    #####:13549:bool contains( std::string const& s, std::string const& infix ) {
    #####:13550:return s.find( infix ) != std::string::npos;
    %%%%%:13550-block  0
call    0 never executed
        -:13551:}
function _ZN5Catch14toLowerInPlaceERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:13552:void toLowerInPlace( std::string& s ) {
    #####:13553:std::transform( s.begin(), s.end(), s.begin(), toLowerCh );
    %%%%%:13553-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:13554:}
function _ZN5Catch7toLowerERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:13555:std::string toLower( std::string const& s ) {
    #####:13556:std::string lc = s;
    %%%%%:13556-block  0
call    0 never executed
    #####:13557:toLowerInPlace( lc );
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13558:return lc;
    %%%%%:13558-block  0
    %%%%%:13558-block  1
        -:13559:}
function _ZN5Catch4trimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 16 returned 100% blocks executed 86%
       16:13560:std::string trim( std::string const& str ) {
        -:13561:static char const* whitespaceChars = "\n\r\t ";
       16:13562:std::string::size_type start = str.find_first_not_of( whitespaceChars );
       16:13562-block  0
call    0 returned 16
       16:13563:std::string::size_type end = str.find_last_not_of( whitespaceChars );
call    0 returned 16
        -:13564:
      16*:13565:return start != std::string::npos ? str.substr( start, 1+end-start ) : std::string();
branch  0 taken 16 (fallthrough)
branch  1 taken 0
       16:13565-block  0
call    2 returned 16
    %%%%%:13565-block  1
call    3 never executed
       16:13565-block  2
        -:13566:}
        -:13567:
function _ZN5Catch4trimENS_9StringRefE called 0 returned 0% blocks executed 0%
    #####:13568:StringRef trim(StringRef ref) {
        -:13569:const auto is_ws = [](char c) {
        -:13570:return c == ' ' || c == '\t' || c == '\n' || c == '\r';
        -:13571:};
    #####:13572:size_t real_begin = 0;
    %%%%%:13572-block  0
    #####:13573:while (real_begin < ref.size() && is_ws(ref[real_begin])) { ++real_begin; }
    %%%%%:13573-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13573-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:13573-block  2
    %%%%%:13573-block  3
    %%%%%:13573-block  4
branch  7 never executed
branch  8 never executed
    %%%%%:13573-block  5
    #####:13574:size_t real_end = ref.size();
    %%%%%:13574-block  0
call    0 never executed
    #####:13575:while (real_end > real_begin && is_ws(ref[real_end - 1])) { --real_end; }
    %%%%%:13575-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:13575-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:13575-block  2
    %%%%%:13575-block  3
    %%%%%:13575-block  4
branch  6 never executed
branch  7 never executed
    %%%%%:13575-block  5
        -:13576:
    #####:13577:return ref.substr(real_begin, real_end - real_begin);
    %%%%%:13577-block  0
call    0 never executed
        -:13578:}
        -:13579:
function _ZN5Catch14replaceInPlaceERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS5_S8_ called 0 returned 0% blocks executed 0%
    #####:13580:bool replaceInPlace( std::string& str, std::string const& replaceThis, std::string const& withThis ) {
    #####:13581:bool replaced = false;
    #####:13582:std::size_t i = str.find( replaceThis );
    %%%%%:13582-block  0
call    0 never executed
    #####:13583:while( i != std::string::npos ) {
    %%%%%:13583-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:13583-block  1
    #####:13584:replaced = true;
    #####:13585:str = str.substr( 0, i ) + withThis + str.substr( i+replaceThis.size() );
    %%%%%:13585-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13585-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:13585-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:13585-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$:13585-block  4
call   16 never executed
    $$$$$:13585-block  5
    $$$$$:13585-block  6
call   17 never executed
    $$$$$:13585-block  7
    $$$$$:13585-block  8
call   18 never executed
    #####:13586:if( i < str.size()-withThis.size() )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:13587:i = str.find( replaceThis, i+withThis.size() );
    %%%%%:13587-block  0
call    0 never executed
call    1 never executed
        -:13588:else
    #####:13589:i = std::string::npos;
    %%%%%:13589-block  0
        -:13590:}
    #####:13591:return replaced;
    %%%%%:13591-block  0
    %%%%%:13591-block  1
        -:13592:}
        -:13593:
function _ZN5Catch14splitStringRefENS_9StringRefEc called 0 returned 0% blocks executed 0%
    #####:13594:std::vector<StringRef> splitStringRef( StringRef str, char delimiter ) {
    #####:13595:std::vector<StringRef> subStrings;
    %%%%%:13595-block  0
call    0 never executed
    #####:13596:std::size_t start = 0;
    #####:13597:for(std::size_t pos = 0; pos < str.size(); ++pos ) {
    %%%%%:13597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13597-block  1
    #####:13598:if( str[pos] == delimiter ) {
    %%%%%:13598-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13599:if( pos - start > 1 )
    %%%%%:13599-block  0
branch  0 never executed
branch  1 never executed
    #####:13600:subStrings.push_back( str.substr( start, pos-start ) );
    %%%%%:13600-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13600-block  1
call    4 never executed
    $$$$$:13600-block  2
call    5 never executed
    $$$$$:13600-block  3
    #####:13601:start = pos+1;
    %%%%%:13601-block  0
        -:13602:}
        -:13603:}
    #####:13604:if( start < str.size() )
    %%%%%:13604-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13605:subStrings.push_back( str.substr( start, str.size()-start ) );
    %%%%%:13605-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13605-block  1
call    5 never executed
    $$$$$:13605-block  2
call    6 never executed
    $$$$$:13605-block  3
    #####:13606:return subStrings;
    %%%%%:13606-block  0
    %%%%%:13606-block  1
        -:13607:}
        -:13608:
function _ZN5Catch9pluraliseC2EjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 100%
        2:13609:pluralise::pluralise( std::size_t count, std::string const& label )
        -:13610::   m_count( count ),
        2:13611:m_label( label )
        2:13611-block  0
call    0 returned 2
        2:13612:{}
        -:13613:
function _ZN5CatchlsERSoRKNS_9pluraliseE called 2 returned 100% blocks executed 100%
        2:13614:std::ostream& operator << ( std::ostream& os, pluralise const& pluraliser ) {
        2:13615:os << pluraliser.m_count << ' ' << pluraliser.m_label;
        2:13615-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        2:13616:if( pluraliser.m_count != 1 )
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:13617:os << 's';
        2:13617-block  0
call    0 returned 2
        2:13618:return os;
        2:13618-block  0
        -:13619:}
        -:13620:
        -:13621:}
        -:13622:// end catch_string_manip.cpp
        -:13623:// start catch_stringref.cpp
        -:13624:
        -:13625:#if defined(__clang__)
        -:13626:#    pragma clang diagnostic push
        -:13627:#    pragma clang diagnostic ignored "-Wexit-time-destructors"
        -:13628:#endif
        -:13629:
        -:13630:#include <ostream>
        -:13631:#include <cstring>
        -:13632:#include <cstdint>
        -:13633:
        -:13634:namespace Catch {
function _ZN5Catch9StringRefC2EPKc called 110 returned 100% blocks executed 100%
      110:13635:StringRef::StringRef( char const* rawChars ) noexcept
      110:13636:: StringRef( rawChars, static_cast<StringRef::size_type>(std::strlen(rawChars) ) )
      110:13636-block  0
call    0 returned 110
      110:13637:{}
        -:13638:
function _ZN5Catch9StringRef4swapERS0_ called 0 returned 0% blocks executed 0%
    #####:13639:void StringRef::swap( StringRef& other ) noexcept {
    #####:13640:std::swap( m_start, other.m_start );
    %%%%%:13640-block  0
call    0 never executed
    #####:13641:std::swap( m_size, other.m_size );
call    0 never executed
    #####:13642:std::swap( m_data, other.m_data );
call    0 never executed
    #####:13643:}
        -:13644:
function _ZNK5Catch9StringRef5c_strEv called 0 returned 0% blocks executed 0%
    #####:13645:auto StringRef::c_str() const -> char const* {
    #####:13646:if( !isSubstring() )
    %%%%%:13646-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13647:return m_start;
    %%%%%:13647-block  0
        -:13648:
    #####:13649:const_cast<StringRef *>( this )->takeOwnership();
    %%%%%:13649-block  0
call    0 never executed
    #####:13650:return m_data;
        -:13651:}
function _ZNK5Catch9StringRef11currentDataEv called 0 returned 0% blocks executed 0%
    #####:13652:auto StringRef::currentData() const noexcept -> char const* {
    #####:13653:return m_start;
    %%%%%:13653-block  0
        -:13654:}
        -:13655:
function _ZNK5Catch9StringRef7isOwnedEv called 0 returned 0% blocks executed 0%
    #####:13656:auto StringRef::isOwned() const noexcept -> bool {
    #####:13657:return m_data != nullptr;
    %%%%%:13657-block  0
        -:13658:}
function _ZNK5Catch9StringRef11isSubstringEv called 0 returned 0% blocks executed 0%
    #####:13659:auto StringRef::isSubstring() const noexcept -> bool {
    #####:13660:return m_start[m_size] != '\0';
    %%%%%:13660-block  0
        -:13661:}
        -:13662:
function _ZN5Catch9StringRef13takeOwnershipEv called 0 returned 0% blocks executed 0%
    #####:13663:void StringRef::takeOwnership() {
    #####:13664:if( !isOwned() ) {
    %%%%%:13664-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13665:m_data = new char[m_size+1];
    %%%%%:13665-block  0
call    0 never executed
    #####:13666:memcpy( m_data, m_start, m_size );
    #####:13667:m_data[m_size] = '\0';
        -:13668:}
    #####:13669:}
function _ZNK5Catch9StringRef6substrEjj called 0 returned 0% blocks executed 0%
    #####:13670:auto StringRef::substr( size_type start, size_type size ) const noexcept -> StringRef {
    #####:13671:if( start < m_size )
    %%%%%:13671-block  0
branch  0 never executed
branch  1 never executed
    #####:13672:return StringRef( m_start+start, size );
    %%%%%:13672-block  0
call    0 never executed
        -:13673:else
    #####:13674:return StringRef();
    %%%%%:13674-block  0
call    0 never executed
        -:13675:}
function _ZNK5Catch9StringRefeqERKS0_ called 0 returned 0% blocks executed 0%
    #####:13676:auto StringRef::operator == ( StringRef const& other ) const noexcept -> bool {
        -:13677:return
    #####:13678:size() == other.size() &&
    %%%%%:13678-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13678-block  1
    %%%%%:13678-block  2
    #####:13679:(std::strncmp( m_start, other.m_start, size() ) == 0);
    %%%%%:13679-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13679-block  1
        -:13680:}
function _ZNK5Catch9StringRefneERKS0_ called 0 returned 0% blocks executed 0%
    #####:13681:auto StringRef::operator != ( StringRef const& other ) const noexcept -> bool {
    #####:13682:return !operator==( other );
    %%%%%:13682-block  0
call    0 never executed
        -:13683:}
        -:13684:
function _ZN5CatchlsERSoRKNS_9StringRefE called 0 returned 0% blocks executed 0%
    #####:13685:auto operator << ( std::ostream& os, StringRef const& str ) -> std::ostream& {
    #####:13686:return os.write(str.currentData(), str.size());
    %%%%%:13686-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:13687:}
        -:13688:
function _ZN5CatchpLERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9StringRefE called 0 returned 0% blocks executed 0%
    #####:13689:auto operator+=( std::string& lhs, StringRef const& rhs ) -> std::string& {
    #####:13690:lhs.append(rhs.currentData(), rhs.size());
    %%%%%:13690-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:13691:return lhs;
        -:13692:}
        -:13693:
        -:13694:} // namespace Catch
        -:13695:
        -:13696:#if defined(__clang__)
        -:13697:#    pragma clang diagnostic pop
        -:13698:#endif
        -:13699:// end catch_stringref.cpp
        -:13700:// start catch_tag_alias.cpp
        -:13701:
        -:13702:namespace Catch {
function _ZN5Catch8TagAliasC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_14SourceLineInfoE called 0 returned 0% blocks executed 0%
    #####:13703:TagAlias::TagAlias(std::string const & _tag, SourceLineInfo _lineInfo): tag(_tag), lineInfo(_lineInfo) {}
    %%%%%:13703-block  0
call    0 never executed
        -:13704:}
        -:13705:// end catch_tag_alias.cpp
        -:13706:// start catch_tag_alias_autoregistrar.cpp
        -:13707:
        -:13708:namespace Catch {
        -:13709:
function _ZN5Catch22RegistrarForTagAliasesC2EPKcS2_RKNS_14SourceLineInfoE called 0 returned 0% blocks executed 0%
    #####:13710:RegistrarForTagAliases::RegistrarForTagAliases(char const* alias, char const* tag, SourceLineInfo const& lineInfo) {
        -:13711:CATCH_TRY {
    #####:13712:getMutableRegistryHub().registerTagAlias(alias, tag, lineInfo);
    %%%%%:13712-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13712-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:13712-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:13712-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:13712-block  4
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$:13712-block  5
call   18 never executed
    $$$$$:13712-block  6
    $$$$$:13712-block  7
call   19 never executed
    $$$$$:13712-block  8
    $$$$$:13712-block  9
call   20 never executed
    $$$$$:13712-block 10
    $$$$$:13712-block 11
call   21 never executed
    $$$$$:13712-block 12
    =====:13713:} CATCH_CATCH_ALL {
    $$$$$:13713-block  0
call    0 never executed
call    1 never executed
    $$$$$:13713-block  1
call    2 never executed
        -:13714:// Do not throw when constructing global objects, instead register the exception to be processed later
    =====:13715:getMutableRegistryHub().registerStartupException();
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:13715-block  0
call    3 never executed
        -:13716:}
    #####:13717:}
    %%%%%:13717-block  0
        -:13718:
        -:13719:}
        -:13720:// end catch_tag_alias_autoregistrar.cpp
        -:13721:// start catch_tag_alias_registry.cpp
        -:13722:
        -:13723:#include <sstream>
        -:13724:
        -:13725:namespace Catch {
        -:13726:
       1*:13727:TagAliasRegistry::~TagAliasRegistry() {}
------------------
_ZN5Catch16TagAliasRegistryD0Ev:
function _ZN5Catch16TagAliasRegistryD0Ev called 0 returned 0% blocks executed 0%
    #####:13727:TagAliasRegistry::~TagAliasRegistry() {}
    %%%%%:13727-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch16TagAliasRegistryD2Ev:
function _ZN5Catch16TagAliasRegistryD2Ev called 1 returned 100% blocks executed 100%
        1:13727:TagAliasRegistry::~TagAliasRegistry() {}
        1:13727-block  0
call    0 returned 1
call    1 returned 1
------------------
        -:13728:
function _ZNK5Catch16TagAliasRegistry4findERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:13729:TagAlias const* TagAliasRegistry::find( std::string const& alias ) const {
    #####:13730:auto it = m_registry.find( alias );
    %%%%%:13730-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13731:if( it != m_registry.end() )
    %%%%%:13731-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:13732:return &(it->second);
    %%%%%:13732-block  0
call    0 never executed
        -:13733:else
    #####:13734:return nullptr;
    %%%%%:13734-block  0
        -:13735:}
        -:13736:
function _ZNK5Catch16TagAliasRegistry13expandAliasesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:13737:std::string TagAliasRegistry::expandAliases( std::string const& unexpandedTestSpec ) const {
    #####:13738:std::string expandedTestSpec = unexpandedTestSpec;
    %%%%%:13738-block  0
call    0 never executed
    #####:13739:for( auto const& registryKvp : m_registry ) {
call    0 never executed
call    1 never executed
    %%%%%:13739-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13739-block  1
call    5 never executed
    %%%%%:13739-block  2
call    6 never executed
    #####:13740:std::size_t pos = expandedTestSpec.find( registryKvp.first );
call    0 never executed
    #####:13741:if( pos != std::string::npos ) {
branch  0 never executed
branch  1 never executed
    #####:13742:expandedTestSpec =  expandedTestSpec.substr( 0, pos ) +
    %%%%%:13742-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:13742-block  1
call    4 never executed
    $$$$$:13742-block  2
    $$$$$:13742-block  3
call    5 never executed
    $$$$$:13742-block  4
    #####:13743:registryKvp.second.tag +
    %%%%%:13743-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13743-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:13744:expandedTestSpec.substr( pos + registryKvp.first.size() );
    %%%%%:13744-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13744-block  1
call    4 never executed
call    5 never executed
    $$$$$:13744-block  2
call    6 never executed
    $$$$$:13744-block  3
        -:13745:}
        -:13746:}
    #####:13747:return expandedTestSpec;
    %%%%%:13747-block  0
    %%%%%:13747-block  1
        -:13748:}
        -:13749:
function _ZN5Catch16TagAliasRegistry3addERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_RKNS_14SourceLineInfoE called 0 returned 0% blocks executed 0%
    #####:13750:void TagAliasRegistry::add( std::string const& alias, std::string const& tag, SourceLineInfo const& lineInfo ) {
    #####:13751:CATCH_ENFORCE( startsWith(alias, "[@") && endsWith(alias, ']'),
    %%%%%:13751-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13751-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:13751-block  2
branch  7 never executed
branch  8 never executed
    %%%%%:13751-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:13751-block  4
    %%%%%:13751-block  5
    %%%%%:13751-block  6
branch 12 never executed
branch 13 never executed
    %%%%%:13751-block  7
call   14 never executed
    %%%%%:13751-block  8
branch 15 never executed
branch 16 never executed
    %%%%%:13751-block  9
call   17 never executed
    %%%%%:13751-block 10
branch 18 never executed
branch 19 never executed
    %%%%%:13751-block 11
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:13751-block 12
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%:13751-block 13
call   27 never executed
branch 28 never executed
branch 29 never executed
    %%%%%:13751-block 14
call   30 never executed
branch 31 never executed
branch 32 never executed
    %%%%%:13751-block 15
call   33 never executed
branch 34 never executed
branch 35 never executed
    %%%%%:13751-block 16
call   36 never executed
    $$$$$:13751-block 17
branch 37 never executed
branch 38 never executed
    $$$$$:13751-block 18
call   39 never executed
    $$$$$:13751-block 19
    $$$$$:13751-block 20
branch 40 never executed
branch 41 never executed
    $$$$$:13751-block 21
call   42 never executed
    $$$$$:13751-block 22
call   43 never executed
    $$$$$:13751-block 23
call   44 never executed
    $$$$$:13751-block 24
    $$$$$:13751-block 25
call   45 never executed
    $$$$$:13751-block 26
call   46 never executed
        -:13752:"error: tag alias, '" << alias << "' is not of the form [@alias name].\n" << lineInfo );
        -:13753:
    #####:13754:CATCH_ENFORCE( m_registry.insert(std::make_pair(alias, TagAlias(tag, lineInfo))).second,
    %%%%%:13754-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13754-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:13754-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:13754-block  3
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:13754-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:13754-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%:13754-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:13754-block  7
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%:13754-block  8
call   27 never executed
branch 28 never executed
branch 29 never executed
    %%%%%:13754-block  9
call   30 never executed
branch 31 never executed
branch 32 never executed
    %%%%%:13754-block 10
call   33 never executed
branch 34 never executed
branch 35 never executed
    %%%%%:13754-block 11
call   36 never executed
branch 37 never executed
branch 38 never executed
    %%%%%:13754-block 12
call   39 never executed
branch 40 never executed
branch 41 never executed
    %%%%%:13754-block 13
call   42 never executed
    $$$$$:13754-block 14
call   43 never executed
    $$$$$:13754-block 15
    $$$$$:13754-block 16
call   44 never executed
    $$$$$:13754-block 17
call   45 never executed
    $$$$$:13754-block 18
call   46 never executed
    $$$$$:13754-block 19
    $$$$$:13754-block 20
call   47 never executed
        -:13755:"error: tag alias, '" << alias << "' already registered.\n"
        -:13756:<< "\tFirst seen at: " << find(alias)->lineInfo << "\n"
        -:13757:<< "\tRedefined at: " << lineInfo );
    #####:13758:}
    %%%%%:13758-block  0
        -:13759:
       1*:13760:ITagAliasRegistry::~ITagAliasRegistry() {}
------------------
_ZN5Catch17ITagAliasRegistryD0Ev:
function _ZN5Catch17ITagAliasRegistryD0Ev called 0 returned 0% blocks executed 0%
    #####:13760:ITagAliasRegistry::~ITagAliasRegistry() {}
    %%%%%:13760-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch17ITagAliasRegistryD2Ev:
function _ZN5Catch17ITagAliasRegistryD2Ev called 1 returned 100% blocks executed 100%
        1:13760:ITagAliasRegistry::~ITagAliasRegistry() {}
------------------
        -:13761:
function _ZN5Catch17ITagAliasRegistry3getEv called 1 returned 100% blocks executed 100%
        1:13762:ITagAliasRegistry const& ITagAliasRegistry::get() {
        1:13763:return getRegistryHub().getTagAliasRegistry();
        1:13763-block  0
call    0 returned 1
call    1 returned 1
        -:13764:}
        -:13765:
        -:13766:} // end namespace Catch
        -:13767:// end catch_tag_alias_registry.cpp
        -:13768:// start catch_test_case_info.cpp
        -:13769:
        -:13770:#include <cctype>
        -:13771:#include <exception>
        -:13772:#include <algorithm>
        -:13773:#include <sstream>
        -:13774:
        -:13775:namespace Catch {
        -:13776:
        -:13777:namespace {
function _ZN5Catch12_GLOBAL__N_115parseSpecialTagERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:13778:TestCaseInfo::SpecialProperties parseSpecialTag( std::string const& tag ) {
    #####:13779:if( startsWith( tag, '.' ) ||
    %%%%%:13779-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13779-block  1
    %%%%%:13779-block  2
    %%%%%:13779-block  3
branch  5 never executed
branch  6 never executed
    #####:13780:tag == "!hide" )
    %%%%%:13780-block  0
call    0 never executed
    #####:13781:return TestCaseInfo::IsHidden;
    %%%%%:13781-block  0
    #####:13782:else if( tag == "!throws" )
    %%%%%:13782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13783:return TestCaseInfo::Throws;
    %%%%%:13783-block  0
    #####:13784:else if( tag == "!shouldfail" )
    %%%%%:13784-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13785:return TestCaseInfo::ShouldFail;
    %%%%%:13785-block  0
    #####:13786:else if( tag == "!mayfail" )
    %%%%%:13786-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13787:return TestCaseInfo::MayFail;
    %%%%%:13787-block  0
    #####:13788:else if( tag == "!nonportable" )
    %%%%%:13788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13789:return TestCaseInfo::NonPortable;
    %%%%%:13789-block  0
    #####:13790:else if( tag == "!benchmark" )
    %%%%%:13790-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13791:return static_cast<TestCaseInfo::SpecialProperties>( TestCaseInfo::Benchmark | TestCaseInfo::IsHidden );
    %%%%%:13791-block  0
        -:13792:else
    #####:13793:return TestCaseInfo::None;
    %%%%%:13793-block  0
        -:13794:}
function _ZN5Catch12_GLOBAL__N_113isReservedTagERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:13795:bool isReservedTag( std::string const& tag ) {
    #####:13796:return parseSpecialTag( tag ) == TestCaseInfo::None && tag.size() > 0 && !std::isalnum( static_cast<unsigned char>(tag[0]) );
    %%%%%:13796-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13796-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:13796-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:13796-block  3
    %%%%%:13796-block  4
    %%%%%:13796-block  5
        -:13797:}
function _ZN5Catch12_GLOBAL__N_121enforceNotReservedTagERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_14SourceLineInfoE called 0 returned 0% blocks executed 0%
    #####:13798:void enforceNotReservedTag( std::string const& tag, SourceLineInfo const& _lineInfo ) {
    #####:13799:CATCH_ENFORCE( !isReservedTag(tag),
    %%%%%:13799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13799-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:13799-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:13799-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:13799-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:13799-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:13799-block  6
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:13799-block  7
call   22 never executed
    $$$$$:13799-block  8
call   23 never executed
    $$$$$:13799-block  9
    $$$$$:13799-block 10
call   24 never executed
        -:13800:"Tag name: [" << tag << "] is not allowed.\n"
        -:13801:<< "Tag names starting with non alphanumeric characters are reserved\n"
        -:13802:<< _lineInfo );
    #####:13803:}
    %%%%%:13803-block  0
        -:13804:}
        -:13805:
function _ZN5Catch12makeTestCaseEPNS_12ITestInvokerERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_11NameAndTagsERKNS_14SourceLineInfoE called 8 returned 100% blocks executed 29%
        8:13806:TestCase makeTestCase(  ITestInvoker* _testCase,
        -:13807:std::string const& _className,
        -:13808:NameAndTags const& nameAndTags,
        -:13809:SourceLineInfo const& _lineInfo )
        -:13810:{
        8:13811:bool isHidden = false;
        -:13812:
        -:13813:// Parse out tags
       16:13814:std::vector<std::string> tags;
        8:13814-block  0
call    0 returned 8
call    1 returned 8
    $$$$$:13814-block  1
call    2 never executed
       16:13815:std::string desc, tag;
call    0 returned 8
call    1 returned 8
call    2 returned 8
call    3 returned 8
    $$$$$:13815-block  0
call    4 never executed
    $$$$$:13815-block  1
call    5 never executed
        8:13816:bool inTag = false;
       8*:13817:for (char c : nameAndTags.tags) {
call    0 returned 8
call    1 returned 8
        8:13817-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 8
    %%%%%:13817-block  1
    #####:13818:if( !inTag ) {
    %%%%%:13818-block  0
branch  0 never executed
branch  1 never executed
    #####:13819:if( c == '[' )
    %%%%%:13819-block  0
branch  0 never executed
branch  1 never executed
    #####:13820:inTag = true;
    %%%%%:13820-block  0
        -:13821:else
    #####:13822:desc += c;
    %%%%%:13822-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:13823:}
        -:13824:else {
    #####:13825:if( c == ']' ) {
    %%%%%:13825-block  0
branch  0 never executed
branch  1 never executed
    #####:13826:TestCaseInfo::SpecialProperties prop = parseSpecialTag( tag );
    %%%%%:13826-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13827:if( ( prop & TestCaseInfo::IsHidden ) != 0 )
    %%%%%:13827-block  0
branch  0 never executed
branch  1 never executed
    #####:13828:isHidden = true;
    %%%%%:13828-block  0
    #####:13829:else if( prop == TestCaseInfo::None )
    %%%%%:13829-block  0
branch  0 never executed
branch  1 never executed
    #####:13830:enforceNotReservedTag( tag, _lineInfo );
    %%%%%:13830-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:13831:
        -:13832:// Merged hide tags like `[.approvals]` should be added as
        -:13833:// `[.][approvals]`. The `[.]` is added at later point, so
        -:13834:// we only strip the prefix
    #####:13835:if (startsWith(tag, '.') && tag.size() > 1) {
    %%%%%:13835-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13835-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:13835-block  2
    %%%%%:13835-block  3
    %%%%%:13835-block  4
branch  6 never executed
branch  7 never executed
    #####:13836:tag.erase(0, 1);
    %%%%%:13836-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:13837:}
    #####:13838:tags.push_back( tag );
    %%%%%:13838-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13839:tag.clear();
    %%%%%:13839-block  0
call    0 never executed
    #####:13840:inTag = false;
        -:13841:}
        -:13842:else
    #####:13843:tag += c;
    %%%%%:13843-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:13844:}
        -:13845:}
        8:13846:if( isHidden ) {
        8:13846-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####:13847:tags.push_back( "." );
    %%%%%:13847-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13847-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:13847-block  2
call    7 never executed
call    8 never executed
    $$$$$:13847-block  3
call    9 never executed
    $$$$$:13847-block  4
    $$$$$:13847-block  5
call   10 never executed
    $$$$$:13847-block  6
        -:13848:}
        -:13849:
       16:13850:TestCaseInfo info( static_cast<std::string>(nameAndTags.name), _className, desc, tags, _lineInfo );
        8:13850-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:13850-block  1
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        8:13850-block  2
call    6 returned 8
    $$$$$:13850-block  3
    $$$$$:13850-block  4
call    7 never executed
       16:13851:return TestCase( _testCase, std::move(info) );
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8:13851-block  0
        8:13851-block  1
        -:13852:}
        -:13853:
function _ZN5Catch7setTagsERNS_12TestCaseInfoESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EE called 8 returned 100% blocks executed 59%
        8:13854:void setTags( TestCaseInfo& testCaseInfo, std::vector<std::string> tags ) {
        8:13855:std::sort(begin(tags), end(tags));
        8:13855-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
        8:13856:tags.erase(std::unique(begin(tags), end(tags)), end(tags));
call    0 returned 8
call    1 returned 8
call    2 returned 8
call    3 returned 8
call    4 returned 8
branch  5 taken 8 (fallthrough)
branch  6 taken 0 (throw)
        8:13856-block  0
call    7 returned 8
call    8 returned 8
branch  9 taken 8 (fallthrough)
branch 10 taken 0 (throw)
    $$$$$:13856-block  1
    $$$$$:13856-block  2
    $$$$$:13856-block  3
    $$$$$:13856-block  4
call   11 never executed
        8:13857:testCaseInfo.lcaseTags.clear();
        8:13857-block  0
call    0 returned 8
        -:13858:
       8*:13859:for( auto const& tag : tags ) {
call    0 returned 8
call    1 returned 8
        8:13859-block  0
call    2 returned 8
branch  3 taken 0 (fallthrough)
branch  4 taken 8
    %%%%%:13859-block  1
call    5 never executed
call    6 never executed
    #####:13860:std::string lcaseTag = toLower( tag );
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13860-block  0
call    3 never executed
    $$$$$:13860-block  1
call    4 never executed
    #####:13861:testCaseInfo.properties = static_cast<TestCaseInfo::SpecialProperties>( testCaseInfo.properties | parseSpecialTag( lcaseTag ) );
    %%%%%:13861-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13862:testCaseInfo.lcaseTags.push_back( lcaseTag );
    %%%%%:13862-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:13863:}
        8:13864:testCaseInfo.tags = std::move(tags);
        8:13864-block  0
call    0 returned 8
call    1 returned 8
        8:13865:}
        -:13866:
function _ZN5Catch12TestCaseInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_S8_RKSt6vectorIS6_SaIS6_EERKNS_14SourceLineInfoE called 8 returned 100% blocks executed 45%
        8:13867:TestCaseInfo::TestCaseInfo( std::string const& _name,
        -:13868:std::string const& _className,
        -:13869:std::string const& _description,
        -:13870:std::vector<std::string> const& _tags,
        8:13871:SourceLineInfo const& _lineInfo )
        -:13872::   name( _name ),
        -:13873:className( _className ),
        -:13874:description( _description ),
        -:13875:lineInfo( _lineInfo ),
        8:13876:properties( None )
        8:13876-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8:13876-block  1
call    4 returned 8
branch  5 taken 8 (fallthrough)
branch  6 taken 0 (throw)
        8:13876-block  2
call    7 returned 8
call    8 returned 8
    $$$$$:13876-block  3
call    9 never executed
    $$$$$:13876-block  4
call   10 never executed
    $$$$$:13876-block  5
call   11 never executed
    $$$$$:13876-block  6
call   12 never executed
    $$$$$:13876-block  7
call   13 never executed
        -:13877:{
        8:13878:setTags( *this, _tags );
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:13878-block  0
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        8:13878-block  1
call    6 returned 8
    $$$$$:13878-block  2
call    7 never executed
    $$$$$:13878-block  3
        8:13879:}
        -:13880:
function _ZNK5Catch12TestCaseInfo8isHiddenEv called 8 returned 100% blocks executed 100%
        8:13881:bool TestCaseInfo::isHidden() const {
        8:13882:return ( properties & IsHidden ) != 0;
        8:13882-block  0
        -:13883:}
function _ZNK5Catch12TestCaseInfo6throwsEv called 0 returned 0% blocks executed 0%
    #####:13884:bool TestCaseInfo::throws() const {
    #####:13885:return ( properties & Throws ) != 0;
    %%%%%:13885-block  0
        -:13886:}
function _ZNK5Catch12TestCaseInfo8okToFailEv called 0 returned 0% blocks executed 0%
    #####:13887:bool TestCaseInfo::okToFail() const {
    #####:13888:return ( properties & (ShouldFail | MayFail ) ) != 0;
    %%%%%:13888-block  0
        -:13889:}
function _ZNK5Catch12TestCaseInfo14expectedToFailEv called 8 returned 100% blocks executed 100%
        8:13890:bool TestCaseInfo::expectedToFail() const {
        8:13891:return ( properties & (ShouldFail ) ) != 0;
        8:13891-block  0
        -:13892:}
        -:13893:
function _ZNK5Catch12TestCaseInfo12tagsAsStringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:13894:std::string TestCaseInfo::tagsAsString() const {
    #####:13895:std::string ret;
    %%%%%:13895-block  0
call    0 never executed
        -:13896:// '[' and ']' per tag
    #####:13897:std::size_t full_size = 2 * tags.size();
call    0 never executed
    #####:13898:for (const auto& tag : tags) {
call    0 never executed
call    1 never executed
    %%%%%:13898-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13898-block  1
call    5 never executed
    #####:13899:full_size += tag.size();
call    0 never executed
call    1 never executed
        -:13900:}
    #####:13901:ret.reserve(full_size);
    %%%%%:13901-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13902:for (const auto& tag : tags) {
    %%%%%:13902-block  0
call    0 never executed
call    1 never executed
    %%%%%:13902-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13902-block  2
call    5 never executed
    %%%%%:13902-block  3
call    6 never executed
    #####:13903:ret.push_back('[');
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13904:ret.append(tag);
    %%%%%:13904-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13905:ret.push_back(']');
    %%%%%:13905-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:13906:}
        -:13907:
    #####:13908:return ret;
    %%%%%:13908-block  0
    %%%%%:13908-block  1
        -:13909:}
        -:13910:
function _ZN5Catch8TestCaseC2EPNS_12ITestInvokerEONS_12TestCaseInfoE called 8 returned 100% blocks executed 83%
        8:13911:TestCase::TestCase( ITestInvoker* testCase, TestCaseInfo&& info ) : TestCaseInfo( std::move(info) ), test( testCase ) {}
        8:13911-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
branch  3 taken 8 (fallthrough)
branch  4 taken 0 (throw)
        8:13911-block  1
    $$$$$:13911-block  2
call    5 never executed
        -:13912:
function _ZNK5Catch8TestCase8withNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:13913:TestCase TestCase::withName( std::string const& _newName ) const {
    #####:13914:TestCase other( *this );
    %%%%%:13914-block  0
call    0 never executed
    #####:13915:other.name = _newName;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13916:return other;
    %%%%%:13916-block  0
    %%%%%:13916-block  1
        -:13917:}
        -:13918:
function _ZNK5Catch8TestCase6invokeEv called 8 returned 100% blocks executed 100%
        8:13919:void TestCase::invoke() const {
        8:13920:test->invoke();
        8:13920-block  0
call    0 returned 8
call    1 returned 8
        8:13921:}
        -:13922:
function _ZNK5Catch8TestCaseeqERKS0_ called 0 returned 0% blocks executed 0%
    #####:13923:bool TestCase::operator == ( TestCase const& other ) const {
    #####:13924:return  test.get() == other.test.get() &&
    %%%%%:13924-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:13925:name == other.name &&
branch  0 never executed
branch  1 never executed
    %%%%%:13925-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13925-block  1
    %%%%%:13925-block  2
    #####:13926:className == other.className;
    %%%%%:13926-block  0
call    0 never executed
    %%%%%:13926-block  1
        -:13927:}
        -:13928:
function _ZNK5Catch8TestCaseltERKS0_ called 29 returned 100% blocks executed 100%
       29:13929:bool TestCase::operator < ( TestCase const& other ) const {
       29:13930:return name < other.name;
       29:13930-block  0
call    0 returned 29
        -:13931:}
        -:13932:
function _ZNK5Catch8TestCase15getTestCaseInfoEv called 24 returned 100% blocks executed 100%
       24:13933:TestCaseInfo const& TestCase::getTestCaseInfo() const
        -:13934:{
       24:13935:return *this;
       24:13935-block  0
        -:13936:}
        -:13937:
        -:13938:} // end namespace Catch
        -:13939:// end catch_test_case_info.cpp
        -:13940:// start catch_test_case_registry_impl.cpp
        -:13941:
        -:13942:#include <sstream>
        -:13943:
        -:13944:namespace Catch {
        -:13945:
function _ZN5Catch9sortTestsERKNS_7IConfigERKSt6vectorINS_8TestCaseESaIS4_EE called 1 returned 100% blocks executed 39%
        1:13946:std::vector<TestCase> sortTests( IConfig const& config, std::vector<TestCase> const& unsortedTestCases ) {
        -:13947:
        1:13948:std::vector<TestCase> sorted = unsortedTestCases;
        1:13948-block  0
call    0 returned 1
        -:13949:
        1:13950:switch( config.runOrder() ) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:13950-block  0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 1
branch  6 taken 0
    #####:13951:case RunTests::InLexicographicalOrder:
    #####:13952:std::sort( sorted.begin(), sorted.end() );
    %%%%%:13952-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:13953:break;
    %%%%%:13953-block  0
    #####:13954:case RunTests::InRandomOrder:
    #####:13955:seedRng( config );
    %%%%%:13955-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:13956:std::shuffle( sorted.begin(), sorted.end(), rng() );
    %%%%%:13956-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13956-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:13957:break;
    %%%%%:13957-block  0
        1:13958:case RunTests::InDeclarationOrder:
        -:13959:// already in declaration order
        1:13960:break;
        1:13960-block  0
        -:13961:}
        1:13962:return sorted;
        1:13962-block  0
        1:13962-block  1
        -:13963:}
        -:13964:
function _ZN5Catch11isThrowSafeERKNS_8TestCaseERKNS_7IConfigE called 0 returned 0% blocks executed 0%
    #####:13965:bool isThrowSafe( TestCase const& testCase, IConfig const& config ) {
    #####:13966:return !testCase.throws() || config.allowThrows();
    %%%%%:13966-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13966-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:13966-block  2
    %%%%%:13966-block  3
    %%%%%:13966-block  4
        -:13967:}
        -:13968:
function _ZN5Catch9matchTestERKNS_8TestCaseERKNS_8TestSpecERKNS_7IConfigE called 0 returned 0% blocks executed 0%
    #####:13969:bool matchTest( TestCase const& testCase, TestSpec const& testSpec, IConfig const& config ) {
    #####:13970:return testSpec.matches( testCase ) && isThrowSafe( testCase, config );
    %%%%%:13970-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13970-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:13970-block  2
    %%%%%:13970-block  3
    %%%%%:13970-block  4
        -:13971:}
        -:13972:
function _ZN5Catch27enforceNoDuplicateTestCasesERKSt6vectorINS_8TestCaseESaIS1_EE called 1 returned 100% blocks executed 33%
        1:13973:void enforceNoDuplicateTestCases( std::vector<TestCase> const& functions ) {
        2:13974:std::set<TestCase> seenFunctions;
        1:13974-block  0
call    0 returned 1
        1:13974-block  1
call    1 returned 1
    $$$$$:13974-block  2
call    2 never executed
        9:13975:for( auto const& function : functions ) {
call    0 returned 1
call    1 returned 1
        9:13975-block  0
call    2 returned 9
branch  3 taken 8 (fallthrough)
branch  4 taken 1
        8:13975-block  1
call    5 returned 8
        8:13975-block  2
call    6 returned 8
        8:13976:auto prev = seenFunctions.insert( function );
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
       8*:13977:CATCH_ENFORCE( prev.second,
        8:13977-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    %%%%%:13977-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13977-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:13977-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:13977-block  4
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:13977-block  5
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:13977-block  6
call   17 never executed
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:13977-block  7
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%:13977-block  8
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%:13977-block  9
call   28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
    %%%%%:13977-block 10
call   32 never executed
branch 33 never executed
branch 34 never executed
    %%%%%:13977-block 11
call   35 never executed
    $$$$$:13977-block 12
call   36 never executed
    $$$$$:13977-block 13
    $$$$$:13977-block 14
call   37 never executed
    $$$$$:13977-block 15
        -:13978:"error: TEST_CASE( \"" << function.name << "\" ) already defined.\n"
        -:13979:<< "\tFirst seen at " << prev.first->getTestCaseInfo().lineInfo << "\n"
        -:13980:<< "\tRedefined at " << function.getTestCaseInfo().lineInfo );
        -:13981:}
        1:13982:}
        -:13983:
function _ZN5Catch11filterTestsERKSt6vectorINS_8TestCaseESaIS1_EERKNS_8TestSpecERKNS_7IConfigE called 0 returned 0% blocks executed 0%
    #####:13984:std::vector<TestCase> filterTests( std::vector<TestCase> const& testCases, TestSpec const& testSpec, IConfig const& config ) {
    #####:13985:std::vector<TestCase> filtered;
    %%%%%:13985-block  0
call    0 never executed
    #####:13986:filtered.reserve( testCases.size() );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:13987:for (auto const& testCase : testCases) {
    %%%%%:13987-block  0
call    0 never executed
call    1 never executed
    %%%%%:13987-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:13987-block  2
call    5 never executed
    %%%%%:13987-block  3
call    6 never executed
    #####:13988:if ((!testSpec.hasFilters() && !testCase.isHidden()) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:13988-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:13988-block  1
    %%%%%:13988-block  2
    %%%%%:13988-block  3
branch  8 never executed
branch  9 never executed
    #####:13989:(testSpec.hasFilters() && matchTest(testCase, testSpec, config))) {
    %%%%%:13989-block  0
call    0 never executed
    %%%%%:13989-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:13989-block  2
branch  4 never executed
branch  5 never executed
    #####:13990:filtered.push_back(testCase);
    %%%%%:13990-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:13991:}
        -:13992:}
    #####:13993:return filtered;
    %%%%%:13993-block  0
    %%%%%:13993-block  1
        -:13994:}
function _ZN5Catch21getAllTestCasesSortedERKNS_7IConfigE called 1 returned 100% blocks executed 100%
        1:13995:std::vector<TestCase> const& getAllTestCasesSorted( IConfig const& config ) {
        1:13996:return getRegistryHub().getTestCaseRegistry().getAllTestsSorted( config );
        1:13996-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:13997:}
        -:13998:
function _ZN5Catch12TestRegistry12registerTestERKNS_8TestCaseE called 8 returned 100% blocks executed 33%
        8:13999:void TestRegistry::registerTest( TestCase const& testCase ) {
        8:14000:std::string name = testCase.getTestCaseInfo().name;
        8:14000-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:14000-block  1
call    4 never executed
        8:14001:if( name.empty() ) {
        8:14001-block  0
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
    #####:14002:ReusableStringStream rss;
    %%%%%:14002-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:14002-block  1
call    3 never executed
    #####:14003:rss << "Anonymous test case " << ++m_unnamedCount;
    %%%%%:14003-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14003-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:14004:return registerTest( testCase.withName( rss.str() ) );
    %%%%%:14004-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14004-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:14004-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:14004-block  3
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$:14004-block  4
call   12 never executed
    $$$$$:14004-block  5
    $$$$$:14004-block  6
call   13 never executed
    $$$$$:14004-block  7
        -:14005:}
        8:14006:m_functions.push_back( testCase );
        8:14006-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        -:14007:}
        -:14008:
function _ZNK5Catch12TestRegistry11getAllTestsEv called 0 returned 0% blocks executed 0%
    #####:14009:std::vector<TestCase> const& TestRegistry::getAllTests() const {
    #####:14010:return m_functions;
    %%%%%:14010-block  0
        -:14011:}
function _ZNK5Catch12TestRegistry17getAllTestsSortedERKNS_7IConfigE called 1 returned 100% blocks executed 94%
        1:14012:std::vector<TestCase> const& TestRegistry::getAllTestsSorted( IConfig const& config ) const {
        1:14013:if( m_sortedFunctions.empty() )
        1:14013-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:14014:enforceNoDuplicateTestCases( m_functions );
        1:14014-block  0
call    0 returned 1
        -:14015:
       1*:14016:if(  m_currentSortOrder != config.runOrder() || m_sortedFunctions.empty() ) {
        1:14016-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:14016-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:14016-block  2
    %%%%%:14016-block  3
        1:14016-block  4
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1:14017:m_sortedFunctions = sortTests( config, m_functions );
        1:14017-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:14018:m_currentSortOrder = config.runOrder();
call    0 returned 1
        -:14019:}
        1:14020:return m_sortedFunctions;
        1:14020-block  0
        -:14021:}
        -:14022:
        -:14023:///////////////////////////////////////////////////////////////////////////
function _ZN5Catch21TestInvokerAsFunctionC2EPFvvE called 8 returned 100% blocks executed 100%
        8:14024:TestInvokerAsFunction::TestInvokerAsFunction( void(*testAsFunction)() ) noexcept : m_testAsFunction( testAsFunction ) {}
        8:14024-block  0
call    0 returned 8
        -:14025:
function _ZNK5Catch21TestInvokerAsFunction6invokeEv called 8 returned 100% blocks executed 100%
        8:14026:void TestInvokerAsFunction::invoke() const {
        8:14027:m_testAsFunction();
        8:14027-block  0
call    0 returned 8
        8:14028:}
        -:14029:
function _ZN5Catch16extractClassNameB5cxx11ERKNS_9StringRefE called 8 returned 100% blocks executed 40%
        8:14030:std::string extractClassName( StringRef const& classOrQualifiedMethodName ) {
        8:14031:std::string className(classOrQualifiedMethodName);
        8:14031-block  0
call    0 returned 8
        8:14032:if( startsWith( className, '&' ) )
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
        -:14033:{
    #####:14034:std::size_t lastColons = className.rfind( "::" );
    %%%%%:14034-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14035:std::size_t penultimateColons = className.rfind( "::", lastColons-1 );
    %%%%%:14035-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14036:if( penultimateColons == std::string::npos )
    %%%%%:14036-block  0
branch  0 never executed
branch  1 never executed
    #####:14037:penultimateColons = 1;
    %%%%%:14037-block  0
    #####:14038:className = className.substr( penultimateColons, lastColons-penultimateColons );
    %%%%%:14038-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14038-block  1
call    3 never executed
call    4 never executed
        -:14039:}
        8:14040:return className;
        8:14040-block  0
        8:14040-block  1
        -:14041:}
        -:14042:
        -:14043:} // end namespace Catch
        -:14044:// end catch_test_case_registry_impl.cpp
        -:14045:// start catch_test_case_tracker.cpp
        -:14046:
        -:14047:#include <algorithm>
        -:14048:#include <cassert>
        -:14049:#include <stdexcept>
        -:14050:#include <memory>
        -:14051:#include <sstream>
        -:14052:
        -:14053:#if defined(__clang__)
        -:14054:#    pragma clang diagnostic push
        -:14055:#    pragma clang diagnostic ignored "-Wexit-time-destructors"
        -:14056:#endif
        -:14057:
        -:14058:namespace Catch {
        -:14059:namespace TestCaseTracking {
        -:14060:
function _ZN5Catch16TestCaseTracking15NameAndLocationC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_14SourceLineInfoE called 16 returned 100% blocks executed 100%
       16:14061:NameAndLocation::NameAndLocation( std::string const& _name, SourceLineInfo const& _location )
        -:14062::   name( _name ),
       16:14063:location( _location )
       16:14063-block  0
call    0 returned 16
       16:14064:{}
        -:14065:
        -:14066:ITracker::~ITracker() = default;
        -:14067:
function _ZN5Catch16TestCaseTracking14TrackerContext8startRunEv called 8 returned 100% blocks executed 57%
        8:14068:ITracker& TrackerContext::startRun() {
        8:14069:m_rootTracker = std::make_shared<SectionTracker>( NameAndLocation( "{root}", CATCH_INTERNAL_LINEINFO ), *this, nullptr );
        8:14069-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
branch  3 taken 8 (fallthrough)
branch  4 taken 0 (throw)
        8:14069-block  1
call    5 returned 8
branch  6 taken 8 (fallthrough)
branch  7 taken 0 (throw)
        8:14069-block  2
call    8 returned 8
branch  9 taken 8 (fallthrough)
branch 10 taken 0 (throw)
        8:14069-block  3
call   11 returned 8
call   12 returned 8
call   13 returned 8
call   14 returned 8
call   15 returned 8
    $$$$$:14069-block  4
call   16 never executed
    $$$$$:14069-block  5
    $$$$$:14069-block  6
call   17 never executed
    $$$$$:14069-block  7
    $$$$$:14069-block  8
call   18 never executed
    $$$$$:14069-block  9
    $$$$$:14069-block 10
        8:14070:m_currentTracker = nullptr;
        8:14071:m_runState = Executing;
        8:14072:return *m_rootTracker;
call    0 returned 8
        -:14073:}
        -:14074:
function _ZN5Catch16TestCaseTracking14TrackerContext6endRunEv called 0 returned 0% blocks executed 0%
    #####:14075:void TrackerContext::endRun() {
    #####:14076:m_rootTracker.reset();
    %%%%%:14076-block  0
call    0 never executed
    #####:14077:m_currentTracker = nullptr;
    #####:14078:m_runState = NotStarted;
    #####:14079:}
        -:14080:
function _ZN5Catch16TestCaseTracking14TrackerContext10startCycleEv called 8 returned 100% blocks executed 100%
        8:14081:void TrackerContext::startCycle() {
        8:14082:m_currentTracker = m_rootTracker.get();
        8:14082-block  0
call    0 returned 8
        8:14083:m_runState = Executing;
        8:14084:}
function _ZN5Catch16TestCaseTracking14TrackerContext13completeCycleEv called 8 returned 100% blocks executed 100%
        8:14085:void TrackerContext::completeCycle() {
        8:14086:m_runState = CompletedCycle;
        8:14087:}
        -:14088:
function _ZNK5Catch16TestCaseTracking14TrackerContext14completedCycleEv called 8 returned 100% blocks executed 100%
        8:14089:bool TrackerContext::completedCycle() const {
        8:14090:return m_runState == CompletedCycle;
        8:14090-block  0
        -:14091:}
function _ZN5Catch16TestCaseTracking14TrackerContext14currentTrackerEv called 16 returned 100% blocks executed 100%
       16:14092:ITracker& TrackerContext::currentTracker() {
       16:14093:return *m_currentTracker;
       16:14093-block  0
        -:14094:}
function _ZN5Catch16TestCaseTracking14TrackerContext17setCurrentTrackerEPNS0_8ITrackerE called 16 returned 100% blocks executed 100%
       16:14095:void TrackerContext::setCurrentTracker( ITracker* tracker ) {
       16:14096:m_currentTracker = tracker;
       16:14097:}
        -:14098:
function _ZN5Catch16TestCaseTracking11TrackerBaseC2ERKNS0_15NameAndLocationERNS0_14TrackerContextEPNS0_8ITrackerE called 16 returned 100% blocks executed 83%
       16:14099:TrackerBase::TrackerBase( NameAndLocation const& nameAndLocation, TrackerContext& ctx, ITracker* parent )
        -:14100::   m_nameAndLocation( nameAndLocation ),
        -:14101:m_ctx( ctx ),
       16:14102:m_parent( parent )
       16:14102-block  0
call    0 returned 16
call    1 returned 16
branch  2 taken 16 (fallthrough)
branch  3 taken 0 (throw)
       16:14102-block  1
call    4 returned 16
    $$$$$:14102-block  2
call    5 never executed
       16:14103:{}
        -:14104:
function _ZNK5Catch16TestCaseTracking11TrackerBase15nameAndLocationEv called 0 returned 0% blocks executed 0%
    #####:14105:NameAndLocation const& TrackerBase::nameAndLocation() const {
    #####:14106:return m_nameAndLocation;
    %%%%%:14106-block  0
        -:14107:}
function _ZNK5Catch16TestCaseTracking11TrackerBase10isCompleteEv called 8 returned 100% blocks executed 83%
        8:14108:bool TrackerBase::isComplete() const {
       8*:14109:return m_runState == CompletedSuccessfully || m_runState == Failed;
        8:14109-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8:14109-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 8
    %%%%%:14109-block  2
        8:14109-block  3
        8:14109-block  4
        -:14110:}
function _ZNK5Catch16TestCaseTracking11TrackerBase23isSuccessfullyCompletedEv called 8 returned 100% blocks executed 100%
        8:14111:bool TrackerBase::isSuccessfullyCompleted() const {
        8:14112:return m_runState == CompletedSuccessfully;
        8:14112-block  0
        -:14113:}
function _ZNK5Catch16TestCaseTracking11TrackerBase6isOpenEv called 0 returned 0% blocks executed 0%
    #####:14114:bool TrackerBase::isOpen() const {
    #####:14115:return m_runState != NotStarted && !isComplete();
    %%%%%:14115-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:14115-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:14115-block  2
    %%%%%:14115-block  3
    %%%%%:14115-block  4
        -:14116:}
function _ZNK5Catch16TestCaseTracking11TrackerBase11hasChildrenEv called 0 returned 0% blocks executed 0%
    #####:14117:bool TrackerBase::hasChildren() const {
    #####:14118:return !m_children.empty();
    %%%%%:14118-block  0
call    0 never executed
        -:14119:}
        -:14120:
function _ZN5Catch16TestCaseTracking11TrackerBase8addChildERKSt10shared_ptrINS0_8ITrackerEE called 8 returned 100% blocks executed 100%
        8:14121:void TrackerBase::addChild( ITrackerPtr const& child ) {
        8:14122:m_children.push_back( child );
        8:14122-block  0
call    0 returned 8
        8:14123:}
        -:14124:
function _ZN5Catch16TestCaseTracking11TrackerBase9findChildERKNS0_15NameAndLocationE called 8 returned 100% blocks executed 85%
        8:14125:ITrackerPtr TrackerBase::findChild( NameAndLocation const& nameAndLocation ) {
        -:14126:auto it = std::find_if( m_children.begin(), m_children.end(),
        -:14127:[&nameAndLocation]( ITrackerPtr const& tracker ){
        -:14128:return
        -:14129:tracker->nameAndLocation().location == nameAndLocation.location &&
        -:14130:tracker->nameAndLocation().name == nameAndLocation.name;
        8:14131:} );
        8:14131-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
branch  3 taken 8 (fallthrough)
branch  4 taken 0 (throw)
       16:14132:return( it != m_children.end() )
        8:14132-block  0
call    0 returned 8
call    1 returned 8
        8:14132-block  1
    #####:14133:? *it
    %%%%%:14133-block  0
call    0 never executed
      16*:14134:: nullptr;
branch  0 taken 0 (fallthrough)
branch  1 taken 8
call    2 never executed
        8:14134-block  0
call    3 returned 8
        8:14134-block  1
        8:14134-block  2
        -:14135:}
function _ZN5Catch16TestCaseTracking11TrackerBase6parentEv called 0 returned 0% blocks executed 0%
    #####:14136:ITracker& TrackerBase::parent() {
    #####:14137:assert( m_parent ); // Should always be non-null except for root
    %%%%%:14137-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:14137-block  1
call    2 never executed
    %%%%%:14137-block  2
    #####:14138:return *m_parent;
    %%%%%:14138-block  0
        -:14139:}
        -:14140:
function _ZN5Catch16TestCaseTracking11TrackerBase9openChildEv called 8 returned 100% blocks executed 75%
        8:14141:void TrackerBase::openChild() {
        8:14142:if( m_runState != ExecutingChildren ) {
        8:14142-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8:14143:m_runState = ExecutingChildren;
        8:14144:if( m_parent )
        8:14144-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####:14145:m_parent->openChild();
    %%%%%:14145-block  0
call    0 never executed
        -:14146:}
        8:14147:}
        -:14148:
function _ZNK5Catch16TestCaseTracking11TrackerBase16isSectionTrackerEv called 0 returned 0% blocks executed 0%
    #####:14149:bool TrackerBase::isSectionTracker() const { return false; }
    %%%%%:14149-block  0
function _ZNK5Catch16TestCaseTracking11TrackerBase18isGeneratorTrackerEv called 0 returned 0% blocks executed 0%
    #####:14150:bool TrackerBase::isGeneratorTracker() const { return false; }
    %%%%%:14150-block  0
        -:14151:
function _ZN5Catch16TestCaseTracking11TrackerBase4openEv called 8 returned 100% blocks executed 100%
        8:14152:void TrackerBase::open() {
        8:14153:m_runState = Executing;
        8:14154:moveToThis();
        8:14154-block  0
call    0 returned 8
        8:14155:if( m_parent )
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8:14156:m_parent->openChild();
        8:14156-block  0
call    0 returned 8
        8:14157:}
        -:14158:
function _ZN5Catch16TestCaseTracking11TrackerBase5closeEv called 8 returned 100% blocks executed 17%
        8:14159:void TrackerBase::close() {
        -:14160:
        -:14161:// Close any still open children (e.g. generators)
       8*:14162:while( &m_ctx.currentTracker() != this )
        8:14162-block  0
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
    #####:14163:m_ctx.currentTracker().close();
    %%%%%:14163-block  0
call    0 never executed
call    1 never executed
        -:14164:
        8:14165:switch( m_runState ) {
        8:14165-block  0
branch  0 taken 0
branch  1 taken 8
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
    #####:14166:case NeedsAnotherRun:
    #####:14167:break;
    %%%%%:14167-block  0
        -:14168:
        8:14169:case Executing:
        8:14170:m_runState = CompletedSuccessfully;
        8:14171:break;
        8:14171-block  0
    #####:14172:case ExecutingChildren:
    #####:14173:if( std::all_of(m_children.begin(), m_children.end(), [](ITrackerPtr const& t){ return t->isComplete(); }) )
    %%%%%:14173-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:14174:m_runState = CompletedSuccessfully;
    %%%%%:14174-block  0
    #####:14175:break;
    %%%%%:14175-block  0
        -:14176:
    #####:14177:case NotStarted:
        -:14178:case CompletedSuccessfully:
        -:14179:case Failed:
    #####:14180:CATCH_INTERNAL_ERROR( "Illogical state: " << m_runState );
    %%%%%:14180-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:14180-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:14180-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:14180-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:14180-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:14180-block  5
call   17 never executed
    $$$$$:14180-block  6
call   18 never executed
    $$$$$:14180-block  7
    $$$$$:14180-block  8
    $$$$$:14180-block  9
call   19 never executed
    $$$$$:14180-block 10
call   20 never executed
        -:14181:
    #####:14182:default:
    #####:14183:CATCH_INTERNAL_ERROR( "Unknown state: " << m_runState );
    %%%%%:14183-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:14183-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:14183-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:14183-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:14183-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:14183-block  5
call   17 never executed
    $$$$$:14183-block  6
call   18 never executed
    $$$$$:14183-block  7
    $$$$$:14183-block  8
    $$$$$:14183-block  9
call   19 never executed
        -:14184:}
        8:14185:moveToParent();
        8:14185-block  0
call    0 returned 8
        8:14186:m_ctx.completeCycle();
call    0 returned 8
        8:14187:}
function _ZN5Catch16TestCaseTracking11TrackerBase4failEv called 0 returned 0% blocks executed 0%
    #####:14188:void TrackerBase::fail() {
    #####:14189:m_runState = Failed;
    #####:14190:if( m_parent )
    %%%%%:14190-block  0
branch  0 never executed
branch  1 never executed
    #####:14191:m_parent->markAsNeedingAnotherRun();
    %%%%%:14191-block  0
call    0 never executed
    #####:14192:moveToParent();
    %%%%%:14192-block  0
call    0 never executed
    #####:14193:m_ctx.completeCycle();
call    0 never executed
    #####:14194:}
function _ZN5Catch16TestCaseTracking11TrackerBase23markAsNeedingAnotherRunEv called 0 returned 0% blocks executed 0%
    #####:14195:void TrackerBase::markAsNeedingAnotherRun() {
    #####:14196:m_runState = NeedsAnotherRun;
    #####:14197:}
        -:14198:
function _ZN5Catch16TestCaseTracking11TrackerBase12moveToParentEv called 8 returned 100% blocks executed 67%
        8:14199:void TrackerBase::moveToParent() {
       8*:14200:assert( m_parent );
        8:14200-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    %%%%%:14200-block  1
call    2 never executed
        8:14200-block  2
        8:14201:m_ctx.setCurrentTracker( m_parent );
        8:14201-block  0
call    0 returned 8
        8:14202:}
function _ZN5Catch16TestCaseTracking11TrackerBase10moveToThisEv called 8 returned 100% blocks executed 100%
        8:14203:void TrackerBase::moveToThis() {
        8:14204:m_ctx.setCurrentTracker( this );
        8:14204-block  0
call    0 returned 8
        8:14205:}
        -:14206:
function _ZN5Catch16TestCaseTracking14SectionTrackerC2ERKNS0_15NameAndLocationERNS0_14TrackerContextEPNS0_8ITrackerE called 16 returned 100% blocks executed 59%
       16:14207:SectionTracker::SectionTracker( NameAndLocation const& nameAndLocation, TrackerContext& ctx, ITracker* parent )
        -:14208::   TrackerBase( nameAndLocation, ctx, parent ),
       16:14209:m_trimmed_name(trim(nameAndLocation.name))
       16:14209-block  0
call    0 returned 16
call    1 returned 16
call    2 returned 16
branch  3 taken 16 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:14209-block  1
call    5 never executed
    $$$$$:14209-block  2
call    6 never executed
    $$$$$:14209-block  3
call    7 never executed
        -:14210:{
       16:14211:if( parent ) {
       16:14211-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 8
       8*:14212:while( !parent->isSectionTracker() )
        8:14212-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:14212-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 8
    #####:14213:parent = &parent->parent();
    %%%%%:14213-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14213-block  1
        -:14214:
        8:14215:SectionTracker& parentSection = static_cast<SectionTracker&>( *parent );
        8:14216:addNextFilters( parentSection.m_filters );
        8:14216-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        -:14217:}
       16:14218:}
       16:14218-block  0
        -:14219:
function _ZNK5Catch16TestCaseTracking14SectionTracker10isCompleteEv called 8 returned 100% blocks executed 42%
        8:14220:bool SectionTracker::isComplete() const {
        8:14221:bool complete = true;
        -:14222:
       8*:14223:if ((m_filters.empty() || m_filters[0] == "")
        8:14223-block  0
call    0 returned 8
    %%%%%:14223-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
       8*:14224:|| std::find(m_filters.begin(), m_filters.end(), m_trimmed_name) != m_filters.end()) {
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    %%%%%:14224-block  0
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:14224-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
        8:14224-block  2
    %%%%%:14224-block  3
        8:14224-block  4
branch 11 taken 8 (fallthrough)
branch 12 taken 0
    $$$$$:14224-block  5
        8:14225:complete = TrackerBase::isComplete();
        8:14225-block  0
call    0 returned 8
        -:14226:}
        8:14227:return complete;
        8:14227-block  0
        8:14227-block  1
        -:14228:}
        -:14229:
function _ZNK5Catch16TestCaseTracking14SectionTracker16isSectionTrackerEv called 16 returned 100% blocks executed 100%
       16:14230:bool SectionTracker::isSectionTracker() const { return true; }
       16:14230-block  0
        -:14231:
function _ZN5Catch16TestCaseTracking14SectionTracker7acquireERNS0_14TrackerContextERKNS0_15NameAndLocationE called 8 returned 100% blocks executed 46%
        8:14232:SectionTracker& SectionTracker::acquire( TrackerContext& ctx, NameAndLocation const& nameAndLocation ) {
        8:14233:std::shared_ptr<SectionTracker> section;
call    0 returned 8
    $$$$$:14233-block  0
call    1 never executed
        -:14234:
        8:14235:ITracker& currentTracker = ctx.currentTracker();
        8:14235-block  0
call    0 returned 8
       16:14236:if( ITrackerPtr childTracker = currentTracker.findChild( nameAndLocation ) ) {
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:14236-block  0
call    3 returned 8
branch  4 taken 0 (fallthrough)
branch  5 taken 8
        8:14236-block  1
call    6 returned 8
    $$$$$:14236-block  2
call    7 never executed
    #####:14237:assert( childTracker );
    %%%%%:14237-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14237-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:14237-block  2
    %%%%%:14237-block  3
    #####:14238:assert( childTracker->isSectionTracker() );
    %%%%%:14238-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14238-block  1
branch  4 never executed
branch  5 never executed
    %%%%%:14238-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:14238-block  3
    %%%%%:14238-block  4
    #####:14239:section = std::static_pointer_cast<SectionTracker>( childTracker );
    %%%%%:14239-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:14240:}
        -:14241:else {
        8:14242:section = std::make_shared<SectionTracker>( nameAndLocation, ctx, &currentTracker );
        8:14242-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:14242-block  1
call    3 returned 8
call    4 returned 8
    $$$$$:14242-block  2
        8:14243:currentTracker.addChild( section );
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8:14243-block  0
call    4 returned 8
    $$$$$:14243-block  1
call    5 never executed
    $$$$$:14243-block  2
        -:14244:}
        8:14245:if( !ctx.completedCycle() )
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0
        8:14246:section->tryOpen();
        8:14246-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
       16:14247:return *section;
        8:14247-block  0
call    0 returned 8
        8:14247-block  1
        -:14248:}
        -:14249:
function _ZN5Catch16TestCaseTracking14SectionTracker7tryOpenEv called 8 returned 100% blocks executed 100%
        8:14250:void SectionTracker::tryOpen() {
        8:14251:if( !isComplete() )
        8:14251-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0
        8:14252:open();
        8:14252-block  0
call    0 returned 8
        8:14253:}
        -:14254:
function _ZN5Catch16TestCaseTracking14SectionTracker17addInitialFiltersERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EE called 8 returned 100% blocks executed 11%
        8:14255:void SectionTracker::addInitialFilters( std::vector<std::string> const& filters ) {
        8:14256:if( !filters.empty() ) {
        8:14256-block  0
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
    #####:14257:m_filters.reserve( m_filters.size() + filters.size() + 2 );
    %%%%%:14257-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:14258:m_filters.push_back(""); // Root - should never be consulted
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14258-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:14258-block  1
call    7 never executed
call    8 never executed
    $$$$$:14258-block  2
call    9 never executed
    $$$$$:14258-block  3
    $$$$$:14258-block  4
call   10 never executed
    $$$$$:14258-block  5
call   11 never executed
    #####:14259:m_filters.push_back(""); // Test Case - not a section filter
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14259-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:14259-block  1
call    7 never executed
call    8 never executed
    $$$$$:14259-block  2
call    9 never executed
    $$$$$:14259-block  3
    $$$$$:14259-block  4
call   10 never executed
    $$$$$:14259-block  5
call   11 never executed
    #####:14260:m_filters.insert( m_filters.end(), filters.begin(), filters.end() );
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:14260-block  0
    $$$$$:14260-block  1
        -:14261:}
        8:14262:}
        8:14262-block  0
function _ZN5Catch16TestCaseTracking14SectionTracker14addNextFiltersERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EE called 8 returned 100% blocks executed 31%
        8:14263:void SectionTracker::addNextFilters( std::vector<std::string> const& filters ) {
        8:14264:if( filters.size() > 1 )
        8:14264-block  0
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
    #####:14265:m_filters.insert( m_filters.end(), filters.begin()+1, filters.end() );
    %%%%%:14265-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:14265-block  1
    $$$$$:14265-block  2
    $$$$$:14265-block  3
        8:14266:}
        8:14266-block  0
        -:14267:
        -:14268:} // namespace TestCaseTracking
        -:14269:
        -:14270:using TestCaseTracking::ITracker;
        -:14271:using TestCaseTracking::TrackerContext;
        -:14272:using TestCaseTracking::SectionTracker;
        -:14273:
        -:14274:} // namespace Catch
        -:14275:
        -:14276:#if defined(__clang__)
        -:14277:#    pragma clang diagnostic pop
        -:14278:#endif
        -:14279:// end catch_test_case_tracker.cpp
        -:14280:// start catch_test_registry.cpp
        -:14281:
        -:14282:namespace Catch {
        -:14283:
function _ZN5Catch15makeTestInvokerEPFvvE called 8 returned 100% blocks executed 86%
        8:14284:auto makeTestInvoker( void(*testAsFunction)() ) noexcept -> ITestInvoker* {
       8*:14285:return new(std::nothrow) TestInvokerAsFunction( testAsFunction );
        8:14285-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0
        8:14285-block  1
call    3 returned 8
    %%%%%:14285-block  2
        8:14285-block  3
        -:14286:}
        -:14287:
function _ZN5Catch11NameAndTagsC2ERKNS_9StringRefES3_ called 8 returned 100% blocks executed 100%
        8:14288:NameAndTags::NameAndTags( StringRef const& name_ , StringRef const& tags_ ) noexcept : name( name_ ), tags( tags_ ) {}
        8:14288-block  0
call    0 returned 8
call    1 returned 8
        -:14289:
function _ZN5Catch7AutoRegC2EPNS_12ITestInvokerERKNS_14SourceLineInfoERKNS_9StringRefERKNS_11NameAndTagsE called 8 returned 100% blocks executed 50%
        8:14290:AutoReg::AutoReg( ITestInvoker* invoker, SourceLineInfo const& lineInfo, StringRef const& classOrMethod, NameAndTags const& nameAndTags ) noexcept {
        8:14290-block  0
call    0 returned 8
        -:14291:CATCH_TRY {
        8:14292:getMutableRegistryHub()
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:14293:.registerTest(
        8:14293-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
       16:14294:makeTestCase(
        8:14294-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:14294-block  1
call    3 returned 8
    $$$$$:14294-block  2
call    4 never executed
    $$$$$:14294-block  3
        -:14295:invoker,
        8:14296:extractClassName( classOrMethod ),
call    0 returned 8
    $$$$$:14296-block  0
call    1 never executed
    $$$$$:14296-block  1
        -:14297:nameAndTags,
        8:14298:lineInfo));
        8:14298-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
    =====:14299:} CATCH_CATCH_ALL {
    $$$$$:14299-block  0
call    0 never executed
        -:14300:// Do not throw when constructing global objects, instead register the exception to be processed later
    =====:14301:getMutableRegistryHub().registerStartupException();
call    0 never executed
call    1 never executed
        -:14302:}
        8:14303:}
        8:14303-block  0
        -:14304:
        -:14305:AutoReg::~AutoReg() = default;
        -:14306:}
        -:14307:// end catch_test_registry.cpp
        -:14308:// start catch_test_spec.cpp
        -:14309:
        -:14310:#include <algorithm>
        -:14311:#include <string>
        -:14312:#include <vector>
        -:14313:#include <memory>
        -:14314:
        -:14315:namespace Catch {
        -:14316:
function _ZN5Catch8TestSpec7PatternC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:14317:TestSpec::Pattern::Pattern( std::string const& name )
    #####:14318:: m_name( name )
    %%%%%:14318-block  0
call    0 never executed
    #####:14319:{}
        -:14320:
        -:14321:TestSpec::Pattern::~Pattern() = default;
        -:14322:
function _ZNK5Catch8TestSpec7Pattern4nameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:14323:std::string const& TestSpec::Pattern::name() const {
    #####:14324:return m_name;
    %%%%%:14324-block  0
        -:14325:}
        -:14326:
function _ZN5Catch8TestSpec11NamePatternC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####:14327:TestSpec::NamePattern::NamePattern( std::string const& name, std::string const& filterString )
        -:14328:: Pattern( filterString )
    #####:14329:, m_wildcardPattern( toLower( name ), CaseSensitive::No )
    %%%%%:14329-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14329-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:14329-block  2
call    7 never executed
    $$$$$:14329-block  3
call    8 never executed
    $$$$$:14329-block  4
    $$$$$:14329-block  5
call    9 never executed
    #####:14330:{}
        -:14331:
function _ZNK5Catch8TestSpec11NamePattern7matchesERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####:14332:bool TestSpec::NamePattern::matches( TestCaseInfo const& testCase ) const {
    #####:14333:return m_wildcardPattern.matches( testCase.name );
    %%%%%:14333-block  0
call    0 never executed
        -:14334:}
        -:14335:
function _ZN5Catch8TestSpec10TagPatternC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####:14336:TestSpec::TagPattern::TagPattern( std::string const& tag, std::string const& filterString )
        -:14337:: Pattern( filterString )
    #####:14338:, m_tag( toLower( tag ) )
    %%%%%:14338-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:14338-block  1
call    4 never executed
    #####:14339:{}
    %%%%%:14339-block  0
        -:14340:
function _ZNK5Catch8TestSpec10TagPattern7matchesERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####:14341:bool TestSpec::TagPattern::matches( TestCaseInfo const& testCase ) const {
    #####:14342:return std::find(begin(testCase.lcaseTags),
    #####:14343:end(testCase.lcaseTags),
    #####:14344:m_tag) != end(testCase.lcaseTags);
    %%%%%:14344-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:14344-block  1
call    6 never executed
    %%%%%:14344-block  2
        -:14345:}
        -:14346:
function _ZN5Catch8TestSpec15ExcludedPatternC2ERKSt10shared_ptrINS0_7PatternEE called 0 returned 0% blocks executed 0%
    #####:14347:TestSpec::ExcludedPattern::ExcludedPattern( PatternPtr const& underlyingPattern )
        -:14348:: Pattern( underlyingPattern->name() )
    #####:14349:, m_underlyingPattern( underlyingPattern )
    %%%%%:14349-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:14350:{}
        -:14351:
function _ZNK5Catch8TestSpec15ExcludedPattern7matchesERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####:14352:bool TestSpec::ExcludedPattern::matches( TestCaseInfo const& testCase ) const {
    #####:14353:return !m_underlyingPattern->matches( testCase );
    %%%%%:14353-block  0
call    0 never executed
call    1 never executed
        -:14354:}
        -:14355:
function _ZNK5Catch8TestSpec6Filter7matchesERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####:14356:bool TestSpec::Filter::matches( TestCaseInfo const& testCase ) const {
    #####:14357:return std::all_of( m_patterns.begin(), m_patterns.end(), [&]( PatternPtr const& p ){ return p->matches( testCase ); } );
    %%%%%:14357-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:14358:}
        -:14359:
function _ZNK5Catch8TestSpec6Filter4nameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:14360:std::string TestSpec::Filter::name() const {
    #####:14361:std::string name;
    %%%%%:14361-block  0
call    0 never executed
    #####:14362:for( auto const& p : m_patterns )
call    0 never executed
call    1 never executed
    %%%%%:14362-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:14362-block  1
call    5 never executed
    %%%%%:14362-block  2
call    6 never executed
    #####:14363:name += p->name();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:14364:return name;
    %%%%%:14364-block  0
    %%%%%:14364-block  1
        -:14365:}
        -:14366:
function _ZNK5Catch8TestSpec10hasFiltersEv called 1 returned 100% blocks executed 100%
        1:14367:bool TestSpec::hasFilters() const {
        1:14368:return !m_filters.empty();
        1:14368-block  0
call    0 returned 1
        -:14369:}
        -:14370:
function _ZNK5Catch8TestSpec7matchesERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####:14371:bool TestSpec::matches( TestCaseInfo const& testCase ) const {
    #####:14372:return std::any_of( m_filters.begin(), m_filters.end(), [&]( Filter const& f ){ return f.matches( testCase ); } );
    %%%%%:14372-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:14373:}
        -:14374:
function _ZNK5Catch8TestSpec15matchesByFilterERKSt6vectorINS_8TestCaseESaIS2_EERKNS_7IConfigE called 1 returned 100% blocks executed 73%
        1:14375:TestSpec::Matches TestSpec::matchesByFilter( std::vector<TestCase> const& testCases, IConfig const& config ) const
        -:14376:{
        1:14377:Matches matches( m_filters.size() );
        1:14377-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:14377-block  1
call    5 never executed
        -:14378:std::transform( m_filters.begin(), m_filters.end(), matches.begin(), [&]( Filter const& filter ){
        -:14379:std::vector<TestCase const*> currentMatches;
        -:14380:for( auto const& test : testCases )
        -:14381:if( isThrowSafe( test, config ) && filter.matches( test ) )
        -:14382:currentMatches.emplace_back( &test );
        -:14383:return FilterMatch{ filter.name(), currentMatches };
        1:14384:} );
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:14385:return matches;
        1:14385-block  0
        1:14385-block  1
        -:14386:}
        -:14387:
function _ZNK5Catch8TestSpec14getInvalidArgsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:14388:const TestSpec::vectorStrings& TestSpec::getInvalidArgs() const{
        2:14389:return  (m_invalidArgs);
        2:14389-block  0
        -:14390:}
        -:14391:
        -:14392:}
        -:14393:// end catch_test_spec.cpp
        -:14394:// start catch_test_spec_parser.cpp
        -:14395:
        -:14396:namespace Catch {
        -:14397:
function _ZN5Catch14TestSpecParserC2ERKNS_17ITagAliasRegistryE called 1 returned 100% blocks executed 100%
        1:14398:TestSpecParser::TestSpecParser( ITagAliasRegistry const& tagAliases ) : m_tagAliases( &tagAliases ) {}
        1:14398-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
        -:14399:
function _ZN5Catch14TestSpecParser5parseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:14400:TestSpecParser& TestSpecParser::parse( std::string const& arg ) {
    #####:14401:m_mode = None;
    #####:14402:m_exclusion = false;
    #####:14403:m_arg = m_tagAliases->expandAliases( arg );
    %%%%%:14403-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:14404:m_escapeChars.clear();
call    0 never executed
    #####:14405:m_substring.reserve(m_arg.size());
call    0 never executed
call    1 never executed
    #####:14406:m_patternName.reserve(m_arg.size());
call    0 never executed
call    1 never executed
    #####:14407:m_realPatternPos = 0;
        -:14408:
    #####:14409:for( m_pos = 0; m_pos < m_arg.size(); ++m_pos )
    %%%%%:14409-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14409-block  1
        -:14410://if visitChar fails
    #####:14411:if( !visitChar( m_arg[m_pos] ) ){
    %%%%%:14411-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:14412:m_testSpec.m_invalidArgs.push_back(arg);
    %%%%%:14412-block  0
call    0 never executed
    #####:14413:break;
        -:14414:}
    #####:14415:endMode();
    %%%%%:14415-block  0
call    0 never executed
    #####:14416:return *this;
        -:14417:}
function _ZN5Catch14TestSpecParser8testSpecEv called 1 returned 100% blocks executed 100%
        1:14418:TestSpec TestSpecParser::testSpec() {
        1:14419:addFilter();
        1:14419-block  0
call    0 returned 1
        1:14420:return m_testSpec;
call    0 returned 1
        -:14421:}
function _ZN5Catch14TestSpecParser9visitCharEc called 0 returned 0% blocks executed 0%
    #####:14422:bool TestSpecParser::visitChar( char c ) {
    #####:14423:if( (m_mode != EscapedName) && (c == '\\') ) {
    %%%%%:14423-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:14423-block  1
branch  2 never executed
branch  3 never executed
    #####:14424:escape();
    %%%%%:14424-block  0
call    0 never executed
    #####:14425:addCharToPattern(c);
call    0 never executed
    #####:14426:return true;
    #####:14427:}else if((m_mode != EscapedName) && (c == ',') )  {
    %%%%%:14427-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:14427-block  1
branch  2 never executed
branch  3 never executed
    #####:14428:return separate();
    %%%%%:14428-block  0
call    0 never executed
        -:14429:}
        -:14430:
    #####:14431:switch( m_mode ) {
    %%%%%:14431-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:14432:case None:
    #####:14433:if( processNoneChar( c ) )
    %%%%%:14433-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14434:return true;
    %%%%%:14434-block  0
    #####:14435:break;
    %%%%%:14435-block  0
    #####:14436:case Name:
    #####:14437:processNameChar( c );
    %%%%%:14437-block  0
call    0 never executed
    #####:14438:break;
    #####:14439:case EscapedName:
    #####:14440:endMode();
    %%%%%:14440-block  0
call    0 never executed
    #####:14441:addCharToPattern(c);
call    0 never executed
    #####:14442:return true;
    #####:14443:default:
        -:14444:case Tag:
        -:14445:case QuotedName:
    #####:14446:if( processOtherChar( c ) )
    %%%%%:14446-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14447:return true;
    %%%%%:14447-block  0
    #####:14448:break;
    %%%%%:14448-block  0
        -:14449:}
        -:14450:
    #####:14451:m_substring += c;
    %%%%%:14451-block  0
call    0 never executed
    #####:14452:if( !isControlChar( c ) ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14453:m_patternName += c;
    %%%%%:14453-block  0
call    0 never executed
    #####:14454:m_realPatternPos++;
        -:14455:}
    #####:14456:return true;
    %%%%%:14456-block  0
        -:14457:}
        -:14458:// Two of the processing methods return true to signal the caller to return
        -:14459:// without adding the given character to the current pattern strings
function _ZN5Catch14TestSpecParser15processNoneCharEc called 0 returned 0% blocks executed 0%
    #####:14460:bool TestSpecParser::processNoneChar( char c ) {
    #####:14461:switch( c ) {
    %%%%%:14461-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:14462:case ' ':
    #####:14463:return true;
    %%%%%:14463-block  0
    #####:14464:case '~':
    #####:14465:m_exclusion = true;
    #####:14466:return false;
    %%%%%:14466-block  0
    #####:14467:case '[':
    #####:14468:startNewMode( Tag );
    %%%%%:14468-block  0
call    0 never executed
    #####:14469:return false;
    #####:14470:case '"':
    #####:14471:startNewMode( QuotedName );
    %%%%%:14471-block  0
call    0 never executed
    #####:14472:return false;
    #####:14473:default:
    #####:14474:startNewMode( Name );
    %%%%%:14474-block  0
call    0 never executed
    #####:14475:return false;
        -:14476:}
        -:14477:}
function _ZN5Catch14TestSpecParser15processNameCharEc called 0 returned 0% blocks executed 0%
    #####:14478:void TestSpecParser::processNameChar( char c ) {
    #####:14479:if( c == '[' ) {
    %%%%%:14479-block  0
branch  0 never executed
branch  1 never executed
    #####:14480:if( m_substring == "exclude:" )
    %%%%%:14480-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14481:m_exclusion = true;
    %%%%%:14481-block  0
        -:14482:else
    #####:14483:endMode();
    %%%%%:14483-block  0
call    0 never executed
    #####:14484:startNewMode( Tag );
    %%%%%:14484-block  0
call    0 never executed
        -:14485:}
    #####:14486:}
function _ZN5Catch14TestSpecParser16processOtherCharEc called 0 returned 0% blocks executed 0%
    #####:14487:bool TestSpecParser::processOtherChar( char c ) {
    #####:14488:if( !isControlChar( c ) )
    %%%%%:14488-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14489:return false;
    %%%%%:14489-block  0
    #####:14490:m_substring += c;
    %%%%%:14490-block  0
call    0 never executed
    #####:14491:endMode();
call    0 never executed
    #####:14492:return true;
        -:14493:}
function _ZN5Catch14TestSpecParser12startNewModeENS0_4ModeE called 0 returned 0% blocks executed 0%
    #####:14494:void TestSpecParser::startNewMode( Mode mode ) {
    #####:14495:m_mode = mode;
    #####:14496:}
function _ZN5Catch14TestSpecParser7endModeEv called 0 returned 0% blocks executed 0%
    #####:14497:void TestSpecParser::endMode() {
    #####:14498:switch( m_mode ) {
    %%%%%:14498-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:14499:case Name:
        -:14500:case QuotedName:
    #####:14501:return addPattern<TestSpec::NamePattern>();
    %%%%%:14501-block  0
call    0 never executed
    #####:14502:case Tag:
    #####:14503:return addPattern<TestSpec::TagPattern>();
    %%%%%:14503-block  0
call    0 never executed
    #####:14504:case EscapedName:
    #####:14505:revertBackToLastMode();
    %%%%%:14505-block  0
call    0 never executed
    #####:14506:return;
    #####:14507:case None:
        -:14508:default:
    #####:14509:return startNewMode( None );
    %%%%%:14509-block  0
call    0 never executed
        -:14510:}
        -:14511:}
function _ZN5Catch14TestSpecParser6escapeEv called 0 returned 0% blocks executed 0%
    #####:14512:void TestSpecParser::escape() {
    #####:14513:saveLastMode();
    %%%%%:14513-block  0
call    0 never executed
    #####:14514:m_mode = EscapedName;
    #####:14515:m_escapeChars.push_back(m_realPatternPos);
call    0 never executed
    #####:14516:}
function _ZNK5Catch14TestSpecParser13isControlCharEc called 0 returned 0% blocks executed 0%
    #####:14517:bool TestSpecParser::isControlChar( char c ) const {
    #####:14518:switch( m_mode ) {
    %%%%%:14518-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:14519:default:
    #####:14520:return false;
    %%%%%:14520-block  0
    #####:14521:case None:
    #####:14522:return c == '~';
    %%%%%:14522-block  0
    #####:14523:case Name:
    #####:14524:return c == '[';
    %%%%%:14524-block  0
    #####:14525:case EscapedName:
    #####:14526:return true;
    %%%%%:14526-block  0
    #####:14527:case QuotedName:
    #####:14528:return c == '"';
    %%%%%:14528-block  0
    #####:14529:case Tag:
    #####:14530:return c == '[' || c == ']';
    %%%%%:14530-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:14530-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:14530-block  2
    %%%%%:14530-block  3
    %%%%%:14530-block  4
        -:14531:}
        -:14532:}
        -:14533:
function _ZN5Catch14TestSpecParser9addFilterEv called 1 returned 100% blocks executed 38%
        1:14534:void TestSpecParser::addFilter() {
        1:14535:if( !m_currentFilter.m_patterns.empty() ) {
        1:14535-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:14536:m_testSpec.m_filters.push_back( m_currentFilter );
    %%%%%:14536-block  0
call    0 never executed
    #####:14537:m_currentFilter = TestSpec::Filter();
call    0 never executed
call    1 never executed
call    2 never executed
        -:14538:}
        1:14539:}
        -:14540:
function _ZN5Catch14TestSpecParser12saveLastModeEv called 0 returned 0% blocks executed 0%
    #####:14541:void TestSpecParser::saveLastMode() {
    #####:14542:lastMode = m_mode;
    #####:14543:}
        -:14544:
function _ZN5Catch14TestSpecParser20revertBackToLastModeEv called 0 returned 0% blocks executed 0%
    #####:14545:void TestSpecParser::revertBackToLastMode() {
    #####:14546:m_mode = lastMode;
    #####:14547:}
        -:14548:
function _ZN5Catch14TestSpecParser8separateEv called 0 returned 0% blocks executed 0%
    #####:14549:bool TestSpecParser::separate() {
    #####:14550:if( (m_mode==QuotedName) || (m_mode==Tag) ){
    %%%%%:14550-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:14550-block  1
branch  2 never executed
branch  3 never executed
        -:14551://invalid argument, signal failure to previous scope.
    #####:14552:m_mode = None;
    #####:14553:m_pos = m_arg.size();
    %%%%%:14553-block  0
call    0 never executed
    #####:14554:m_substring.clear();
call    0 never executed
    #####:14555:m_patternName.clear();
call    0 never executed
    #####:14556:return false;
        -:14557:}
    #####:14558:endMode();
    %%%%%:14558-block  0
call    0 never executed
    #####:14559:addFilter();
call    0 never executed
    #####:14560:return true; //success
        -:14561:}
        -:14562:
function _ZN5Catch13parseTestSpecERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:14563:TestSpec parseTestSpec( std::string const& arg ) {
    #####:14564:return TestSpecParser( ITagAliasRegistry::get() ).parse( arg ).testSpec();
    %%%%%:14564-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:14564-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:14564-block  2
    %%%%%:14564-block  3
call    8 never executed
    %%%%%:14564-block  4
    $$$$$:14564-block  5
call    9 never executed
        -:14565:}
        -:14566:
        -:14567:} // namespace Catch
        -:14568:// end catch_test_spec_parser.cpp
        -:14569:// start catch_timer.cpp
        -:14570:
        -:14571:#include <chrono>
        -:14572:
        -:14573:static const uint64_t nanosecondsInSecond = 1000000000;
        -:14574:
        -:14575:namespace Catch {
        -:14576:
function _ZN5Catch31getCurrentNanosecondsSinceEpochEv called 16 returned 100% blocks executed 88%
       16:14577:auto getCurrentNanosecondsSinceEpoch() -> uint64_t {
       16:14578:return std::chrono::duration_cast<std::chrono::nanoseconds>( std::chrono::high_resolution_clock::now().time_since_epoch() ).count();
       16:14578-block  0
call    0 returned 16
call    1 returned 16
call    2 returned 16
branch  3 taken 16 (fallthrough)
branch  4 taken 0 (throw)
       16:14578-block  1
call    5 returned 16
       16:14578-block  2
    $$$$$:14578-block  3
        -:14579:}
        -:14580:
        -:14581:namespace {
function _ZN5Catch12_GLOBAL__N_123estimateClockResolutionEv called 0 returned 0% blocks executed 0%
    #####:14582:auto estimateClockResolution() -> uint64_t {
    #####:14583:uint64_t sum = 0;
        -:14584:static const uint64_t iterations = 1000000;
        -:14585:
    #####:14586:auto startTime = getCurrentNanosecondsSinceEpoch();
    %%%%%:14586-block  0
call    0 never executed
        -:14587:
    #####:14588:for( std::size_t i = 0; i < iterations; ++i ) {
    %%%%%:14588-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:14588-block  1
        -:14589:
        -:14590:uint64_t ticks;
    #####:14591:uint64_t baseTicks = getCurrentNanosecondsSinceEpoch();
    %%%%%:14591-block  0
call    0 never executed
    #####:14592:do {
    %%%%%:14592-block  0
    #####:14593:ticks = getCurrentNanosecondsSinceEpoch();
    %%%%%:14593-block  0
call    0 never executed
    #####:14594:} while( ticks == baseTicks );
branch  0 never executed
branch  1 never executed
        -:14595:
    #####:14596:auto delta = ticks - baseTicks;
    #####:14597:sum += delta;
        -:14598:
        -:14599:// If we have been calibrating for over 3 seconds -- the clock
        -:14600:// is terrible and we should move on.
        -:14601:// TBD: How to signal that the measured resolution is probably wrong?
    #####:14602:if (ticks > startTime + 3 * nanosecondsInSecond) {
    %%%%%:14602-block  0
branch  0 never executed
branch  1 never executed
    #####:14603:return sum / ( i + 1u );
    %%%%%:14603-block  0
        -:14604:}
        -:14605:}
        -:14606:
        -:14607:// We're just taking the mean, here. To do better we could take the std. dev and exclude outliers
        -:14608:// - and potentially do more iterations if there's a high variance.
    #####:14609:return sum/iterations;
    %%%%%:14609-block  0
        -:14610:}
        -:14611:}
function _ZN5Catch27getEstimatedClockResolutionEv called 0 returned 0% blocks executed 0%
    #####:14612:auto getEstimatedClockResolution() -> uint64_t {
    #####:14613:static auto s_resolution = estimateClockResolution();
    %%%%%:14613-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:14613-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:14613-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:14613-block  3
call    8 never executed
    $$$$$:14613-block  4
branch  9 never executed
branch 10 never executed
    $$$$$:14613-block  5
call   11 never executed
    #####:14614:return s_resolution;
    %%%%%:14614-block  0
    %%%%%:14614-block  1
        -:14615:}
        -:14616:
function _ZN5Catch5Timer5startEv called 8 returned 100% blocks executed 100%
        8:14617:void Timer::start() {
        8:14618:m_nanoseconds = getCurrentNanosecondsSinceEpoch();
        8:14618-block  0
call    0 returned 8
        8:14619:}
function _ZNK5Catch5Timer21getElapsedNanosecondsEv called 8 returned 100% blocks executed 100%
        8:14620:auto Timer::getElapsedNanoseconds() const -> uint64_t {
        8:14621:return getCurrentNanosecondsSinceEpoch() - m_nanoseconds;
        8:14621-block  0
call    0 returned 8
        -:14622:}
function _ZNK5Catch5Timer22getElapsedMicrosecondsEv called 8 returned 100% blocks executed 100%
        8:14623:auto Timer::getElapsedMicroseconds() const -> uint64_t {
        8:14624:return getElapsedNanoseconds()/1000;
        8:14624-block  0
call    0 returned 8
        -:14625:}
function _ZNK5Catch5Timer22getElapsedMillisecondsEv called 0 returned 0% blocks executed 0%
    #####:14626:auto Timer::getElapsedMilliseconds() const -> unsigned int {
    #####:14627:return static_cast<unsigned int>(getElapsedMicroseconds()/1000);
    %%%%%:14627-block  0
call    0 never executed
        -:14628:}
function _ZNK5Catch5Timer17getElapsedSecondsEv called 8 returned 100% blocks executed 100%
        8:14629:auto Timer::getElapsedSeconds() const -> double {
        8:14630:return getElapsedMicroseconds()/1000000.0;
        8:14630-block  0
call    0 returned 8
        -:14631:}
        -:14632:
        -:14633:} // namespace Catch
        -:14634:// end catch_timer.cpp
        -:14635:// start catch_tostring.cpp
        -:14636:
        -:14637:#if defined(__clang__)
        -:14638:#    pragma clang diagnostic push
        -:14639:#    pragma clang diagnostic ignored "-Wexit-time-destructors"
        -:14640:#    pragma clang diagnostic ignored "-Wglobal-constructors"
        -:14641:#endif
        -:14642:
        -:14643:// Enable specific decls locally
        -:14644:#if !defined(CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER)
        -:14645:#define CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER
        -:14646:#endif
        -:14647:
        -:14648:#include <cmath>
        -:14649:#include <iomanip>
        -:14650:
        -:14651:namespace Catch {
        -:14652:
        -:14653:namespace Detail {
        -:14654:
        -:14655:const std::string unprintableString = "{?}";
        -:14656:
        -:14657:namespace {
        -:14658:const int hexThreshold = 255;
        -:14659:
        -:14660:struct Endianness {
        -:14661:enum Arch { Big, Little };
        -:14662:
function _ZN5Catch6Detail12_GLOBAL__N_110Endianness5whichEv called 0 returned 0% blocks executed 0%
    #####:14663:static Arch which() {
        -:14664:union _{
        -:14665:int asInt;
        -:14666:char asChar[sizeof (int)];
        -:14667:} u;
        -:14668:
    #####:14669:u.asInt = 1;
    #####:14670:return ( u.asChar[sizeof(int)-1] == 1 ) ? Big : Little;
    %%%%%:14670-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:14670-block  1
    %%%%%:14670-block  2
    %%%%%:14670-block  3
        -:14671:}
        -:14672:};
        -:14673:}
        -:14674:
function _ZN5Catch6Detail17rawMemoryToStringB5cxx11EPKvj called 0 returned 0% blocks executed 0%
    #####:14675:std::string rawMemoryToString( const void *object, std::size_t size ) {
        -:14676:// Reverse order for little endian architectures
    #####:14677:int i = 0, end = static_cast<int>( size ), inc = 1;
    #####:14678:if( Endianness::which() == Endianness::Little ) {
    %%%%%:14678-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14679:i = end-1;
    #####:14680:end = inc = -1;
    %%%%%:14680-block  0
        -:14681:}
        -:14682:
    #####:14683:unsigned char const *bytes = static_cast<unsigned char const *>(object);
    #####:14684:ReusableStringStream rss;
    %%%%%:14684-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14684-block  1
call    3 never executed
    $$$$$:14684-block  2
call    4 never executed
    #####:14685:rss << "0x" << std::setfill('0') << std::hex;
    %%%%%:14685-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14685-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:14685-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:14685-block  3
    $$$$$:14685-block  4
    #####:14686:for( ; i != end; i += inc )
    %%%%%:14686-block  0
branch  0 never executed
branch  1 never executed
    #####:14687:rss << std::setw(2) << static_cast<unsigned>(bytes[i]);
    %%%%%:14687-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14687-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:14687-block  2
    $$$$$:14687-block  3
    $$$$$:14687-block  4
    #####:14688:return rss.str();
    %%%%%:14688-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14688-block  1
    %%%%%:14688-block  2
        -:14689:}
        -:14690:}
        -:14691:
        -:14692:template<typename T>
    #####:14693:std::string fpToString( T value, int precision ) {
    #####:14694:if (Catch::isnan(value)) {
    #####:14695:return "nan";
        -:14696:}
        -:14697:
    #####:14698:ReusableStringStream rss;
    #####:14699:rss << std::setprecision( precision )
    #####:14700:<< std::fixed
    #####:14701:<< value;
    #####:14702:std::string d = rss.str();
    #####:14703:std::size_t i = d.find_last_not_of( '0' );
    #####:14704:if( i != std::string::npos && i != d.size()-1 ) {
    #####:14705:if( d[i] == '.' )
    #####:14706:i++;
    #####:14707:d = d.substr( 0, i+1 );
        -:14708:}
    #####:14709:return d;
        -:14710:}
------------------
_ZN5Catch10fpToStringIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEET_i:
function _ZN5Catch10fpToStringIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEET_i called 0 returned 0% blocks executed 0%
    #####:14693:std::string fpToString( T value, int precision ) {
    #####:14694:if (Catch::isnan(value)) {
    %%%%%:14694-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14695:return "nan";
    %%%%%:14695-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14695-block  1
call    4 never executed
    $$$$$:14695-block  2
call    5 never executed
    $$$$$:14695-block  3
        -:14696:}
        -:14697:
    #####:14698:ReusableStringStream rss;
    %%%%%:14698-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:14698-block  1
call    4 never executed
    #####:14699:rss << std::setprecision( precision )
    %%%%%:14699-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:14699-block  1
    #####:14700:<< std::fixed
    %%%%%:14700-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14701:<< value;
    %%%%%:14701-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14702:std::string d = rss.str();
    %%%%%:14702-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:14702-block  1
call    4 never executed
    #####:14703:std::size_t i = d.find_last_not_of( '0' );
    %%%%%:14703-block  0
call    0 never executed
    #####:14704:if( i != std::string::npos && i != d.size()-1 ) {
branch  0 never executed
branch  1 never executed
    %%%%%:14704-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:14704-block  1
    %%%%%:14704-block  2
    %%%%%:14704-block  3
branch  5 never executed
branch  6 never executed
    #####:14705:if( d[i] == '.' )
    %%%%%:14705-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14705-block  1
branch  3 never executed
branch  4 never executed
    #####:14706:i++;
    %%%%%:14706-block  0
    #####:14707:d = d.substr( 0, i+1 );
    %%%%%:14707-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14707-block  1
call    3 never executed
call    4 never executed
        -:14708:}
    #####:14709:return d;
    %%%%%:14709-block  0
call    0 never executed
        -:14710:}
------------------
_ZN5Catch10fpToStringIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEET_i:
function _ZN5Catch10fpToStringIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEET_i called 0 returned 0% blocks executed 0%
    #####:14693:std::string fpToString( T value, int precision ) {
    #####:14694:if (Catch::isnan(value)) {
    %%%%%:14694-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14695:return "nan";
    %%%%%:14695-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14695-block  1
call    4 never executed
    $$$$$:14695-block  2
call    5 never executed
    $$$$$:14695-block  3
        -:14696:}
        -:14697:
    #####:14698:ReusableStringStream rss;
    %%%%%:14698-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:14698-block  1
call    4 never executed
    #####:14699:rss << std::setprecision( precision )
    %%%%%:14699-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:14699-block  1
    #####:14700:<< std::fixed
    %%%%%:14700-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14701:<< value;
    %%%%%:14701-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14702:std::string d = rss.str();
    %%%%%:14702-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:14702-block  1
call    4 never executed
    #####:14703:std::size_t i = d.find_last_not_of( '0' );
    %%%%%:14703-block  0
call    0 never executed
    #####:14704:if( i != std::string::npos && i != d.size()-1 ) {
branch  0 never executed
branch  1 never executed
    %%%%%:14704-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:14704-block  1
    %%%%%:14704-block  2
    %%%%%:14704-block  3
branch  5 never executed
branch  6 never executed
    #####:14705:if( d[i] == '.' )
    %%%%%:14705-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14705-block  1
branch  3 never executed
branch  4 never executed
    #####:14706:i++;
    %%%%%:14706-block  0
    #####:14707:d = d.substr( 0, i+1 );
    %%%%%:14707-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14707-block  1
call    3 never executed
call    4 never executed
        -:14708:}
    #####:14709:return d;
    %%%%%:14709-block  0
call    0 never executed
        -:14710:}
------------------
        -:14711:
        -:14712://// ======================================================= ////
        -:14713://
        -:14714://   Out-of-line defs for full specialization of StringMaker
        -:14715://
        -:14716://// ======================================================= ////
        -:14717:
function _ZN5Catch11StringMakerINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE7convertERKS6_ called 0 returned 0% blocks executed 0%
    #####:14718:std::string StringMaker<std::string>::convert(const std::string& str) {
    #####:14719:if (!getCurrentContext().getConfig()->showInvisibles()) {
    %%%%%:14719-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14719-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:14719-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:14719-block  3
branch 10 never executed
branch 11 never executed
    #####:14720:return '"' + str + '"';
    %%%%%:14720-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14720-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:14720-block  2
    %%%%%:14720-block  3
call    6 never executed
    $$$$$:14720-block  4
call    7 never executed
    $$$$$:14720-block  5
        -:14721:}
        -:14722:
    #####:14723:std::string s("\"");
    %%%%%:14723-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$:14723-block  1
    $$$$$:14723-block  2
call    5 never executed
    #####:14724:for (char c : str) {
call    0 never executed
call    1 never executed
    %%%%%:14724-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:14724-block  1
call    5 never executed
    %%%%%:14724-block  2
call    6 never executed
    #####:14725:switch (c) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
    #####:14726:case '\n':
    #####:14727:s.append("\\n");
    %%%%%:14727-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14728:break;
    %%%%%:14728-block  0
    #####:14729:case '\t':
    #####:14730:s.append("\\t");
    %%%%%:14730-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14731:break;
    %%%%%:14731-block  0
    #####:14732:default:
    #####:14733:s.push_back(c);
    %%%%%:14733-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14734:break;
    %%%%%:14734-block  0
        -:14735:}
        -:14736:}
    #####:14737:s.append("\"");
    %%%%%:14737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14738:return s;
    %%%%%:14738-block  0
call    0 never executed
        -:14739:}
        -:14740:
        -:14741:#ifdef CATCH_CONFIG_CPP17_STRING_VIEW
function _ZN5Catch11StringMakerISt17basic_string_viewIcSt11char_traitsIcEEvE7convertB5cxx11ES4_ called 0 returned 0% blocks executed 0%
    #####:14742:std::string StringMaker<std::string_view>::convert(std::string_view str) {
    #####:14743:return ::Catch::Detail::stringify(std::string{ str });
    %%%%%:14743-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14743-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:14743-block  2
    %%%%%:14743-block  3
call    7 never executed
call    8 never executed
    %%%%%:14743-block  4
    $$$$$:14743-block  5
call    9 never executed
    $$$$$:14743-block  6
    $$$$$:14743-block  7
call   10 never executed
        -:14744:}
        -:14745:#endif
        -:14746:
function _ZN5Catch11StringMakerIPKcvE7convertB5cxx11ES2_ called 0 returned 0% blocks executed 0%
    #####:14747:std::string StringMaker<char const*>::convert(char const* str) {
    #####:14748:if (str) {
    %%%%%:14748-block  0
branch  0 never executed
branch  1 never executed
    #####:14749:return ::Catch::Detail::stringify(std::string{ str });
    %%%%%:14749-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14749-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:14749-block  2
    %%%%%:14749-block  3
call    7 never executed
call    8 never executed
    $$$$$:14749-block  4
call    9 never executed
    $$$$$:14749-block  5
    $$$$$:14749-block  6
call   10 never executed
    $$$$$:14749-block  7
call   11 never executed
        -:14750:} else {
    #####:14751:return{ "{null string}" };
    %%%%%:14751-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14751-block  1
call    4 never executed
    $$$$$:14751-block  2
call    5 never executed
        -:14752:}
        -:14753:}
function _ZN5Catch11StringMakerIPcvE7convertB5cxx11ES1_ called 0 returned 0% blocks executed 0%
    #####:14754:std::string StringMaker<char*>::convert(char* str) {
    #####:14755:if (str) {
    %%%%%:14755-block  0
branch  0 never executed
branch  1 never executed
    #####:14756:return ::Catch::Detail::stringify(std::string{ str });
    %%%%%:14756-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14756-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:14756-block  2
    %%%%%:14756-block  3
call    7 never executed
call    8 never executed
    $$$$$:14756-block  4
call    9 never executed
    $$$$$:14756-block  5
    $$$$$:14756-block  6
call   10 never executed
    $$$$$:14756-block  7
call   11 never executed
        -:14757:} else {
    #####:14758:return{ "{null string}" };
    %%%%%:14758-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14758-block  1
call    4 never executed
    $$$$$:14758-block  2
call    5 never executed
        -:14759:}
        -:14760:}
        -:14761:
        -:14762:#ifdef CATCH_CONFIG_WCHAR
function _ZN5Catch11StringMakerINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEvE7convertERKS6_ called 0 returned 0% blocks executed 0%
    #####:14763:std::string StringMaker<std::wstring>::convert(const std::wstring& wstr) {
    #####:14764:std::string s;
    %%%%%:14764-block  0
call    0 never executed
    %%%%%:14764-block  1
call    1 never executed
    $$$$$:14764-block  2
call    2 never executed
    #####:14765:s.reserve(wstr.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:14766:for (auto c : wstr) {
    %%%%%:14766-block  0
call    0 never executed
call    1 never executed
    %%%%%:14766-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:14766-block  2
call    5 never executed
    %%%%%:14766-block  3
call    6 never executed
    #####:14767:s += (c <= 0xff) ? static_cast<char>(c) : '?';
branch  0 never executed
branch  1 never executed
    %%%%%:14767-block  0
    %%%%%:14767-block  1
    %%%%%:14767-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:14768:}
    #####:14769:return ::Catch::Detail::stringify(s);
    %%%%%:14769-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14769-block  1
    %%%%%:14769-block  2
        -:14770:}
        -:14771:
        -:14772:# ifdef CATCH_CONFIG_CPP17_STRING_VIEW
function _ZN5Catch11StringMakerISt17basic_string_viewIwSt11char_traitsIwEEvE7convertB5cxx11ES4_ called 0 returned 0% blocks executed 0%
    #####:14773:std::string StringMaker<std::wstring_view>::convert(std::wstring_view str) {
    #####:14774:return StringMaker<std::wstring>::convert(std::wstring(str));
    %%%%%:14774-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14774-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:14774-block  2
    %%%%%:14774-block  3
call    7 never executed
call    8 never executed
    %%%%%:14774-block  4
    $$$$$:14774-block  5
call    9 never executed
    $$$$$:14774-block  6
    $$$$$:14774-block  7
call   10 never executed
        -:14775:}
        -:14776:# endif
        -:14777:
function _ZN5Catch11StringMakerIPKwvE7convertB5cxx11ES2_ called 0 returned 0% blocks executed 0%
    #####:14778:std::string StringMaker<wchar_t const*>::convert(wchar_t const * str) {
    #####:14779:if (str) {
    %%%%%:14779-block  0
branch  0 never executed
branch  1 never executed
    #####:14780:return ::Catch::Detail::stringify(std::wstring{ str });
    %%%%%:14780-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14780-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:14780-block  2
    %%%%%:14780-block  3
call    7 never executed
call    8 never executed
    $$$$$:14780-block  4
call    9 never executed
    $$$$$:14780-block  5
    $$$$$:14780-block  6
call   10 never executed
    $$$$$:14780-block  7
call   11 never executed
        -:14781:} else {
    #####:14782:return{ "{null string}" };
    %%%%%:14782-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14782-block  1
call    4 never executed
    $$$$$:14782-block  2
call    5 never executed
        -:14783:}
        -:14784:}
function _ZN5Catch11StringMakerIPwvE7convertB5cxx11ES1_ called 0 returned 0% blocks executed 0%
    #####:14785:std::string StringMaker<wchar_t *>::convert(wchar_t * str) {
    #####:14786:if (str) {
    %%%%%:14786-block  0
branch  0 never executed
branch  1 never executed
    #####:14787:return ::Catch::Detail::stringify(std::wstring{ str });
    %%%%%:14787-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14787-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:14787-block  2
    %%%%%:14787-block  3
call    7 never executed
call    8 never executed
    $$$$$:14787-block  4
call    9 never executed
    $$$$$:14787-block  5
    $$$$$:14787-block  6
call   10 never executed
    $$$$$:14787-block  7
call   11 never executed
        -:14788:} else {
    #####:14789:return{ "{null string}" };
    %%%%%:14789-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14789-block  1
call    4 never executed
    $$$$$:14789-block  2
call    5 never executed
        -:14790:}
        -:14791:}
        -:14792:#endif
        -:14793:
        -:14794:#if defined(CATCH_CONFIG_CPP17_BYTE)
        -:14795:#include <cstddef>
function _ZN5Catch11StringMakerISt4bytevE7convertB5cxx11ES1_ called 0 returned 0% blocks executed 0%
    #####:14796:std::string StringMaker<std::byte>::convert(std::byte value) {
    #####:14797:return ::Catch::Detail::stringify(std::to_integer<unsigned long long>(value));
    %%%%%:14797-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14797-block  1
    %%%%%:14797-block  2
    %%%%%:14797-block  3
        -:14798:}
        -:14799:#endif // defined(CATCH_CONFIG_CPP17_BYTE)
        -:14800:
function _ZN5Catch11StringMakerIivE7convertB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####:14801:std::string StringMaker<int>::convert(int value) {
    #####:14802:return ::Catch::Detail::stringify(static_cast<long long>(value));
    %%%%%:14802-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14802-block  1
    %%%%%:14802-block  2
    %%%%%:14802-block  3
        -:14803:}
function _ZN5Catch11StringMakerIlvE7convertB5cxx11El called 0 returned 0% blocks executed 0%
    #####:14804:std::string StringMaker<long>::convert(long value) {
    #####:14805:return ::Catch::Detail::stringify(static_cast<long long>(value));
    %%%%%:14805-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14805-block  1
    %%%%%:14805-block  2
    %%%%%:14805-block  3
        -:14806:}
function _ZN5Catch11StringMakerIxvE7convertB5cxx11Ex called 0 returned 0% blocks executed 0%
    #####:14807:std::string StringMaker<long long>::convert(long long value) {
    #####:14808:ReusableStringStream rss;
    %%%%%:14808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14808-block  1
call    3 never executed
    $$$$$:14808-block  2
call    4 never executed
    #####:14809:rss << value;
    %%%%%:14809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14810:if (value > Detail::hexThreshold) {
    %%%%%:14810-block  0
branch  0 never executed
branch  1 never executed
    #####:14811:rss << " (0x" << std::hex << value << ')';
    %%%%%:14811-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14811-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:14811-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:14811-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:14811-block  4
    $$$$$:14811-block  5
        -:14812:}
    #####:14813:return rss.str();
    %%%%%:14813-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14813-block  1
    %%%%%:14813-block  2
        -:14814:}
        -:14815:
function _ZN5Catch11StringMakerIjvE7convertB5cxx11Ej called 0 returned 0% blocks executed 0%
    #####:14816:std::string StringMaker<unsigned int>::convert(unsigned int value) {
    #####:14817:return ::Catch::Detail::stringify(static_cast<unsigned long long>(value));
    %%%%%:14817-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14817-block  1
    %%%%%:14817-block  2
    %%%%%:14817-block  3
        -:14818:}
function _ZN5Catch11StringMakerImvE7convertB5cxx11Em called 0 returned 0% blocks executed 0%
    #####:14819:std::string StringMaker<unsigned long>::convert(unsigned long value) {
    #####:14820:return ::Catch::Detail::stringify(static_cast<unsigned long long>(value));
    %%%%%:14820-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14820-block  1
    %%%%%:14820-block  2
    %%%%%:14820-block  3
        -:14821:}
function _ZN5Catch11StringMakerIyvE7convertB5cxx11Ey called 0 returned 0% blocks executed 0%
    #####:14822:std::string StringMaker<unsigned long long>::convert(unsigned long long value) {
    #####:14823:ReusableStringStream rss;
    %%%%%:14823-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14823-block  1
call    3 never executed
    $$$$$:14823-block  2
call    4 never executed
    #####:14824:rss << value;
    %%%%%:14824-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:14825:if (value > Detail::hexThreshold) {
    %%%%%:14825-block  0
branch  0 never executed
branch  1 never executed
    #####:14826:rss << " (0x" << std::hex << value << ')';
    %%%%%:14826-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14826-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:14826-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:14826-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:14826-block  4
    $$$$$:14826-block  5
        -:14827:}
    #####:14828:return rss.str();
    %%%%%:14828-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14828-block  1
    %%%%%:14828-block  2
        -:14829:}
        -:14830:
function _ZN5Catch11StringMakerIbvE7convertB5cxx11Eb called 0 returned 0% blocks executed 0%
    #####:14831:std::string StringMaker<bool>::convert(bool b) {
    #####:14832:return b ? "true" : "false";
    %%%%%:14832-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14832-block  1
    %%%%%:14832-block  2
    %%%%%:14832-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:14832-block  4
call    6 never executed
    %%%%%:14832-block  5
    $$$$$:14832-block  6
call    7 never executed
        -:14833:}
        -:14834:
function _ZN5Catch11StringMakerIavE7convertB5cxx11Ea called 0 returned 0% blocks executed 0%
    #####:14835:std::string StringMaker<signed char>::convert(signed char value) {
    #####:14836:if (value == '\r') {
    %%%%%:14836-block  0
branch  0 never executed
branch  1 never executed
    #####:14837:return "'\\r'";
    %%%%%:14837-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14837-block  1
call    4 never executed
    $$$$$:14837-block  2
call    5 never executed
    $$$$$:14837-block  3
call    6 never executed
    #####:14838:} else if (value == '\f') {
    %%%%%:14838-block  0
branch  0 never executed
branch  1 never executed
    #####:14839:return "'\\f'";
    %%%%%:14839-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14839-block  1
call    4 never executed
    $$$$$:14839-block  2
call    5 never executed
    $$$$$:14839-block  3
call    6 never executed
    #####:14840:} else if (value == '\n') {
    %%%%%:14840-block  0
branch  0 never executed
branch  1 never executed
    #####:14841:return "'\\n'";
    %%%%%:14841-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14841-block  1
call    4 never executed
    $$$$$:14841-block  2
call    5 never executed
    $$$$$:14841-block  3
call    6 never executed
    #####:14842:} else if (value == '\t') {
    %%%%%:14842-block  0
branch  0 never executed
branch  1 never executed
    #####:14843:return "'\\t'";
    %%%%%:14843-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14843-block  1
call    4 never executed
    $$$$$:14843-block  2
call    5 never executed
    $$$$$:14843-block  3
call    6 never executed
    #####:14844:} else if ('\0' <= value && value < ' ') {
    %%%%%:14844-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:14844-block  1
branch  2 never executed
branch  3 never executed
    #####:14845:return ::Catch::Detail::stringify(static_cast<unsigned int>(value));
    %%%%%:14845-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14845-block  1
    %%%%%:14845-block  2
    $$$$$:14845-block  3
call    3 never executed
        -:14846:} else {
    #####:14847:char chstr[] = "' '";
    #####:14848:chstr[1] = value;
    #####:14849:return chstr;
    %%%%%:14849-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14849-block  1
call    4 never executed
    $$$$$:14849-block  2
call    5 never executed
    $$$$$:14849-block  3
        -:14850:}
        -:14851:}
function _ZN5Catch11StringMakerIcvE7convertB5cxx11Ec called 0 returned 0% blocks executed 0%
    #####:14852:std::string StringMaker<char>::convert(char c) {
    #####:14853:return ::Catch::Detail::stringify(static_cast<signed char>(c));
    %%%%%:14853-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14853-block  1
    %%%%%:14853-block  2
    %%%%%:14853-block  3
        -:14854:}
function _ZN5Catch11StringMakerIhvE7convertB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####:14855:std::string StringMaker<unsigned char>::convert(unsigned char c) {
    #####:14856:return ::Catch::Detail::stringify(static_cast<char>(c));
    %%%%%:14856-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:14856-block  1
    %%%%%:14856-block  2
    %%%%%:14856-block  3
        -:14857:}
        -:14858:
function _ZN5Catch11StringMakerIDnvE7convertB5cxx11EDn called 0 returned 0% blocks executed 0%
    #####:14859:std::string StringMaker<std::nullptr_t>::convert(std::nullptr_t) {
    #####:14860:return "nullptr";
    %%%%%:14860-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14860-block  1
call    4 never executed
    %%%%%:14860-block  2
    $$$$$:14860-block  3
call    5 never executed
        -:14861:}
        -:14862:
        -:14863:int StringMaker<float>::precision = 5;
        -:14864:
function _ZN5Catch11StringMakerIfvE7convertB5cxx11Ef called 0 returned 0% blocks executed 0%
    #####:14865:std::string StringMaker<float>::convert(float value) {
    #####:14866:return fpToString(value, precision) + 'f';
    %%%%%:14866-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14866-block  1
    %%%%%:14866-block  2
call    4 never executed
    %%%%%:14866-block  3
    $$$$$:14866-block  4
call    5 never executed
        -:14867:}
        -:14868:
        -:14869:int StringMaker<double>::precision = 10;
        -:14870:
function _ZN5Catch11StringMakerIdvE7convertB5cxx11Ed called 0 returned 0% blocks executed 0%
    #####:14871:std::string StringMaker<double>::convert(double value) {
    #####:14872:return fpToString(value, precision);
    %%%%%:14872-block  0
call    0 never executed
        -:14873:}
        -:14874:
function _ZN5Catch12ratio_stringISt5ratioILx1ELx1000000000000000000EEE6symbolB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:14875:std::string ratio_string<std::atto>::symbol() { return "a"; }
    %%%%%:14875-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14875-block  1
call    4 never executed
    %%%%%:14875-block  2
    $$$$$:14875-block  3
call    5 never executed
function _ZN5Catch12ratio_stringISt5ratioILx1ELx1000000000000000EEE6symbolB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:14876:std::string ratio_string<std::femto>::symbol() { return "f"; }
    %%%%%:14876-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14876-block  1
call    4 never executed
    %%%%%:14876-block  2
    $$$$$:14876-block  3
call    5 never executed
function _ZN5Catch12ratio_stringISt5ratioILx1ELx1000000000000EEE6symbolB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:14877:std::string ratio_string<std::pico>::symbol() { return "p"; }
    %%%%%:14877-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14877-block  1
call    4 never executed
    %%%%%:14877-block  2
    $$$$$:14877-block  3
call    5 never executed
function _ZN5Catch12ratio_stringISt5ratioILx1ELx1000000000EEE6symbolB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:14878:std::string ratio_string<std::nano>::symbol() { return "n"; }
    %%%%%:14878-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14878-block  1
call    4 never executed
    %%%%%:14878-block  2
    $$$$$:14878-block  3
call    5 never executed
function _ZN5Catch12ratio_stringISt5ratioILx1ELx1000000EEE6symbolB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:14879:std::string ratio_string<std::micro>::symbol() { return "u"; }
    %%%%%:14879-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14879-block  1
call    4 never executed
    %%%%%:14879-block  2
    $$$$$:14879-block  3
call    5 never executed
function _ZN5Catch12ratio_stringISt5ratioILx1ELx1000EEE6symbolB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:14880:std::string ratio_string<std::milli>::symbol() { return "m"; }
    %%%%%:14880-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:14880-block  1
call    4 never executed
    %%%%%:14880-block  2
    $$$$$:14880-block  3
call    5 never executed
        -:14881:
        -:14882:} // end namespace Catch
        -:14883:
        -:14884:#if defined(__clang__)
        -:14885:#    pragma clang diagnostic pop
        -:14886:#endif
        -:14887:
        -:14888:// end catch_tostring.cpp
        -:14889:// start catch_totals.cpp
        -:14890:
        -:14891:namespace Catch {
        -:14892:
function _ZNK5Catch6CountsmiERKS0_ called 24 returned 100% blocks executed 100%
       24:14893:Counts Counts::operator - ( Counts const& other ) const {
       24:14894:Counts diff;
       24:14895:diff.passed = passed - other.passed;
       24:14896:diff.failed = failed - other.failed;
       24:14897:diff.failedButOk = failedButOk - other.failedButOk;
       24:14898:return diff;
       24:14898-block  0
        -:14899:}
        -:14900:
function _ZN5Catch6CountspLERKS0_ called 24 returned 100% blocks executed 100%
       24:14901:Counts& Counts::operator += ( Counts const& other ) {
       24:14902:passed += other.passed;
       24:14903:failed += other.failed;
       24:14904:failedButOk += other.failedButOk;
       24:14905:return *this;
       24:14905-block  0
        -:14906:}
        -:14907:
function _ZNK5Catch6Counts5totalEv called 14 returned 100% blocks executed 100%
       14:14908:std::size_t Counts::total() const {
       14:14909:return passed + failed + failedButOk;
       14:14909-block  0
        -:14910:}
function _ZNK5Catch6Counts9allPassedEv called 2 returned 100% blocks executed 83%
        2:14911:bool Counts::allPassed() const {
       2*:14912:return failed == 0 && failedButOk == 0;
        2:14912-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:14912-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2:14912-block  2
    %%%%%:14912-block  3
        2:14912-block  4
        -:14913:}
function _ZNK5Catch6Counts5allOkEv called 0 returned 0% blocks executed 0%
    #####:14914:bool Counts::allOk() const {
    #####:14915:return failed == 0;
    %%%%%:14915-block  0
        -:14916:}
        -:14917:
function _ZNK5Catch6TotalsmiERKS0_ called 8 returned 100% blocks executed 100%
        8:14918:Totals Totals::operator - ( Totals const& other ) const {
        8:14919:Totals diff;
        8:14920:diff.assertions = assertions - other.assertions;
        8:14920-block  0
call    0 returned 8
        8:14921:diff.testCases = testCases - other.testCases;
call    0 returned 8
        8:14922:return diff;
        -:14923:}
        -:14924:
function _ZN5Catch6TotalspLERKS0_ called 8 returned 100% blocks executed 100%
        8:14925:Totals& Totals::operator += ( Totals const& other ) {
        8:14926:assertions += other.assertions;
        8:14926-block  0
call    0 returned 8
        8:14927:testCases += other.testCases;
call    0 returned 8
        8:14928:return *this;
        -:14929:}
        -:14930:
function _ZNK5Catch6Totals5deltaERKS0_ called 8 returned 100% blocks executed 75%
        8:14931:Totals Totals::delta( Totals const& prevTotals ) const {
        8:14932:Totals diff = *this - prevTotals;
        8:14932-block  0
call    0 returned 8
        8:14933:if( diff.assertions.failed > 0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####:14934:++diff.testCases.failed;
    %%%%%:14934-block  0
        8:14935:else if( diff.assertions.failedButOk > 0 )
        8:14935-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####:14936:++diff.testCases.failedButOk;
    %%%%%:14936-block  0
        -:14937:else
        8:14938:++diff.testCases.passed;
        8:14938-block  0
        8:14939:return diff;
        8:14939-block  0
        -:14940:}
        -:14941:
        -:14942:}
        -:14943:// end catch_totals.cpp
        -:14944:// start catch_uncaught_exceptions.cpp
        -:14945:
        -:14946:#include <exception>
        -:14947:
        -:14948:namespace Catch {
function _ZN5Catch19uncaught_exceptionsEv called 0 returned 0% blocks executed 0%
    #####:14949:bool uncaught_exceptions() {
        -:14950:#if defined(CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)
    #####:14951:return std::uncaught_exceptions() > 0;
    %%%%%:14951-block  0
        -:14952:#else
        -:14953:return std::uncaught_exception();
        -:14954:#endif
        -:14955:}
        -:14956:} // end namespace Catch
        -:14957:// end catch_uncaught_exceptions.cpp
        -:14958:// start catch_version.cpp
        -:14959:
        -:14960:#include <ostream>
        -:14961:
        -:14962:namespace Catch {
        -:14963:
function _ZN5Catch7VersionC2EjjjPKcj called 0 returned 0% blocks executed 0%
    #####:14964:Version::Version
        -:14965:(   unsigned int _majorVersion,
        -:14966:unsigned int _minorVersion,
        -:14967:unsigned int _patchNumber,
        -:14968:char const * const _branchName,
    #####:14969:unsigned int _buildNumber )
        -:14970::   majorVersion( _majorVersion ),
        -:14971:minorVersion( _minorVersion ),
        -:14972:patchNumber( _patchNumber ),
        -:14973:branchName( _branchName ),
    #####:14974:buildNumber( _buildNumber )
    #####:14975:{}
        -:14976:
function _ZN5CatchlsERSoRKNS_7VersionE called 0 returned 0% blocks executed 0%
    #####:14977:std::ostream& operator << ( std::ostream& os, Version const& version ) {
    #####:14978:os  << version.majorVersion << '.'
    %%%%%:14978-block  0
call    0 never executed
call    1 never executed
    #####:14979:<< version.minorVersion << '.'
call    0 never executed
call    1 never executed
    #####:14980:<< version.patchNumber;
call    0 never executed
        -:14981:// branchName is never null -> 0th char is \0 if it is empty
    #####:14982:if (version.branchName[0]) {
branch  0 never executed
branch  1 never executed
    #####:14983:os << '-' << version.branchName
    #####:14984:<< '.' << version.buildNumber;
    %%%%%:14984-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:14985:}
    #####:14986:return os;
    %%%%%:14986-block  0
        -:14987:}
        -:14988:
function _ZN5Catch14libraryVersionEv called 0 returned 0% blocks executed 0%
    #####:14989:Version const& libraryVersion() {
    #####:14990:static Version version( 2, 10, 1, "", 0 );
    %%%%%:14990-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:14990-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:14990-block  2
call    5 never executed
call    6 never executed
    #####:14991:return version;
    %%%%%:14991-block  0
        -:14992:}
        -:14993:
        -:14994:}
        -:14995:// end catch_version.cpp
        -:14996:// start catch_wildcard_pattern.cpp
        -:14997:
        -:14998:namespace Catch {
        -:14999:
function _ZN5Catch15WildcardPatternC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_13CaseSensitive6ChoiceE called 0 returned 0% blocks executed 0%
    #####:15000:WildcardPattern::WildcardPattern( std::string const& pattern,
    #####:15001:CaseSensitive::Choice caseSensitivity )
        -:15002::   m_caseSensitivity( caseSensitivity ),
    #####:15003:m_pattern( normaliseString( pattern ) )
    %%%%%:15003-block  0
call    0 never executed
    $$$$$:15003-block  1
call    1 never executed
        -:15004:{
    #####:15005:if( startsWith( m_pattern, '*' ) ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15006:m_pattern = m_pattern.substr( 1 );
    %%%%%:15006-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15006-block  1
call    3 never executed
call    4 never executed
    #####:15007:m_wildcard = WildcardAtStart;
        -:15008:}
    #####:15009:if( endsWith( m_pattern, '*' ) ) {
    %%%%%:15009-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15010:m_pattern = m_pattern.substr( 0, m_pattern.size()-1 );
    %%%%%:15010-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15010-block  1
call    4 never executed
call    5 never executed
    #####:15011:m_wildcard = static_cast<WildcardPosition>( m_wildcard | WildcardAtEnd );
        -:15012:}
    #####:15013:}
    %%%%%:15013-block  0
        -:15014:
function _ZNK5Catch15WildcardPattern7matchesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:15015:bool WildcardPattern::matches( std::string const& str ) const {
    #####:15016:switch( m_wildcard ) {
    %%%%%:15016-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:15017:case NoWildcard:
    #####:15018:return m_pattern == normaliseString( str );
    %%%%%:15018-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:15019:case WildcardAtStart:
    #####:15020:return endsWith( normaliseString( str ), m_pattern );
    %%%%%:15020-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15020-block  1
    %%%%%:15020-block  2
call    4 never executed
    $$$$$:15020-block  3
call    5 never executed
    $$$$$:15020-block  4
call    6 never executed
    #####:15021:case WildcardAtEnd:
    #####:15022:return startsWith( normaliseString( str ), m_pattern );
    %%%%%:15022-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15022-block  1
    %%%%%:15022-block  2
call    4 never executed
    $$$$$:15022-block  3
call    5 never executed
    $$$$$:15022-block  4
call    6 never executed
    #####:15023:case WildcardAtBothEnds:
    #####:15024:return contains( normaliseString( str ), m_pattern );
    %%%%%:15024-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:15025:default:
    #####:15026:CATCH_INTERNAL_ERROR( "Unknown enum" );
    %%%%%:15026-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15026-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:15026-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:15026-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:15026-block  4
call   14 never executed
    $$$$$:15026-block  5
call   15 never executed
    $$$$$:15026-block  6
    $$$$$:15026-block  7
    $$$$$:15026-block  8
call   16 never executed
        -:15027:}
        -:15028:}
        -:15029:
function _ZNK5Catch15WildcardPattern15normaliseStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:15030:std::string WildcardPattern::normaliseString( std::string const& str ) const {
    #####:15031:return trim( m_caseSensitivity == CaseSensitive::No ? toLower( str ) : str );
    %%%%%:15031-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:15031-block  1
call    2 never executed
    %%%%%:15031-block  2
call    3 never executed
    %%%%%:15031-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15031-block  4
    %%%%%:15031-block  5
call    7 never executed
    %%%%%:15031-block  6
    $$$$$:15031-block  7
call    8 never executed
        -:15032:}
        -:15033:}
        -:15034:// end catch_wildcard_pattern.cpp
        -:15035:// start catch_xmlwriter.cpp
        -:15036:
        -:15037:#include <iomanip>
        -:15038:
        -:15039:using uchar = unsigned char;
        -:15040:
        -:15041:namespace Catch {
        -:15042:
        -:15043:namespace {
        -:15044:
function _ZN5Catch12_GLOBAL__N_113trailingBytesEh called 0 returned 0% blocks executed 0%
    #####:15045:size_t trailingBytes(unsigned char c) {
    #####:15046:if ((c & 0xE0) == 0xC0) {
    %%%%%:15046-block  0
branch  0 never executed
branch  1 never executed
    #####:15047:return 2;
    %%%%%:15047-block  0
        -:15048:}
    #####:15049:if ((c & 0xF0) == 0xE0) {
    %%%%%:15049-block  0
branch  0 never executed
branch  1 never executed
    #####:15050:return 3;
    %%%%%:15050-block  0
        -:15051:}
    #####:15052:if ((c & 0xF8) == 0xF0) {
    %%%%%:15052-block  0
branch  0 never executed
branch  1 never executed
    #####:15053:return 4;
    %%%%%:15053-block  0
        -:15054:}
    #####:15055:CATCH_INTERNAL_ERROR("Invalid multibyte utf-8 start byte encountered");
    %%%%%:15055-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15055-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:15055-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:15055-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:15055-block  4
call   14 never executed
    $$$$$:15055-block  5
call   15 never executed
    $$$$$:15055-block  6
    $$$$$:15055-block  7
    $$$$$:15055-block  8
call   16 never executed
        -:15056:}
        -:15057:
function _ZN5Catch12_GLOBAL__N_111headerValueEh called 0 returned 0% blocks executed 0%
    #####:15058:uint32_t headerValue(unsigned char c) {
    #####:15059:if ((c & 0xE0) == 0xC0) {
    %%%%%:15059-block  0
branch  0 never executed
branch  1 never executed
    #####:15060:return c & 0x1F;
    %%%%%:15060-block  0
        -:15061:}
    #####:15062:if ((c & 0xF0) == 0xE0) {
    %%%%%:15062-block  0
branch  0 never executed
branch  1 never executed
    #####:15063:return c & 0x0F;
    %%%%%:15063-block  0
        -:15064:}
    #####:15065:if ((c & 0xF8) == 0xF0) {
    %%%%%:15065-block  0
branch  0 never executed
branch  1 never executed
    #####:15066:return c & 0x07;
    %%%%%:15066-block  0
        -:15067:}
    #####:15068:CATCH_INTERNAL_ERROR("Invalid multibyte utf-8 start byte encountered");
    %%%%%:15068-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15068-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:15068-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:15068-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:15068-block  4
call   14 never executed
    $$$$$:15068-block  5
call   15 never executed
    $$$$$:15068-block  6
    $$$$$:15068-block  7
    $$$$$:15068-block  8
call   16 never executed
        -:15069:}
        -:15070:
function _ZN5Catch12_GLOBAL__N_113hexEscapeCharERSoh called 0 returned 0% blocks executed 0%
    #####:15071:void hexEscapeChar(std::ostream& os, unsigned char c) {
    #####:15072:std::ios_base::fmtflags f(os.flags());
    %%%%%:15072-block  0
call    0 never executed
    #####:15073:os << "\\x"
call    0 never executed
    #####:15074:<< std::uppercase << std::hex << std::setfill('0') << std::setw(2)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:15075:<< static_cast<int>(c);
call    0 never executed
    #####:15076:os.flags(f);
call    0 never executed
    #####:15077:}
        -:15078:
        -:15079:} // anonymous namespace
        -:15080:
function _ZN5Catch9XmlEncodeC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_7ForWhatE called 0 returned 0% blocks executed 0%
    #####:15081:XmlEncode::XmlEncode( std::string const& str, ForWhat forWhat )
        -:15082::   m_str( str ),
    #####:15083:m_forWhat( forWhat )
    %%%%%:15083-block  0
call    0 never executed
    #####:15084:{}
        -:15085:
function _ZNK5Catch9XmlEncode8encodeToERSo called 0 returned 0% blocks executed 0%
    #####:15086:void XmlEncode::encodeTo( std::ostream& os ) const {
        -:15087:// Apostrophe escaping not necessary if we always use " to write attributes
        -:15088:// (see: http://www.w3.org/TR/xml/#syntax)
        -:15089:
    #####:15090:for( std::size_t idx = 0; idx < m_str.size(); ++ idx ) {
    %%%%%:15090-block  0
    %%%%%:15090-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15090-block  2
    #####:15091:uchar c = m_str[idx];
    %%%%%:15091-block  0
call    0 never executed
    #####:15092:switch (c) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:15093:case '<':   os << "&lt;"; break;
    %%%%%:15093-block  0
call    0 never executed
    #####:15094:case '&':   os << "&amp;"; break;
    %%%%%:15094-block  0
call    0 never executed
        -:15095:
    #####:15096:case '>':
        -:15097:// See: http://www.w3.org/TR/xml/#syntax
    #####:15098:if (idx > 2 && m_str[idx - 1] == ']' && m_str[idx - 2] == ']')
    %%%%%:15098-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:15098-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15098-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:15098-block  3
    %%%%%:15098-block  4
    %%%%%:15098-block  5
branch  8 never executed
branch  9 never executed
    #####:15099:os << "&gt;";
    %%%%%:15099-block  0
call    0 never executed
        -:15100:else
    #####:15101:os << c;
    %%%%%:15101-block  0
call    0 never executed
    #####:15102:break;
    %%%%%:15102-block  0
        -:15103:
    #####:15104:case '\"':
    #####:15105:if (m_forWhat == ForAttributes)
    %%%%%:15105-block  0
branch  0 never executed
branch  1 never executed
    #####:15106:os << "&quot;";
    %%%%%:15106-block  0
call    0 never executed
        -:15107:else
    #####:15108:os << c;
    %%%%%:15108-block  0
call    0 never executed
    #####:15109:break;
    %%%%%:15109-block  0
        -:15110:
    #####:15111:default:
        -:15112:// Check for control characters and invalid utf-8
        -:15113:
        -:15114:// Escape control characters in standard ascii
        -:15115:// see http://stackoverflow.com/questions/404107/why-are-control-characters-illegal-in-xml-1-0
    #####:15116:if (c < 0x09 || (c > 0x0D && c < 0x20) || c == 0x7F) {
    %%%%%:15116-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:15116-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:15116-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:15116-block  3
branch  6 never executed
branch  7 never executed
    #####:15117:hexEscapeChar(os, c);
    %%%%%:15117-block  0
call    0 never executed
    #####:15118:break;
        -:15119:}
        -:15120:
        -:15121:// Plain ASCII: Write it to stream
    #####:15122:if (c < 0x7F) {
    %%%%%:15122-block  0
branch  0 never executed
branch  1 never executed
    #####:15123:os << c;
    %%%%%:15123-block  0
call    0 never executed
    #####:15124:break;
        -:15125:}
        -:15126:
        -:15127:// UTF-8 territory
        -:15128:// Check if the encoding is valid and if it is not, hex escape bytes.
        -:15129:// Important: We do not check the exact decoded values for validity, only the encoding format
        -:15130:// First check that this bytes is a valid lead byte:
        -:15131:// This means that it is not encoded as 1111 1XXX
        -:15132:// Or as 10XX XXXX
    #####:15133:if (c <  0xC0 ||
    %%%%%:15133-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:15133-block  1
branch  2 never executed
branch  3 never executed
        -:15134:c >= 0xF8) {
    #####:15135:hexEscapeChar(os, c);
    %%%%%:15135-block  0
call    0 never executed
    #####:15136:break;
        -:15137:}
        -:15138:
    #####:15139:auto encBytes = trailingBytes(c);
    %%%%%:15139-block  0
call    0 never executed
        -:15140:// Are there enough bytes left to avoid accessing out-of-bounds memory?
    #####:15141:if (idx + encBytes - 1 >= m_str.size()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15142:hexEscapeChar(os, c);
    %%%%%:15142-block  0
call    0 never executed
    #####:15143:break;
        -:15144:}
        -:15145:// The header is valid, check data
        -:15146:// The next encBytes bytes must together be a valid utf-8
        -:15147:// This means: bitpattern 10XX XXXX and the extracted value is sane (ish)
    #####:15148:bool valid = true;
    #####:15149:uint32_t value = headerValue(c);
    %%%%%:15149-block  0
call    0 never executed
    #####:15150:for (std::size_t n = 1; n < encBytes; ++n) {
    %%%%%:15150-block  0
branch  0 never executed
branch  1 never executed
    #####:15151:uchar nc = m_str[idx + n];
    %%%%%:15151-block  0
call    0 never executed
    #####:15152:valid &= ((nc & 0xC0) == 0x80);
    #####:15153:value = (value << 6) | (nc & 0x3F);
        -:15154:}
        -:15155:
    #####:15156:if (
        -:15157:// Wrong bit pattern of following bytes
    #####:15158:(!valid) ||
    %%%%%:15158-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:15158-block  1
branch  2 never executed
branch  3 never executed
        -:15159:// Overlong encodings
    #####:15160:(value < 0x80) ||
    %%%%%:15160-block  0
branch  0 never executed
branch  1 never executed
    #####:15161:(0x80 <= value && value < 0x800   && encBytes > 2) ||
    %%%%%:15161-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:15161-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:15161-block  2
branch  4 never executed
branch  5 never executed
    #####:15162:(0x800 < value && value < 0x10000 && encBytes > 3) ||
    %%%%%:15162-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:15162-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:15162-block  2
branch  4 never executed
branch  5 never executed
        -:15163:// Encoded value out of range
        -:15164:(value >= 0x110000)
        -:15165:) {
    #####:15166:hexEscapeChar(os, c);
    %%%%%:15166-block  0
call    0 never executed
    #####:15167:break;
        -:15168:}
        -:15169:
        -:15170:// If we got here, this is in fact a valid(ish) utf-8 sequence
    #####:15171:for (std::size_t n = 0; n < encBytes; ++n) {
    %%%%%:15171-block  0
    %%%%%:15171-block  1
branch  0 never executed
branch  1 never executed
    #####:15172:os << m_str[idx + n];
    %%%%%:15172-block  0
call    0 never executed
call    1 never executed
        -:15173:}
    #####:15174:idx += encBytes - 1;
    #####:15175:break;
    %%%%%:15175-block  0
        -:15176:}
        -:15177:}
    #####:15178:}
        -:15179:
function _ZN5CatchlsERSoRKNS_9XmlEncodeE called 0 returned 0% blocks executed 0%
    #####:15180:std::ostream& operator << ( std::ostream& os, XmlEncode const& xmlEncode ) {
    #####:15181:xmlEncode.encodeTo( os );
    %%%%%:15181-block  0
call    0 never executed
    #####:15182:return os;
        -:15183:}
        -:15184:
function _ZN5Catch9XmlWriter13ScopedElementC2EPS0_ called 0 returned 0% blocks executed 0%
    #####:15185:XmlWriter::ScopedElement::ScopedElement( XmlWriter* writer )
    #####:15186::   m_writer( writer )
    #####:15187:{}
        -:15188:
function _ZN5Catch9XmlWriter13ScopedElementC2EOS1_ called 0 returned 0% blocks executed 0%
    #####:15189:XmlWriter::ScopedElement::ScopedElement( ScopedElement&& other ) noexcept
    #####:15190::   m_writer( other.m_writer ){
    #####:15191:other.m_writer = nullptr;
    #####:15192:}
function _ZN5Catch9XmlWriter13ScopedElementaSEOS1_ called 0 returned 0% blocks executed 0%
    #####:15193:XmlWriter::ScopedElement& XmlWriter::ScopedElement::operator=( ScopedElement&& other ) noexcept {
    #####:15194:if ( m_writer ) {
    %%%%%:15194-block  0
branch  0 never executed
branch  1 never executed
    #####:15195:m_writer->endElement();
    %%%%%:15195-block  0
call    0 never executed
        -:15196:}
    #####:15197:m_writer = other.m_writer;
    #####:15198:other.m_writer = nullptr;
    #####:15199:return *this;
    %%%%%:15199-block  0
        -:15200:}
        -:15201:
function _ZN5Catch9XmlWriter13ScopedElementD2Ev called 0 returned 0% blocks executed 0%
    #####:15202:XmlWriter::ScopedElement::~ScopedElement() {
    #####:15203:if( m_writer )
    %%%%%:15203-block  0
branch  0 never executed
branch  1 never executed
    #####:15204:m_writer->endElement();
    %%%%%:15204-block  0
call    0 never executed
    #####:15205:}
        -:15206:
function _ZN5Catch9XmlWriter13ScopedElement9writeTextERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:15207:XmlWriter::ScopedElement& XmlWriter::ScopedElement::writeText( std::string const& text, bool indent ) {
    #####:15208:m_writer->writeText( text, indent );
    %%%%%:15208-block  0
call    0 never executed
    #####:15209:return *this;
        -:15210:}
        -:15211:
function _ZN5Catch9XmlWriterC2ERSo called 0 returned 0% blocks executed 0%
    #####:15212:XmlWriter::XmlWriter( std::ostream& os ) : m_os( os )
    %%%%%:15212-block  0
call    0 never executed
call    1 never executed
    $$$$$:15212-block  1
call    2 never executed
    $$$$$:15212-block  2
call    3 never executed
        -:15213:{
    #####:15214:writeDeclaration();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15215:}
    %%%%%:15215-block  0
        -:15216:
function _ZN5Catch9XmlWriterD2Ev called 0 returned 0% blocks executed 0%
    #####:15217:XmlWriter::~XmlWriter() {
    %%%%%:15217-block  0
call    0 never executed
call    1 never executed
    #####:15218:while( !m_tags.empty() )
    %%%%%:15218-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15219:endElement();
    %%%%%:15219-block  0
call    0 never executed
    #####:15220:}
        -:15221:
function _ZN5Catch9XmlWriter12startElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:15222:XmlWriter& XmlWriter::startElement( std::string const& name ) {
    #####:15223:ensureTagClosed();
    %%%%%:15223-block  0
call    0 never executed
    #####:15224:newlineIfNecessary();
call    0 never executed
    #####:15225:m_os << m_indent << '<' << name;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:15226:m_tags.push_back( name );
call    0 never executed
    #####:15227:m_indent += "  ";
call    0 never executed
    #####:15228:m_tagIsOpen = true;
    #####:15229:return *this;
        -:15230:}
        -:15231:
function _ZN5Catch9XmlWriter13scopedElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:15232:XmlWriter::ScopedElement XmlWriter::scopedElement( std::string const& name ) {
    #####:15233:ScopedElement scoped( this );
    %%%%%:15233-block  0
call    0 never executed
    #####:15234:startElement( name );
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15235:return scoped;
    %%%%%:15235-block  0
    %%%%%:15235-block  1
        -:15236:}
        -:15237:
function _ZN5Catch9XmlWriter10endElementEv called 0 returned 0% blocks executed 0%
    #####:15238:XmlWriter& XmlWriter::endElement() {
    #####:15239:newlineIfNecessary();
    %%%%%:15239-block  0
call    0 never executed
    #####:15240:m_indent = m_indent.substr( 0, m_indent.size()-2 );
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:15241:if( m_tagIsOpen ) {
branch  0 never executed
branch  1 never executed
    #####:15242:m_os << "/>";
    %%%%%:15242-block  0
call    0 never executed
    #####:15243:m_tagIsOpen = false;
        -:15244:}
        -:15245:else {
    #####:15246:m_os << m_indent << "</" << m_tags.back() << ">";
    %%%%%:15246-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:15247:}
    #####:15248:m_os << std::endl;
    %%%%%:15248-block  0
call    0 never executed
    #####:15249:m_tags.pop_back();
call    0 never executed
    #####:15250:return *this;
        -:15251:}
        -:15252:
function _ZN5Catch9XmlWriter14writeAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####:15253:XmlWriter& XmlWriter::writeAttribute( std::string const& name, std::string const& attribute ) {
    #####:15254:if( !name.empty() && !attribute.empty() )
    %%%%%:15254-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15254-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:15254-block  2
    %%%%%:15254-block  3
    %%%%%:15254-block  4
branch  6 never executed
branch  7 never executed
    #####:15255:m_os << ' ' << name << "=\"" << XmlEncode( attribute, XmlEncode::ForAttributes ) << '"';
    %%%%%:15255-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15255-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:15255-block  2
call   10 never executed
    $$$$$:15255-block  3
call   11 never executed
    #####:15256:return *this;
    %%%%%:15256-block  0
    %%%%%:15256-block  1
        -:15257:}
        -:15258:
function _ZN5Catch9XmlWriter14writeAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:15259:XmlWriter& XmlWriter::writeAttribute( std::string const& name, bool attribute ) {
    #####:15260:m_os << ' ' << name << "=\"" << ( attribute ? "true" : "false" ) << '"';
    %%%%%:15260-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15260-block  1
    %%%%%:15260-block  2
    %%%%%:15260-block  3
call    5 never executed
call    6 never executed
    #####:15261:return *this;
        -:15262:}
        -:15263:
function _ZN5Catch9XmlWriter9writeTextERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:15264:XmlWriter& XmlWriter::writeText( std::string const& text, bool indent ) {
    #####:15265:if( !text.empty() ){
    %%%%%:15265-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15266:bool tagWasOpen = m_tagIsOpen;
    #####:15267:ensureTagClosed();
    %%%%%:15267-block  0
call    0 never executed
    #####:15268:if( tagWasOpen && indent )
branch  0 never executed
branch  1 never executed
    %%%%%:15268-block  0
branch  2 never executed
branch  3 never executed
    #####:15269:m_os << m_indent;
    %%%%%:15269-block  0
call    0 never executed
    #####:15270:m_os << XmlEncode( text );
    %%%%%:15270-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15270-block  1
call    4 never executed
    $$$$$:15270-block  2
call    5 never executed
    #####:15271:m_needsNewline = true;
        -:15272:}
    #####:15273:return *this;
    %%%%%:15273-block  0
    %%%%%:15273-block  1
        -:15274:}
        -:15275:
function _ZN5Catch9XmlWriter12writeCommentERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:15276:XmlWriter& XmlWriter::writeComment( std::string const& text ) {
    #####:15277:ensureTagClosed();
    %%%%%:15277-block  0
call    0 never executed
    #####:15278:m_os << m_indent << "<!--" << text << "-->";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:15279:m_needsNewline = true;
    #####:15280:return *this;
        -:15281:}
        -:15282:
function _ZN5Catch9XmlWriter18writeStylesheetRefERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:15283:void XmlWriter::writeStylesheetRef( std::string const& url ) {
    #####:15284:m_os << "<?xml-stylesheet type=\"text/xsl\" href=\"" << url << "\"?>\n";
    %%%%%:15284-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:15285:}
        -:15286:
function _ZN5Catch9XmlWriter14writeBlankLineEv called 0 returned 0% blocks executed 0%
    #####:15287:XmlWriter& XmlWriter::writeBlankLine() {
    #####:15288:ensureTagClosed();
    %%%%%:15288-block  0
call    0 never executed
    #####:15289:m_os << '\n';
call    0 never executed
    #####:15290:return *this;
        -:15291:}
        -:15292:
function _ZN5Catch9XmlWriter15ensureTagClosedEv called 0 returned 0% blocks executed 0%
    #####:15293:void XmlWriter::ensureTagClosed() {
    #####:15294:if( m_tagIsOpen ) {
    %%%%%:15294-block  0
branch  0 never executed
branch  1 never executed
    #####:15295:m_os << ">" << std::endl;
    %%%%%:15295-block  0
call    0 never executed
call    1 never executed
    #####:15296:m_tagIsOpen = false;
        -:15297:}
    #####:15298:}
        -:15299:
function _ZN5Catch9XmlWriter16writeDeclarationEv called 0 returned 0% blocks executed 0%
    #####:15300:void XmlWriter::writeDeclaration() {
    #####:15301:m_os << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    %%%%%:15301-block  0
call    0 never executed
    #####:15302:}
        -:15303:
function _ZN5Catch9XmlWriter18newlineIfNecessaryEv called 0 returned 0% blocks executed 0%
    #####:15304:void XmlWriter::newlineIfNecessary() {
    #####:15305:if( m_needsNewline ) {
    %%%%%:15305-block  0
branch  0 never executed
branch  1 never executed
    #####:15306:m_os << std::endl;
    %%%%%:15306-block  0
call    0 never executed
    #####:15307:m_needsNewline = false;
        -:15308:}
    #####:15309:}
        -:15310:}
        -:15311:// end catch_xmlwriter.cpp
        -:15312:// start catch_reporter_bases.cpp
        -:15313:
        -:15314:#include <cstring>
        -:15315:#include <cfloat>
        -:15316:#include <cstdio>
        -:15317:#include <cassert>
        -:15318:#include <memory>
        -:15319:
        -:15320:namespace Catch {
function _ZN5Catch25prepareExpandedExpressionERNS_15AssertionResultE called 0 returned 0% blocks executed 0%
    #####:15321:void prepareExpandedExpression(AssertionResult& result) {
    #####:15322:result.getExpandedExpression();
    %%%%%:15322-block  0
call    0 never executed
call    1 never executed
    #####:15323:}
        -:15324:
        -:15325:// Because formatting using c++ streams is stateful, drop down to C is required
        -:15326:// Alternatively we could use stringstream, but its performance is... not good.
function _ZN5Catch20getFormattedDurationB5cxx11Ed called 0 returned 0% blocks executed 0%
    #####:15327:std::string getFormattedDuration( double duration ) {
        -:15328:// Max exponent + 1 is required to represent the whole part
        -:15329:// + 1 for decimal point
        -:15330:// + 3 for the 3 decimal places
        -:15331:// + 1 for null terminator
    #####:15332:const std::size_t maxDoubleSize = DBL_MAX_10_EXP + 1 + 1 + 3 + 1;
        -:15333:char buffer[maxDoubleSize];
        -:15334:
        -:15335:// Save previous errno, to prevent sprintf from overwriting it
    #####:15336:ErrnoGuard guard;
    %%%%%:15336-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:15336-block  1
call    3 never executed
        -:15337:#ifdef _MSC_VER
        -:15338:sprintf_s(buffer, "%.3f", duration);
        -:15339:#else
    #####:15340:std::sprintf(buffer, "%.3f", duration);
    %%%%%:15340-block  0
call    0 never executed
        -:15341:#endif
    #####:15342:return std::string(buffer);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15342-block  0
call    4 never executed
call    5 never executed
    %%%%%:15342-block  1
    $$$$$:15342-block  2
call    6 never executed
    $$$$$:15342-block  3
        -:15343:}
        -:15344:
function _ZN5Catch16serializeFiltersERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####:15345:std::string serializeFilters( std::vector<std::string> const& container ) {
    #####:15346:ReusableStringStream oss;
    %%%%%:15346-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15346-block  1
call    3 never executed
    $$$$$:15346-block  2
call    4 never executed
    #####:15347:bool first = true;
    #####:15348:for (auto&& filter : container)
    %%%%%:15348-block  0
call    0 never executed
call    1 never executed
    %%%%%:15348-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15348-block  2
call    5 never executed
    %%%%%:15348-block  3
call    6 never executed
        -:15349:{
    #####:15350:if (!first)
branch  0 never executed
branch  1 never executed
    #####:15351:oss << ' ';
    %%%%%:15351-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15351-block  1
    $$$$$:15351-block  2
        -:15352:else
    #####:15353:first = false;
    %%%%%:15353-block  0
        -:15354:
    #####:15355:oss << filter;
    %%%%%:15355-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15356:}
    #####:15357:return oss.str();
    %%%%%:15357-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15357-block  1
    %%%%%:15357-block  2
        -:15358:}
        -:15359:
function _ZN5Catch21TestEventListenerBaseC2ERKNS_14ReporterConfigE called 0 returned 0% blocks executed 0%
    #####:15360:TestEventListenerBase::TestEventListenerBase(ReporterConfig const & _config)
    #####:15361::StreamingReporterBase(_config) {}
    %%%%%:15361-block  0
call    0 never executed
        -:15362:
function _ZN5Catch21TestEventListenerBase23getSupportedVerbositiesEv called 0 returned 0% blocks executed 0%
    #####:15363:std::set<Verbosity> TestEventListenerBase::getSupportedVerbosities() {
    #####:15364:return { Verbosity::Quiet, Verbosity::Normal, Verbosity::High };
    %%%%%:15364-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15364-block  1
call    4 never executed
    %%%%%:15364-block  2
    $$$$$:15364-block  3
call    5 never executed
    $$$$$:15364-block  4
    $$$$$:15364-block  5
        -:15365:}
        -:15366:
function _ZN5Catch21TestEventListenerBase17assertionStartingERKNS_13AssertionInfoE called 0 returned 0% blocks executed 0%
    #####:15367:void TestEventListenerBase::assertionStarting(AssertionInfo const &) {}
        -:15368:
function _ZN5Catch21TestEventListenerBase14assertionEndedERKNS_14AssertionStatsE called 0 returned 0% blocks executed 0%
    #####:15369:bool TestEventListenerBase::assertionEnded(AssertionStats const &) {
    #####:15370:return false;
    %%%%%:15370-block  0
        -:15371:}
        -:15372:
        -:15373:} // end namespace Catch
        -:15374:// end catch_reporter_bases.cpp
        -:15375:// start catch_reporter_compact.cpp
        -:15376:
        -:15377:namespace {
        -:15378:
        -:15379:#ifdef CATCH_PLATFORM_MAC
        -:15380:const char* failedString() { return "FAILED"; }
        -:15381:const char* passedString() { return "PASSED"; }
        -:15382:#else
function _ZN12_GLOBAL__N_112failedStringEv called 0 returned 0% blocks executed 0%
    #####:15383:const char* failedString() { return "failed"; }
    %%%%%:15383-block  0
function _ZN12_GLOBAL__N_112passedStringEv called 0 returned 0% blocks executed 0%
    #####:15384:const char* passedString() { return "passed"; }
    %%%%%:15384-block  0
        -:15385:#endif
        -:15386:
        -:15387:// Colour::LightGrey
function _ZN12_GLOBAL__N_19dimColourEv called 0 returned 0% blocks executed 0%
    #####:15388:Catch::Colour::Code dimColour() { return Catch::Colour::FileName; }
    %%%%%:15388-block  0
        -:15389:
function _ZN12_GLOBAL__N_19bothOrAllEj called 0 returned 0% blocks executed 0%
    #####:15390:std::string bothOrAll( std::size_t count ) {
        -:15391:return count == 1 ? std::string() :
    #####:15392:count == 2 ? "both " : "all " ;
    %%%%%:15392-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:15392-block  1
call    2 never executed
    %%%%%:15392-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:15392-block  3
    %%%%%:15392-block  4
    %%%%%:15392-block  5
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:15392-block  6
branch  9 never executed
branch 10 never executed
    %%%%%:15392-block  7
call   11 never executed
    %%%%%:15392-block  8
    %%%%%:15392-block  9
    $$$$$:15392-block 10
branch 12 never executed
branch 13 never executed
    $$$$$:15392-block 11
call   14 never executed
        -:15393:}
        -:15394:
        -:15395:} // anon namespace
        -:15396:
        -:15397:namespace Catch {
        -:15398:namespace {
        -:15399:// Colour, message variants:
        -:15400:// - white: No tests ran.
        -:15401:// -   red: Failed [both/all] N test cases, failed [both/all] M assertions.
        -:15402:// - white: Passed [both/all] N test cases (no assertions).
        -:15403:// -   red: Failed N tests cases, failed M assertions.
        -:15404:// - green: Passed [both/all] N tests cases with M assertions.
function _ZN5Catch12_GLOBAL__N_111printTotalsERSoRKNS_6TotalsE called 0 returned 0% blocks executed 0%
    #####:15405:void printTotals(std::ostream& out, const Totals& totals) {
    #####:15406:if (totals.testCases.total() == 0) {
    %%%%%:15406-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15407:out << "No tests ran.";
    %%%%%:15407-block  0
call    0 never executed
    #####:15408:} else if (totals.testCases.failed == totals.testCases.total()) {
    %%%%%:15408-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15409:Colour colour(Colour::ResultError);
    %%%%%:15409-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:15409-block  1
call    4 never executed
        -:15410:const std::string qualify_assertions_failed =
    #####:15411:totals.assertions.failed == totals.assertions.total() ?
    %%%%%:15411-block  0
call    0 never executed
    #####:15412:bothOrAll(totals.assertions.failed) : std::string();
branch  0 never executed
branch  1 never executed
    %%%%%:15412-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15412-block  1
call    5 never executed
    $$$$$:15412-block  2
call    6 never executed
        -:15413:out <<
    #####:15414:"Failed " << bothOrAll(totals.testCases.failed)
    %%%%%:15414-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15414-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:15414-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    $$$$$:15414-block  3
call   10 never executed
    $$$$$:15414-block  4
    #####:15415:<< pluralise(totals.testCases.failed, "test case") << ", "
    %%%%%:15415-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15415-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15415-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:15415-block  3
call   13 never executed
    $$$$$:15415-block  4
    $$$$$:15415-block  5
call   14 never executed
    $$$$$:15415-block  6
    $$$$$:15415-block  7
call   15 never executed
    $$$$$:15415-block  8
    #####:15416:"failed " << qualify_assertions_failed <<
    %%%%%:15416-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15416-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:15417:pluralise(totals.assertions.failed, "assertion") << '.';
    %%%%%:15417-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15417-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15417-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:15417-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:15417-block  4
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$:15417-block  5
call   17 never executed
    $$$$$:15417-block  6
    $$$$$:15417-block  7
call   18 never executed
    $$$$$:15417-block  8
    $$$$$:15417-block  9
call   19 never executed
    $$$$$:15417-block 10
    #####:15418:} else if (totals.assertions.total() == 0) {
    %%%%%:15418-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15419:out <<
    #####:15420:"Passed " << bothOrAll(totals.testCases.total())
    %%%%%:15420-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:15420-block  1
call    6 never executed
    $$$$$:15420-block  2
call    7 never executed
    #####:15421:<< pluralise(totals.testCases.total(), "test case")
    %%%%%:15421-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15421-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:15421-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:15421-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$:15421-block  4
call   15 never executed
    $$$$$:15421-block  5
    $$$$$:15421-block  6
call   16 never executed
    $$$$$:15421-block  7
    $$$$$:15421-block  8
call   17 never executed
    $$$$$:15421-block  9
    #####:15422:<< " (no assertions).";
    %%%%%:15422-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15423:} else if (totals.assertions.failed) {
    %%%%%:15423-block  0
branch  0 never executed
branch  1 never executed
    #####:15424:Colour colour(Colour::ResultError);
    %%%%%:15424-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:15424-block  1
call    3 never executed
        -:15425:out <<
    #####:15426:"Failed " << pluralise(totals.testCases.failed, "test case") << ", "
    %%%%%:15426-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15426-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15426-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:15426-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$:15426-block  4
call   16 never executed
    $$$$$:15426-block  5
    $$$$$:15426-block  6
call   17 never executed
    $$$$$:15426-block  7
    $$$$$:15426-block  8
call   18 never executed
    $$$$$:15426-block  9
    #####:15427:"failed " << pluralise(totals.assertions.failed, "assertion") << '.';
    %%%%%:15427-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15427-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15427-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:15427-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:15427-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:15427-block  5
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$:15427-block  6
call   20 never executed
    $$$$$:15427-block  7
    $$$$$:15427-block  8
call   21 never executed
    $$$$$:15427-block  9
    $$$$$:15427-block 10
call   22 never executed
    $$$$$:15427-block 11
        -:15428:} else {
    #####:15429:Colour colour(Colour::ResultSuccess);
    %%%%%:15429-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:15429-block  1
call    3 never executed
        -:15430:out <<
    #####:15431:"Passed " << bothOrAll(totals.testCases.passed)
    %%%%%:15431-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15431-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:15431-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    $$$$$:15431-block  3
call   10 never executed
    $$$$$:15431-block  4
    #####:15432:<< pluralise(totals.testCases.passed, "test case") <<
    %%%%%:15432-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15432-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15432-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:15432-block  3
call   13 never executed
    $$$$$:15432-block  4
    $$$$$:15432-block  5
call   14 never executed
    $$$$$:15432-block  6
    $$$$$:15432-block  7
call   15 never executed
    $$$$$:15432-block  8
    #####:15433:" with " << pluralise(totals.assertions.passed, "assertion") << '.';
    %%%%%:15433-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15433-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15433-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:15433-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:15433-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:15433-block  5
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$:15433-block  6
call   20 never executed
    $$$$$:15433-block  7
    $$$$$:15433-block  8
call   21 never executed
    $$$$$:15433-block  9
    $$$$$:15433-block 10
call   22 never executed
    $$$$$:15433-block 11
        -:15434:}
    #####:15435:}
    %%%%%:15435-block  0
        -:15436:
        -:15437:// Implementation of CompactReporter formatting
        -:15438:class AssertionPrinter {
        -:15439:public:
        -:15440:AssertionPrinter& operator= (AssertionPrinter const&) = delete;
        -:15441:AssertionPrinter(AssertionPrinter const&) = delete;
function _ZN5Catch12_GLOBAL__N_116AssertionPrinterC2ERSoRKNS_14AssertionStatsEb called 0 returned 0% blocks executed 0%
    #####:15442:AssertionPrinter(std::ostream& _stream, AssertionStats const& _stats, bool _printInfoMessages)
    #####:15443:: stream(_stream)
    #####:15444:, result(_stats.assertionResult)
    #####:15445:, messages(_stats.infoMessages)
    #####:15446:, itMessage(_stats.infoMessages.begin())
call    0 never executed
    #####:15447:, printInfoMessages(_printInfoMessages) {}
    %%%%%:15447-block  0
call    0 never executed
        -:15448:
function _ZN5Catch12_GLOBAL__N_116AssertionPrinter5printEv called 0 returned 0% blocks executed 0%
    #####:15449:void print() {
    #####:15450:printSourceInfo();
    %%%%%:15450-block  0
call    0 never executed
        -:15451:
    #####:15452:itMessage = messages.begin();
call    0 never executed
call    1 never executed
        -:15453:
    #####:15454:switch (result.getResultType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:15455:case ResultWas::Ok:
    #####:15456:printResultType(Colour::ResultSuccess, passedString());
    %%%%%:15456-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15456-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:15456-block  2
call    8 never executed
call    9 never executed
    $$$$$:15456-block  3
call   10 never executed
    $$$$$:15456-block  4
    $$$$$:15456-block  5
call   11 never executed
    $$$$$:15456-block  6
call   12 never executed
    #####:15457:printOriginalExpression();
call    0 never executed
    #####:15458:printReconstructedExpression();
call    0 never executed
    #####:15459:if (!result.hasExpression())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15460:printRemainingMessages(Colour::None);
    %%%%%:15460-block  0
call    0 never executed
        -:15461:else
    #####:15462:printRemainingMessages();
    %%%%%:15462-block  0
call    0 never executed
call    1 never executed
    #####:15463:break;
    %%%%%:15463-block  0
    #####:15464:case ResultWas::ExpressionFailed:
    #####:15465:if (result.isOk())
    %%%%%:15465-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15466:printResultType(Colour::ResultSuccess, failedString() + std::string(" - but was ok"));
    %%%%%:15466-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15466-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:15466-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:15466-block  3
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:15466-block  4
call   14 never executed
    $$$$$:15466-block  5
    $$$$$:15466-block  6
call   15 never executed
    $$$$$:15466-block  7
    $$$$$:15466-block  8
call   16 never executed
    $$$$$:15466-block  9
call   17 never executed
        -:15467:else
    #####:15468:printResultType(Colour::Error, failedString());
    %%%%%:15468-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15468-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:15468-block  2
call    8 never executed
call    9 never executed
    $$$$$:15468-block  3
call   10 never executed
    $$$$$:15468-block  4
    $$$$$:15468-block  5
call   11 never executed
    $$$$$:15468-block  6
call   12 never executed
    #####:15469:printOriginalExpression();
    %%%%%:15469-block  0
call    0 never executed
    #####:15470:printReconstructedExpression();
call    0 never executed
    #####:15471:printRemainingMessages();
call    0 never executed
call    1 never executed
    #####:15472:break;
    #####:15473:case ResultWas::ThrewException:
    #####:15474:printResultType(Colour::Error, failedString());
    %%%%%:15474-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15474-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:15474-block  2
call    8 never executed
call    9 never executed
    $$$$$:15474-block  3
call   10 never executed
    $$$$$:15474-block  4
    $$$$$:15474-block  5
call   11 never executed
    $$$$$:15474-block  6
call   12 never executed
    #####:15475:printIssue("unexpected exception with message:");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15475-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15475-block  1
call    7 never executed
call    8 never executed
    $$$$$:15475-block  2
call    9 never executed
    $$$$$:15475-block  3
    $$$$$:15475-block  4
call   10 never executed
    $$$$$:15475-block  5
call   11 never executed
    #####:15476:printMessage();
call    0 never executed
    #####:15477:printExpressionWas();
call    0 never executed
    #####:15478:printRemainingMessages();
call    0 never executed
call    1 never executed
    #####:15479:break;
    #####:15480:case ResultWas::FatalErrorCondition:
    #####:15481:printResultType(Colour::Error, failedString());
    %%%%%:15481-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15481-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:15481-block  2
call    8 never executed
call    9 never executed
    $$$$$:15481-block  3
call   10 never executed
    $$$$$:15481-block  4
    $$$$$:15481-block  5
call   11 never executed
    $$$$$:15481-block  6
call   12 never executed
    #####:15482:printIssue("fatal error condition with message:");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15482-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15482-block  1
call    7 never executed
call    8 never executed
    $$$$$:15482-block  2
call    9 never executed
    $$$$$:15482-block  3
    $$$$$:15482-block  4
call   10 never executed
    $$$$$:15482-block  5
call   11 never executed
    #####:15483:printMessage();
call    0 never executed
    #####:15484:printExpressionWas();
call    0 never executed
    #####:15485:printRemainingMessages();
call    0 never executed
call    1 never executed
    #####:15486:break;
    #####:15487:case ResultWas::DidntThrowException:
    #####:15488:printResultType(Colour::Error, failedString());
    %%%%%:15488-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15488-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:15488-block  2
call    8 never executed
call    9 never executed
    $$$$$:15488-block  3
call   10 never executed
    $$$$$:15488-block  4
    $$$$$:15488-block  5
call   11 never executed
    $$$$$:15488-block  6
call   12 never executed
    #####:15489:printIssue("expected exception, got none");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15489-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15489-block  1
call    7 never executed
call    8 never executed
    $$$$$:15489-block  2
call    9 never executed
    $$$$$:15489-block  3
    $$$$$:15489-block  4
call   10 never executed
    $$$$$:15489-block  5
call   11 never executed
    #####:15490:printExpressionWas();
call    0 never executed
    #####:15491:printRemainingMessages();
call    0 never executed
call    1 never executed
    #####:15492:break;
    #####:15493:case ResultWas::Info:
    #####:15494:printResultType(Colour::None, "info");
    %%%%%:15494-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15494-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15494-block  2
call    7 never executed
call    8 never executed
    $$$$$:15494-block  3
call    9 never executed
    $$$$$:15494-block  4
    $$$$$:15494-block  5
call   10 never executed
    $$$$$:15494-block  6
call   11 never executed
    #####:15495:printMessage();
call    0 never executed
    #####:15496:printRemainingMessages();
call    0 never executed
call    1 never executed
    #####:15497:break;
    #####:15498:case ResultWas::Warning:
    #####:15499:printResultType(Colour::None, "warning");
    %%%%%:15499-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15499-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15499-block  2
call    7 never executed
call    8 never executed
    $$$$$:15499-block  3
call    9 never executed
    $$$$$:15499-block  4
    $$$$$:15499-block  5
call   10 never executed
    $$$$$:15499-block  6
call   11 never executed
    #####:15500:printMessage();
call    0 never executed
    #####:15501:printRemainingMessages();
call    0 never executed
call    1 never executed
    #####:15502:break;
    #####:15503:case ResultWas::ExplicitFailure:
    #####:15504:printResultType(Colour::Error, failedString());
    %%%%%:15504-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15504-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:15504-block  2
call    8 never executed
call    9 never executed
    $$$$$:15504-block  3
call   10 never executed
    $$$$$:15504-block  4
    $$$$$:15504-block  5
call   11 never executed
    $$$$$:15504-block  6
call   12 never executed
    #####:15505:printIssue("explicitly");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15505-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15505-block  1
call    7 never executed
call    8 never executed
    $$$$$:15505-block  2
call    9 never executed
    $$$$$:15505-block  3
    $$$$$:15505-block  4
call   10 never executed
    $$$$$:15505-block  5
call   11 never executed
    #####:15506:printRemainingMessages(Colour::None);
call    0 never executed
    #####:15507:break;
        -:15508:// These cases are here to prevent compiler warnings
    #####:15509:case ResultWas::Unknown:
        -:15510:case ResultWas::FailureBit:
        -:15511:case ResultWas::Exception:
    #####:15512:printResultType(Colour::Error, "** internal error **");
    %%%%%:15512-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15512-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15512-block  2
call    7 never executed
call    8 never executed
    $$$$$:15512-block  3
call    9 never executed
    $$$$$:15512-block  4
    $$$$$:15512-block  5
call   10 never executed
    #####:15513:break;
        -:15514:}
    #####:15515:}
    %%%%%:15515-block  0
        -:15516:
        -:15517:private:
function _ZNK5Catch12_GLOBAL__N_116AssertionPrinter15printSourceInfoEv called 0 returned 0% blocks executed 0%
    #####:15518:void printSourceInfo() const {
    #####:15519:Colour colourGuard(Colour::FileName);
    %%%%%:15519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:15519-block  1
call    3 never executed
    #####:15520:stream << result.getSourceInfo() << ':';
    %%%%%:15520-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15520-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15520-block  2
call    7 never executed
    $$$$$:15520-block  3
    #####:15521:}
        -:15522:
function _ZNK5Catch12_GLOBAL__N_116AssertionPrinter15printResultTypeENS_6Colour4CodeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:15523:void printResultType(Colour::Code colour, std::string const& passOrFail) const {
    #####:15524:if (!passOrFail.empty()) {
    %%%%%:15524-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15525:{
    #####:15526:Colour colourGuard(colour);
    %%%%%:15526-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15526-block  1
call    3 never executed
    $$$$$:15526-block  2
call    4 never executed
    #####:15527:stream << ' ' << passOrFail;
    %%%%%:15527-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15527-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:15528:}
    #####:15529:stream << ':';
call    0 never executed
        -:15530:}
    #####:15531:}
    %%%%%:15531-block  0
        -:15532:
function _ZNK5Catch12_GLOBAL__N_116AssertionPrinter10printIssueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:15533:void printIssue(std::string const& issue) const {
    #####:15534:stream << ' ' << issue;
    %%%%%:15534-block  0
call    0 never executed
call    1 never executed
    #####:15535:}
        -:15536:
function _ZN5Catch12_GLOBAL__N_116AssertionPrinter18printExpressionWasEv called 0 returned 0% blocks executed 0%
    #####:15537:void printExpressionWas() {
    #####:15538:if (result.hasExpression()) {
    %%%%%:15538-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15539:stream << ';';
    %%%%%:15539-block  0
call    0 never executed
        -:15540:{
    #####:15541:Colour colour(dimColour());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15541-block  0
call    4 never executed
    $$$$$:15541-block  1
call    5 never executed
    #####:15542:stream << " expression was:";
    %%%%%:15542-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15543:}
    #####:15544:printOriginalExpression();
call    0 never executed
        -:15545:}
    #####:15546:}
    %%%%%:15546-block  0
        -:15547:
function _ZNK5Catch12_GLOBAL__N_116AssertionPrinter23printOriginalExpressionEv called 0 returned 0% blocks executed 0%
    #####:15548:void printOriginalExpression() const {
    #####:15549:if (result.hasExpression()) {
    %%%%%:15549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15550:stream << ' ' << result.getExpression();
    %%%%%:15550-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15550-block  1
call    5 never executed
    $$$$$:15550-block  2
call    6 never executed
        -:15551:}
    #####:15552:}
    %%%%%:15552-block  0
        -:15553:
function _ZNK5Catch12_GLOBAL__N_116AssertionPrinter28printReconstructedExpressionEv called 0 returned 0% blocks executed 0%
    #####:15554:void printReconstructedExpression() const {
    #####:15555:if (result.hasExpandedExpression()) {
    %%%%%:15555-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15556:{
    #####:15557:Colour colour(dimColour());
    %%%%%:15557-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15557-block  1
call    4 never executed
    $$$$$:15557-block  2
call    5 never executed
    #####:15558:stream << " for: ";
    %%%%%:15558-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15559:}
    #####:15560:stream << result.getExpandedExpression();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15560-block  0
call    4 never executed
    $$$$$:15560-block  1
call    5 never executed
        -:15561:}
    #####:15562:}
    %%%%%:15562-block  0
        -:15563:
function _ZN5Catch12_GLOBAL__N_116AssertionPrinter12printMessageEv called 0 returned 0% blocks executed 0%
    #####:15564:void printMessage() {
    #####:15565:if (itMessage != messages.end()) {
    %%%%%:15565-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:15566:stream << " '" << itMessage->message << '\'';
    %%%%%:15566-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:15567:++itMessage;
call    0 never executed
        -:15568:}
    #####:15569:}
        -:15570:
function _ZN5Catch12_GLOBAL__N_116AssertionPrinter22printRemainingMessagesENS_6Colour4CodeE called 0 returned 0% blocks executed 0%
    #####:15571:void printRemainingMessages(Colour::Code colour = dimColour()) {
    #####:15572:if (itMessage == messages.end())
    %%%%%:15572-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:15573:return;
    %%%%%:15573-block  0
        -:15574:
    #####:15575:const auto itEnd = messages.cend();
    %%%%%:15575-block  0
call    0 never executed
    #####:15576:const auto N = static_cast<std::size_t>(std::distance(itMessage, itEnd));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15577:
        -:15578:{
    #####:15579:Colour colourGuard(colour);
    %%%%%:15579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:15579-block  1
call    3 never executed
    #####:15580:stream << " with " << pluralise(N, "message") << ':';
    %%%%%:15580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15580-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15580-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:15580-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:15580-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:15580-block  5
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$:15580-block  6
call   20 never executed
    $$$$$:15580-block  7
    $$$$$:15580-block  8
call   21 never executed
    $$$$$:15580-block  9
    $$$$$:15580-block 10
call   22 never executed
    $$$$$:15580-block 11
        -:15581:}
        -:15582:
    #####:15583:while (itMessage != itEnd) {
    %%%%%:15583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15583-block  1
        -:15584:// If this assertion is a warning ignore any INFO messages
    #####:15585:if (printInfoMessages || itMessage->type != ResultWas::Info) {
    %%%%%:15585-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:15585-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15585-block  2
    %%%%%:15585-block  3
    %%%%%:15585-block  4
branch  5 never executed
branch  6 never executed
    #####:15586:printMessage();
    %%%%%:15586-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15587:if (itMessage != itEnd) {
    %%%%%:15587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15588:Colour colourGuard(dimColour());
    %%%%%:15588-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15588-block  1
call    4 never executed
    $$$$$:15588-block  2
call    5 never executed
    #####:15589:stream << " and";
    %%%%%:15589-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15590:}
    #####:15591:continue;
    %%%%%:15591-block  0
        -:15592:}
    #####:15593:++itMessage;
    %%%%%:15593-block  0
call    0 never executed
        -:15594:}
        -:15595:}
        -:15596:
        -:15597:private:
        -:15598:std::ostream& stream;
        -:15599:AssertionResult const& result;
        -:15600:std::vector<MessageInfo> messages;
        -:15601:std::vector<MessageInfo>::const_iterator itMessage;
        -:15602:bool printInfoMessages;
        -:15603:};
        -:15604:
        -:15605:} // anon namespace
        -:15606:
function _ZN5Catch15CompactReporter14getDescriptionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:15607:std::string CompactReporter::getDescription() {
    #####:15608:return "Reports test results on a single line, suitable for IDEs";
    %%%%%:15608-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15608-block  1
call    4 never executed
    %%%%%:15608-block  2
    $$$$$:15608-block  3
call    5 never executed
        -:15609:}
        -:15610:
function _ZNK5Catch15CompactReporter14getPreferencesEv called 0 returned 0% blocks executed 0%
    #####:15611:ReporterPreferences CompactReporter::getPreferences() const {
    #####:15612:return m_reporterPrefs;
    %%%%%:15612-block  0
        -:15613:}
        -:15614:
function _ZN5Catch15CompactReporter19noMatchingTestCasesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:15615:void CompactReporter::noMatchingTestCases( std::string const& spec ) {
    #####:15616:stream << "No test cases matched '" << spec << '\'' << std::endl;
    %%%%%:15616-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:15617:}
        -:15618:
function _ZN5Catch15CompactReporter17assertionStartingERKNS_13AssertionInfoE called 0 returned 0% blocks executed 0%
    #####:15619:void CompactReporter::assertionStarting( AssertionInfo const& ) {}
        -:15620:
function _ZN5Catch15CompactReporter14assertionEndedERKNS_14AssertionStatsE called 0 returned 0% blocks executed 0%
    #####:15621:bool CompactReporter::assertionEnded( AssertionStats const& _assertionStats ) {
    #####:15622:AssertionResult const& result = _assertionStats.assertionResult;
        -:15623:
    #####:15624:bool printInfoMessages = true;
        -:15625:
        -:15626:// Drop out if result was successful and we're not printing those
    #####:15627:if( !m_config->includeSuccessfulResults() && result.isOk() ) {
    %%%%%:15627-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15627-block  1
branch  4 never executed
branch  5 never executed
    %%%%%:15627-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:15627-block  3
branch  9 never executed
branch 10 never executed
    %%%%%:15627-block  4
    %%%%%:15627-block  5
    %%%%%:15627-block  6
branch 11 never executed
branch 12 never executed
    #####:15628:if( result.getResultType() != ResultWas::Warning )
    %%%%%:15628-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15629:return false;
    %%%%%:15629-block  0
    #####:15630:printInfoMessages = false;
    %%%%%:15630-block  0
        -:15631:}
        -:15632:
    #####:15633:AssertionPrinter printer( stream, _assertionStats, printInfoMessages );
    %%%%%:15633-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:15633-block  1
call    3 never executed
    #####:15634:printer.print();
    %%%%%:15634-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15635:
    #####:15636:stream << std::endl;
    %%%%%:15636-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15637:return true;
    %%%%%:15637-block  0
call    0 never executed
        -:15638:}
        -:15639:
function _ZN5Catch15CompactReporter12sectionEndedERKNS_12SectionStatsE called 0 returned 0% blocks executed 0%
    #####:15640:void CompactReporter::sectionEnded(SectionStats const& _sectionStats) {
    #####:15641:if (m_config->showDurations() == ShowDurations::Always) {
    %%%%%:15641-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:15642:stream << getFormattedDuration(_sectionStats.durationInSeconds) << " s: " << _sectionStats.sectionInfo.name << std::endl;
    %%%%%:15642-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15642-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15642-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:15642-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:15642-block  4
call   13 never executed
    $$$$$:15642-block  5
call   14 never executed
        -:15643:}
    #####:15644:}
    %%%%%:15644-block  0
        -:15645:
function _ZN5Catch15CompactReporter12testRunEndedERKNS_12TestRunStatsE called 0 returned 0% blocks executed 0%
    #####:15646:void CompactReporter::testRunEnded( TestRunStats const& _testRunStats ) {
    #####:15647:printTotals( stream, _testRunStats.totals );
    %%%%%:15647-block  0
call    0 never executed
    #####:15648:stream << '\n' << std::endl;
call    0 never executed
call    1 never executed
    #####:15649:StreamingReporterBase::testRunEnded( _testRunStats );
call    0 never executed
    #####:15650:}
        -:15651:
    #####:15652:CompactReporter::~CompactReporter() {}
------------------
_ZN5Catch15CompactReporterD0Ev:
function _ZN5Catch15CompactReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:15652:CompactReporter::~CompactReporter() {}
    %%%%%:15652-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch15CompactReporterD2Ev:
function _ZN5Catch15CompactReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:15652:CompactReporter::~CompactReporter() {}
    %%%%%:15652-block  0
call    0 never executed
------------------
        -:15653:
        -:15654:CATCH_REGISTER_REPORTER( "compact", CompactReporter )
        -:15655:
        -:15656:} // end namespace Catch
        -:15657:// end catch_reporter_compact.cpp
        -:15658:// start catch_reporter_console.cpp
        -:15659:
        -:15660:#include <cfloat>
        -:15661:#include <cstdio>
        -:15662:
        -:15663:#if defined(_MSC_VER)
        -:15664:#pragma warning(push)
        -:15665:#pragma warning(disable:4061) // Not all labels are EXPLICITLY handled in switch
        -:15666:// Note that 4062 (not all labels are handled and default is missing) is enabled
        -:15667:#endif
        -:15668:
        -:15669:#if defined(__clang__)
        -:15670:#  pragma clang diagnostic push
        -:15671:// For simplicity, benchmarking-only helpers are always enabled
        -:15672:#  pragma clang diagnostic ignored "-Wunused-function"
        -:15673:#endif
        -:15674:
        -:15675:namespace Catch {
        -:15676:
        -:15677:namespace {
        -:15678:
        -:15679:// Formatter impl for ConsoleReporter
        -:15680:class ConsoleAssertionPrinter {
        -:15681:public:
        -:15682:ConsoleAssertionPrinter& operator= (ConsoleAssertionPrinter const&) = delete;
        -:15683:ConsoleAssertionPrinter(ConsoleAssertionPrinter const&) = delete;
function _ZN5Catch12_GLOBAL__N_123ConsoleAssertionPrinterC2ERSoRKNS_14AssertionStatsEb called 0 returned 0% blocks executed 0%
    #####:15684:ConsoleAssertionPrinter(std::ostream& _stream, AssertionStats const& _stats, bool _printInfoMessages)
    #####:15685:: stream(_stream),
        -:15686:stats(_stats),
    #####:15687:result(_stats.assertionResult),
        -:15688:colour(Colour::None),
    #####:15689:message(result.getMessage()),
    #####:15690:messages(_stats.infoMessages),
    #####:15691:printInfoMessages(_printInfoMessages) {
    %%%%%:15691-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15691-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$:15691-block  2
call    8 never executed
    $$$$$:15691-block  3
call    9 never executed
    $$$$$:15691-block  4
call   10 never executed
    $$$$$:15691-block  5
call   11 never executed
    #####:15692:switch (result.getResultType()) {
    %%%%%:15692-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:15693:case ResultWas::Ok:
    #####:15694:colour = Colour::Success;
    #####:15695:passOrFail = "PASSED";
    %%%%%:15695-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15696://if( result.hasMessage() )
    #####:15697:if (_stats.infoMessages.size() == 1)
    %%%%%:15697-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15698:messageLabel = "with message";
    %%%%%:15698-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15699:if (_stats.infoMessages.size() > 1)
    %%%%%:15699-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15700:messageLabel = "with messages";
    %%%%%:15700-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15701:break;
    %%%%%:15701-block  0
    #####:15702:case ResultWas::ExpressionFailed:
    #####:15703:if (result.isOk()) {
    %%%%%:15703-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15703-block  1
branch  3 never executed
branch  4 never executed
    #####:15704:colour = Colour::Success;
    #####:15705:passOrFail = "FAILED - but was ok";
    %%%%%:15705-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15706:} else {
    #####:15707:colour = Colour::Error;
    #####:15708:passOrFail = "FAILED";
    %%%%%:15708-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15709:}
    #####:15710:if (_stats.infoMessages.size() == 1)
    %%%%%:15710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15711:messageLabel = "with message";
    %%%%%:15711-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15712:if (_stats.infoMessages.size() > 1)
    %%%%%:15712-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15713:messageLabel = "with messages";
    %%%%%:15713-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15714:break;
    %%%%%:15714-block  0
    #####:15715:case ResultWas::ThrewException:
    #####:15716:colour = Colour::Error;
    #####:15717:passOrFail = "FAILED";
    %%%%%:15717-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15718:messageLabel = "due to unexpected exception with ";
    %%%%%:15718-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15719:if (_stats.infoMessages.size() == 1)
    %%%%%:15719-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15720:messageLabel += "message";
    %%%%%:15720-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15721:if (_stats.infoMessages.size() > 1)
    %%%%%:15721-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15722:messageLabel += "messages";
    %%%%%:15722-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15723:break;
    %%%%%:15723-block  0
    #####:15724:case ResultWas::FatalErrorCondition:
    #####:15725:colour = Colour::Error;
    #####:15726:passOrFail = "FAILED";
    %%%%%:15726-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15727:messageLabel = "due to a fatal error condition";
    %%%%%:15727-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15728:break;
    %%%%%:15728-block  0
    #####:15729:case ResultWas::DidntThrowException:
    #####:15730:colour = Colour::Error;
    #####:15731:passOrFail = "FAILED";
    %%%%%:15731-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15732:messageLabel = "because no exception was thrown where one was expected";
    %%%%%:15732-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15733:break;
    %%%%%:15733-block  0
    #####:15734:case ResultWas::Info:
    #####:15735:messageLabel = "info";
    %%%%%:15735-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15736:break;
    %%%%%:15736-block  0
    #####:15737:case ResultWas::Warning:
    #####:15738:messageLabel = "warning";
    %%%%%:15738-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15739:break;
    %%%%%:15739-block  0
    #####:15740:case ResultWas::ExplicitFailure:
    #####:15741:passOrFail = "FAILED";
    %%%%%:15741-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15742:colour = Colour::Error;
    #####:15743:if (_stats.infoMessages.size() == 1)
    %%%%%:15743-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15744:messageLabel = "explicitly with message";
    %%%%%:15744-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15745:if (_stats.infoMessages.size() > 1)
    %%%%%:15745-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15746:messageLabel = "explicitly with messages";
    %%%%%:15746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15747:break;
    %%%%%:15747-block  0
        -:15748:// These cases are here to prevent compiler warnings
    #####:15749:case ResultWas::Unknown:
        -:15750:case ResultWas::FailureBit:
        -:15751:case ResultWas::Exception:
    #####:15752:passOrFail = "** internal error **";
    %%%%%:15752-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15753:colour = Colour::Error;
    #####:15754:break;
    %%%%%:15754-block  0
        -:15755:}
    #####:15756:}
    %%%%%:15756-block  0
        -:15757:
function _ZNK5Catch12_GLOBAL__N_123ConsoleAssertionPrinter5printEv called 0 returned 0% blocks executed 0%
    #####:15758:void print() const {
    #####:15759:printSourceInfo();
    %%%%%:15759-block  0
call    0 never executed
    #####:15760:if (stats.totals.assertions.total() > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15761:printResultType();
    %%%%%:15761-block  0
call    0 never executed
    #####:15762:printOriginalExpression();
call    0 never executed
    #####:15763:printReconstructedExpression();
call    0 never executed
        -:15764:} else {
    #####:15765:stream << '\n';
    %%%%%:15765-block  0
call    0 never executed
        -:15766:}
    #####:15767:printMessage();
    %%%%%:15767-block  0
call    0 never executed
    #####:15768:}
        -:15769:
        -:15770:private:
function _ZNK5Catch12_GLOBAL__N_123ConsoleAssertionPrinter15printResultTypeEv called 0 returned 0% blocks executed 0%
    #####:15771:void printResultType() const {
    #####:15772:if (!passOrFail.empty()) {
    %%%%%:15772-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15773:Colour colourGuard(colour);
    %%%%%:15773-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15773-block  1
call    3 never executed
    $$$$$:15773-block  2
call    4 never executed
    #####:15774:stream << passOrFail << ":\n";
    %%%%%:15774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15774-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:15775:}
    #####:15776:}
    %%%%%:15776-block  0
function _ZNK5Catch12_GLOBAL__N_123ConsoleAssertionPrinter23printOriginalExpressionEv called 0 returned 0% blocks executed 0%
    #####:15777:void printOriginalExpression() const {
    #####:15778:if (result.hasExpression()) {
    %%%%%:15778-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15779:Colour colourGuard(Colour::OriginalExpression);
    %%%%%:15779-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15779-block  1
call    3 never executed
    $$$$$:15779-block  2
call    4 never executed
    #####:15780:stream << "  ";
    %%%%%:15780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15781:stream << result.getExpressionInMacro();
    %%%%%:15781-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15781-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:15781-block  2
call    6 never executed
    $$$$$:15781-block  3
call    7 never executed
    $$$$$:15781-block  4
    #####:15782:stream << '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15783:}
    #####:15784:}
    %%%%%:15784-block  0
function _ZNK5Catch12_GLOBAL__N_123ConsoleAssertionPrinter28printReconstructedExpressionEv called 0 returned 0% blocks executed 0%
    #####:15785:void printReconstructedExpression() const {
    #####:15786:if (result.hasExpandedExpression()) {
    %%%%%:15786-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15787:stream << "with expansion:\n";
    %%%%%:15787-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15788:Colour colourGuard(Colour::ReconstructedExpression);
    %%%%%:15788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:15788-block  1
call    3 never executed
    #####:15789:stream << Column(result.getExpandedExpression()).indent(2) << '\n';
    %%%%%:15789-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15789-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:15789-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:15789-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:15789-block  4
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$:15789-block  5
call   16 never executed
    $$$$$:15789-block  6
    $$$$$:15789-block  7
call   17 never executed
    $$$$$:15789-block  8
        -:15790:}
    #####:15791:}
    %%%%%:15791-block  0
function _ZNK5Catch12_GLOBAL__N_123ConsoleAssertionPrinter12printMessageEv called 0 returned 0% blocks executed 0%
    #####:15792:void printMessage() const {
    #####:15793:if (!messageLabel.empty())
    %%%%%:15793-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:15794:stream << messageLabel << ':' << '\n';
    %%%%%:15794-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:15795:for (auto const& msg : messages) {
    %%%%%:15795-block  0
call    0 never executed
call    1 never executed
    %%%%%:15795-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:15795-block  2
call    5 never executed
    %%%%%:15795-block  3
call    6 never executed
        -:15796:// If this assertion is a warning ignore any INFO messages
    #####:15797:if (printInfoMessages || msg.type != ResultWas::Info)
branch  0 never executed
branch  1 never executed
    %%%%%:15797-block  0
branch  2 never executed
branch  3 never executed
    #####:15798:stream << Column(msg.message).indent(2) << '\n';
    %%%%%:15798-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:15798-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15798-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:15798-block  3
call   10 never executed
    $$$$$:15798-block  4
call   11 never executed
    $$$$$:15798-block  5
        -:15799:}
    #####:15800:}
    %%%%%:15800-block  0
function _ZNK5Catch12_GLOBAL__N_123ConsoleAssertionPrinter15printSourceInfoEv called 0 returned 0% blocks executed 0%
    #####:15801:void printSourceInfo() const {
    #####:15802:Colour colourGuard(Colour::FileName);
    %%%%%:15802-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:15802-block  1
call    3 never executed
    #####:15803:stream << result.getSourceInfo() << ": ";
    %%%%%:15803-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:15803-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:15803-block  2
call    7 never executed
    $$$$$:15803-block  3
    #####:15804:}
        -:15805:
        -:15806:std::ostream& stream;
        -:15807:AssertionStats const& stats;
        -:15808:AssertionResult const& result;
        -:15809:Colour::Code colour;
        -:15810:std::string passOrFail;
        -:15811:std::string messageLabel;
        -:15812:std::string message;
        -:15813:std::vector<MessageInfo> messages;
        -:15814:bool printInfoMessages;
        -:15815:};
        -:15816:
function _ZN5Catch12_GLOBAL__N_19makeRatioEjj called 3 returned 100% blocks executed 78%
        3:15817:std::size_t makeRatio(std::size_t number, std::size_t total) {
       3*:15818:std::size_t ratio = total > 0 ? CATCH_CONFIG_CONSOLE_WIDTH * number / total : 0;
        3:15818-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:15818-block  1
    %%%%%:15818-block  2
       3*:15819:return (ratio == 0 && number > 0) ? 1 : ratio;
        3:15819-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:15819-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        3:15819-block  2
    %%%%%:15819-block  3
        3:15819-block  4
        -:15820:}
        -:15821:
function _ZN5Catch12_GLOBAL__N_17findMaxERjS1_S1_ called 1 returned 100% blocks executed 57%
        1:15822:std::size_t& findMax(std::size_t& i, std::size_t& j, std::size_t& k) {
       1*:15823:if (i > j && i > k)
        1:15823-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:15823-block  1
branch  2 never executed
branch  3 never executed
    #####:15824:return i;
    %%%%%:15824-block  0
        1:15825:else if (j > k)
        1:15825-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:15826:return j;
    %%%%%:15826-block  0
        -:15827:else
        1:15828:return k;
        1:15828-block  0
        -:15829:}
        -:15830:
        -:15831:struct ColumnInfo {
        -:15832:enum Justification { Left, Right };
        -:15833:std::string name;
        -:15834:int width;
        -:15835:Justification justification;
        -:15836:};
        -:15837:struct ColumnBreak {};
        -:15838:struct RowBreak {};
        -:15839:
        -:15840:class Duration {
        -:15841:enum class Unit {
        -:15842:Auto,
        -:15843:Nanoseconds,
        -:15844:Microseconds,
        -:15845:Milliseconds,
        -:15846:Seconds,
        -:15847:Minutes
        -:15848:};
        -:15849:static const uint64_t s_nanosecondsInAMicrosecond = 1000;
        -:15850:static const uint64_t s_nanosecondsInAMillisecond = 1000 * s_nanosecondsInAMicrosecond;
        -:15851:static const uint64_t s_nanosecondsInASecond = 1000 * s_nanosecondsInAMillisecond;
        -:15852:static const uint64_t s_nanosecondsInAMinute = 60 * s_nanosecondsInASecond;
        -:15853:
        -:15854:uint64_t m_inNanoseconds;
        -:15855:Unit m_units;
        -:15856:
        -:15857:public:
        -:15858:explicit Duration(double inNanoseconds, Unit units = Unit::Auto)
        -:15859:: Duration(static_cast<uint64_t>(inNanoseconds), units) {
        -:15860:}
        -:15861:
        -:15862:explicit Duration(uint64_t inNanoseconds, Unit units = Unit::Auto)
        -:15863:: m_inNanoseconds(inNanoseconds),
        -:15864:m_units(units) {
        -:15865:if (m_units == Unit::Auto) {
        -:15866:if (m_inNanoseconds < s_nanosecondsInAMicrosecond)
        -:15867:m_units = Unit::Nanoseconds;
        -:15868:else if (m_inNanoseconds < s_nanosecondsInAMillisecond)
        -:15869:m_units = Unit::Microseconds;
        -:15870:else if (m_inNanoseconds < s_nanosecondsInASecond)
        -:15871:m_units = Unit::Milliseconds;
        -:15872:else if (m_inNanoseconds < s_nanosecondsInAMinute)
        -:15873:m_units = Unit::Seconds;
        -:15874:else
        -:15875:m_units = Unit::Minutes;
        -:15876:}
        -:15877:
        -:15878:}
        -:15879:
        -:15880:auto value() const -> double {
        -:15881:switch (m_units) {
        -:15882:case Unit::Microseconds:
        -:15883:return m_inNanoseconds / static_cast<double>(s_nanosecondsInAMicrosecond);
        -:15884:case Unit::Milliseconds:
        -:15885:return m_inNanoseconds / static_cast<double>(s_nanosecondsInAMillisecond);
        -:15886:case Unit::Seconds:
        -:15887:return m_inNanoseconds / static_cast<double>(s_nanosecondsInASecond);
        -:15888:case Unit::Minutes:
        -:15889:return m_inNanoseconds / static_cast<double>(s_nanosecondsInAMinute);
        -:15890:default:
        -:15891:return static_cast<double>(m_inNanoseconds);
        -:15892:}
        -:15893:}
        -:15894:auto unitsAsString() const -> std::string {
        -:15895:switch (m_units) {
        -:15896:case Unit::Nanoseconds:
        -:15897:return "ns";
        -:15898:case Unit::Microseconds:
        -:15899:return "us";
        -:15900:case Unit::Milliseconds:
        -:15901:return "ms";
        -:15902:case Unit::Seconds:
        -:15903:return "s";
        -:15904:case Unit::Minutes:
        -:15905:return "m";
        -:15906:default:
        -:15907:return "** internal error **";
        -:15908:}
        -:15909:
        -:15910:}
        -:15911:friend auto operator << (std::ostream& os, Duration const& duration) -> std::ostream& {
        -:15912:return os << duration.value() << ' ' << duration.unitsAsString();
        -:15913:}
        -:15914:};
        -:15915:} // end anon namespace
        -:15916:
        -:15917:class TablePrinter {
        -:15918:std::ostream& m_os;
        -:15919:std::vector<ColumnInfo> m_columnInfos;
        -:15920:std::ostringstream m_oss;
        -:15921:int m_currentColumn = -1;
        -:15922:bool m_isOpen = false;
        -:15923:
        -:15924:public:
function _ZN5Catch12TablePrinterC2ERSoSt6vectorINS_12_GLOBAL__N_110ColumnInfoESaIS4_EE called 1 returned 100% blocks executed 83%
        1:15925:TablePrinter( std::ostream& os, std::vector<ColumnInfo> columnInfos )
        1:15926::   m_os( os ),
        1:15927:m_columnInfos( std::move( columnInfos ) ) {}
        1:15927-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:15927-block  1
    $$$$$:15927-block  2
call    5 never executed
        -:15928:
        -:15929:auto columnInfos() const -> std::vector<ColumnInfo> const& {
        -:15930:return m_columnInfos;
        -:15931:}
        -:15932:
        -:15933:void open() {
        -:15934:if (!m_isOpen) {
        -:15935:m_isOpen = true;
        -:15936:*this << RowBreak();
        -:15937:
        -:15938:Columns headerCols;
        -:15939:Spacer spacer(2);
        -:15940:for (auto const& info : m_columnInfos) {
        -:15941:headerCols += Column(info.name).width(static_cast<std::size_t>(info.width - 2));
        -:15942:headerCols += spacer;
        -:15943:}
        -:15944:m_os << headerCols << '\n';
        -:15945:
        -:15946:m_os << Catch::getLineOfChars<'-'>() << '\n';
        -:15947:}
        -:15948:}
function _ZN5Catch12TablePrinter5closeEv called 24 returned 100% blocks executed 40%
       24:15949:void close() {
       24:15950:if (m_isOpen) {
       24:15950-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:15951:*this << RowBreak();
    %%%%%:15951-block  0
call    0 never executed
    #####:15952:m_os << std::endl;
call    0 never executed
    #####:15953:m_isOpen = false;
        -:15954:}
       24:15955:}
        -:15956:
        -:15957:template<typename T>
        -:15958:friend TablePrinter& operator << (TablePrinter& tp, T const& value) {
        -:15959:tp.m_oss << value;
        -:15960:return tp;
        -:15961:}
        -:15962:
        -:15963:friend TablePrinter& operator << (TablePrinter& tp, ColumnBreak) {
        -:15964:auto colStr = tp.m_oss.str();
        -:15965:const auto strSize = colStr.size();
        -:15966:tp.m_oss.str("");
        -:15967:tp.open();
        -:15968:if (tp.m_currentColumn == static_cast<int>(tp.m_columnInfos.size() - 1)) {
        -:15969:tp.m_currentColumn = -1;
        -:15970:tp.m_os << '\n';
        -:15971:}
        -:15972:tp.m_currentColumn++;
        -:15973:
        -:15974:auto colInfo = tp.m_columnInfos[tp.m_currentColumn];
        -:15975:auto padding = (strSize + 1 < static_cast<std::size_t>(colInfo.width))
        -:15976:? std::string(colInfo.width - (strSize + 1), ' ')
        -:15977:: std::string();
        -:15978:if (colInfo.justification == ColumnInfo::Left)
        -:15979:tp.m_os << colStr << padding << ' ';
        -:15980:else
        -:15981:tp.m_os << padding << colStr << ' ';
        -:15982:return tp;
        -:15983:}
        -:15984:
function _ZN5CatchlsERNS_12TablePrinterENS_12_GLOBAL__N_18RowBreakE called 0 returned 0% blocks executed 0%
    #####:15985:friend TablePrinter& operator << (TablePrinter& tp, RowBreak) {
    #####:15986:if (tp.m_currentColumn > 0) {
    %%%%%:15986-block  0
branch  0 never executed
branch  1 never executed
    #####:15987:tp.m_os << '\n';
    %%%%%:15987-block  0
call    0 never executed
    #####:15988:tp.m_currentColumn = -1;
        -:15989:}
    #####:15990:return tp;
    %%%%%:15990-block  0
        -:15991:}
        -:15992:};
        -:15993:
function _ZN5Catch15ConsoleReporterC2ERKNS_14ReporterConfigE called 1 returned 100% blocks executed 56%
        1:15994:ConsoleReporter::ConsoleReporter(ReporterConfig const& config)
        -:15995:: StreamingReporterBase(config),
        1:15996:m_tablePrinter(new TablePrinter(config.stream(),
        -:15997:[&config]() -> std::vector<ColumnInfo> {
        -:15998:if (config.fullConfig()->benchmarkNoAnalysis())
        -:15999:{
        -:16000:return{
        -:16001:{ "benchmark name", CATCH_CONFIG_CONSOLE_WIDTH - 43, ColumnInfo::Left },
        -:16002:{ "     samples", 14, ColumnInfo::Right },
        -:16003:{ "  iterations", 14, ColumnInfo::Right },
        -:16004:{ "        mean", 14, ColumnInfo::Right }
        -:16005:};
        -:16006:}
        -:16007:else
        -:16008:{
        -:16009:return{
        -:16010:{ "benchmark name", CATCH_CONFIG_CONSOLE_WIDTH - 32, ColumnInfo::Left },
        -:16011:{ "samples      mean       std dev", 14, ColumnInfo::Right },
        -:16012:{ "iterations   low mean   low std dev", 14, ColumnInfo::Right },
        -:16013:{ "estimated    high mean  high std dev", 14, ColumnInfo::Right }
        -:16014:};
        -:16015:}
        1:16016:}())) {}
        1:16016-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:16016-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:16016-block  2
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1:16016-block  3
call   11 returned 1
call   12 returned 1
    $$$$$:16016-block  4
call   13 never executed
    $$$$$:16016-block  5
call   14 never executed
    $$$$$:16016-block  6
    $$$$$:16016-block  7
    $$$$$:16016-block  8
call   15 never executed
        -:16017:ConsoleReporter::~ConsoleReporter() = default;
        -:16018:
function _ZN5Catch15ConsoleReporter14getDescriptionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:16019:std::string ConsoleReporter::getDescription() {
    #####:16020:return "Reports test results as plain lines of text";
    %%%%%:16020-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16020-block  1
call    4 never executed
    %%%%%:16020-block  2
    $$$$$:16020-block  3
call    5 never executed
        -:16021:}
        -:16022:
function _ZN5Catch15ConsoleReporter19noMatchingTestCasesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:16023:void ConsoleReporter::noMatchingTestCases(std::string const& spec) {
    #####:16024:stream << "No test cases matched '" << spec << '\'' << std::endl;
    %%%%%:16024-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:16025:}
        -:16026:
function _ZN5Catch15ConsoleReporter22reportInvalidArgumentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:16027:void ConsoleReporter::reportInvalidArguments(std::string const&arg){
    #####:16028:stream << "Invalid Filter: " << arg << std::endl;
    %%%%%:16028-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:16029:}
        -:16030:
function _ZN5Catch15ConsoleReporter17assertionStartingERKNS_13AssertionInfoE called 51 returned 100% blocks executed 100%
       51:16031:void ConsoleReporter::assertionStarting(AssertionInfo const&) {}
        -:16032:
function _ZN5Catch15ConsoleReporter14assertionEndedERKNS_14AssertionStatsE called 0 returned 0% blocks executed 0%
    #####:16033:bool ConsoleReporter::assertionEnded(AssertionStats const& _assertionStats) {
    #####:16034:AssertionResult const& result = _assertionStats.assertionResult;
        -:16035:
    #####:16036:bool includeResults = m_config->includeSuccessfulResults() || !result.isOk();
    %%%%%:16036-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16036-block  1
branch  4 never executed
branch  5 never executed
    %%%%%:16036-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:16036-block  3
branch  9 never executed
branch 10 never executed
    %%%%%:16036-block  4
    %%%%%:16036-block  5
        -:16037:
        -:16038:// Drop out if result was successful but we're not printing them.
    #####:16039:if (!includeResults && result.getResultType() != ResultWas::Warning)
    %%%%%:16039-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:16039-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16039-block  2
    %%%%%:16039-block  3
    %%%%%:16039-block  4
branch  5 never executed
branch  6 never executed
    #####:16040:return false;
    %%%%%:16040-block  0
        -:16041:
    #####:16042:lazyPrint();
    %%%%%:16042-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:16043:
    #####:16044:ConsoleAssertionPrinter printer(stream, _assertionStats, includeResults);
    %%%%%:16044-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:16044-block  1
call    3 never executed
    #####:16045:printer.print();
    %%%%%:16045-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16046:stream << std::endl;
    %%%%%:16046-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16047:return true;
    %%%%%:16047-block  0
call    0 never executed
        -:16048:}
        -:16049:
function _ZN5Catch15ConsoleReporter15sectionStartingERKNS_11SectionInfoE called 8 returned 100% blocks executed 100%
        8:16050:void ConsoleReporter::sectionStarting(SectionInfo const& _sectionInfo) {
        8:16051:m_tablePrinter->close();
        8:16051-block  0
call    0 returned 8
call    1 returned 8
        8:16052:m_headerPrinted = false;
        8:16053:StreamingReporterBase::sectionStarting(_sectionInfo);
call    0 returned 8
        8:16054:}
function _ZN5Catch15ConsoleReporter12sectionEndedERKNS_12SectionStatsE called 8 returned 100% blocks executed 28%
        8:16055:void ConsoleReporter::sectionEnded(SectionStats const& _sectionStats) {
        8:16056:m_tablePrinter->close();
        8:16056-block  0
call    0 returned 8
call    1 returned 8
        8:16057:if (_sectionStats.missingAssertions) {
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####:16058:lazyPrint();
    %%%%%:16058-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16059:Colour colour(Colour::ResultError);
    %%%%%:16059-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16059-block  1
call    3 never executed
    $$$$$:16059-block  2
call    4 never executed
    #####:16060:if (m_sectionStack.size() > 1)
    %%%%%:16060-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16061:stream << "\nNo assertions in section";
    %%%%%:16061-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:16062:else
    #####:16063:stream << "\nNo assertions in test case";
    %%%%%:16063-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16064:stream << " '" << _sectionStats.sectionInfo.name << "'\n" << std::endl;
    %%%%%:16064-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16064-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:16064-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:16064-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:16065:}
        8:16066:if (m_config->showDurations() == ShowDurations::Always) {
        8:16066-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 0 (fallthrough)
branch  3 taken 8
    #####:16067:stream << getFormattedDuration(_sectionStats.durationInSeconds) << " s: " << _sectionStats.sectionInfo.name << std::endl;
    %%%%%:16067-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16067-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16067-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16067-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:16067-block  4
call   13 never executed
    $$$$$:16067-block  5
call   14 never executed
        -:16068:}
        8:16069:if (m_headerPrinted) {
        8:16069-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####:16070:m_headerPrinted = false;
    %%%%%:16070-block  0
        -:16071:}
        8:16072:StreamingReporterBase::sectionEnded(_sectionStats);
        8:16072-block  0
call    0 returned 8
        8:16073:}
        -:16074:
        -:16075:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -:16076:void ConsoleReporter::benchmarkPreparing(std::string const& name) {
        -:16077:lazyPrintWithoutClosingBenchmarkTable();
        -:16078:
        -:16079:auto nameCol = Column(name).width(static_cast<std::size_t>(m_tablePrinter->columnInfos()[0].width - 2));
        -:16080:
        -:16081:bool firstLine = true;
        -:16082:for (auto line : nameCol) {
        -:16083:if (!firstLine)
        -:16084:(*m_tablePrinter) << ColumnBreak() << ColumnBreak() << ColumnBreak();
        -:16085:else
        -:16086:firstLine = false;
        -:16087:
        -:16088:(*m_tablePrinter) << line << ColumnBreak();
        -:16089:}
        -:16090:}
        -:16091:
        -:16092:void ConsoleReporter::benchmarkStarting(BenchmarkInfo const& info) {
        -:16093:(*m_tablePrinter) << info.samples << ColumnBreak()
        -:16094:<< info.iterations << ColumnBreak();
        -:16095:if (!m_config->benchmarkNoAnalysis())
        -:16096:(*m_tablePrinter) << Duration(info.estimatedDuration) << ColumnBreak();
        -:16097:}
        -:16098:void ConsoleReporter::benchmarkEnded(BenchmarkStats<> const& stats) {
        -:16099:if (m_config->benchmarkNoAnalysis())
        -:16100:{
        -:16101:(*m_tablePrinter) << Duration(stats.mean.point.count()) << ColumnBreak();
        -:16102:}
        -:16103:else
        -:16104:{
        -:16105:(*m_tablePrinter) << ColumnBreak()
        -:16106:<< Duration(stats.mean.point.count()) << ColumnBreak()
        -:16107:<< Duration(stats.mean.lower_bound.count()) << ColumnBreak()
        -:16108:<< Duration(stats.mean.upper_bound.count()) << ColumnBreak() << ColumnBreak()
        -:16109:<< Duration(stats.standardDeviation.point.count()) << ColumnBreak()
        -:16110:<< Duration(stats.standardDeviation.lower_bound.count()) << ColumnBreak()
        -:16111:<< Duration(stats.standardDeviation.upper_bound.count()) << ColumnBreak() << ColumnBreak() << ColumnBreak() << ColumnBreak() << ColumnBreak();
        -:16112:}
        -:16113:}
        -:16114:
        -:16115:void ConsoleReporter::benchmarkFailed(std::string const& error) {
        -:16116:Colour colour(Colour::Red);
        -:16117:(*m_tablePrinter)
        -:16118:<< "Benchmark failed (" << error << ')'
        -:16119:<< ColumnBreak() << RowBreak();
        -:16120:}
        -:16121:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -:16122:
function _ZN5Catch15ConsoleReporter13testCaseEndedERKNS_13TestCaseStatsE called 8 returned 100% blocks executed 100%
        8:16123:void ConsoleReporter::testCaseEnded(TestCaseStats const& _testCaseStats) {
        8:16124:m_tablePrinter->close();
        8:16124-block  0
call    0 returned 8
call    1 returned 8
        8:16125:StreamingReporterBase::testCaseEnded(_testCaseStats);
call    0 returned 8
        8:16126:m_headerPrinted = false;
        8:16127:}
function _ZN5Catch15ConsoleReporter14testGroupEndedERKNS_14TestGroupStatsE called 1 returned 100% blocks executed 30%
        1:16128:void ConsoleReporter::testGroupEnded(TestGroupStats const& _testGroupStats) {
        1:16129:if (currentGroupInfo.used) {
        1:16129-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:16130:printSummaryDivider();
    %%%%%:16130-block  0
call    0 never executed
    #####:16131:stream << "Summary for group '" << _testGroupStats.groupInfo.name << "':\n";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:16132:printTotals(_testGroupStats.totals);
call    0 never executed
    #####:16133:stream << '\n' << std::endl;
call    0 never executed
call    1 never executed
        -:16134:}
        1:16135:StreamingReporterBase::testGroupEnded(_testGroupStats);
        1:16135-block  0
call    0 returned 1
        1:16136:}
function _ZN5Catch15ConsoleReporter12testRunEndedERKNS_12TestRunStatsE called 1 returned 100% blocks executed 100%
        1:16137:void ConsoleReporter::testRunEnded(TestRunStats const& _testRunStats) {
        1:16138:printTotalsDivider(_testRunStats.totals);
        1:16138-block  0
call    0 returned 1
        1:16139:printTotals(_testRunStats.totals);
call    0 returned 1
        1:16140:stream << std::endl;
call    0 returned 1
        1:16141:StreamingReporterBase::testRunEnded(_testRunStats);
call    0 returned 1
        1:16142:}
function _ZN5Catch15ConsoleReporter15testRunStartingERKNS_11TestRunInfoE called 1 returned 100% blocks executed 100%
        1:16143:void ConsoleReporter::testRunStarting(TestRunInfo const& _testInfo) {
        1:16144:StreamingReporterBase::testRunStarting(_testInfo);
        1:16144-block  0
call    0 returned 1
        1:16145:printTestFilters();
call    0 returned 1
        1:16146:}
        -:16147:
function _ZN5Catch15ConsoleReporter9lazyPrintEv called 0 returned 0% blocks executed 0%
    #####:16148:void ConsoleReporter::lazyPrint() {
        -:16149:
    #####:16150:m_tablePrinter->close();
    %%%%%:16150-block  0
call    0 never executed
call    1 never executed
    #####:16151:lazyPrintWithoutClosingBenchmarkTable();
call    0 never executed
    #####:16152:}
        -:16153:
function _ZN5Catch15ConsoleReporter37lazyPrintWithoutClosingBenchmarkTableEv called 0 returned 0% blocks executed 0%
    #####:16154:void ConsoleReporter::lazyPrintWithoutClosingBenchmarkTable() {
        -:16155:
    #####:16156:if (!currentTestRunInfo.used)
    %%%%%:16156-block  0
branch  0 never executed
branch  1 never executed
    #####:16157:lazyPrintRunInfo();
    %%%%%:16157-block  0
call    0 never executed
    #####:16158:if (!currentGroupInfo.used)
    %%%%%:16158-block  0
branch  0 never executed
branch  1 never executed
    #####:16159:lazyPrintGroupInfo();
    %%%%%:16159-block  0
call    0 never executed
        -:16160:
    #####:16161:if (!m_headerPrinted) {
    %%%%%:16161-block  0
branch  0 never executed
branch  1 never executed
    #####:16162:printTestCaseAndSectionHeader();
    %%%%%:16162-block  0
call    0 never executed
    #####:16163:m_headerPrinted = true;
        -:16164:}
    #####:16165:}
function _ZN5Catch15ConsoleReporter16lazyPrintRunInfoEv called 0 returned 0% blocks executed 0%
    #####:16166:void ConsoleReporter::lazyPrintRunInfo() {
    #####:16167:stream << '\n' << getLineOfChars<'~'>() << '\n';
    %%%%%:16167-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16167-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16167-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:16168:Colour colour(Colour::SecondaryText);
    %%%%%:16168-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:16168-block  1
call    3 never executed
    #####:16169:stream << currentTestRunInfo->name
    %%%%%:16169-block  0
call    0 never executed
    #####:16170:<< " is a Catch v" << libraryVersion() << " host application.\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16170-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:16170-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:16171:<< "Run with -? for options\n\n";
    %%%%%:16171-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16171-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:16172:
    #####:16173:if (m_config->rngSeed() != 0)
    %%%%%:16173-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16173-block  1
branch  4 never executed
branch  5 never executed
    #####:16174:stream << "Randomness seeded to: " << m_config->rngSeed() << "\n\n";
    %%%%%:16174-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16174-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16174-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16174-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
        -:16175:
    #####:16176:currentTestRunInfo.used = true;
    %%%%%:16176-block  0
call    0 never executed
    #####:16177:}
function _ZN5Catch15ConsoleReporter18lazyPrintGroupInfoEv called 0 returned 0% blocks executed 0%
    #####:16178:void ConsoleReporter::lazyPrintGroupInfo() {
    #####:16179:if (!currentGroupInfo->name.empty() && currentGroupInfo->groupsCounts > 1) {
    %%%%%:16179-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16179-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16179-block  2
    %%%%%:16179-block  3
    %%%%%:16179-block  4
branch  7 never executed
branch  8 never executed
    #####:16180:printClosedHeader("Group: " + currentGroupInfo->name);
    %%%%%:16180-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16180-block  1
call    5 never executed
    $$$$$:16180-block  2
call    6 never executed
    #####:16181:currentGroupInfo.used = true;
        -:16182:}
    #####:16183:}
    %%%%%:16183-block  0
function _ZN5Catch15ConsoleReporter29printTestCaseAndSectionHeaderEv called 0 returned 0% blocks executed 0%
    #####:16184:void ConsoleReporter::printTestCaseAndSectionHeader() {
    #####:16185:assert(!m_sectionStack.empty());
    %%%%%:16185-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16185-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:16185-block  2
    %%%%%:16185-block  3
    #####:16186:printOpenHeader(currentTestCaseInfo->name);
    %%%%%:16186-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16187:
    #####:16188:if (m_sectionStack.size() > 1) {
    %%%%%:16188-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16189:Colour colourGuard(Colour::Headers);
    %%%%%:16189-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16189-block  1
call    3 never executed
    $$$$$:16189-block  2
call    4 never executed
        -:16190:
        -:16191:auto
    #####:16192:it = m_sectionStack.begin() + 1, // Skip first section (test case)
    %%%%%:16192-block  0
call    0 never executed
call    1 never executed
    #####:16193:itEnd = m_sectionStack.end();
call    0 never executed
    #####:16194:for (; it != itEnd; ++it)
    %%%%%:16194-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16194-block  1
call    3 never executed
    #####:16195:printHeaderString(it->name, 2);
    %%%%%:16195-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16196:}
        -:16197:
    #####:16198:SourceLineInfo lineInfo = m_sectionStack.back().lineInfo;
    %%%%%:16198-block  0
call    0 never executed
        -:16199:
    #####:16200:stream << getLineOfChars<'-'>() << '\n';
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16200-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:16201:Colour colourGuard(Colour::FileName);
    %%%%%:16201-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16201-block  1
call    3 never executed
    $$$$$:16201-block  2
call    4 never executed
    #####:16202:stream << lineInfo << '\n';
    %%%%%:16202-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16202-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:16203:stream << getLineOfChars<'.'>() << '\n' << std::endl;
    %%%%%:16203-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16203-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16203-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:16204:}
        -:16205:
function _ZN5Catch15ConsoleReporter17printClosedHeaderERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:16206:void ConsoleReporter::printClosedHeader(std::string const& _name) {
    #####:16207:printOpenHeader(_name);
    %%%%%:16207-block  0
call    0 never executed
    #####:16208:stream << getLineOfChars<'.'>() << '\n';
call    0 never executed
call    1 never executed
call    2 never executed
    #####:16209:}
function _ZN5Catch15ConsoleReporter15printOpenHeaderERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:16210:void ConsoleReporter::printOpenHeader(std::string const& _name) {
    #####:16211:stream << getLineOfChars<'-'>() << '\n';
    %%%%%:16211-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:16212:{
    #####:16213:Colour colourGuard(Colour::Headers);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16213-block  0
call    3 never executed
    $$$$$:16213-block  1
call    4 never executed
    #####:16214:printHeaderString(_name);
    %%%%%:16214-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:16215:}
    #####:16216:}
        -:16217:
        -:16218:// if string has a : in first line will set indent to follow it on
        -:16219:// subsequent lines
function _ZN5Catch15ConsoleReporter17printHeaderStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj called 0 returned 0% blocks executed 0%
    #####:16220:void ConsoleReporter::printHeaderString(std::string const& _string, std::size_t indent) {
    #####:16221:std::size_t i = _string.find(": ");
    %%%%%:16221-block  0
call    0 never executed
    #####:16222:if (i != std::string::npos)
branch  0 never executed
branch  1 never executed
    #####:16223:i += 2;
    %%%%%:16223-block  0
        -:16224:else
    #####:16225:i = 0;
    %%%%%:16225-block  0
    #####:16226:stream << Column(_string).indent(indent + i).initialIndent(indent) << '\n';
    %%%%%:16226-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:16226-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:16226-block  2
call    9 never executed
    $$$$$:16226-block  3
call   10 never executed
    #####:16227:}
        -:16228:
        -:16229:struct SummaryColumn {
        -:16230:
function _ZN5Catch13SummaryColumnC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_6Colour4CodeE called 0 returned 0% blocks executed 0%
    #####:16231:SummaryColumn( std::string _label, Colour::Code _colour )
    #####:16232::   label( std::move( _label ) ),
    #####:16233:colour( _colour ) {}
    %%%%%:16233-block  0
call    0 never executed
call    1 never executed
call    2 never executed
function _ZN5Catch13SummaryColumn6addRowEj called 0 returned 0% blocks executed 0%
    #####:16234:SummaryColumn addRow( std::size_t count ) {
    #####:16235:ReusableStringStream rss;
    %%%%%:16235-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:16235-block  1
call    4 never executed
    #####:16236:rss << count;
    %%%%%:16236-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16237:std::string row = rss.str();
    %%%%%:16237-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16237-block  1
call    3 never executed
    $$$$$:16237-block  2
call    4 never executed
    #####:16238:for (auto& oldRow : rows) {
    %%%%%:16238-block  0
call    0 never executed
call    1 never executed
    %%%%%:16238-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16238-block  2
call    5 never executed
    %%%%%:16238-block  3
call    6 never executed
    #####:16239:while (oldRow.size() < row.size())
    %%%%%:16239-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:16240:oldRow = ' ' + oldRow;
    %%%%%:16240-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16240-block  1
call    3 never executed
call    4 never executed
    #####:16241:while (oldRow.size() > row.size())
    %%%%%:16241-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:16242:row = ' ' + row;
    %%%%%:16242-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16242-block  1
call    3 never executed
call    4 never executed
        -:16243:}
    #####:16244:rows.push_back(row);
    %%%%%:16244-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16245:return *this;
    %%%%%:16245-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16245-block  1
    %%%%%:16245-block  2
        -:16246:}
        -:16247:
        -:16248:std::string label;
        -:16249:Colour::Code colour;
        -:16250:std::vector<std::string> rows;
        -:16251:
        -:16252:};
        -:16253:
function _ZN5Catch15ConsoleReporter11printTotalsERKNS_6TotalsE called 1 returned 100% blocks executed 17%
        1:16254:void ConsoleReporter::printTotals( Totals const& totals ) {
        1:16255:if (totals.testCases.total() == 0) {
        1:16255-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:16256:stream << Colour(Colour::Warning) << "No tests ran\n";
    %%%%%:16256-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16256-block  1
call    5 never executed
    $$$$$:16256-block  2
call    6 never executed
    $$$$$:16256-block  3
call    7 never executed
       1*:16257:} else if (totals.assertions.total() > 0 && totals.testCases.allPassed()) {
        1:16257-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:16257-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:16257-block  2
    %%%%%:16257-block  3
        1:16257-block  4
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1:16258:stream << Colour(Colour::ResultSuccess) << "All tests passed";
        1:16258-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:16258-block  1
call    5 returned 1
    $$$$$:16258-block  2
call    6 never executed
    $$$$$:16258-block  3
call    7 never executed
        1:16259:stream << " ("
call    0 returned 1
        2:16260:<< pluralise(totals.assertions.passed, "assertion") << " in "
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:16260-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:16260-block  1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:16260-block  2
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
call   13 returned 1
call   14 returned 1
    $$$$$:16260-block  3
call   15 never executed
    $$$$$:16260-block  4
    $$$$$:16260-block  5
call   16 never executed
    $$$$$:16260-block  6
    $$$$$:16260-block  7
call   17 never executed
    $$$$$:16260-block  8
call   18 never executed
        2:16261:<< pluralise(totals.testCases.passed, "test case") << ')'
        1:16261-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:16261-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:16261-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:16261-block  3
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
    $$$$$:16261-block  4
call   14 never executed
    $$$$$:16261-block  5
    $$$$$:16261-block  6
call   15 never executed
    $$$$$:16261-block  7
    $$$$$:16261-block  8
call   16 never executed
    $$$$$:16261-block  9
        1:16262:<< '\n';
        1:16262-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:16262-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -:16263:} else {
        -:16264:
    #####:16265:std::vector<SummaryColumn> columns;
    %%%%%:16265-block  0
call    0 never executed
    $$$$$:16265-block  1
call    1 never executed
    #####:16266:columns.push_back(SummaryColumn("", Colour::None)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16266-block  0
call    4 never executed
    %%%%%:16266-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    $$$$$:16266-block  2
call   10 never executed
    $$$$$:16266-block  3
    $$$$$:16266-block  4
call   11 never executed
    $$$$$:16266-block  5
    $$$$$:16266-block  6
call   12 never executed
    $$$$$:16266-block  7
    #####:16267:.addRow(totals.testCases.total())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$:16267-block  0
call    5 never executed
    $$$$$:16267-block  1
    #####:16268:.addRow(totals.assertions.total()));
    %%%%%:16268-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16268-block  1
call    4 never executed
call    5 never executed
    $$$$$:16268-block  2
call    6 never executed
    $$$$$:16268-block  3
    #####:16269:columns.push_back(SummaryColumn("passed", Colour::Success)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16269-block  0
call    4 never executed
    %%%%%:16269-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    $$$$$:16269-block  2
call   10 never executed
    $$$$$:16269-block  3
    $$$$$:16269-block  4
call   11 never executed
    $$$$$:16269-block  5
    $$$$$:16269-block  6
call   12 never executed
    $$$$$:16269-block  7
    #####:16270:.addRow(totals.testCases.passed)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:16270-block  0
call    4 never executed
    $$$$$:16270-block  1
    #####:16271:.addRow(totals.assertions.passed));
    %%%%%:16271-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16271-block  1
call    3 never executed
call    4 never executed
    $$$$$:16271-block  2
call    5 never executed
    $$$$$:16271-block  3
    #####:16272:columns.push_back(SummaryColumn("failed", Colour::ResultError)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16272-block  0
call    4 never executed
    %%%%%:16272-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    $$$$$:16272-block  2
call   10 never executed
    $$$$$:16272-block  3
    $$$$$:16272-block  4
call   11 never executed
    $$$$$:16272-block  5
    $$$$$:16272-block  6
call   12 never executed
    $$$$$:16272-block  7
    #####:16273:.addRow(totals.testCases.failed)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:16273-block  0
call    4 never executed
    $$$$$:16273-block  1
    #####:16274:.addRow(totals.assertions.failed));
    %%%%%:16274-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16274-block  1
call    3 never executed
call    4 never executed
    $$$$$:16274-block  2
call    5 never executed
    $$$$$:16274-block  3
    #####:16275:columns.push_back(SummaryColumn("failed as expected", Colour::ResultExpectedFailure)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16275-block  0
call    4 never executed
    %%%%%:16275-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    $$$$$:16275-block  2
call   10 never executed
    $$$$$:16275-block  3
    $$$$$:16275-block  4
call   11 never executed
    $$$$$:16275-block  5
    $$$$$:16275-block  6
call   12 never executed
    $$$$$:16275-block  7
    #####:16276:.addRow(totals.testCases.failedButOk)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:16276-block  0
call    4 never executed
    $$$$$:16276-block  1
    #####:16277:.addRow(totals.assertions.failedButOk));
    %%%%%:16277-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16277-block  1
call    3 never executed
call    4 never executed
    $$$$$:16277-block  2
call    5 never executed
    $$$$$:16277-block  3
        -:16278:
    #####:16279:printSummaryRow("test cases", columns, 0);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16279-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16279-block  1
call    7 never executed
call    8 never executed
    $$$$$:16279-block  2
call    9 never executed
    $$$$$:16279-block  3
    $$$$$:16279-block  4
call   10 never executed
    $$$$$:16279-block  5
    #####:16280:printSummaryRow("assertions", columns, 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16280-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16280-block  1
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:16280-block  2
call   10 never executed
    $$$$$:16280-block  3
    $$$$$:16280-block  4
call   11 never executed
    $$$$$:16280-block  5
        -:16281:}
        1:16282:}
        1:16282-block  0
function _ZN5Catch15ConsoleReporter15printSummaryRowERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorINS_13SummaryColumnESaISA_EEj called 0 returned 0% blocks executed 0%
    #####:16283:void ConsoleReporter::printSummaryRow(std::string const& label, std::vector<SummaryColumn> const& cols, std::size_t row) {
    #####:16284:for (auto col : cols) {
    %%%%%:16284-block  0
call    0 never executed
call    1 never executed
    %%%%%:16284-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16284-block  2
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$:16284-block  3
call   11 never executed
    #####:16285:std::string value = col.rows[row];
    %%%%%:16285-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16285-block  1
call    4 never executed
    $$$$$:16285-block  2
call    5 never executed
    #####:16286:if (col.label.empty()) {
    %%%%%:16286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16287:stream << label << ": ";
    %%%%%:16287-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16287-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:16288:if (value != "0")
    %%%%%:16288-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16289:stream << value;
    %%%%%:16289-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:16290:else
    #####:16291:stream << Colour(Colour::Warning) << "- none -";
    %%%%%:16291-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16291-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16291-block  2
call    7 never executed
    $$$$$:16291-block  3
call    8 never executed
    $$$$$:16291-block  4
    #####:16292:} else if (value != "0") {
    %%%%%:16292-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16293:stream << Colour(Colour::LightGrey) << " | ";
    %%%%%:16293-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16293-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16293-block  2
call    7 never executed
    $$$$$:16293-block  3
call    8 never executed
    $$$$$:16293-block  4
    #####:16294:stream << Colour(col.colour)
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16294-block  0
call    3 never executed
    %%%%%:16294-block  1
call    4 never executed
    $$$$$:16294-block  2
call    5 never executed
    $$$$$:16294-block  3
    #####:16295:<< value << ' ' << col.label;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16295-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:16295-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:16296:}
        -:16297:}
    #####:16298:stream << '\n';
    %%%%%:16298-block  0
call    0 never executed
    #####:16299:}
        -:16300:
function _ZN5Catch15ConsoleReporter18printTotalsDividerERKNS_6TotalsE called 1 returned 100% blocks executed 40%
        1:16301:void ConsoleReporter::printTotalsDivider(Totals const& totals) {
        1:16302:if (totals.testCases.total() > 0) {
        1:16302-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:16303:std::size_t failedRatio = makeRatio(totals.testCases.failed, totals.testCases.total());
        1:16303-block  0
call    0 returned 1
call    1 returned 1
        1:16304:std::size_t failedButOkRatio = makeRatio(totals.testCases.failedButOk, totals.testCases.total());
call    0 returned 1
call    1 returned 1
        1:16305:std::size_t passedRatio = makeRatio(totals.testCases.passed, totals.testCases.total());
call    0 returned 1
call    1 returned 1
       1*:16306:while (failedRatio + failedButOkRatio + passedRatio < CATCH_CONFIG_CONSOLE_WIDTH - 1)
        1:16306-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:16307:findMax(failedRatio, failedButOkRatio, passedRatio)++;
    %%%%%:16307-block  0
call    0 never executed
        2:16308:while (failedRatio + failedButOkRatio + passedRatio > CATCH_CONFIG_CONSOLE_WIDTH - 1)
        2:16308-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:16309:findMax(failedRatio, failedButOkRatio, passedRatio)--;
        1:16309-block  0
call    0 returned 1
        -:16310:
        1:16311:stream << Colour(Colour::Error) << std::string(failedRatio, '=');
        1:16311-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:16311-block  1
call    3 returned 1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:16311-block  2
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1:16311-block  3
call   11 returned 1
call   12 returned 1
call   13 returned 1
    $$$$$:16311-block  4
call   14 never executed
    $$$$$:16311-block  5
    $$$$$:16311-block  6
call   15 never executed
    $$$$$:16311-block  7
    $$$$$:16311-block  8
call   16 never executed
    $$$$$:16311-block  9
        1:16312:stream << Colour(Colour::ResultExpectedFailure) << std::string(failedButOkRatio, '=');
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:16312-block  0
call    3 returned 1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:16312-block  1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1:16312-block  2
call   11 returned 1
call   12 returned 1
call   13 returned 1
    $$$$$:16312-block  3
call   14 never executed
    $$$$$:16312-block  4
    $$$$$:16312-block  5
call   15 never executed
    $$$$$:16312-block  6
    $$$$$:16312-block  7
call   16 never executed
    $$$$$:16312-block  8
        1:16313:if (totals.testCases.allPassed())
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:16314:stream << Colour(Colour::ResultSuccess) << std::string(passedRatio, '=');
        1:16314-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:16314-block  1
call    3 returned 1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:16314-block  2
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1:16314-block  3
call   11 returned 1
call   12 returned 1
call   13 returned 1
    $$$$$:16314-block  4
call   14 never executed
    $$$$$:16314-block  5
    $$$$$:16314-block  6
call   15 never executed
    $$$$$:16314-block  7
    $$$$$:16314-block  8
call   16 never executed
    $$$$$:16314-block  9
        -:16315:else
    #####:16316:stream << Colour(Colour::Success) << std::string(passedRatio, '=');
    %%%%%:16316-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16316-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:16316-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:16316-block  3
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:16316-block  4
call   14 never executed
    $$$$$:16316-block  5
    $$$$$:16316-block  6
call   15 never executed
    $$$$$:16316-block  7
    $$$$$:16316-block  8
call   16 never executed
    $$$$$:16316-block  9
        -:16317:} else {
    #####:16318:stream << Colour(Colour::Warning) << std::string(CATCH_CONFIG_CONSOLE_WIDTH - 1, '=');
    %%%%%:16318-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:16318-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:16318-block  2
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$:16318-block  3
call   12 never executed
    $$$$$:16318-block  4
    $$$$$:16318-block  5
call   13 never executed
    $$$$$:16318-block  6
    $$$$$:16318-block  7
call   14 never executed
        -:16319:}
        1:16320:stream << '\n';
        1:16320-block  0
call    0 returned 1
        1:16321:}
function _ZN5Catch15ConsoleReporter19printSummaryDividerEv called 0 returned 0% blocks executed 0%
    #####:16322:void ConsoleReporter::printSummaryDivider() {
    #####:16323:stream << getLineOfChars<'-'>() << '\n';
    %%%%%:16323-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:16324:}
        -:16325:
function _ZN5Catch15ConsoleReporter16printTestFiltersEv called 1 returned 100% blocks executed 27%
        1:16326:void ConsoleReporter::printTestFilters() {
        1:16327:if (m_config->testSpec().hasFilters())
        1:16327-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####:16328:stream << Colour(Colour::BrightYellow) << "Filters: " << serializeFilters( m_config->getTestsOrTags() ) << '\n';
    %%%%%:16328-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16328-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:16328-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:16328-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:16328-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:16328-block  5
call   18 never executed
call   19 never executed
    $$$$$:16328-block  6
call   20 never executed
    $$$$$:16328-block  7
    $$$$$:16328-block  8
call   21 never executed
        1:16329:}
        1:16329-block  0
        -:16330:
        -:16331:CATCH_REGISTER_REPORTER("console", ConsoleReporter)
        -:16332:
        -:16333:} // end namespace Catch
        -:16334:
        -:16335:#if defined(_MSC_VER)
        -:16336:#pragma warning(pop)
        -:16337:#endif
        -:16338:
        -:16339:#if defined(__clang__)
        -:16340:#  pragma clang diagnostic pop
        -:16341:#endif
        -:16342:// end catch_reporter_console.cpp
        -:16343:// start catch_reporter_junit.cpp
        -:16344:
        -:16345:#include <cassert>
        -:16346:#include <sstream>
        -:16347:#include <ctime>
        -:16348:#include <algorithm>
        -:16349:
        -:16350:namespace Catch {
        -:16351:
        -:16352:namespace {
function _ZN5Catch12_GLOBAL__N_119getCurrentTimestampEv called 0 returned 0% blocks executed 0%
    #####:16353:std::string getCurrentTimestamp() {
        -:16354:// Beware, this is not reentrant because of backward compatibility issues
        -:16355:// Also, UTC only, again because of backward compatibility (%z is C++11)
        -:16356:time_t rawtime;
    #####:16357:std::time(&rawtime);
    %%%%%:16357-block  0
call    0 never executed
    #####:16358:auto const timeStampSize = sizeof("2017-01-16T17:06:45Z");
        -:16359:
        -:16360:#ifdef _MSC_VER
        -:16361:std::tm timeInfo = {};
        -:16362:gmtime_s(&timeInfo, &rawtime);
        -:16363:#else
        -:16364:std::tm* timeInfo;
    #####:16365:timeInfo = std::gmtime(&rawtime);
call    0 never executed
        -:16366:#endif
        -:16367:
        -:16368:char timeStamp[timeStampSize];
    #####:16369:const char * const fmt = "%Y-%m-%dT%H:%M:%SZ";
        -:16370:
        -:16371:#ifdef _MSC_VER
        -:16372:std::strftime(timeStamp, timeStampSize, fmt, &timeInfo);
        -:16373:#else
    #####:16374:std::strftime(timeStamp, timeStampSize, fmt, timeInfo);
        -:16375:#endif
    #####:16376:return std::string(timeStamp);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16376-block  0
call    4 never executed
    %%%%%:16376-block  1
    $$$$$:16376-block  2
call    5 never executed
    $$$$$:16376-block  3
        -:16377:}
        -:16378:
function _ZN5Catch12_GLOBAL__N_111fileNameTagERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE called 0 returned 0% blocks executed 0%
    #####:16379:std::string fileNameTag(const std::vector<std::string> &tags) {
        -:16380:auto it = std::find_if(begin(tags),
        -:16381:end(tags),
    #####:16382:[] (std::string const& tag) {return tag.front() == '#'; });
    %%%%%:16382-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:16383:if (it != tags.end())
    %%%%%:16383-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:16384:return it->substr(1);
    %%%%%:16384-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16384-block  1
    #####:16385:return std::string();
    %%%%%:16385-block  0
call    0 never executed
        -:16386:}
        -:16387:} // anonymous namespace
        -:16388:
function _ZN5Catch13JunitReporterC2ERKNS_14ReporterConfigE called 0 returned 0% blocks executed 0%
    #####:16389:JunitReporter::JunitReporter( ReporterConfig const& _config )
        -:16390::   CumulativeReporterBase( _config ),
    #####:16391:xml( _config.stream() )
    %%%%%:16391-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16391-block  1
call    5 never executed
call    6 never executed
call    7 never executed
    $$$$$:16391-block  2
call    8 never executed
        -:16392:{
    #####:16393:m_reporterPrefs.shouldRedirectStdOut = true;
    #####:16394:m_reporterPrefs.shouldReportAllAssertions = true;
    #####:16395:}
        -:16396:
    #####:16397:JunitReporter::~JunitReporter() {}
------------------
_ZN5Catch13JunitReporterD0Ev:
function _ZN5Catch13JunitReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:16397:JunitReporter::~JunitReporter() {}
    %%%%%:16397-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5Catch13JunitReporterD2Ev:
function _ZN5Catch13JunitReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:16397:JunitReporter::~JunitReporter() {}
    %%%%%:16397-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
        -:16398:
function _ZN5Catch13JunitReporter14getDescriptionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:16399:std::string JunitReporter::getDescription() {
    #####:16400:return "Reports test results in an XML format that looks like Ant's junitreport target";
    %%%%%:16400-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16400-block  1
call    4 never executed
    %%%%%:16400-block  2
    $$$$$:16400-block  3
call    5 never executed
        -:16401:}
        -:16402:
function _ZN5Catch13JunitReporter19noMatchingTestCasesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:16403:void JunitReporter::noMatchingTestCases( std::string const& /*spec*/ ) {}
        -:16404:
function _ZN5Catch13JunitReporter15testRunStartingERKNS_11TestRunInfoE called 0 returned 0% blocks executed 0%
    #####:16405:void JunitReporter::testRunStarting( TestRunInfo const& runInfo )  {
    #####:16406:CumulativeReporterBase::testRunStarting( runInfo );
    %%%%%:16406-block  0
call    0 never executed
    #####:16407:xml.startElement( "testsuites" );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16407-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16407-block  1
call    7 never executed
call    8 never executed
    $$$$$:16407-block  2
call    9 never executed
    $$$$$:16407-block  3
    $$$$$:16407-block  4
call   10 never executed
    #####:16408:}
        -:16409:
function _ZN5Catch13JunitReporter17testGroupStartingERKNS_9GroupInfoE called 0 returned 0% blocks executed 0%
    #####:16410:void JunitReporter::testGroupStarting( GroupInfo const& groupInfo ) {
    #####:16411:suiteTimer.start();
    %%%%%:16411-block  0
call    0 never executed
    #####:16412:stdOutForSuite.clear();
call    0 never executed
    #####:16413:stdErrForSuite.clear();
call    0 never executed
    #####:16414:unexpectedExceptions = 0;
    #####:16415:CumulativeReporterBase::testGroupStarting( groupInfo );
call    0 never executed
    #####:16416:}
        -:16417:
function _ZN5Catch13JunitReporter16testCaseStartingERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####:16418:void JunitReporter::testCaseStarting( TestCaseInfo const& testCaseInfo ) {
    #####:16419:m_okToFail = testCaseInfo.okToFail();
    %%%%%:16419-block  0
call    0 never executed
    #####:16420:}
        -:16421:
function _ZN5Catch13JunitReporter14assertionEndedERKNS_14AssertionStatsE called 0 returned 0% blocks executed 0%
    #####:16422:bool JunitReporter::assertionEnded( AssertionStats const& assertionStats ) {
    #####:16423:if( assertionStats.assertionResult.getResultType() == ResultWas::ThrewException && !m_okToFail )
    %%%%%:16423-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16423-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:16423-block  2
    %%%%%:16423-block  3
    %%%%%:16423-block  4
branch  5 never executed
branch  6 never executed
    #####:16424:unexpectedExceptions++;
    %%%%%:16424-block  0
    #####:16425:return CumulativeReporterBase::assertionEnded( assertionStats );
    %%%%%:16425-block  0
call    0 never executed
        -:16426:}
        -:16427:
function _ZN5Catch13JunitReporter13testCaseEndedERKNS_13TestCaseStatsE called 0 returned 0% blocks executed 0%
    #####:16428:void JunitReporter::testCaseEnded( TestCaseStats const& testCaseStats ) {
    #####:16429:stdOutForSuite += testCaseStats.stdOut;
    %%%%%:16429-block  0
call    0 never executed
    #####:16430:stdErrForSuite += testCaseStats.stdErr;
call    0 never executed
    #####:16431:CumulativeReporterBase::testCaseEnded( testCaseStats );
call    0 never executed
    #####:16432:}
        -:16433:
function _ZN5Catch13JunitReporter14testGroupEndedERKNS_14TestGroupStatsE called 0 returned 0% blocks executed 0%
    #####:16434:void JunitReporter::testGroupEnded( TestGroupStats const& testGroupStats ) {
    #####:16435:double suiteTime = suiteTimer.getElapsedSeconds();
    %%%%%:16435-block  0
call    0 never executed
    #####:16436:CumulativeReporterBase::testGroupEnded( testGroupStats );
call    0 never executed
    #####:16437:writeGroup( *m_testGroups.back(), suiteTime );
call    0 never executed
call    1 never executed
call    2 never executed
    #####:16438:}
        -:16439:
function _ZN5Catch13JunitReporter22testRunEndedCumulativeEv called 0 returned 0% blocks executed 0%
    #####:16440:void JunitReporter::testRunEndedCumulative() {
    #####:16441:xml.endElement();
    %%%%%:16441-block  0
call    0 never executed
    #####:16442:}
        -:16443:
function _ZN5Catch13JunitReporter10writeGroupERKNS_22CumulativeReporterBaseIS0_E4NodeINS_14TestGroupStatsENS3_INS_13TestCaseStatsENS2_11SectionNodeEEEEEd called 0 returned 0% blocks executed 0%
    #####:16444:void JunitReporter::writeGroup( TestGroupNode const& groupNode, double suiteTime ) {
    #####:16445:XmlWriter::ScopedElement e = xml.scopedElement( "testsuite" );
    %%%%%:16445-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16445-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$:16445-block  2
    $$$$$:16445-block  3
    $$$$$:16445-block  4
call    8 never executed
        -:16446:
    #####:16447:TestGroupStats const& stats = groupNode.value;
    #####:16448:xml.writeAttribute( "name", stats.groupInfo.name );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16448-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16448-block  1
call    7 never executed
call    8 never executed
    $$$$$:16448-block  2
call    9 never executed
    $$$$$:16448-block  3
    $$$$$:16448-block  4
call   10 never executed
    $$$$$:16448-block  5
    #####:16449:xml.writeAttribute( "errors", unexpectedExceptions );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16449-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16449-block  1
call    7 never executed
call    8 never executed
    $$$$$:16449-block  2
call    9 never executed
    $$$$$:16449-block  3
    $$$$$:16449-block  4
call   10 never executed
    $$$$$:16449-block  5
    #####:16450:xml.writeAttribute( "failures", stats.totals.assertions.failed-unexpectedExceptions );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16450-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16450-block  1
call    7 never executed
call    8 never executed
    $$$$$:16450-block  2
call    9 never executed
    $$$$$:16450-block  3
    $$$$$:16450-block  4
call   10 never executed
    $$$$$:16450-block  5
    $$$$$:16450-block  6
    #####:16451:xml.writeAttribute( "tests", stats.totals.assertions.total() );
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16451-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:16451-block  1
call    8 never executed
call    9 never executed
    $$$$$:16451-block  2
call   10 never executed
    $$$$$:16451-block  3
    $$$$$:16451-block  4
call   11 never executed
    $$$$$:16451-block  5
    $$$$$:16451-block  6
    #####:16452:xml.writeAttribute( "hostname", "tbd" ); // !TBD
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16452-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16452-block  1
call    7 never executed
call    8 never executed
    $$$$$:16452-block  2
call    9 never executed
    $$$$$:16452-block  3
    $$$$$:16452-block  4
call   10 never executed
    $$$$$:16452-block  5
    #####:16453:if( m_config->showDurations() == ShowDurations::Never )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16453-block  0
branch  4 never executed
branch  5 never executed
    #####:16454:xml.writeAttribute( "time", "" );
    %%%%%:16454-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16454-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16454-block  2
call    7 never executed
call    8 never executed
    $$$$$:16454-block  3
call    9 never executed
    $$$$$:16454-block  4
    $$$$$:16454-block  5
call   10 never executed
    $$$$$:16454-block  6
        -:16455:else
    #####:16456:xml.writeAttribute( "time", suiteTime );
    %%%%%:16456-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16456-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16456-block  2
call    7 never executed
call    8 never executed
    $$$$$:16456-block  3
call    9 never executed
    $$$$$:16456-block  4
    $$$$$:16456-block  5
call   10 never executed
    $$$$$:16456-block  6
    #####:16457:xml.writeAttribute( "timestamp", getCurrentTimestamp() );
    %%%%%:16457-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16457-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16457-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16457-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:16457-block  4
call   13 never executed
    $$$$$:16457-block  5
    $$$$$:16457-block  6
call   14 never executed
    $$$$$:16457-block  7
    $$$$$:16457-block  8
call   15 never executed
    $$$$$:16457-block  9
        -:16458:
        -:16459:// Write properties if there are any
    #####:16460:if (m_config->hasTestFilters() || m_config->rngSeed() != 0) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16460-block  0
branch  4 never executed
branch  5 never executed
    %%%%%:16460-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16460-block  2
branch 10 never executed
branch 11 never executed
    %%%%%:16460-block  3
    %%%%%:16460-block  4
    %%%%%:16460-block  5
branch 12 never executed
branch 13 never executed
    #####:16461:auto properties = xml.scopedElement("properties");
    %%%%%:16461-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16461-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%:16461-block  2
call    8 never executed
    $$$$$:16461-block  3
    $$$$$:16461-block  4
    $$$$$:16461-block  5
call    9 never executed
    #####:16462:if (m_config->hasTestFilters()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16462-block  0
branch  4 never executed
branch  5 never executed
    #####:16463:xml.scopedElement("property")
    %%%%%:16463-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16463-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16463-block  2
call    9 never executed
    $$$$$:16463-block  3
    $$$$$:16463-block  4
call   10 never executed
    $$$$$:16463-block  5
    $$$$$:16463-block  6
call   11 never executed
    $$$$$:16463-block  7
    #####:16464:.writeAttribute("name", "filters")
    %%%%%:16464-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16464-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16464-block  2
call    9 never executed
    $$$$$:16464-block  3
    $$$$$:16464-block  4
call   10 never executed
    $$$$$:16464-block  5
    #####:16465:.writeAttribute("value", serializeFilters(m_config->getTestsOrTags()));
    %%%%%:16465-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16465-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16465-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:16465-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:16465-block  4
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$:16465-block  5
call   18 never executed
    $$$$$:16465-block  6
    $$$$$:16465-block  7
call   19 never executed
    $$$$$:16465-block  8
    $$$$$:16465-block  9
call   20 never executed
    $$$$$:16465-block 10
        -:16466:}
    #####:16467:if (m_config->rngSeed() != 0) {
    %%%%%:16467-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16467-block  1
branch  4 never executed
branch  5 never executed
    #####:16468:xml.scopedElement("property")
    %%%%%:16468-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16468-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16468-block  2
call    9 never executed
    $$$$$:16468-block  3
    $$$$$:16468-block  4
call   10 never executed
    $$$$$:16468-block  5
    $$$$$:16468-block  6
call   11 never executed
    $$$$$:16468-block  7
    #####:16469:.writeAttribute("name", "random-seed")
    %%%%%:16469-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16469-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16469-block  2
call    9 never executed
    $$$$$:16469-block  3
    $$$$$:16469-block  4
call   10 never executed
    $$$$$:16469-block  5
    #####:16470:.writeAttribute("value", m_config->rngSeed());
    %%%%%:16470-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16470-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:16470-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:16470-block  3
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:16470-block  4
call   14 never executed
    $$$$$:16470-block  5
    $$$$$:16470-block  6
call   15 never executed
    $$$$$:16470-block  7
    $$$$$:16470-block  8
        -:16471:}
        -:16472:}
        -:16473:
        -:16474:// Write test cases
    #####:16475:for( auto const& child : groupNode.children )
    %%%%%:16475-block  0
call    0 never executed
call    1 never executed
    %%%%%:16475-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16475-block  2
call    5 never executed
    %%%%%:16475-block  3
call    6 never executed
    #####:16476:writeTestCase( *child );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16477:
    #####:16478:xml.scopedElement( "system-out" ).writeText( trim( stdOutForSuite ), false );
    %%%%%:16478-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16478-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16478-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16478-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:16478-block  4
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$:16478-block  5
call   17 never executed
    $$$$$:16478-block  6
    $$$$$:16478-block  7
call   18 never executed
    $$$$$:16478-block  8
    $$$$$:16478-block  9
call   19 never executed
    $$$$$:16478-block 10
    $$$$$:16478-block 11
call   20 never executed
    $$$$$:16478-block 12
    #####:16479:xml.scopedElement( "system-err" ).writeText( trim( stdErrForSuite ), false );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16479-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16479-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16479-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:16479-block  3
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$:16479-block  4
call   18 never executed
    $$$$$:16479-block  5
    $$$$$:16479-block  6
call   19 never executed
    $$$$$:16479-block  7
    $$$$$:16479-block  8
call   20 never executed
    $$$$$:16479-block  9
    $$$$$:16479-block 10
call   21 never executed
    $$$$$:16479-block 11
    #####:16480:}
        -:16481:
function _ZN5Catch13JunitReporter13writeTestCaseERKNS_22CumulativeReporterBaseIS0_E4NodeINS_13TestCaseStatsENS2_11SectionNodeEEE called 0 returned 0% blocks executed 0%
    #####:16482:void JunitReporter::writeTestCase( TestCaseNode const& testCaseNode ) {
    #####:16483:TestCaseStats const& stats = testCaseNode.value;
        -:16484:
        -:16485:// All test cases have exactly one section - which represents the
        -:16486:// test case itself. That section may have 0-n nested sections
    #####:16487:assert( testCaseNode.children.size() == 1 );
    %%%%%:16487-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16487-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:16487-block  2
    %%%%%:16487-block  3
    #####:16488:SectionNode const& rootSection = *testCaseNode.children.front();
    %%%%%:16488-block  0
call    0 never executed
call    1 never executed
        -:16489:
    #####:16490:std::string className = stats.testInfo.className;
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:16490-block  0
call    3 never executed
        -:16491:
    #####:16492:if( className.empty() ) {
    %%%%%:16492-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16493:className = fileNameTag(stats.testInfo.tags);
    %%%%%:16493-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16493-block  1
call    3 never executed
call    4 never executed
    #####:16494:if ( className.empty() )
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16495:className = "global";
    %%%%%:16495-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:16496:}
        -:16497:
    #####:16498:if ( !m_config->name().empty() )
    %%%%%:16498-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16498-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:16499:className = m_config->name() + "." + className;
    %%%%%:16499-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16499-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16499-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16499-block  3
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:16499-block  4
call   14 never executed
    $$$$$:16499-block  5
    $$$$$:16499-block  6
call   15 never executed
    $$$$$:16499-block  7
        -:16500:
    #####:16501:writeSection( className, "", rootSection );
    %%%%%:16501-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16501-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16501-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:16501-block  3
call   10 never executed
    $$$$$:16501-block  4
    $$$$$:16501-block  5
call   11 never executed
    $$$$$:16501-block  6
    #####:16502:}
        -:16503:
function _ZN5Catch13JunitReporter12writeSectionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_RKNS_22CumulativeReporterBaseIS0_E11SectionNodeE called 0 returned 0% blocks executed 0%
    #####:16504:void JunitReporter::writeSection(  std::string const& className,
        -:16505:std::string const& rootName,
        -:16506:SectionNode const& sectionNode ) {
    #####:16507:std::string name = trim( sectionNode.stats.sectionInfo.name );
    %%%%%:16507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16507-block  1
call    3 never executed
    $$$$$:16507-block  2
call    4 never executed
    #####:16508:if( !rootName.empty() )
    %%%%%:16508-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16509:name = rootName + '/' + name;
    %%%%%:16509-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16509-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:16509-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16509-block  3
call    9 never executed
    $$$$$:16509-block  4
        -:16510:
    #####:16511:if( !sectionNode.assertions.empty() ||
    %%%%%:16511-block  0
call    0 never executed
    #####:16512:!sectionNode.stdOut.empty() ||
branch  0 never executed
branch  1 never executed
    %%%%%:16512-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16512-block  1
    %%%%%:16512-block  2
    %%%%%:16512-block  3
branch  5 never executed
branch  6 never executed
    #####:16513:!sectionNode.stdErr.empty() ) {
    %%%%%:16513-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16514:XmlWriter::ScopedElement e = xml.scopedElement( "testcase" );
    %%%%%:16514-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16514-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%:16514-block  2
call    8 never executed
    $$$$$:16514-block  3
    $$$$$:16514-block  4
    $$$$$:16514-block  5
call    9 never executed
    #####:16515:if( className.empty() ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16516:xml.writeAttribute( "classname", name );
    %%%%%:16516-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16516-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16516-block  2
call    7 never executed
call    8 never executed
    $$$$$:16516-block  3
call    9 never executed
    $$$$$:16516-block  4
    $$$$$:16516-block  5
call   10 never executed
    $$$$$:16516-block  6
    #####:16517:xml.writeAttribute( "name", "root" );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16517-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16517-block  1
call    7 never executed
call    8 never executed
    $$$$$:16517-block  2
call    9 never executed
    $$$$$:16517-block  3
    $$$$$:16517-block  4
call   10 never executed
    $$$$$:16517-block  5
        -:16518:}
        -:16519:else {
    #####:16520:xml.writeAttribute( "classname", className );
    %%%%%:16520-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16520-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16520-block  2
call    7 never executed
call    8 never executed
    $$$$$:16520-block  3
call    9 never executed
    $$$$$:16520-block  4
    $$$$$:16520-block  5
call   10 never executed
    $$$$$:16520-block  6
    #####:16521:xml.writeAttribute( "name", name );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16521-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16521-block  1
call    7 never executed
call    8 never executed
    $$$$$:16521-block  2
call    9 never executed
    $$$$$:16521-block  3
    $$$$$:16521-block  4
call   10 never executed
    $$$$$:16521-block  5
        -:16522:}
    #####:16523:xml.writeAttribute( "time", ::Catch::Detail::stringify( sectionNode.stats.durationInSeconds ) );
    %%%%%:16523-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16523-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16523-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16523-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:16523-block  4
call   13 never executed
    $$$$$:16523-block  5
    $$$$$:16523-block  6
call   14 never executed
    $$$$$:16523-block  7
    $$$$$:16523-block  8
call   15 never executed
    $$$$$:16523-block  9
        -:16524:
    #####:16525:writeAssertions( sectionNode );
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:16526:
    #####:16527:if( !sectionNode.stdOut.empty() )
    %%%%%:16527-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16528:xml.scopedElement( "system-out" ).writeText( trim( sectionNode.stdOut ), false );
    %%%%%:16528-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16528-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16528-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16528-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:16528-block  4
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$:16528-block  5
call   17 never executed
    $$$$$:16528-block  6
    $$$$$:16528-block  7
call   18 never executed
    $$$$$:16528-block  8
    $$$$$:16528-block  9
call   19 never executed
    $$$$$:16528-block 10
    $$$$$:16528-block 11
call   20 never executed
    $$$$$:16528-block 12
    #####:16529:if( !sectionNode.stdErr.empty() )
    %%%%%:16529-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16530:xml.scopedElement( "system-err" ).writeText( trim( sectionNode.stdErr ), false );
    %%%%%:16530-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16530-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16530-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16530-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:16530-block  4
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$:16530-block  5
call   17 never executed
    $$$$$:16530-block  6
    $$$$$:16530-block  7
call   18 never executed
    $$$$$:16530-block  8
    $$$$$:16530-block  9
call   19 never executed
    $$$$$:16530-block 10
    $$$$$:16530-block 11
call   20 never executed
    $$$$$:16530-block 12
        -:16531:}
    #####:16532:for( auto const& childNode : sectionNode.childSections )
    %%%%%:16532-block  0
call    0 never executed
call    1 never executed
    %%%%%:16532-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16532-block  2
call    5 never executed
    %%%%%:16532-block  3
call    6 never executed
    #####:16533:if( className.empty() )
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16534:writeSection( name, "", *childNode );
    %%%%%:16534-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16534-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:16534-block  2
call    8 never executed
call    9 never executed
    $$$$$:16534-block  3
call   10 never executed
    $$$$$:16534-block  4
    $$$$$:16534-block  5
call   11 never executed
    $$$$$:16534-block  6
        -:16535:else
    #####:16536:writeSection( className, name, *childNode );
    %%%%%:16536-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:16537:}
        -:16538:
function _ZN5Catch13JunitReporter15writeAssertionsERKNS_22CumulativeReporterBaseIS0_E11SectionNodeE called 0 returned 0% blocks executed 0%
    #####:16539:void JunitReporter::writeAssertions( SectionNode const& sectionNode ) {
    #####:16540:for( auto const& assertion : sectionNode.assertions )
    %%%%%:16540-block  0
call    0 never executed
call    1 never executed
    %%%%%:16540-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16540-block  2
call    5 never executed
    %%%%%:16540-block  3
call    6 never executed
    #####:16541:writeAssertion( assertion );
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16542:}
    %%%%%:16542-block  0
        -:16543:
function _ZN5Catch13JunitReporter14writeAssertionERKNS_14AssertionStatsE called 0 returned 0% blocks executed 0%
    #####:16544:void JunitReporter::writeAssertion( AssertionStats const& stats ) {
    #####:16545:AssertionResult const& result = stats.assertionResult;
    #####:16546:if( !result.isOk() ) {
    %%%%%:16546-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16547:std::string elementName;
    %%%%%:16547-block  0
call    0 never executed
call    1 never executed
    $$$$$:16547-block  1
call    2 never executed
    #####:16548:switch( result.getResultType() ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:16549:case ResultWas::ThrewException:
        -:16550:case ResultWas::FatalErrorCondition:
    #####:16551:elementName = "error";
    %%%%%:16551-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16552:break;
    %%%%%:16552-block  0
    #####:16553:case ResultWas::ExplicitFailure:
    #####:16554:elementName = "failure";
    %%%%%:16554-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16555:break;
    %%%%%:16555-block  0
    #####:16556:case ResultWas::ExpressionFailed:
    #####:16557:elementName = "failure";
    %%%%%:16557-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16558:break;
    %%%%%:16558-block  0
    #####:16559:case ResultWas::DidntThrowException:
    #####:16560:elementName = "failure";
    %%%%%:16560-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16561:break;
    %%%%%:16561-block  0
        -:16562:
        -:16563:// We should never see these here:
    #####:16564:case ResultWas::Info:
        -:16565:case ResultWas::Warning:
        -:16566:case ResultWas::Ok:
        -:16567:case ResultWas::Unknown:
        -:16568:case ResultWas::FailureBit:
        -:16569:case ResultWas::Exception:
    #####:16570:elementName = "internalError";
    %%%%%:16570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16571:break;
    %%%%%:16571-block  0
        -:16572:}
        -:16573:
    #####:16574:XmlWriter::ScopedElement e = xml.scopedElement( elementName );
    %%%%%:16574-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:16574-block  1
call    4 never executed
        -:16575:
    #####:16576:xml.writeAttribute( "message", result.getExpandedExpression() );
    %%%%%:16576-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16576-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16576-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16576-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:16576-block  4
call   13 never executed
    $$$$$:16576-block  5
    $$$$$:16576-block  6
call   14 never executed
    $$$$$:16576-block  7
    $$$$$:16576-block  8
call   15 never executed
    $$$$$:16576-block  9
    #####:16577:xml.writeAttribute( "type", result.getTestMacroName() );
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16577-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:16577-block  1
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:16577-block  2
call   11 never executed
    $$$$$:16577-block  3
    $$$$$:16577-block  4
call   12 never executed
    $$$$$:16577-block  5
    $$$$$:16577-block  6
call   13 never executed
    $$$$$:16577-block  7
        -:16578:
    #####:16579:ReusableStringStream rss;
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:16579-block  0
call    3 never executed
    #####:16580:if( !result.getMessage().empty() )
    %%%%%:16580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16580-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:16581:rss << result.getMessage() << '\n';
    %%%%%:16581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16581-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:16581-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:16581-block  3
call    9 never executed
    $$$$$:16581-block  4
    $$$$$:16581-block  5
call   10 never executed
    $$$$$:16581-block  6
    #####:16582:for( auto const& msg : stats.infoMessages )
    %%%%%:16582-block  0
call    0 never executed
call    1 never executed
    %%%%%:16582-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16582-block  2
call    5 never executed
    %%%%%:16582-block  3
call    6 never executed
    #####:16583:if( msg.type == ResultWas::Info )
branch  0 never executed
branch  1 never executed
    #####:16584:rss << msg.message << '\n';
    %%%%%:16584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16584-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:16584-block  2
    $$$$$:16584-block  3
        -:16585:
    #####:16586:rss << "at " << result.getSourceInfo();
    %%%%%:16586-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16586-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:16586-block  2
    #####:16587:xml.writeText( rss.str(), false );
    %%%%%:16587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16587-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:16587-block  2
call    6 never executed
call    7 never executed
    $$$$$:16587-block  3
call    8 never executed
    $$$$$:16587-block  4
        -:16588:}
    #####:16589:}
    %%%%%:16589-block  0
        -:16590:
        -:16591:CATCH_REGISTER_REPORTER( "junit", JunitReporter )
        -:16592:
        -:16593:} // end namespace Catch
        -:16594:// end catch_reporter_junit.cpp
        -:16595:// start catch_reporter_listening.cpp
        -:16596:
        -:16597:#include <cassert>
        -:16598:
        -:16599:namespace Catch {
        -:16600:
function _ZN5Catch17ListeningReporterC2Ev called 0 returned 0% blocks executed 0%
    #####:16601:ListeningReporter::ListeningReporter() {
    %%%%%:16601-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:16602:// We will assume that listeners will always want all assertions
    #####:16603:m_preferences.shouldReportAllAssertions = true;
    #####:16604:}
        -:16605:
function _ZN5Catch17ListeningReporter11addListenerEOSt10unique_ptrINS_18IStreamingReporterESt14default_deleteIS2_EE called 0 returned 0% blocks executed 0%
    #####:16606:void ListeningReporter::addListener( IStreamingReporterPtr&& listener ) {
    #####:16607:m_listeners.push_back( std::move( listener ) );
    %%%%%:16607-block  0
call    0 never executed
call    1 never executed
    #####:16608:}
        -:16609:
function _ZN5Catch17ListeningReporter11addReporterEOSt10unique_ptrINS_18IStreamingReporterESt14default_deleteIS2_EE called 0 returned 0% blocks executed 0%
    #####:16610:void ListeningReporter::addReporter(IStreamingReporterPtr&& reporter) {
    #####:16611:assert(!m_reporter && "Listening reporter can wrap only 1 real reporter");
    %%%%%:16611-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16611-block  1
call    3 never executed
    %%%%%:16611-block  2
    #####:16612:m_reporter = std::move( reporter );
    %%%%%:16612-block  0
call    0 never executed
call    1 never executed
    #####:16613:m_preferences.shouldRedirectStdOut = m_reporter->getPreferences().shouldRedirectStdOut;
call    0 never executed
call    1 never executed
    #####:16614:}
        -:16615:
function _ZNK5Catch17ListeningReporter14getPreferencesEv called 0 returned 0% blocks executed 0%
    #####:16616:ReporterPreferences ListeningReporter::getPreferences() const {
    #####:16617:return m_preferences;
    %%%%%:16617-block  0
        -:16618:}
        -:16619:
function _ZN5Catch17ListeningReporter23getSupportedVerbositiesEv called 0 returned 0% blocks executed 0%
    #####:16620:std::set<Verbosity> ListeningReporter::getSupportedVerbosities() {
    #####:16621:return std::set<Verbosity>{ };
    %%%%%:16621-block  0
call    0 never executed
        -:16622:}
        -:16623:
function _ZN5Catch17ListeningReporter19noMatchingTestCasesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:16624:void ListeningReporter::noMatchingTestCases( std::string const& spec ) {
    #####:16625:for ( auto const& listener : m_listeners ) {
    %%%%%:16625-block  0
call    0 never executed
call    1 never executed
    %%%%%:16625-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16625-block  2
call    5 never executed
    %%%%%:16625-block  3
call    6 never executed
    #####:16626:listener->noMatchingTestCases( spec );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16627:}
    #####:16628:m_reporter->noMatchingTestCases( spec );
    %%%%%:16628-block  0
call    0 never executed
call    1 never executed
    #####:16629:}
        -:16630:
function _ZN5Catch17ListeningReporter22reportInvalidArgumentsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:16631:void ListeningReporter::reportInvalidArguments(std::string const&arg){
    #####:16632:for ( auto const& listener : m_listeners ) {
    %%%%%:16632-block  0
call    0 never executed
call    1 never executed
    %%%%%:16632-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16632-block  2
call    5 never executed
    %%%%%:16632-block  3
call    6 never executed
    #####:16633:listener->reportInvalidArguments( arg );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16634:}
    #####:16635:m_reporter->reportInvalidArguments( arg );
    %%%%%:16635-block  0
call    0 never executed
call    1 never executed
    #####:16636:}
        -:16637:
        -:16638:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -:16639:void ListeningReporter::benchmarkPreparing( std::string const& name ) {
        -:16640:for (auto const& listener : m_listeners) {
        -:16641:listener->benchmarkPreparing(name);
        -:16642:}
        -:16643:m_reporter->benchmarkPreparing(name);
        -:16644:}
        -:16645:void ListeningReporter::benchmarkStarting( BenchmarkInfo const& benchmarkInfo ) {
        -:16646:for ( auto const& listener : m_listeners ) {
        -:16647:listener->benchmarkStarting( benchmarkInfo );
        -:16648:}
        -:16649:m_reporter->benchmarkStarting( benchmarkInfo );
        -:16650:}
        -:16651:void ListeningReporter::benchmarkEnded( BenchmarkStats<> const& benchmarkStats ) {
        -:16652:for ( auto const& listener : m_listeners ) {
        -:16653:listener->benchmarkEnded( benchmarkStats );
        -:16654:}
        -:16655:m_reporter->benchmarkEnded( benchmarkStats );
        -:16656:}
        -:16657:
        -:16658:void ListeningReporter::benchmarkFailed( std::string const& error ) {
        -:16659:for (auto const& listener : m_listeners) {
        -:16660:listener->benchmarkFailed(error);
        -:16661:}
        -:16662:m_reporter->benchmarkFailed(error);
        -:16663:}
        -:16664:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -:16665:
function _ZN5Catch17ListeningReporter15testRunStartingERKNS_11TestRunInfoE called 0 returned 0% blocks executed 0%
    #####:16666:void ListeningReporter::testRunStarting( TestRunInfo const& testRunInfo ) {
    #####:16667:for ( auto const& listener : m_listeners ) {
    %%%%%:16667-block  0
call    0 never executed
call    1 never executed
    %%%%%:16667-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16667-block  2
call    5 never executed
    %%%%%:16667-block  3
call    6 never executed
    #####:16668:listener->testRunStarting( testRunInfo );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16669:}
    #####:16670:m_reporter->testRunStarting( testRunInfo );
    %%%%%:16670-block  0
call    0 never executed
call    1 never executed
    #####:16671:}
        -:16672:
function _ZN5Catch17ListeningReporter17testGroupStartingERKNS_9GroupInfoE called 0 returned 0% blocks executed 0%
    #####:16673:void ListeningReporter::testGroupStarting( GroupInfo const& groupInfo ) {
    #####:16674:for ( auto const& listener : m_listeners ) {
    %%%%%:16674-block  0
call    0 never executed
call    1 never executed
    %%%%%:16674-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16674-block  2
call    5 never executed
    %%%%%:16674-block  3
call    6 never executed
    #####:16675:listener->testGroupStarting( groupInfo );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16676:}
    #####:16677:m_reporter->testGroupStarting( groupInfo );
    %%%%%:16677-block  0
call    0 never executed
call    1 never executed
    #####:16678:}
        -:16679:
function _ZN5Catch17ListeningReporter16testCaseStartingERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####:16680:void ListeningReporter::testCaseStarting( TestCaseInfo const& testInfo ) {
    #####:16681:for ( auto const& listener : m_listeners ) {
    %%%%%:16681-block  0
call    0 never executed
call    1 never executed
    %%%%%:16681-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16681-block  2
call    5 never executed
    %%%%%:16681-block  3
call    6 never executed
    #####:16682:listener->testCaseStarting( testInfo );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16683:}
    #####:16684:m_reporter->testCaseStarting( testInfo );
    %%%%%:16684-block  0
call    0 never executed
call    1 never executed
    #####:16685:}
        -:16686:
function _ZN5Catch17ListeningReporter15sectionStartingERKNS_11SectionInfoE called 0 returned 0% blocks executed 0%
    #####:16687:void ListeningReporter::sectionStarting( SectionInfo const& sectionInfo ) {
    #####:16688:for ( auto const& listener : m_listeners ) {
    %%%%%:16688-block  0
call    0 never executed
call    1 never executed
    %%%%%:16688-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16688-block  2
call    5 never executed
    %%%%%:16688-block  3
call    6 never executed
    #####:16689:listener->sectionStarting( sectionInfo );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16690:}
    #####:16691:m_reporter->sectionStarting( sectionInfo );
    %%%%%:16691-block  0
call    0 never executed
call    1 never executed
    #####:16692:}
        -:16693:
function _ZN5Catch17ListeningReporter17assertionStartingERKNS_13AssertionInfoE called 0 returned 0% blocks executed 0%
    #####:16694:void ListeningReporter::assertionStarting( AssertionInfo const& assertionInfo ) {
    #####:16695:for ( auto const& listener : m_listeners ) {
    %%%%%:16695-block  0
call    0 never executed
call    1 never executed
    %%%%%:16695-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16695-block  2
call    5 never executed
    %%%%%:16695-block  3
call    6 never executed
    #####:16696:listener->assertionStarting( assertionInfo );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16697:}
    #####:16698:m_reporter->assertionStarting( assertionInfo );
    %%%%%:16698-block  0
call    0 never executed
call    1 never executed
    #####:16699:}
        -:16700:
        -:16701:// The return value indicates if the messages buffer should be cleared:
function _ZN5Catch17ListeningReporter14assertionEndedERKNS_14AssertionStatsE called 0 returned 0% blocks executed 0%
    #####:16702:bool ListeningReporter::assertionEnded( AssertionStats const& assertionStats ) {
    #####:16703:for( auto const& listener : m_listeners ) {
    %%%%%:16703-block  0
call    0 never executed
call    1 never executed
    %%%%%:16703-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16703-block  2
call    5 never executed
    %%%%%:16703-block  3
call    6 never executed
    #####:16704:static_cast<void>( listener->assertionEnded( assertionStats ) );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16705:}
    #####:16706:return m_reporter->assertionEnded( assertionStats );
    %%%%%:16706-block  0
call    0 never executed
call    1 never executed
    %%%%%:16706-block  1
        -:16707:}
        -:16708:
function _ZN5Catch17ListeningReporter12sectionEndedERKNS_12SectionStatsE called 0 returned 0% blocks executed 0%
    #####:16709:void ListeningReporter::sectionEnded( SectionStats const& sectionStats ) {
    #####:16710:for ( auto const& listener : m_listeners ) {
    %%%%%:16710-block  0
call    0 never executed
call    1 never executed
    %%%%%:16710-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16710-block  2
call    5 never executed
    %%%%%:16710-block  3
call    6 never executed
    #####:16711:listener->sectionEnded( sectionStats );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16712:}
    #####:16713:m_reporter->sectionEnded( sectionStats );
    %%%%%:16713-block  0
call    0 never executed
call    1 never executed
    #####:16714:}
        -:16715:
function _ZN5Catch17ListeningReporter13testCaseEndedERKNS_13TestCaseStatsE called 0 returned 0% blocks executed 0%
    #####:16716:void ListeningReporter::testCaseEnded( TestCaseStats const& testCaseStats ) {
    #####:16717:for ( auto const& listener : m_listeners ) {
    %%%%%:16717-block  0
call    0 never executed
call    1 never executed
    %%%%%:16717-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16717-block  2
call    5 never executed
    %%%%%:16717-block  3
call    6 never executed
    #####:16718:listener->testCaseEnded( testCaseStats );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16719:}
    #####:16720:m_reporter->testCaseEnded( testCaseStats );
    %%%%%:16720-block  0
call    0 never executed
call    1 never executed
    #####:16721:}
        -:16722:
function _ZN5Catch17ListeningReporter14testGroupEndedERKNS_14TestGroupStatsE called 0 returned 0% blocks executed 0%
    #####:16723:void ListeningReporter::testGroupEnded( TestGroupStats const& testGroupStats ) {
    #####:16724:for ( auto const& listener : m_listeners ) {
    %%%%%:16724-block  0
call    0 never executed
call    1 never executed
    %%%%%:16724-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16724-block  2
call    5 never executed
    %%%%%:16724-block  3
call    6 never executed
    #####:16725:listener->testGroupEnded( testGroupStats );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16726:}
    #####:16727:m_reporter->testGroupEnded( testGroupStats );
    %%%%%:16727-block  0
call    0 never executed
call    1 never executed
    #####:16728:}
        -:16729:
function _ZN5Catch17ListeningReporter12testRunEndedERKNS_12TestRunStatsE called 0 returned 0% blocks executed 0%
    #####:16730:void ListeningReporter::testRunEnded( TestRunStats const& testRunStats ) {
    #####:16731:for ( auto const& listener : m_listeners ) {
    %%%%%:16731-block  0
call    0 never executed
call    1 never executed
    %%%%%:16731-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16731-block  2
call    5 never executed
    %%%%%:16731-block  3
call    6 never executed
    #####:16732:listener->testRunEnded( testRunStats );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16733:}
    #####:16734:m_reporter->testRunEnded( testRunStats );
    %%%%%:16734-block  0
call    0 never executed
call    1 never executed
    #####:16735:}
        -:16736:
function _ZN5Catch17ListeningReporter8skipTestERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####:16737:void ListeningReporter::skipTest( TestCaseInfo const& testInfo ) {
    #####:16738:for ( auto const& listener : m_listeners ) {
    %%%%%:16738-block  0
call    0 never executed
call    1 never executed
    %%%%%:16738-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16738-block  2
call    5 never executed
    %%%%%:16738-block  3
call    6 never executed
    #####:16739:listener->skipTest( testInfo );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:16740:}
    #####:16741:m_reporter->skipTest( testInfo );
    %%%%%:16741-block  0
call    0 never executed
call    1 never executed
    #####:16742:}
        -:16743:
function _ZNK5Catch17ListeningReporter7isMultiEv called 0 returned 0% blocks executed 0%
    #####:16744:bool ListeningReporter::isMulti() const {
    #####:16745:return true;
    %%%%%:16745-block  0
        -:16746:}
        -:16747:
        -:16748:} // end namespace Catch
        -:16749:// end catch_reporter_listening.cpp
        -:16750:// start catch_reporter_xml.cpp
        -:16751:
        -:16752:#if defined(_MSC_VER)
        -:16753:#pragma warning(push)
        -:16754:#pragma warning(disable:4061) // Not all labels are EXPLICITLY handled in switch
        -:16755:// Note that 4062 (not all labels are handled
        -:16756:// and default is missing) is enabled
        -:16757:#endif
        -:16758:
        -:16759:namespace Catch {
function _ZN5Catch11XmlReporterC2ERKNS_14ReporterConfigE called 0 returned 0% blocks executed 0%
    #####:16760:XmlReporter::XmlReporter( ReporterConfig const& _config )
        -:16761::   StreamingReporterBase( _config ),
    #####:16762:m_xml(_config.stream())
    %%%%%:16762-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:16762-block  1
call    6 never executed
        -:16763:{
    #####:16764:m_reporterPrefs.shouldRedirectStdOut = true;
    #####:16765:m_reporterPrefs.shouldReportAllAssertions = true;
    #####:16766:}
    %%%%%:16766-block  0
        -:16767:
        -:16768:XmlReporter::~XmlReporter() = default;
        -:16769:
function _ZN5Catch11XmlReporter14getDescriptionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:16770:std::string XmlReporter::getDescription() {
    #####:16771:return "Reports test results as an XML document";
    %%%%%:16771-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16771-block  1
call    4 never executed
    %%%%%:16771-block  2
    $$$$$:16771-block  3
call    5 never executed
        -:16772:}
        -:16773:
function _ZNK5Catch11XmlReporter16getStylesheetRefB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:16774:std::string XmlReporter::getStylesheetRef() const {
    #####:16775:return std::string();
    %%%%%:16775-block  0
call    0 never executed
        -:16776:}
        -:16777:
function _ZN5Catch11XmlReporter15writeSourceInfoERKNS_14SourceLineInfoE called 0 returned 0% blocks executed 0%
    #####:16778:void XmlReporter::writeSourceInfo( SourceLineInfo const& sourceInfo ) {
        -:16779:m_xml
    #####:16780:.writeAttribute( "filename", sourceInfo.file )
    %%%%%:16780-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16780-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$:16780-block  2
call    8 never executed
    $$$$$:16780-block  3
    $$$$$:16780-block  4
call    9 never executed
    #####:16781:.writeAttribute( "line", sourceInfo.line );
    %%%%%:16781-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16781-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16781-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:16781-block  3
call   10 never executed
    $$$$$:16781-block  4
    $$$$$:16781-block  5
call   11 never executed
    $$$$$:16781-block  6
    #####:16782:}
        -:16783:
function _ZN5Catch11XmlReporter19noMatchingTestCasesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:16784:void XmlReporter::noMatchingTestCases( std::string const& s ) {
    #####:16785:StreamingReporterBase::noMatchingTestCases( s );
    %%%%%:16785-block  0
call    0 never executed
    #####:16786:}
        -:16787:
function _ZN5Catch11XmlReporter15testRunStartingERKNS_11TestRunInfoE called 0 returned 0% blocks executed 0%
    #####:16788:void XmlReporter::testRunStarting( TestRunInfo const& testInfo ) {
    #####:16789:StreamingReporterBase::testRunStarting( testInfo );
    %%%%%:16789-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16790:std::string stylesheetRef = getStylesheetRef();
    %%%%%:16790-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16790-block  1
call    3 never executed
    $$$$$:16790-block  2
call    4 never executed
    #####:16791:if( !stylesheetRef.empty() )
    %%%%%:16791-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16792:m_xml.writeStylesheetRef( stylesheetRef );
    %%%%%:16792-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16793:m_xml.startElement( "Catch" );
    %%%%%:16793-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16793-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16793-block  2
call    7 never executed
call    8 never executed
    $$$$$:16793-block  3
call    9 never executed
    $$$$$:16793-block  4
    $$$$$:16793-block  5
call   10 never executed
    $$$$$:16793-block  6
    #####:16794:if( !m_config->name().empty() )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16794-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:16795:m_xml.writeAttribute( "name", m_config->name() );
    %%%%%:16795-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16795-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:16795-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:16795-block  3
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:16795-block  4
call   14 never executed
    $$$$$:16795-block  5
    $$$$$:16795-block  6
call   15 never executed
    $$$$$:16795-block  7
    $$$$$:16795-block  8
call   16 never executed
    $$$$$:16795-block  9
    #####:16796:if (m_config->testSpec().hasFilters())
    %%%%%:16796-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16796-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:16797:m_xml.writeAttribute( "filters", serializeFilters( m_config->getTestsOrTags() ) );
    %%%%%:16797-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16797-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16797-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:16797-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:16797-block  4
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$:16797-block  5
call   17 never executed
    $$$$$:16797-block  6
    $$$$$:16797-block  7
call   18 never executed
    $$$$$:16797-block  8
    $$$$$:16797-block  9
call   19 never executed
    $$$$$:16797-block 10
    #####:16798:if( m_config->rngSeed() != 0 )
    %%%%%:16798-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16798-block  1
branch  4 never executed
branch  5 never executed
    #####:16799:m_xml.scopedElement( "Randomness" )
    %%%%%:16799-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16799-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16799-block  2
call    9 never executed
    $$$$$:16799-block  3
    $$$$$:16799-block  4
call   10 never executed
    $$$$$:16799-block  5
    $$$$$:16799-block  6
call   11 never executed
    $$$$$:16799-block  7
    #####:16800:.writeAttribute( "seed", m_config->rngSeed() );
    %%%%%:16800-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16800-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:16800-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:16800-block  3
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:16800-block  4
call   14 never executed
    $$$$$:16800-block  5
    $$$$$:16800-block  6
call   15 never executed
    $$$$$:16800-block  7
    $$$$$:16800-block  8
    #####:16801:}
        -:16802:
function _ZN5Catch11XmlReporter17testGroupStartingERKNS_9GroupInfoE called 0 returned 0% blocks executed 0%
    #####:16803:void XmlReporter::testGroupStarting( GroupInfo const& groupInfo ) {
    #####:16804:StreamingReporterBase::testGroupStarting( groupInfo );
    %%%%%:16804-block  0
call    0 never executed
    #####:16805:m_xml.startElement( "Group" )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16805-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$:16805-block  1
call    8 never executed
    $$$$$:16805-block  2
    $$$$$:16805-block  3
call    9 never executed
    #####:16806:.writeAttribute( "name", groupInfo.name );
    %%%%%:16806-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16806-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16806-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:16806-block  3
call   10 never executed
    $$$$$:16806-block  4
    $$$$$:16806-block  5
call   11 never executed
    $$$$$:16806-block  6
    #####:16807:}
        -:16808:
function _ZN5Catch11XmlReporter16testCaseStartingERKNS_12TestCaseInfoE called 0 returned 0% blocks executed 0%
    #####:16809:void XmlReporter::testCaseStarting( TestCaseInfo const& testInfo ) {
    #####:16810:StreamingReporterBase::testCaseStarting(testInfo);
    %%%%%:16810-block  0
call    0 never executed
    #####:16811:m_xml.startElement( "TestCase" )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16811-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$:16811-block  1
call    8 never executed
    $$$$$:16811-block  2
    $$$$$:16811-block  3
call    9 never executed
    #####:16812:.writeAttribute( "name", trim( testInfo.name ) )
    %%%%%:16812-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16812-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16812-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:16812-block  3
call   13 never executed
    $$$$$:16812-block  4
    $$$$$:16812-block  5
call   14 never executed
    $$$$$:16812-block  6
    $$$$$:16812-block  7
call   15 never executed
    $$$$$:16812-block  8
    #####:16813:.writeAttribute( "description", testInfo.description )
    %%%%%:16813-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16813-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16813-block  2
call    9 never executed
    $$$$$:16813-block  3
    $$$$$:16813-block  4
call   10 never executed
    $$$$$:16813-block  5
    #####:16814:.writeAttribute( "tags", testInfo.tagsAsString() );
    %%%%%:16814-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16814-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16814-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16814-block  3
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:16814-block  4
call   14 never executed
    $$$$$:16814-block  5
    $$$$$:16814-block  6
call   15 never executed
    $$$$$:16814-block  7
    $$$$$:16814-block  8
call   16 never executed
    $$$$$:16814-block  9
        -:16815:
    #####:16816:writeSourceInfo( testInfo.lineInfo );
call    0 never executed
        -:16817:
    #####:16818:if ( m_config->showDurations() == ShowDurations::Always )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:16819:m_testCaseTimer.start();
    %%%%%:16819-block  0
call    0 never executed
    #####:16820:m_xml.ensureTagClosed();
    %%%%%:16820-block  0
call    0 never executed
    #####:16821:}
        -:16822:
function _ZN5Catch11XmlReporter15sectionStartingERKNS_11SectionInfoE called 0 returned 0% blocks executed 0%
    #####:16823:void XmlReporter::sectionStarting( SectionInfo const& sectionInfo ) {
    #####:16824:StreamingReporterBase::sectionStarting( sectionInfo );
    %%%%%:16824-block  0
call    0 never executed
    #####:16825:if( m_sectionDepth++ > 0 ) {
branch  0 never executed
branch  1 never executed
    #####:16826:m_xml.startElement( "Section" )
    %%%%%:16826-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16826-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$:16826-block  2
call    8 never executed
    $$$$$:16826-block  3
    $$$$$:16826-block  4
call    9 never executed
    #####:16827:.writeAttribute( "name", trim( sectionInfo.name ) );
    %%%%%:16827-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16827-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16827-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16827-block  3
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:16827-block  4
call   14 never executed
    $$$$$:16827-block  5
    $$$$$:16827-block  6
call   15 never executed
    $$$$$:16827-block  7
    $$$$$:16827-block  8
call   16 never executed
    $$$$$:16827-block  9
    #####:16828:writeSourceInfo( sectionInfo.lineInfo );
call    0 never executed
    #####:16829:m_xml.ensureTagClosed();
call    0 never executed
        -:16830:}
    #####:16831:}
    %%%%%:16831-block  0
        -:16832:
function _ZN5Catch11XmlReporter17assertionStartingERKNS_13AssertionInfoE called 0 returned 0% blocks executed 0%
    #####:16833:void XmlReporter::assertionStarting( AssertionInfo const& ) { }
        -:16834:
function _ZN5Catch11XmlReporter14assertionEndedERKNS_14AssertionStatsE called 0 returned 0% blocks executed 0%
    #####:16835:bool XmlReporter::assertionEnded( AssertionStats const& assertionStats ) {
        -:16836:
    #####:16837:AssertionResult const& result = assertionStats.assertionResult;
        -:16838:
    #####:16839:bool includeResults = m_config->includeSuccessfulResults() || !result.isOk();
    %%%%%:16839-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16839-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16839-block  2
    %%%%%:16839-block  3
        -:16840:
    #####:16841:if( includeResults || result.getResultType() == ResultWas::Warning ) {
    %%%%%:16841-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:16841-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16841-block  2
    %%%%%:16841-block  3
    %%%%%:16841-block  4
branch  5 never executed
branch  6 never executed
        -:16842:// Print any info messages in <Info> tags.
    #####:16843:for( auto const& msg : assertionStats.infoMessages ) {
    %%%%%:16843-block  0
call    0 never executed
call    1 never executed
    %%%%%:16843-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16843-block  2
call    5 never executed
    %%%%%:16843-block  3
call    6 never executed
    #####:16844:if( msg.type == ResultWas::Info && includeResults ) {
branch  0 never executed
branch  1 never executed
    %%%%%:16844-block  0
branch  2 never executed
branch  3 never executed
    #####:16845:m_xml.scopedElement( "Info" )
    %%%%%:16845-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16845-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16845-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:16845-block  3
call   10 never executed
    $$$$$:16845-block  4
    $$$$$:16845-block  5
call   11 never executed
    $$$$$:16845-block  6
    $$$$$:16845-block  7
call   12 never executed
    $$$$$:16845-block  8
    #####:16846:.writeText( msg.message );
    %%%%%:16846-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16847:} else if ( msg.type == ResultWas::Warning ) {
    %%%%%:16847-block  0
branch  0 never executed
branch  1 never executed
    #####:16848:m_xml.scopedElement( "Warning" )
    %%%%%:16848-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16848-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16848-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:16848-block  3
call   10 never executed
    $$$$$:16848-block  4
    $$$$$:16848-block  5
call   11 never executed
    $$$$$:16848-block  6
    $$$$$:16848-block  7
call   12 never executed
    $$$$$:16848-block  8
    #####:16849:.writeText( msg.message );
    %%%%%:16849-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:16850:}
        -:16851:}
        -:16852:}
        -:16853:
        -:16854:// Drop out if result was successful but we're not printing them.
    #####:16855:if( !includeResults && result.getResultType() != ResultWas::Warning )
    %%%%%:16855-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:16855-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16855-block  2
    %%%%%:16855-block  3
    %%%%%:16855-block  4
branch  5 never executed
branch  6 never executed
    #####:16856:return true;
    %%%%%:16856-block  0
        -:16857:
        -:16858:// Print the expression if there is one.
    #####:16859:if( result.hasExpression() ) {
    %%%%%:16859-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16860:m_xml.startElement( "Expression" )
    %%%%%:16860-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16860-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$:16860-block  2
call    8 never executed
    $$$$$:16860-block  3
    $$$$$:16860-block  4
call    9 never executed
    $$$$$:16860-block  5
call   10 never executed
    #####:16861:.writeAttribute( "success", result.succeeded() )
    %%%%%:16861-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16861-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16861-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    $$$$$:16861-block  3
call   12 never executed
    $$$$$:16861-block  4
    $$$$$:16861-block  5
call   13 never executed
    $$$$$:16861-block  6
    #####:16862:.writeAttribute( "type", result.getTestMacroName() );
    %%%%%:16862-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16862-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:16862-block  2
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$:16862-block  3
call   12 never executed
    $$$$$:16862-block  4
    $$$$$:16862-block  5
call   13 never executed
    $$$$$:16862-block  6
    $$$$$:16862-block  7
call   14 never executed
    $$$$$:16862-block  8
        -:16863:
    #####:16864:writeSourceInfo( result.getSourceInfo() );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:16864-block  0
call    4 never executed
        -:16865:
    #####:16866:m_xml.scopedElement( "Original" )
    %%%%%:16866-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16866-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16866-block  2
call    9 never executed
    $$$$$:16866-block  3
    $$$$$:16866-block  4
call   10 never executed
    $$$$$:16866-block  5
    $$$$$:16866-block  6
call   11 never executed
    $$$$$:16866-block  7
call   12 never executed
    #####:16867:.writeText( result.getExpression() );
    %%%%%:16867-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16867-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:16867-block  2
call    6 never executed
call    7 never executed
    $$$$$:16867-block  3
call    8 never executed
    $$$$$:16867-block  4
    #####:16868:m_xml.scopedElement( "Expanded" )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16868-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16868-block  1
call    9 never executed
    $$$$$:16868-block  2
    $$$$$:16868-block  3
call   10 never executed
    $$$$$:16868-block  4
    $$$$$:16868-block  5
call   11 never executed
    $$$$$:16868-block  6
call   12 never executed
    #####:16869:.writeText( result.getExpandedExpression() );
    %%%%%:16869-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16869-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:16869-block  2
call    6 never executed
call    7 never executed
    $$$$$:16869-block  3
call    8 never executed
    $$$$$:16869-block  4
        -:16870:}
        -:16871:
        -:16872:// And... Print a result applicable to each result type.
    #####:16873:switch( result.getResultType() ) {
    %%%%%:16873-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:16874:case ResultWas::ThrewException:
    #####:16875:m_xml.startElement( "Exception" );
    %%%%%:16875-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16875-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16875-block  2
call    7 never executed
call    8 never executed
    $$$$$:16875-block  3
call    9 never executed
    $$$$$:16875-block  4
    $$$$$:16875-block  5
call   10 never executed
    $$$$$:16875-block  6
call   11 never executed
    #####:16876:writeSourceInfo( result.getSourceInfo() );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:16876-block  0
call    4 never executed
    #####:16877:m_xml.writeText( result.getMessage() );
    %%%%%:16877-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16877-block  1
call    4 never executed
    $$$$$:16877-block  2
call    5 never executed
    $$$$$:16877-block  3
call    6 never executed
    #####:16878:m_xml.endElement();
call    0 never executed
    #####:16879:break;
    #####:16880:case ResultWas::FatalErrorCondition:
    #####:16881:m_xml.startElement( "FatalErrorCondition" );
    %%%%%:16881-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16881-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16881-block  2
call    7 never executed
call    8 never executed
    $$$$$:16881-block  3
call    9 never executed
    $$$$$:16881-block  4
    $$$$$:16881-block  5
call   10 never executed
    $$$$$:16881-block  6
call   11 never executed
    #####:16882:writeSourceInfo( result.getSourceInfo() );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:16882-block  0
call    4 never executed
    #####:16883:m_xml.writeText( result.getMessage() );
    %%%%%:16883-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16883-block  1
call    4 never executed
    $$$$$:16883-block  2
call    5 never executed
    $$$$$:16883-block  3
call    6 never executed
    #####:16884:m_xml.endElement();
call    0 never executed
    #####:16885:break;
    #####:16886:case ResultWas::Info:
    #####:16887:m_xml.scopedElement( "Info" )
    %%%%%:16887-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16887-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16887-block  2
call    9 never executed
    $$$$$:16887-block  3
    $$$$$:16887-block  4
call   10 never executed
    $$$$$:16887-block  5
    $$$$$:16887-block  6
call   11 never executed
    $$$$$:16887-block  7
call   12 never executed
    #####:16888:.writeText( result.getMessage() );
    %%%%%:16888-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16888-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:16888-block  2
call    6 never executed
call    7 never executed
    $$$$$:16888-block  3
call    8 never executed
    $$$$$:16888-block  4
    #####:16889:break;
    #####:16890:case ResultWas::Warning:
        -:16891:// Warning will already have been written
    #####:16892:break;
    %%%%%:16892-block  0
    #####:16893:case ResultWas::ExplicitFailure:
    #####:16894:m_xml.startElement( "Failure" );
    %%%%%:16894-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16894-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16894-block  2
call    7 never executed
call    8 never executed
    $$$$$:16894-block  3
call    9 never executed
    $$$$$:16894-block  4
    $$$$$:16894-block  5
call   10 never executed
    $$$$$:16894-block  6
call   11 never executed
    #####:16895:writeSourceInfo( result.getSourceInfo() );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:16895-block  0
call    4 never executed
    #####:16896:m_xml.writeText( result.getMessage() );
    %%%%%:16896-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16896-block  1
call    4 never executed
    $$$$$:16896-block  2
call    5 never executed
    #####:16897:m_xml.endElement();
call    0 never executed
    #####:16898:break;
    #####:16899:default:
    #####:16900:break;
    %%%%%:16900-block  0
        -:16901:}
        -:16902:
    #####:16903:if( result.hasExpression() )
    %%%%%:16903-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16904:m_xml.endElement();
    %%%%%:16904-block  0
call    0 never executed
        -:16905:
    #####:16906:return true;
    %%%%%:16906-block  0
        -:16907:}
        -:16908:
function _ZN5Catch11XmlReporter12sectionEndedERKNS_12SectionStatsE called 0 returned 0% blocks executed 0%
    #####:16909:void XmlReporter::sectionEnded( SectionStats const& sectionStats ) {
    #####:16910:StreamingReporterBase::sectionEnded( sectionStats );
    %%%%%:16910-block  0
call    0 never executed
    #####:16911:if( --m_sectionDepth > 0 ) {
branch  0 never executed
branch  1 never executed
    #####:16912:XmlWriter::ScopedElement e = m_xml.scopedElement( "OverallResults" );
    %%%%%:16912-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16912-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%:16912-block  2
call    8 never executed
    $$$$$:16912-block  3
    $$$$$:16912-block  4
    $$$$$:16912-block  5
call    9 never executed
    #####:16913:e.writeAttribute( "successes", sectionStats.assertions.passed );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16913-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16913-block  1
call    7 never executed
call    8 never executed
    $$$$$:16913-block  2
call    9 never executed
    $$$$$:16913-block  3
    $$$$$:16913-block  4
call   10 never executed
    $$$$$:16913-block  5
    #####:16914:e.writeAttribute( "failures", sectionStats.assertions.failed );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16914-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16914-block  1
call    7 never executed
call    8 never executed
    $$$$$:16914-block  2
call    9 never executed
    $$$$$:16914-block  3
    $$$$$:16914-block  4
call   10 never executed
    $$$$$:16914-block  5
    #####:16915:e.writeAttribute( "expectedFailures", sectionStats.assertions.failedButOk );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16915-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16915-block  1
call    7 never executed
call    8 never executed
    $$$$$:16915-block  2
call    9 never executed
    $$$$$:16915-block  3
    $$$$$:16915-block  4
call   10 never executed
    $$$$$:16915-block  5
        -:16916:
    #####:16917:if ( m_config->showDurations() == ShowDurations::Always )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16917-block  0
branch  4 never executed
branch  5 never executed
    #####:16918:e.writeAttribute( "durationInSeconds", sectionStats.durationInSeconds );
    %%%%%:16918-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16918-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16918-block  2
call    7 never executed
call    8 never executed
    $$$$$:16918-block  3
call    9 never executed
    $$$$$:16918-block  4
    $$$$$:16918-block  5
call   10 never executed
    $$$$$:16918-block  6
        -:16919:
    #####:16920:m_xml.endElement();
    %%%%%:16920-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:16921:}
    #####:16922:}
    %%%%%:16922-block  0
        -:16923:
function _ZN5Catch11XmlReporter13testCaseEndedERKNS_13TestCaseStatsE called 0 returned 0% blocks executed 0%
    #####:16924:void XmlReporter::testCaseEnded( TestCaseStats const& testCaseStats ) {
    #####:16925:StreamingReporterBase::testCaseEnded( testCaseStats );
    %%%%%:16925-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16926:XmlWriter::ScopedElement e = m_xml.scopedElement( "OverallResult" );
    %%%%%:16926-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16926-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%:16926-block  2
call    8 never executed
    $$$$$:16926-block  3
    $$$$$:16926-block  4
    $$$$$:16926-block  5
call    9 never executed
    #####:16927:e.writeAttribute( "success", testCaseStats.totals.assertions.allOk() );
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:16927-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:16927-block  1
call    8 never executed
call    9 never executed
    $$$$$:16927-block  2
call   10 never executed
    $$$$$:16927-block  3
    $$$$$:16927-block  4
call   11 never executed
    $$$$$:16927-block  5
    $$$$$:16927-block  6
        -:16928:
    #####:16929:if ( m_config->showDurations() == ShowDurations::Always )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16929-block  0
branch  4 never executed
branch  5 never executed
    #####:16930:e.writeAttribute( "durationInSeconds", m_testCaseTimer.getElapsedSeconds() );
    %%%%%:16930-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:16930-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16930-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16930-block  3
call   10 never executed
call   11 never executed
    $$$$$:16930-block  4
call   12 never executed
    $$$$$:16930-block  5
    $$$$$:16930-block  6
call   13 never executed
    $$$$$:16930-block  7
    $$$$$:16930-block  8
        -:16931:
    #####:16932:if( !testCaseStats.stdOut.empty() )
    %%%%%:16932-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16933:m_xml.scopedElement( "StdOut" ).writeText( trim( testCaseStats.stdOut ), false );
    %%%%%:16933-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16933-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16933-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16933-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:16933-block  4
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$:16933-block  5
call   17 never executed
    $$$$$:16933-block  6
    $$$$$:16933-block  7
call   18 never executed
    $$$$$:16933-block  8
    $$$$$:16933-block  9
call   19 never executed
    $$$$$:16933-block 10
    $$$$$:16933-block 11
call   20 never executed
    $$$$$:16933-block 12
    #####:16934:if( !testCaseStats.stdErr.empty() )
    %%%%%:16934-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16935:m_xml.scopedElement( "StdErr" ).writeText( trim( testCaseStats.stdErr ), false );
    %%%%%:16935-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16935-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16935-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:16935-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:16935-block  4
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$:16935-block  5
call   17 never executed
    $$$$$:16935-block  6
    $$$$$:16935-block  7
call   18 never executed
    $$$$$:16935-block  8
    $$$$$:16935-block  9
call   19 never executed
    $$$$$:16935-block 10
    $$$$$:16935-block 11
call   20 never executed
    $$$$$:16935-block 12
        -:16936:
    #####:16937:m_xml.endElement();
    %%%%%:16937-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16938:}
        -:16939:
function _ZN5Catch11XmlReporter14testGroupEndedERKNS_14TestGroupStatsE called 0 returned 0% blocks executed 0%
    #####:16940:void XmlReporter::testGroupEnded( TestGroupStats const& testGroupStats ) {
    #####:16941:StreamingReporterBase::testGroupEnded( testGroupStats );
    %%%%%:16941-block  0
call    0 never executed
        -:16942:// TODO: Check testGroupStats.aborting and act accordingly.
    #####:16943:m_xml.scopedElement( "OverallResults" )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16943-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16943-block  1
call    9 never executed
    $$$$$:16943-block  2
    $$$$$:16943-block  3
call   10 never executed
    $$$$$:16943-block  4
    $$$$$:16943-block  5
call   11 never executed
    #####:16944:.writeAttribute( "successes", testGroupStats.totals.assertions.passed )
    %%%%%:16944-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16944-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16944-block  2
call    9 never executed
    $$$$$:16944-block  3
    $$$$$:16944-block  4
call   10 never executed
    $$$$$:16944-block  5
    #####:16945:.writeAttribute( "failures", testGroupStats.totals.assertions.failed )
    %%%%%:16945-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16945-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16945-block  2
call    9 never executed
    $$$$$:16945-block  3
    $$$$$:16945-block  4
call   10 never executed
    $$$$$:16945-block  5
    #####:16946:.writeAttribute( "expectedFailures", testGroupStats.totals.assertions.failedButOk );
    %%%%%:16946-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16946-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16946-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:16946-block  3
call   10 never executed
    $$$$$:16946-block  4
    $$$$$:16946-block  5
call   11 never executed
    $$$$$:16946-block  6
    #####:16947:m_xml.endElement();
call    0 never executed
    #####:16948:}
        -:16949:
function _ZN5Catch11XmlReporter12testRunEndedERKNS_12TestRunStatsE called 0 returned 0% blocks executed 0%
    #####:16950:void XmlReporter::testRunEnded( TestRunStats const& testRunStats ) {
    #####:16951:StreamingReporterBase::testRunEnded( testRunStats );
    %%%%%:16951-block  0
call    0 never executed
    #####:16952:m_xml.scopedElement( "OverallResults" )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16952-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16952-block  1
call    9 never executed
    $$$$$:16952-block  2
    $$$$$:16952-block  3
call   10 never executed
    $$$$$:16952-block  4
    $$$$$:16952-block  5
call   11 never executed
    #####:16953:.writeAttribute( "successes", testRunStats.totals.assertions.passed )
    %%%%%:16953-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16953-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16953-block  2
call    9 never executed
    $$$$$:16953-block  3
    $$$$$:16953-block  4
call   10 never executed
    $$$$$:16953-block  5
    #####:16954:.writeAttribute( "failures", testRunStats.totals.assertions.failed )
    %%%%%:16954-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16954-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:16954-block  2
call    9 never executed
    $$$$$:16954-block  3
    $$$$$:16954-block  4
call   10 never executed
    $$$$$:16954-block  5
    #####:16955:.writeAttribute( "expectedFailures", testRunStats.totals.assertions.failedButOk );
    %%%%%:16955-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:16955-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:16955-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:16955-block  3
call   10 never executed
    $$$$$:16955-block  4
    $$$$$:16955-block  5
call   11 never executed
    $$$$$:16955-block  6
    #####:16956:m_xml.endElement();
call    0 never executed
    #####:16957:}
        -:16958:
        -:16959:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -:16960:void XmlReporter::benchmarkPreparing(std::string const& name) {
        -:16961:m_xml.startElement("BenchmarkResults")
        -:16962:.writeAttribute("name", name);
        -:16963:}
        -:16964:
        -:16965:void XmlReporter::benchmarkStarting(BenchmarkInfo const &info) {
        -:16966:m_xml.writeAttribute("samples", info.samples)
        -:16967:.writeAttribute("resamples", info.resamples)
        -:16968:.writeAttribute("iterations", info.iterations)
        -:16969:.writeAttribute("clockResolution", static_cast<uint64_t>(info.clockResolution))
        -:16970:.writeAttribute("estimatedDuration", static_cast<uint64_t>(info.estimatedDuration))
        -:16971:.writeComment("All values in nano seconds");
        -:16972:}
        -:16973:
        -:16974:void XmlReporter::benchmarkEnded(BenchmarkStats<> const& benchmarkStats) {
        -:16975:m_xml.startElement("mean")
        -:16976:.writeAttribute("value", static_cast<uint64_t>(benchmarkStats.mean.point.count()))
        -:16977:.writeAttribute("lowerBound", static_cast<uint64_t>(benchmarkStats.mean.lower_bound.count()))
        -:16978:.writeAttribute("upperBound", static_cast<uint64_t>(benchmarkStats.mean.upper_bound.count()))
        -:16979:.writeAttribute("ci", benchmarkStats.mean.confidence_interval);
        -:16980:m_xml.endElement();
        -:16981:m_xml.startElement("standardDeviation")
        -:16982:.writeAttribute("value", benchmarkStats.standardDeviation.point.count())
        -:16983:.writeAttribute("lowerBound", benchmarkStats.standardDeviation.lower_bound.count())
        -:16984:.writeAttribute("upperBound", benchmarkStats.standardDeviation.upper_bound.count())
        -:16985:.writeAttribute("ci", benchmarkStats.standardDeviation.confidence_interval);
        -:16986:m_xml.endElement();
        -:16987:m_xml.startElement("outliers")
        -:16988:.writeAttribute("variance", benchmarkStats.outlierVariance)
        -:16989:.writeAttribute("lowMild", benchmarkStats.outliers.low_mild)
        -:16990:.writeAttribute("lowSevere", benchmarkStats.outliers.low_severe)
        -:16991:.writeAttribute("highMild", benchmarkStats.outliers.high_mild)
        -:16992:.writeAttribute("highSevere", benchmarkStats.outliers.high_severe);
        -:16993:m_xml.endElement();
        -:16994:m_xml.endElement();
        -:16995:}
        -:16996:
        -:16997:void XmlReporter::benchmarkFailed(std::string const &error) {
        -:16998:m_xml.scopedElement("failed").
        -:16999:writeAttribute("message", error);
        -:17000:m_xml.endElement();
        -:17001:}
        -:17002:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -:17003:
        -:17004:CATCH_REGISTER_REPORTER( "xml", XmlReporter )
        -:17005:
        -:17006:} // end namespace Catch
        -:17007:
        -:17008:#if defined(_MSC_VER)
        -:17009:#pragma warning(pop)
        -:17010:#endif
        -:17011:// end catch_reporter_xml.cpp
        -:17012:
        -:17013:namespace Catch {
        -:17014:LeakDetector leakDetector;
        -:17015:}
        -:17016:
        -:17017:#ifdef __clang__
        -:17018:#pragma clang diagnostic pop
        -:17019:#endif
        -:17020:
        -:17021:// end catch_impl.hpp
        -:17022:#endif
        -:17023:
        -:17024:#ifdef CATCH_CONFIG_MAIN
        -:17025:// start catch_default_main.hpp
        -:17026:
        -:17027:#ifndef __OBJC__
        -:17028:
        -:17029:#if defined(CATCH_CONFIG_WCHAR) && defined(WIN32) && defined(_UNICODE) && !defined(DO_NOT_USE_WMAIN)
        -:17030:// Standard C/C++ Win32 Unicode wmain entry point
        -:17031:extern "C" int wmain (int argc, wchar_t * argv[], wchar_t * []) {
        -:17032:#else
        -:17033:// Standard C/C++ main entry point
function main called 1 returned 100% blocks executed 78%
        1:17034:int main (int argc, char * argv[]) {
        -:17035:#endif
        -:17036:
        1:17037:return Catch::Session().run( argc, argv );
        1:17037-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:17037-block  1
        1:17037-block  2
call    4 returned 1
    $$$$$:17037-block  3
call    5 never executed
        -:17038:}
        -:17039:
        -:17040:#else // __OBJC__
        -:17041:
        -:17042:// Objective-C entry point
        -:17043:int main (int argc, char * const argv[]) {
        -:17044:#if !CATCH_ARC_ENABLED
        -:17045:NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];
        -:17046:#endif
        -:17047:
        -:17048:Catch::registerTestMethods();
        -:17049:int result = Catch::Session().run( argc, (char**)argv );
        -:17050:
        -:17051:#if !CATCH_ARC_ENABLED
        -:17052:[pool drain];
        -:17053:#endif
        -:17054:
        -:17055:return result;
        -:17056:}
        -:17057:
        -:17058:#endif // __OBJC__
        -:17059:
        -:17060:// end catch_default_main.hpp
        -:17061:#endif
        -:17062:
        -:17063:#if !defined(CATCH_CONFIG_IMPL_ONLY)
        -:17064:
        -:17065:#ifdef CLARA_CONFIG_MAIN_NOT_DEFINED
        -:17066:#  undef CLARA_CONFIG_MAIN
        -:17067:#endif
        -:17068:
        -:17069:#if !defined(CATCH_CONFIG_DISABLE)
        -:17070://////
        -:17071:// If this config identifier is defined then all CATCH macros are prefixed with CATCH_
        -:17072:#ifdef CATCH_CONFIG_PREFIX_ALL
        -:17073:
        -:17074:#define CATCH_REQUIRE( ... ) INTERNAL_CATCH_TEST( "CATCH_REQUIRE", Catch::ResultDisposition::Normal, __VA_ARGS__ )
        -:17075:#define CATCH_REQUIRE_FALSE( ... ) INTERNAL_CATCH_TEST( "CATCH_REQUIRE_FALSE", Catch::ResultDisposition::Normal | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )
        -:17076:
        -:17077:#define CATCH_REQUIRE_THROWS( ... ) INTERNAL_CATCH_THROWS( "CATCH_REQUIRE_THROWS", Catch::ResultDisposition::Normal, __VA_ARGS__ )
        -:17078:#define CATCH_REQUIRE_THROWS_AS( expr, exceptionType ) INTERNAL_CATCH_THROWS_AS( "CATCH_REQUIRE_THROWS_AS", exceptionType, Catch::ResultDisposition::Normal, expr )
        -:17079:#define CATCH_REQUIRE_THROWS_WITH( expr, matcher ) INTERNAL_CATCH_THROWS_STR_MATCHES( "CATCH_REQUIRE_THROWS_WITH", Catch::ResultDisposition::Normal, matcher, expr )
        -:17080:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:17081:#define CATCH_REQUIRE_THROWS_MATCHES( expr, exceptionType, matcher ) INTERNAL_CATCH_THROWS_MATCHES( "CATCH_REQUIRE_THROWS_MATCHES", exceptionType, Catch::ResultDisposition::Normal, matcher, expr )
        -:17082:#endif// CATCH_CONFIG_DISABLE_MATCHERS
        -:17083:#define CATCH_REQUIRE_NOTHROW( ... ) INTERNAL_CATCH_NO_THROW( "CATCH_REQUIRE_NOTHROW", Catch::ResultDisposition::Normal, __VA_ARGS__ )
        -:17084:
        -:17085:#define CATCH_CHECK( ... ) INTERNAL_CATCH_TEST( "CATCH_CHECK", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:17086:#define CATCH_CHECK_FALSE( ... ) INTERNAL_CATCH_TEST( "CATCH_CHECK_FALSE", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )
        -:17087:#define CATCH_CHECKED_IF( ... ) INTERNAL_CATCH_IF( "CATCH_CHECKED_IF", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:17088:#define CATCH_CHECKED_ELSE( ... ) INTERNAL_CATCH_ELSE( "CATCH_CHECKED_ELSE", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:17089:#define CATCH_CHECK_NOFAIL( ... ) INTERNAL_CATCH_TEST( "CATCH_CHECK_NOFAIL", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::SuppressFail, __VA_ARGS__ )
        -:17090:
        -:17091:#define CATCH_CHECK_THROWS( ... )  INTERNAL_CATCH_THROWS( "CATCH_CHECK_THROWS", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:17092:#define CATCH_CHECK_THROWS_AS( expr, exceptionType ) INTERNAL_CATCH_THROWS_AS( "CATCH_CHECK_THROWS_AS", exceptionType, Catch::ResultDisposition::ContinueOnFailure, expr )
        -:17093:#define CATCH_CHECK_THROWS_WITH( expr, matcher ) INTERNAL_CATCH_THROWS_STR_MATCHES( "CATCH_CHECK_THROWS_WITH", Catch::ResultDisposition::ContinueOnFailure, matcher, expr )
        -:17094:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:17095:#define CATCH_CHECK_THROWS_MATCHES( expr, exceptionType, matcher ) INTERNAL_CATCH_THROWS_MATCHES( "CATCH_CHECK_THROWS_MATCHES", exceptionType, Catch::ResultDisposition::ContinueOnFailure, matcher, expr )
        -:17096:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:17097:#define CATCH_CHECK_NOTHROW( ... ) INTERNAL_CATCH_NO_THROW( "CATCH_CHECK_NOTHROW", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:17098:
        -:17099:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:17100:#define CATCH_CHECK_THAT( arg, matcher ) INTERNAL_CHECK_THAT( "CATCH_CHECK_THAT", matcher, Catch::ResultDisposition::ContinueOnFailure, arg )
        -:17101:
        -:17102:#define CATCH_REQUIRE_THAT( arg, matcher ) INTERNAL_CHECK_THAT( "CATCH_REQUIRE_THAT", matcher, Catch::ResultDisposition::Normal, arg )
        -:17103:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:17104:
        -:17105:#define CATCH_INFO( msg ) INTERNAL_CATCH_INFO( "CATCH_INFO", msg )
        -:17106:#define CATCH_UNSCOPED_INFO( msg ) INTERNAL_CATCH_UNSCOPED_INFO( "CATCH_UNSCOPED_INFO", msg )
        -:17107:#define CATCH_WARN( msg ) INTERNAL_CATCH_MSG( "CATCH_WARN", Catch::ResultWas::Warning, Catch::ResultDisposition::ContinueOnFailure, msg )
        -:17108:#define CATCH_CAPTURE( ... ) INTERNAL_CATCH_CAPTURE( INTERNAL_CATCH_UNIQUE_NAME(capturer), "CATCH_CAPTURE",__VA_ARGS__ )
        -:17109:
        -:17110:#define CATCH_TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE( __VA_ARGS__ )
        -:17111:#define CATCH_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17112:#define CATCH_METHOD_AS_TEST_CASE( method, ... ) INTERNAL_CATCH_METHOD_AS_TEST_CASE( method, __VA_ARGS__ )
        -:17113:#define CATCH_REGISTER_TEST_CASE( Function, ... ) INTERNAL_CATCH_REGISTER_TESTCASE( Function, __VA_ARGS__ )
        -:17114:#define CATCH_SECTION( ... ) INTERNAL_CATCH_SECTION( __VA_ARGS__ )
        -:17115:#define CATCH_DYNAMIC_SECTION( ... ) INTERNAL_CATCH_DYNAMIC_SECTION( __VA_ARGS__ )
        -:17116:#define CATCH_FAIL( ... ) INTERNAL_CATCH_MSG( "CATCH_FAIL", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::Normal, __VA_ARGS__ )
        -:17117:#define CATCH_FAIL_CHECK( ... ) INTERNAL_CATCH_MSG( "CATCH_FAIL_CHECK", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:17118:#define CATCH_SUCCEED( ... ) INTERNAL_CATCH_MSG( "CATCH_SUCCEED", Catch::ResultWas::Ok, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:17119:
        -:17120:#define CATCH_ANON_TEST_CASE() INTERNAL_CATCH_TESTCASE()
        -:17121:
        -:17122:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -:17123:#define CATCH_TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ )
        -:17124:#define CATCH_TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG( __VA_ARGS__ )
        -:17125:#define CATCH_TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17126:#define CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ )
        -:17127:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE( __VA_ARGS__ )
        -:17128:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( __VA_ARGS__ )
        -:17129:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17130:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ )
        -:17131:#else
        -:17132:#define CATCH_TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ ) )
        -:17133:#define CATCH_TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG( __VA_ARGS__ ) )
        -:17134:#define CATCH_TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ ) )
        -:17135:#define CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ ) )
        -:17136:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE( __VA_ARGS__ ) )
        -:17137:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( __VA_ARGS__ ) )
        -:17138:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, __VA_ARGS__ ) )
        -:17139:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ ) )
        -:17140:#endif
        -:17141:
        -:17142:#if !defined(CATCH_CONFIG_RUNTIME_STATIC_REQUIRE)
        -:17143:#define CATCH_STATIC_REQUIRE( ... )       static_assert(   __VA_ARGS__ ,      #__VA_ARGS__ );     CATCH_SUCCEED( #__VA_ARGS__ )
        -:17144:#define CATCH_STATIC_REQUIRE_FALSE( ... ) static_assert( !(__VA_ARGS__), "!(" #__VA_ARGS__ ")" ); CATCH_SUCCEED( #__VA_ARGS__ )
        -:17145:#else
        -:17146:#define CATCH_STATIC_REQUIRE( ... )       CATCH_REQUIRE( __VA_ARGS__ )
        -:17147:#define CATCH_STATIC_REQUIRE_FALSE( ... ) CATCH_REQUIRE_FALSE( __VA_ARGS__ )
        -:17148:#endif
        -:17149:
        -:17150:// "BDD-style" convenience wrappers
        -:17151:#define CATCH_SCENARIO( ... ) CATCH_TEST_CASE( "Scenario: " __VA_ARGS__ )
        -:17152:#define CATCH_SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TEST_CASE_METHOD( className, "Scenario: " __VA_ARGS__ )
        -:17153:#define CATCH_GIVEN( desc )     INTERNAL_CATCH_DYNAMIC_SECTION( "    Given: " << desc )
        -:17154:#define CATCH_AND_GIVEN( desc ) INTERNAL_CATCH_DYNAMIC_SECTION( "And given: " << desc )
        -:17155:#define CATCH_WHEN( desc )      INTERNAL_CATCH_DYNAMIC_SECTION( "     When: " << desc )
        -:17156:#define CATCH_AND_WHEN( desc )  INTERNAL_CATCH_DYNAMIC_SECTION( " And when: " << desc )
        -:17157:#define CATCH_THEN( desc )      INTERNAL_CATCH_DYNAMIC_SECTION( "     Then: " << desc )
        -:17158:#define CATCH_AND_THEN( desc )  INTERNAL_CATCH_DYNAMIC_SECTION( "      And: " << desc )
        -:17159:
        -:17160:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -:17161:#define CATCH_BENCHMARK(...) \
        -:17162:    INTERNAL_CATCH_BENCHMARK(INTERNAL_CATCH_UNIQUE_NAME(____C_A_T_C_H____B_E_N_C_H____), INTERNAL_CATCH_GET_1_ARG(__VA_ARGS__,,), INTERNAL_CATCH_GET_2_ARG(__VA_ARGS__,,))
        -:17163:#define CATCH_BENCHMARK_ADVANCED(name) \
        -:17164:    INTERNAL_CATCH_BENCHMARK_ADVANCED(INTERNAL_CATCH_UNIQUE_NAME(____C_A_T_C_H____B_E_N_C_H____), name)
        -:17165:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -:17166:
        -:17167:// If CATCH_CONFIG_PREFIX_ALL is not defined then the CATCH_ prefix is not required
        -:17168:#else
        -:17169:
        -:17170:#define REQUIRE( ... ) INTERNAL_CATCH_TEST( "REQUIRE", Catch::ResultDisposition::Normal, __VA_ARGS__  )
        -:17171:#define REQUIRE_FALSE( ... ) INTERNAL_CATCH_TEST( "REQUIRE_FALSE", Catch::ResultDisposition::Normal | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )
        -:17172:
        -:17173:#define REQUIRE_THROWS( ... ) INTERNAL_CATCH_THROWS( "REQUIRE_THROWS", Catch::ResultDisposition::Normal, __VA_ARGS__ )
        -:17174:#define REQUIRE_THROWS_AS( expr, exceptionType ) INTERNAL_CATCH_THROWS_AS( "REQUIRE_THROWS_AS", exceptionType, Catch::ResultDisposition::Normal, expr )
        -:17175:#define REQUIRE_THROWS_WITH( expr, matcher ) INTERNAL_CATCH_THROWS_STR_MATCHES( "REQUIRE_THROWS_WITH", Catch::ResultDisposition::Normal, matcher, expr )
        -:17176:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:17177:#define REQUIRE_THROWS_MATCHES( expr, exceptionType, matcher ) INTERNAL_CATCH_THROWS_MATCHES( "REQUIRE_THROWS_MATCHES", exceptionType, Catch::ResultDisposition::Normal, matcher, expr )
        -:17178:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:17179:#define REQUIRE_NOTHROW( ... ) INTERNAL_CATCH_NO_THROW( "REQUIRE_NOTHROW", Catch::ResultDisposition::Normal, __VA_ARGS__ )
        -:17180:
        -:17181:#define CHECK( ... ) INTERNAL_CATCH_TEST( "CHECK", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:17182:#define CHECK_FALSE( ... ) INTERNAL_CATCH_TEST( "CHECK_FALSE", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )
        -:17183:#define CHECKED_IF( ... ) INTERNAL_CATCH_IF( "CHECKED_IF", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:17184:#define CHECKED_ELSE( ... ) INTERNAL_CATCH_ELSE( "CHECKED_ELSE", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:17185:#define CHECK_NOFAIL( ... ) INTERNAL_CATCH_TEST( "CHECK_NOFAIL", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::SuppressFail, __VA_ARGS__ )
        -:17186:
        -:17187:#define CHECK_THROWS( ... )  INTERNAL_CATCH_THROWS( "CHECK_THROWS", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:17188:#define CHECK_THROWS_AS( expr, exceptionType ) INTERNAL_CATCH_THROWS_AS( "CHECK_THROWS_AS", exceptionType, Catch::ResultDisposition::ContinueOnFailure, expr )
        -:17189:#define CHECK_THROWS_WITH( expr, matcher ) INTERNAL_CATCH_THROWS_STR_MATCHES( "CHECK_THROWS_WITH", Catch::ResultDisposition::ContinueOnFailure, matcher, expr )
        -:17190:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:17191:#define CHECK_THROWS_MATCHES( expr, exceptionType, matcher ) INTERNAL_CATCH_THROWS_MATCHES( "CHECK_THROWS_MATCHES", exceptionType, Catch::ResultDisposition::ContinueOnFailure, matcher, expr )
        -:17192:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:17193:#define CHECK_NOTHROW( ... ) INTERNAL_CATCH_NO_THROW( "CHECK_NOTHROW", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:17194:
        -:17195:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:17196:#define CHECK_THAT( arg, matcher ) INTERNAL_CHECK_THAT( "CHECK_THAT", matcher, Catch::ResultDisposition::ContinueOnFailure, arg )
        -:17197:
        -:17198:#define REQUIRE_THAT( arg, matcher ) INTERNAL_CHECK_THAT( "REQUIRE_THAT", matcher, Catch::ResultDisposition::Normal, arg )
        -:17199:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:17200:
        -:17201:#define INFO( msg ) INTERNAL_CATCH_INFO( "INFO", msg )
        -:17202:#define UNSCOPED_INFO( msg ) INTERNAL_CATCH_UNSCOPED_INFO( "UNSCOPED_INFO", msg )
        -:17203:#define WARN( msg ) INTERNAL_CATCH_MSG( "WARN", Catch::ResultWas::Warning, Catch::ResultDisposition::ContinueOnFailure, msg )
        -:17204:#define CAPTURE( ... ) INTERNAL_CATCH_CAPTURE( INTERNAL_CATCH_UNIQUE_NAME(capturer), "CAPTURE",__VA_ARGS__ )
        -:17205:
        -:17206:#define TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE( __VA_ARGS__ )
        -:17207:#define TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17208:#define METHOD_AS_TEST_CASE( method, ... ) INTERNAL_CATCH_METHOD_AS_TEST_CASE( method, __VA_ARGS__ )
        -:17209:#define REGISTER_TEST_CASE( Function, ... ) INTERNAL_CATCH_REGISTER_TESTCASE( Function, __VA_ARGS__ )
        -:17210:#define SECTION( ... ) INTERNAL_CATCH_SECTION( __VA_ARGS__ )
        -:17211:#define DYNAMIC_SECTION( ... ) INTERNAL_CATCH_DYNAMIC_SECTION( __VA_ARGS__ )
        -:17212:#define FAIL( ... ) INTERNAL_CATCH_MSG( "FAIL", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::Normal, __VA_ARGS__ )
        -:17213:#define FAIL_CHECK( ... ) INTERNAL_CATCH_MSG( "FAIL_CHECK", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:17214:#define SUCCEED( ... ) INTERNAL_CATCH_MSG( "SUCCEED", Catch::ResultWas::Ok, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:17215:#define ANON_TEST_CASE() INTERNAL_CATCH_TESTCASE()
        -:17216:
        -:17217:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -:17218:#define TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ )
        -:17219:#define TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG( __VA_ARGS__ )
        -:17220:#define TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17221:#define TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ )
        -:17222:#define TEMPLATE_PRODUCT_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE( __VA_ARGS__ )
        -:17223:#define TEMPLATE_PRODUCT_TEST_CASE_SIG( ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( __VA_ARGS__ )
        -:17224:#define TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17225:#define TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ )
        -:17226:#define TEMPLATE_LIST_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE(__VA_ARGS__)
        -:17227:#define TEMPLATE_LIST_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17228:#else
        -:17229:#define TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ ) )
        -:17230:#define TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG( __VA_ARGS__ ) )
        -:17231:#define TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ ) )
        -:17232:#define TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ ) )
        -:17233:#define TEMPLATE_PRODUCT_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE( __VA_ARGS__ ) )
        -:17234:#define TEMPLATE_PRODUCT_TEST_CASE_SIG( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( __VA_ARGS__ ) )
        -:17235:#define TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, __VA_ARGS__ ) )
        -:17236:#define TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ ) )
        -:17237:#define TEMPLATE_LIST_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE( __VA_ARGS__ ) )
        -:17238:#define TEMPLATE_LIST_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD( className, __VA_ARGS__ ) )
        -:17239:#endif
        -:17240:
        -:17241:#if !defined(CATCH_CONFIG_RUNTIME_STATIC_REQUIRE)
        -:17242:#define STATIC_REQUIRE( ... )       static_assert(   __VA_ARGS__,  #__VA_ARGS__ ); SUCCEED( #__VA_ARGS__ )
        -:17243:#define STATIC_REQUIRE_FALSE( ... ) static_assert( !(__VA_ARGS__), "!(" #__VA_ARGS__ ")" ); SUCCEED( "!(" #__VA_ARGS__ ")" )
        -:17244:#else
        -:17245:#define STATIC_REQUIRE( ... )       REQUIRE( __VA_ARGS__ )
        -:17246:#define STATIC_REQUIRE_FALSE( ... ) REQUIRE_FALSE( __VA_ARGS__ )
        -:17247:#endif
        -:17248:
        -:17249:#endif
        -:17250:
        -:17251:#define CATCH_TRANSLATE_EXCEPTION( signature ) INTERNAL_CATCH_TRANSLATE_EXCEPTION( signature )
        -:17252:
        -:17253:// "BDD-style" convenience wrappers
        -:17254:#define SCENARIO( ... ) TEST_CASE( "Scenario: " __VA_ARGS__ )
        -:17255:#define SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TEST_CASE_METHOD( className, "Scenario: " __VA_ARGS__ )
        -:17256:
        -:17257:#define GIVEN( desc )     INTERNAL_CATCH_DYNAMIC_SECTION( "    Given: " << desc )
        -:17258:#define AND_GIVEN( desc ) INTERNAL_CATCH_DYNAMIC_SECTION( "And given: " << desc )
        -:17259:#define WHEN( desc )      INTERNAL_CATCH_DYNAMIC_SECTION( "     When: " << desc )
        -:17260:#define AND_WHEN( desc )  INTERNAL_CATCH_DYNAMIC_SECTION( " And when: " << desc )
        -:17261:#define THEN( desc )      INTERNAL_CATCH_DYNAMIC_SECTION( "     Then: " << desc )
        -:17262:#define AND_THEN( desc )  INTERNAL_CATCH_DYNAMIC_SECTION( "      And: " << desc )
        -:17263:
        -:17264:#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
        -:17265:#define BENCHMARK(...) \
        -:17266:    INTERNAL_CATCH_BENCHMARK(INTERNAL_CATCH_UNIQUE_NAME(____C_A_T_C_H____B_E_N_C_H____), INTERNAL_CATCH_GET_1_ARG(__VA_ARGS__,,), INTERNAL_CATCH_GET_2_ARG(__VA_ARGS__,,))
        -:17267:#define BENCHMARK_ADVANCED(name) \
        -:17268:    INTERNAL_CATCH_BENCHMARK_ADVANCED(INTERNAL_CATCH_UNIQUE_NAME(____C_A_T_C_H____B_E_N_C_H____), name)
        -:17269:#endif // CATCH_CONFIG_ENABLE_BENCHMARKING
        -:17270:
        -:17271:using Catch::Detail::Approx;
        -:17272:
        -:17273:#else // CATCH_CONFIG_DISABLE
        -:17274:
        -:17275://////
        -:17276:// If this config identifier is defined then all CATCH macros are prefixed with CATCH_
        -:17277:#ifdef CATCH_CONFIG_PREFIX_ALL
        -:17278:
        -:17279:#define CATCH_REQUIRE( ... )        (void)(0)
        -:17280:#define CATCH_REQUIRE_FALSE( ... )  (void)(0)
        -:17281:
        -:17282:#define CATCH_REQUIRE_THROWS( ... ) (void)(0)
        -:17283:#define CATCH_REQUIRE_THROWS_AS( expr, exceptionType ) (void)(0)
        -:17284:#define CATCH_REQUIRE_THROWS_WITH( expr, matcher )     (void)(0)
        -:17285:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:17286:#define CATCH_REQUIRE_THROWS_MATCHES( expr, exceptionType, matcher ) (void)(0)
        -:17287:#endif// CATCH_CONFIG_DISABLE_MATCHERS
        -:17288:#define CATCH_REQUIRE_NOTHROW( ... ) (void)(0)
        -:17289:
        -:17290:#define CATCH_CHECK( ... )         (void)(0)
        -:17291:#define CATCH_CHECK_FALSE( ... )   (void)(0)
        -:17292:#define CATCH_CHECKED_IF( ... )    if (__VA_ARGS__)
        -:17293:#define CATCH_CHECKED_ELSE( ... )  if (!(__VA_ARGS__))
        -:17294:#define CATCH_CHECK_NOFAIL( ... )  (void)(0)
        -:17295:
        -:17296:#define CATCH_CHECK_THROWS( ... )  (void)(0)
        -:17297:#define CATCH_CHECK_THROWS_AS( expr, exceptionType ) (void)(0)
        -:17298:#define CATCH_CHECK_THROWS_WITH( expr, matcher )     (void)(0)
        -:17299:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:17300:#define CATCH_CHECK_THROWS_MATCHES( expr, exceptionType, matcher ) (void)(0)
        -:17301:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:17302:#define CATCH_CHECK_NOTHROW( ... ) (void)(0)
        -:17303:
        -:17304:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:17305:#define CATCH_CHECK_THAT( arg, matcher )   (void)(0)
        -:17306:
        -:17307:#define CATCH_REQUIRE_THAT( arg, matcher ) (void)(0)
        -:17308:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:17309:
        -:17310:#define CATCH_INFO( msg )          (void)(0)
        -:17311:#define CATCH_UNSCOPED_INFO( msg ) (void)(0)
        -:17312:#define CATCH_WARN( msg )          (void)(0)
        -:17313:#define CATCH_CAPTURE( msg )       (void)(0)
        -:17314:
        -:17315:#define CATCH_TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
        -:17316:#define CATCH_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
        -:17317:#define CATCH_METHOD_AS_TEST_CASE( method, ... )
        -:17318:#define CATCH_REGISTER_TEST_CASE( Function, ... ) (void)(0)
        -:17319:#define CATCH_SECTION( ... )
        -:17320:#define CATCH_DYNAMIC_SECTION( ... )
        -:17321:#define CATCH_FAIL( ... ) (void)(0)
        -:17322:#define CATCH_FAIL_CHECK( ... ) (void)(0)
        -:17323:#define CATCH_SUCCEED( ... ) (void)(0)
        -:17324:
        -:17325:#define CATCH_ANON_TEST_CASE() INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
        -:17326:
        -:17327:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -:17328:#define CATCH_TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__)
        -:17329:#define CATCH_TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__)
        -:17330:#define CATCH_TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className, __VA_ARGS__)
        -:17331:#define CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className, __VA_ARGS__ )
        -:17332:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE( ... ) CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ )
        -:17333:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( ... ) CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ )
        -:17334:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, ... ) CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17335:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, ... ) CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17336:#else
        -:17337:#define CATCH_TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__) )
        -:17338:#define CATCH_TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__) )
        -:17339:#define CATCH_TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className, __VA_ARGS__ ) )
        -:17340:#define CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className, __VA_ARGS__ ) )
        -:17341:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE( ... ) CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ )
        -:17342:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( ... ) CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ )
        -:17343:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, ... ) CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17344:#define CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, ... ) CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17345:#endif
        -:17346:
        -:17347:// "BDD-style" convenience wrappers
        -:17348:#define CATCH_SCENARIO( ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
        -:17349:#define CATCH_SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), className )
        -:17350:#define CATCH_GIVEN( desc )
        -:17351:#define CATCH_AND_GIVEN( desc )
        -:17352:#define CATCH_WHEN( desc )
        -:17353:#define CATCH_AND_WHEN( desc )
        -:17354:#define CATCH_THEN( desc )
        -:17355:#define CATCH_AND_THEN( desc )
        -:17356:
        -:17357:#define CATCH_STATIC_REQUIRE( ... )       (void)(0)
        -:17358:#define CATCH_STATIC_REQUIRE_FALSE( ... ) (void)(0)
        -:17359:
        -:17360:// If CATCH_CONFIG_PREFIX_ALL is not defined then the CATCH_ prefix is not required
        -:17361:#else
        -:17362:
        -:17363:#define REQUIRE( ... )       (void)(0)
        -:17364:#define REQUIRE_FALSE( ... ) (void)(0)
        -:17365:
        -:17366:#define REQUIRE_THROWS( ... ) (void)(0)
        -:17367:#define REQUIRE_THROWS_AS( expr, exceptionType ) (void)(0)
        -:17368:#define REQUIRE_THROWS_WITH( expr, matcher ) (void)(0)
        -:17369:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:17370:#define REQUIRE_THROWS_MATCHES( expr, exceptionType, matcher ) (void)(0)
        -:17371:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:17372:#define REQUIRE_NOTHROW( ... ) (void)(0)
        -:17373:
        -:17374:#define CHECK( ... ) (void)(0)
        -:17375:#define CHECK_FALSE( ... ) (void)(0)
        -:17376:#define CHECKED_IF( ... ) if (__VA_ARGS__)
        -:17377:#define CHECKED_ELSE( ... ) if (!(__VA_ARGS__))
        -:17378:#define CHECK_NOFAIL( ... ) (void)(0)
        -:17379:
        -:17380:#define CHECK_THROWS( ... )  (void)(0)
        -:17381:#define CHECK_THROWS_AS( expr, exceptionType ) (void)(0)
        -:17382:#define CHECK_THROWS_WITH( expr, matcher ) (void)(0)
        -:17383:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:17384:#define CHECK_THROWS_MATCHES( expr, exceptionType, matcher ) (void)(0)
        -:17385:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:17386:#define CHECK_NOTHROW( ... ) (void)(0)
        -:17387:
        -:17388:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:17389:#define CHECK_THAT( arg, matcher ) (void)(0)
        -:17390:
        -:17391:#define REQUIRE_THAT( arg, matcher ) (void)(0)
        -:17392:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:17393:
        -:17394:#define INFO( msg ) (void)(0)
        -:17395:#define UNSCOPED_INFO( msg ) (void)(0)
        -:17396:#define WARN( msg ) (void)(0)
        -:17397:#define CAPTURE( msg ) (void)(0)
        -:17398:
        -:17399:#define TEST_CASE( ... )  INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
        -:17400:#define TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
        -:17401:#define METHOD_AS_TEST_CASE( method, ... )
        -:17402:#define REGISTER_TEST_CASE( Function, ... ) (void)(0)
        -:17403:#define SECTION( ... )
        -:17404:#define DYNAMIC_SECTION( ... )
        -:17405:#define FAIL( ... ) (void)(0)
        -:17406:#define FAIL_CHECK( ... ) (void)(0)
        -:17407:#define SUCCEED( ... ) (void)(0)
        -:17408:#define ANON_TEST_CASE() INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
        -:17409:
        -:17410:#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        -:17411:#define TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__)
        -:17412:#define TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__)
        -:17413:#define TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className, __VA_ARGS__)
        -:17414:#define TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className, __VA_ARGS__ )
        -:17415:#define TEMPLATE_PRODUCT_TEST_CASE( ... ) TEMPLATE_TEST_CASE( __VA_ARGS__ )
        -:17416:#define TEMPLATE_PRODUCT_TEST_CASE_SIG( ... ) TEMPLATE_TEST_CASE( __VA_ARGS__ )
        -:17417:#define TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, ... ) TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17418:#define TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, ... ) TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17419:#else
        -:17420:#define TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__) )
        -:17421:#define TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__) )
        -:17422:#define TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className, __VA_ARGS__ ) )
        -:17423:#define TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className, __VA_ARGS__ ) )
        -:17424:#define TEMPLATE_PRODUCT_TEST_CASE( ... ) TEMPLATE_TEST_CASE( __VA_ARGS__ )
        -:17425:#define TEMPLATE_PRODUCT_TEST_CASE_SIG( ... ) TEMPLATE_TEST_CASE( __VA_ARGS__ )
        -:17426:#define TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, ... ) TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17427:#define TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, ... ) TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:17428:#endif
        -:17429:
        -:17430:#define STATIC_REQUIRE( ... )       (void)(0)
        -:17431:#define STATIC_REQUIRE_FALSE( ... ) (void)(0)
        -:17432:
        -:17433:#endif
        -:17434:
        -:17435:#define CATCH_TRANSLATE_EXCEPTION( signature ) INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG( INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionTranslator ), signature )
        -:17436:
        -:17437:// "BDD-style" convenience wrappers
        -:17438:#define SCENARIO( ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ) )
        -:17439:#define SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), className )
        -:17440:
        -:17441:#define GIVEN( desc )
        -:17442:#define AND_GIVEN( desc )
        -:17443:#define WHEN( desc )
        -:17444:#define AND_WHEN( desc )
        -:17445:#define THEN( desc )
        -:17446:#define AND_THEN( desc )
        -:17447:
        -:17448:using Catch::Detail::Approx;
        -:17449:
        -:17450:#endif
        -:17451:
        -:17452:#endif // ! CATCH_CONFIG_IMPL_ONLY
        -:17453:
        -:17454:// start catch_reenable_warnings.h
        -:17455:
        -:17456:
        -:17457:#ifdef __clang__
        -:17458:#    ifdef __ICC // icpc defines the __clang__ macro
        -:17459:#        pragma warning(pop)
        -:17460:#    else
        -:17461:#        pragma clang diagnostic pop
        -:17462:#    endif
        -:17463:#elif defined __GNUC__
        -:17464:#    pragma GCC diagnostic pop
        -:17465:#endif
        -:17466:
        -:17467:// end Catch_reenable_warnings.h
        -:17468:// end Catch.hpp
        -:17469:#endif // TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED
